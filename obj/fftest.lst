
obj/fftest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f53  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  40000000  40000000  00010f53  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  40000000  40000000  00020000  2**2
                  ALLOC
  3 .stack        00000a14  4000011c  4000011c  00020000  2**2
                  ALLOC
  4 .usbram       00000000  7fd00000  7fd00000  00010f53  2**0
                  CONTENTS
  5 .etherram     00000000  7fe00000  7fe00000  00010f53  2**0
                  CONTENTS
  6 .batteryram   00000000  e0084000  e0084000  00010f53  2**0
                  CONTENTS
  7 .comment      00000038  00000000  00000000  00010f53  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 0000002e  00000000  00000000  00010f8b  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000000f0  00000000  00000000  00010fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00000e8e  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000005b1  00000000  00000000  00011f3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000006b3  00000000  00000000  000124ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000002b0  00000000  00000000  00012ba4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000027e  00000000  00000000  00012e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000cbf  00000000  00000000  000130d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000050  00000000  00000000  00013d98  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
   0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, =trap		@ Undef entry
   4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =swi_handler	@ SWI entry
   8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, =trap		@ PAbt entry
   c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =trap		@ DAbt entry
  10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
  14:	00000000 	.word	0x00000000
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
  18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
	LDR     PC, =fiq_handler	@ FIQ entry
  1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
  20:	00000300 	.word	0x00000300
	LDR	PC, =trap		@ Undef entry
  24:	0000038c 	.word	0x0000038c
	LDR	PC, =swi_handler	@ SWI entry
  28:	000003fc 	.word	0x000003fc
	LDR	PC, =trap		@ PAbt entry
	LDR	PC, =trap		@ DAbt entry
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
  2c:	000003ac 	.word	0x000003ac
	LDR     PC, =fiq_handler	@ FIQ entry
  30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
 300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
 304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
 308:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
 30c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
 310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
 314:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
 318:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
 31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
 320:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
 324:	e2400010 	sub	r0, r0, #16

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
 328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
 32c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
 330:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
 334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
 338:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
 33c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
 340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
 344:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
 348:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
 34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
	LDR	R2, =_sdata
 350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
	LDR	R3, =_edata
 354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
1:	CMP	R2, R3
 358:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
 35c:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
 360:	34820004 	strcc	r0, [r2], #4
	BLO	1b
 364:	3afffffb 	bcc	358 <reset_handler+0x58>

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
 368:	e3a00000 	mov	r0, #0
	LDR	R1, =_sbss
 36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
	LDR	R2, =_ebss
 370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
3:	CMP	R1, R2
 374:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
 378:	34810004 	strcc	r0, [r1], #4
	BLO	3b
 37c:	3afffffc 	bcc	374 <reset_handler+0x74>

@ Start main()
.extern main
	LDR	R0, =main
 380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
	MOV	LR, PC
 384:	e1a0e00f 	mov	lr, pc
	BX	R0
 388:	e12fff10 	bx	r0

0000038c <trap>:

@ Trap (infinite loop)
trap:
	B	trap
 38c:	eafffffe 	b	38c <trap>
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
 390:	40000b30 	.word	0x40000b30
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
	MOV	SP, R0
	SUB	SL, SP, #USR_Stack_Size

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
 394:	00000f54 	.word	0x00000f54
	LDR	R2, =_sdata
 398:	40000000 	.word	0x40000000
	LDR	R3, =_edata
 39c:	40000000 	.word	0x40000000
	STRLO	R0, [R2], #4
	BLO	1b

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
	LDR	R1, =_sbss
 3a0:	40000000 	.word	0x40000000
	LDR	R2, =_ebss
 3a4:	4000011c 	.word	0x4000011c
	STRLO	R0, [R1], #4
	BLO	3b

@ Start main()
.extern main
	LDR	R0, =main
 3a8:	00000629 	.word	0x00000629

000003ac <irq_handler>:
.equ VIC_VectAddr0,	0x100
.equ VIC_VectPriority0,	0x200
.equ VIC_VectAddr,	0xF00

irq_handler:
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
 3ac:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
 3b0:	e92d4000 	stmfd	sp!, {lr}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
 3b4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
 3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
 3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
	LDR	R0, [R0, #VIC_VectAddr]
 3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
	MSR	CPSR_c, #M_SVC		@ Enter SVC mode and enable Irq and Fiq
 3c4:	e321f013 	msr	CPSR_c, #19

	STMFD	SP!, {LR}		@ Call the ISR
 3c8:	e92d4000 	stmfd	sp!, {lr}
	MOV	LR, PC
 3cc:	e1a0e00f 	mov	lr, pc
	BX	R0
 3d0:	e12fff10 	bx	r0
	LDMIA	SP!, {LR}
 3d4:	e8bd4000 	ldmfd	sp!, {lr}

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
 3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMIA	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
 3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
 3e0:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
 3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
	STR	LR, [LR, #VIC_VectAddr]
 3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMIA	SP!, {PC}^		@ Reruen from the IRQ handler
 3ec:	e8fd8000 	ldm	sp!, {pc}^
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
	STMFD	SP!, {LR}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
 3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
@ FIQ Handler
@ FIQ routine is typically written in assembler
@-----------------------------------------------------------@

fiq_handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq
 3f4:	e24ee004 	sub	lr, lr, #4

	@ Put the FIQ service here

	MOVS	PC, LR			@ Return from FIQ
 3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
@-----------------------------------------------------------@
@ SWI Service (declared in interrupt.h)
@-----------------------------------------------------------@

swi_handler:
	MRS	IP, SPSR
 3fc:	e14fc000 	mrs	ip, SPSR
	TST	IP, #B_Thumb		@ Check caller's state, ARM or Thumb
 400:	e31c0020 	tst	ip, #32
	LDRNEH	IP, [LR, #-2]		@ Get swi instruction code (on Thumb state)
 404:	115ec0b2 	ldrhne	ip, [lr, #-2]
	LDREQ	IP, [LR, #-4]		@ Get swi instruction code (on ARM state)
 408:	051ec004 	ldreq	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
 40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #7			@ Check range
 410:	e35c0007 	cmp	ip, #7
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump to each service function when code is valid
 414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
 418:	e1b0f00e 	movs	pc, lr
 41c:	00000438 	.word	0x00000438
 420:	00000448 	.word	0x00000448
 424:	00000458 	.word	0x00000458
 428:	0000047c 	.word	0x0000047c
 42c:	000004b4 	.word	0x000004b4
 430:	000004d4 	.word	0x000004d4
 434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
	.word	sel_fiq		@ 4 Select FIQ interrupt
	.word	load_fiq	@ 5 Load FIQ shadow regs from memory
	.word	store_fiq	@ 6 Store FIQ shadow regs to memory

irq_disable:
	MRS	R0, SPSR
 438:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq | B_Fiq
 43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
 440:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:

irq_enable:
	MRS	R0, SPSR
 448:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq | B_Fiq
 44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
 450:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:

clear_vect:
	LDR	IP, =LPC_BASE_VIC
 458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
	MVN	R0, #0				@ Disable all interrupts
 45c:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
 460:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
 464:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
 468:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
 46c:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
 470:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_VectAddr]		@ Issule EOI command
 474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
 478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:

reg_irq:
	CMP	R0, #32				@ Range check
 47c:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
 480:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
 484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
 488:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
 48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
 490:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
 494:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
 498:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
 49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
	LDR	R2, [IP, #VIC_IntSelect]	@ Clear corresponding bit in the VICIntSelect
 4a0:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
 4a4:	e1c22001 	bic	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
 4a8:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
 4ac:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
 4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:

sel_fiq:
	CMP	R0, #32				@ Range check
 4b4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
 4b8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =LPC_BASE_VIC
 4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
	MOV	R1, #1				@ Set corresponding bit in the VICIntSelect
 4c0:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
 4c4:	e1a01011 	lsl	r1, r1, r0
	STR	R1, [IP, #VIC_IntSelect]
 4c8:	e58c100c 	str	r1, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
 4cc:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
 4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:

load_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
 4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMIA	R0!, {R8-R12}			@ Load the memory to five shadow registers
 4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
 4dc:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
 4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:

store_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
 4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
	STMIA	R0!, {R8-R12}			@ Store five shadow registers to the memory
 4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
 4ec:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
 4f0:	e1b0f00e 	movs	pc, lr
	BIC	R0, R0, #B_Irq | B_Fiq
	MSR	SPSR_c, R0
	MOVS	PC, LR

clear_vect:
	LDR	IP, =LPC_BASE_VIC
 4f4:	fffff000 	.word	0xfffff000
	MOVS	PC, LR

reg_irq:
	CMP	R0, #32				@ Range check
	MOVCSS	PC, LR
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
 4f8:	fffff100 	.word	0xfffff100
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
 4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
@ void Copy_un2al (DWORD *dst, const BYTE *src, int count);
.global Copy_un2al
.type Copy_un2al, %function
.func Copy_un2al
Copy_un2al:
	STMFD	SP!, {R4-R8}
 500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
 504:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
 508:	0a000012 	beq	558 <lb_align>

	BIC	R1, #3
 50c:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
 510:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
 514:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
 518:	e8b10080 	ldm	r1!, {r7}
1:	MOV	R3, R7
 51c:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
 520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
 524:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
 528:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
 52c:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
 530:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
 534:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
 538:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
 53c:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
 540:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
 544:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	1b
 54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
	LDMFD	SP!, {R4-R8}
 550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 554:	e12fff1e 	bx	lr

00000558 <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
 558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
 55c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
 564:	1afffffb 	bne	558 <lb_align>
	LDMFD	SP!, {R4-R8}
 568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
@ void Copy_al2un (BYTE *dst, const DWORD *src, int count);
.global Copy_al2un
.type Copy_al2un, %function
.func Copy_al2un
Copy_al2un:
	STMFD	SP!, {R4-R8}
 570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
 574:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
 578:	0a000021 	beq	604 <sb_align>

	MOV	IP, IP, LSL #3
 57c:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
 580:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
 584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
1:	STRB	R4, [R0], #1
 588:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
 58c:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
 590:	e3100003 	tst	r0, #3
	BNE	1b
 594:	1afffffb 	bne	588 <Copy_al2un+0x18>
	ORR	R4, R4, R5, LSL IP
 598:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
 59c:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
 5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
 5a4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
 5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
 5ac:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
 5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}

2:	MOV	R3, R7
 5b4:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
 5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
 5bc:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
 5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
 5c4:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
 5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
 5cc:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
 5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
 5d4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
 5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
 5dc:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	2b
 5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>

	MOV	R7, R7, LSR R8
 5e8:	e1a07837 	lsr	r7, r7, r8
3:	SUBS	IP, IP, #8
 5ec:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
 5f0:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
 5f4:	e1a07427 	lsr	r7, r7, #8
	BNE	3b
 5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>

	LDMFD	SP!, {R4-R8}
 5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 600:	e12fff1e 	bx	lr

00000604 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
 604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
 608:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
 610:	1afffffb 	bne	604 <sb_align>
	LDMFD	SP!, {R4-R8}
 614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 618:	e12fff1e 	bx	lr

0000061c <Isr_TIMER0>:
/* 1000Hz timer interrupt generated by TIMER0              */
/*---------------------------------------------------------*/

void Isr_TIMER0 (void)
{
	T0IR = 1;			/* Clear irq flag */
 61c:	2201      	movs	r2, #1
 61e:	4b01      	ldr	r3, [pc, #4]	; (624 <Isr_TIMER0+0x8>)
 620:	601a      	str	r2, [r3, #0]
	/* Timer++;			[> Performance timer <] */
	/* TmrFrm += 1000;		[> Video frame timer (disp.c) <] */

	/* MCI_timerproc();	[> Disk timer process <] */

} 
 622:	4770      	bx	lr
 624:	e0004000 	.word	0xe0004000

00000628 <main>:
{
#define PLL_N		2UL
#define PLL_M		72UL
#define CCLK_DIV	4

	if ( PLLSTAT & (1 << 25) ) {
 628:	4b2d      	ldr	r3, [pc, #180]	; (6e0 <main+0xb8>)
 62a:	6819      	ldr	r1, [r3, #0]
}



int main (void)
{
 62c:	b570      	push	{r4, r5, r6, lr}
 62e:	4a2d      	ldr	r2, [pc, #180]	; (6e4 <main+0xbc>)
 630:	1c1d      	adds	r5, r3, #0
 632:	4b2d      	ldr	r3, [pc, #180]	; (6e8 <main+0xc0>)
{
#define PLL_N		2UL
#define PLL_M		72UL
#define CCLK_DIV	4

	if ( PLLSTAT & (1 << 25) ) {
 634:	0189      	lsls	r1, r1, #6
 636:	d505      	bpl.n	644 <main+0x1c>
		PLLCON = 1;				/* Disconnect PLL output if PLL is in use */
 638:	2101      	movs	r1, #1
 63a:	6011      	str	r1, [r2, #0]
		PLLFEED = 0xAA; PLLFEED = 0x55;
 63c:	31a9      	adds	r1, #169	; 0xa9
 63e:	6019      	str	r1, [r3, #0]
 640:	3955      	subs	r1, #85	; 0x55
 642:	6019      	str	r1, [r3, #0]
	}
	PLLCON = 0;				/* Disable PLL */
 644:	2400      	movs	r4, #0
	PLLFEED = 0xAA; PLLFEED = 0x55;
 646:	20aa      	movs	r0, #170	; 0xaa
 648:	2155      	movs	r1, #85	; 0x55
	CLKSRCSEL = 0;			/* Select IRC (4MHz) as the PLL clock source */
 64a:	4e28      	ldr	r6, [pc, #160]	; (6ec <main+0xc4>)

	if ( PLLSTAT & (1 << 25) ) {
		PLLCON = 1;				/* Disconnect PLL output if PLL is in use */
		PLLFEED = 0xAA; PLLFEED = 0x55;
	}
	PLLCON = 0;				/* Disable PLL */
 64c:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA; PLLFEED = 0x55;
 64e:	6018      	str	r0, [r3, #0]
 650:	6019      	str	r1, [r3, #0]
	CLKSRCSEL = 0;			/* Select IRC (4MHz) as the PLL clock source */
 652:	6034      	str	r4, [r6, #0]

	PLLCFG = ((PLL_N - 1) << 16) | (PLL_M - 1);	/* Re-configure PLL */
 654:	4c26      	ldr	r4, [pc, #152]	; (6f0 <main+0xc8>)
 656:	4e27      	ldr	r6, [pc, #156]	; (6f4 <main+0xcc>)
 658:	6026      	str	r6, [r4, #0]
	PLLFEED = 0xAA; PLLFEED = 0x55;
	PLLCON = 1;				/* Enable PLL */
 65a:	2401      	movs	r4, #1
	PLLCON = 0;				/* Disable PLL */
	PLLFEED = 0xAA; PLLFEED = 0x55;
	CLKSRCSEL = 0;			/* Select IRC (4MHz) as the PLL clock source */

	PLLCFG = ((PLL_N - 1) << 16) | (PLL_M - 1);	/* Re-configure PLL */
	PLLFEED = 0xAA; PLLFEED = 0x55;
 65c:	6018      	str	r0, [r3, #0]
 65e:	6019      	str	r1, [r3, #0]
	PLLCON = 1;				/* Enable PLL */
 660:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA; PLLFEED = 0x55;
 662:	6018      	str	r0, [r3, #0]
 664:	6019      	str	r1, [r3, #0]

	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
 666:	6829      	ldr	r1, [r5, #0]
 668:	0149      	lsls	r1, r1, #5
 66a:	d5fc      	bpl.n	666 <main+0x3e>

	CCLKCFG = CCLK_DIV-1;	/* Select CCLK frequency (divide ratio of hclk) */
 66c:	2503      	movs	r5, #3
 66e:	4922      	ldr	r1, [pc, #136]	; (6f8 <main+0xd0>)
 670:	600d      	str	r5, [r1, #0]
	PLLCON = 3;				/* Connect PLL output to the sysclk */
 672:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA; PLLFEED = 0x55;
 674:	22aa      	movs	r2, #170	; 0xaa

	MAMCR = 0;				/* Configure MAM with 0 wait operation */
 676:	2400      	movs	r4, #0

	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */

	CCLKCFG = CCLK_DIV-1;	/* Select CCLK frequency (divide ratio of hclk) */
	PLLCON = 3;				/* Connect PLL output to the sysclk */
	PLLFEED = 0xAA; PLLFEED = 0x55;
 678:	601a      	str	r2, [r3, #0]
 67a:	3a55      	subs	r2, #85	; 0x55
 67c:	601a      	str	r2, [r3, #0]

	MAMCR = 0;				/* Configure MAM with 0 wait operation */
 67e:	4b1f      	ldr	r3, [pc, #124]	; (6fc <main+0xd4>)
	MAMTIM = 3;
 680:	4a1f      	ldr	r2, [pc, #124]	; (700 <main+0xd8>)

	CCLKCFG = CCLK_DIV-1;	/* Select CCLK frequency (divide ratio of hclk) */
	PLLCON = 3;				/* Connect PLL output to the sysclk */
	PLLFEED = 0xAA; PLLFEED = 0x55;

	MAMCR = 0;				/* Configure MAM with 0 wait operation */
 682:	601c      	str	r4, [r3, #0]
	MAMTIM = 3;
 684:	6015      	str	r5, [r2, #0]
	MAMCR = 2;
 686:	2202      	movs	r2, #2

	/* rtc_initialize();		[> Initialize RTC <] */

	ClearVector();			/* Initialie VIC */

	SCS |= 1;				/* Enable FIO0 and FIO1 */
 688:	2601      	movs	r6, #1
	PLLCON = 3;				/* Connect PLL output to the sysclk */
	PLLFEED = 0xAA; PLLFEED = 0x55;

	MAMCR = 0;				/* Configure MAM with 0 wait operation */
	MAMTIM = 3;
	MAMCR = 2;
 68a:	601a      	str	r2, [r3, #0]

	PCLKSEL0 = 0x00000000;	/* Initialize peripheral clock to default */
 68c:	4b1d      	ldr	r3, [pc, #116]	; (704 <main+0xdc>)
 68e:	601c      	str	r4, [r3, #0]
	PCLKSEL1 = 0x00000000;
 690:	4b1d      	ldr	r3, [pc, #116]	; (708 <main+0xe0>)
 692:	601c      	str	r4, [r3, #0]

	/* rtc_initialize();		[> Initialize RTC <] */

	ClearVector();			/* Initialie VIC */
 694:	f000 f856 	bl	744 <ClearVector>

	SCS |= 1;				/* Enable FIO0 and FIO1 */
 698:	4a1c      	ldr	r2, [pc, #112]	; (70c <main+0xe4>)
 69a:	6813      	ldr	r3, [r2, #0]
 69c:	4333      	orrs	r3, r6

	/* Initialize Timer0 as 1kHz interval timer */
	RegisterIrq(TIMER0_IRQn, Isr_TIMER0, PRI_LOWEST);
 69e:	491c      	ldr	r1, [pc, #112]	; (710 <main+0xe8>)
 6a0:	2004      	movs	r0, #4

	/* rtc_initialize();		[> Initialize RTC <] */

	ClearVector();			/* Initialie VIC */

	SCS |= 1;				/* Enable FIO0 and FIO1 */
 6a2:	6013      	str	r3, [r2, #0]

	/* Initialize Timer0 as 1kHz interval timer */
	RegisterIrq(TIMER0_IRQn, Isr_TIMER0, PRI_LOWEST);
 6a4:	220f      	movs	r2, #15
 6a6:	f000 f84f 	bl	748 <RegisterIrq>
	T0CTCR = 0;
 6aa:	4b1a      	ldr	r3, [pc, #104]	; (714 <main+0xec>)
	T0MR0 = 18000 - 1;		/* 18M / 1k = 18000 */
 6ac:	4a1a      	ldr	r2, [pc, #104]	; (718 <main+0xf0>)

	SCS |= 1;				/* Enable FIO0 and FIO1 */

	/* Initialize Timer0 as 1kHz interval timer */
	RegisterIrq(TIMER0_IRQn, Isr_TIMER0, PRI_LOWEST);
	T0CTCR = 0;
 6ae:	601c      	str	r4, [r3, #0]
	T0MR0 = 18000 - 1;		/* 18M / 1k = 18000 */
 6b0:	4b1a      	ldr	r3, [pc, #104]	; (71c <main+0xf4>)
 6b2:	601a      	str	r2, [r3, #0]
	T0MCR = 0x3;			/* Clear TC and Interrupt on MR0 match */
 6b4:	4b1a      	ldr	r3, [pc, #104]	; (720 <main+0xf8>)
 6b6:	601d      	str	r5, [r3, #0]
	T0TCR = 1;
 6b8:	4b1a      	ldr	r3, [pc, #104]	; (724 <main+0xfc>)
 6ba:	601e      	str	r6, [r3, #0]

	IrqEnable();			/* Enable Irq */
 6bc:	f000 f840 	bl	740 <IrqEnable>
int main (void)
{
	
	IoInit();				/* Initialize PLL, VIC and timer */

	uart0_init();			/* Initialize UART and join it to the console */
 6c0:	f000 f8ea 	bl	898 <uart0_init>
	xdev_in(uart0_getc);
 6c4:	4a18      	ldr	r2, [pc, #96]	; (728 <main+0x100>)
 6c6:	4b19      	ldr	r3, [pc, #100]	; (72c <main+0x104>)
 6c8:	601a      	str	r2, [r3, #0]
	xdev_out(uart0_putc);
 6ca:	4a19      	ldr	r2, [pc, #100]	; (730 <main+0x108>)
 6cc:	4b19      	ldr	r3, [pc, #100]	; (734 <main+0x10c>)

	xputs("\nFatFs module test monitor for LPC2300/MCI/NAND\n");
 6ce:	481a      	ldr	r0, [pc, #104]	; (738 <main+0x110>)
	
	IoInit();				/* Initialize PLL, VIC and timer */

	uart0_init();			/* Initialize UART and join it to the console */
	xdev_in(uart0_getc);
	xdev_out(uart0_putc);
 6d0:	601a      	str	r2, [r3, #0]

	xputs("\nFatFs module test monitor for LPC2300/MCI/NAND\n");
 6d2:	f000 f955 	bl	980 <xputs>
	/* xprintf(", Code page: %u\n", _CODE_PAGE); */
	return 0;
}
 6d6:	1c20      	adds	r0, r4, #0
 6d8:	bc70      	pop	{r4, r5, r6}
 6da:	bc02      	pop	{r1}
 6dc:	4708      	bx	r1
 6de:	46c0      	nop			; (mov r8, r8)
 6e0:	e01fc088 	.word	0xe01fc088
 6e4:	e01fc080 	.word	0xe01fc080
 6e8:	e01fc08c 	.word	0xe01fc08c
 6ec:	e01fc10c 	.word	0xe01fc10c
 6f0:	e01fc084 	.word	0xe01fc084
 6f4:	00010047 	.word	0x00010047
 6f8:	e01fc104 	.word	0xe01fc104
 6fc:	e01fc000 	.word	0xe01fc000
 700:	e01fc004 	.word	0xe01fc004
 704:	e01fc1a8 	.word	0xe01fc1a8
 708:	e01fc1ac 	.word	0xe01fc1ac
 70c:	e01fc1a0 	.word	0xe01fc1a0
 710:	0000061d 	.word	0x0000061d
 714:	e0004070 	.word	0xe0004070
 718:	0000464f 	.word	0x0000464f
 71c:	e0004018 	.word	0xe0004018
 720:	e0004014 	.word	0xe0004014
 724:	e0004004 	.word	0xe0004004
 728:	00000815 	.word	0x00000815
 72c:	40000114 	.word	0x40000114
 730:	00000849 	.word	0x00000849
 734:	40000118 	.word	0x40000118
 738:	00000f08 	.word	0x00000f08

0000073c <IrqDisable>:


/* Disable/Enable Irq */
void IrqDisable (void)
{
	asm ("swi 0\n");
 73c:	df00      	svc	0
}
 73e:	4770      	bx	lr

00000740 <IrqEnable>:

void IrqEnable (void)
{
	asm ("swi 1\n");
 740:	df01      	svc	1
}
 742:	4770      	bx	lr

00000744 <ClearVector>:


/* Unregister all ISRs */
void ClearVector (void)
{
	asm ("swi 2\n");
 744:	df02      	svc	2
}
 746:	4770      	bx	lr

00000748 <RegisterIrq>:
	int irq,
	void(*isr)(void),
	int pri
)
{
	asm (
 748:	df03      	svc	3
	"@ MOV R0, %0\n"
	"@ MOV R1, %1\n"
	"@ MOV R2, %2\n"
	"swi 3\n" : : "r" (irq), "r" (isr), "r" (pri)
	);
}
 74a:	4770      	bx	lr

0000074c <SelectFiq>:
/* Switch an interrtupt source as FIQ */
void SelectFiq (
	int irq
)
{
	asm (
 74c:	df04      	svc	4
	"@ MOV R0, %0\n"
	"swi 4\n" : : "r" (irq)
	);
}
 74e:	4770      	bx	lr

00000750 <LoadFiqRegs>:
/* Load shadow regs R8-R12 from memory */
void LoadFiqRegs (
	long *regs
)
{
	asm (
 750:	df05      	svc	5
	"@ MOV R0, %0\n"
	"swi 5\n" : : "r" (regs)
	);
}
 752:	4770      	bx	lr

00000754 <StoreFiqRegs>:
/* Store shadow regs R8-R12 to memory */
void StoreFiqRegs (
	long *regs
)
{
	asm (
 754:	df06      	svc	6
	"@ MOV R0, %0\n"
	"swi 6\n" : : "r" (regs)
	);
}
 756:	4770      	bx	lr

00000758 <Isr_UART0>:
	uint16_t	ri, wi, ct;
	uint8_t		buff[UART0_RXB];
} RxBuff0;

void Isr_UART0 (void)
{
 758:	b570      	push	{r4, r5, r6, lr}
	uint8_t iir, d;
	int i, cnt;


	for (;;) {
		iir = U0IIR;			/* Get interrupt ID */
 75a:	4b26      	ldr	r3, [pc, #152]	; (7f4 <Isr_UART0+0x9c>)
 75c:	681b      	ldr	r3, [r3, #0]
 75e:	061b      	lsls	r3, r3, #24
 760:	0e1b      	lsrs	r3, r3, #24
		if (iir & 1) break;		/* Exit if there is no interrupt */
 762:	07da      	lsls	r2, r3, #31
 764:	d442      	bmi.n	7ec <Isr_UART0+0x94>
		switch (iir & 7) {
 766:	2207      	movs	r2, #7
 768:	4013      	ands	r3, r2
 76a:	2b02      	cmp	r3, #2
 76c:	d01c      	beq.n	7a8 <Isr_UART0+0x50>
 76e:	4c22      	ldr	r4, [pc, #136]	; (7f8 <Isr_UART0+0xa0>)
 770:	2b04      	cmp	r3, #4
 772:	d137      	bne.n	7e4 <Isr_UART0+0x8c>
		case 4:			/* Rx FIFO is half filled or timeout occured */
			i = RxBuff0.wi;
 774:	4821      	ldr	r0, [pc, #132]	; (7fc <Isr_UART0+0xa4>)
 776:	1c05      	adds	r5, r0, #0
 778:	8843      	ldrh	r3, [r0, #2]
			cnt = RxBuff0.ct;
 77a:	8881      	ldrh	r1, [r0, #4]
			while (U0LSR & 0x01) {	/* Get all data in the Rx FIFO */
 77c:	6822      	ldr	r2, [r4, #0]
 77e:	07d2      	lsls	r2, r2, #31
 780:	d50d      	bpl.n	79e <Isr_UART0+0x46>
				d = U0RBR;
 782:	4a1f      	ldr	r2, [pc, #124]	; (800 <USR_Stack_Size>)
 784:	6812      	ldr	r2, [r2, #0]
				if (cnt < UART0_RXB) {	/* Store data if Rx buffer is not full */
 786:	297f      	cmp	r1, #127	; 0x7f
 788:	dcf8      	bgt.n	77c <Isr_UART0+0x24>
		switch (iir & 7) {
		case 4:			/* Rx FIFO is half filled or timeout occured */
			i = RxBuff0.wi;
			cnt = RxBuff0.ct;
			while (U0LSR & 0x01) {	/* Get all data in the Rx FIFO */
				d = U0RBR;
 78a:	0612      	lsls	r2, r2, #24
 78c:	0e12      	lsrs	r2, r2, #24
				if (cnt < UART0_RXB) {	/* Store data if Rx buffer is not full */
					RxBuff0.buff[i++] = d;
 78e:	1c5e      	adds	r6, r3, #1
 790:	18eb      	adds	r3, r5, r3
 792:	719a      	strb	r2, [r3, #6]
					i %= UART0_RXB;
 794:	227f      	movs	r2, #127	; 0x7f
 796:	1c33      	adds	r3, r6, #0
					cnt++;
 798:	3101      	adds	r1, #1
			cnt = RxBuff0.ct;
			while (U0LSR & 0x01) {	/* Get all data in the Rx FIFO */
				d = U0RBR;
				if (cnt < UART0_RXB) {	/* Store data if Rx buffer is not full */
					RxBuff0.buff[i++] = d;
					i %= UART0_RXB;
 79a:	4013      	ands	r3, r2
 79c:	e7ee      	b.n	77c <Isr_UART0+0x24>
					cnt++;
				}
			}
			RxBuff0.wi = i;
 79e:	8043      	strh	r3, [r0, #2]
			RxBuff0.ct = cnt;
 7a0:	040b      	lsls	r3, r1, #16
 7a2:	0c1b      	lsrs	r3, r3, #16
 7a4:	8083      	strh	r3, [r0, #4]
			break;
 7a6:	e7d8      	b.n	75a <Isr_UART0+0x2>

		case 2:			/* Tx FIFO empty */
			cnt = TxBuff0.ct;
 7a8:	4c16      	ldr	r4, [pc, #88]	; (804 <USR_Stack_Size+0x4>)
 7aa:	1da3      	adds	r3, r4, #6
 7ac:	889a      	ldrh	r2, [r3, #4]
 7ae:	1c20      	adds	r0, r4, #0
			if (cnt) {		/* There is one or more byte to send */
 7b0:	2a00      	cmp	r2, #0
 7b2:	d015      	beq.n	7e0 <Isr_UART0+0x88>
 7b4:	1c11      	adds	r1, r2, #0
				i = TxBuff0.ri;
 7b6:	88e3      	ldrh	r3, [r4, #6]
 7b8:	3910      	subs	r1, #16
				for (d = 16; d && cnt; d--, cnt--) {	/* Fill Tx FIFO */
					U0THR = TxBuff0.buff[i++];
 7ba:	1d86      	adds	r6, r0, #6
 7bc:	1c5d      	adds	r5, r3, #1
 7be:	18f3      	adds	r3, r6, r3
 7c0:	7a1b      	ldrb	r3, [r3, #8]
 7c2:	4e0f      	ldr	r6, [pc, #60]	; (800 <USR_Stack_Size>)
 7c4:	6033      	str	r3, [r6, #0]
					i %= UART0_TXB;
 7c6:	237f      	movs	r3, #127	; 0x7f

		case 2:			/* Tx FIFO empty */
			cnt = TxBuff0.ct;
			if (cnt) {		/* There is one or more byte to send */
				i = TxBuff0.ri;
				for (d = 16; d && cnt; d--, cnt--) {	/* Fill Tx FIFO */
 7c8:	3a01      	subs	r2, #1
					U0THR = TxBuff0.buff[i++];
					i %= UART0_TXB;
 7ca:	402b      	ands	r3, r5

		case 2:			/* Tx FIFO empty */
			cnt = TxBuff0.ct;
			if (cnt) {		/* There is one or more byte to send */
				i = TxBuff0.ri;
				for (d = 16; d && cnt; d--, cnt--) {	/* Fill Tx FIFO */
 7cc:	428a      	cmp	r2, r1
 7ce:	d002      	beq.n	7d6 <Isr_UART0+0x7e>
 7d0:	2a00      	cmp	r2, #0
 7d2:	d1f2      	bne.n	7ba <Isr_UART0+0x62>
 7d4:	1c11      	adds	r1, r2, #0
					U0THR = TxBuff0.buff[i++];
					i %= UART0_TXB;
				}
				TxBuff0.ri = i;
 7d6:	80e3      	strh	r3, [r4, #6]
				TxBuff0.ct = cnt;
 7d8:	040b      	lsls	r3, r1, #16
 7da:	0c1b      	lsrs	r3, r3, #16
 7dc:	8143      	strh	r3, [r0, #10]
 7de:	e7bc      	b.n	75a <Isr_UART0+0x2>
			} else {
				TxBuff0.act = 0; /* When no data to send, next putc must trigger Tx sequense */
 7e0:	80da      	strh	r2, [r3, #6]
 7e2:	e7ba      	b.n	75a <Isr_UART0+0x2>
			}
			break;

		default:		/* Data error or break detected */
			U0LSR;
 7e4:	6823      	ldr	r3, [r4, #0]
			U0RBR;
 7e6:	4b06      	ldr	r3, [pc, #24]	; (800 <USR_Stack_Size>)
 7e8:	681b      	ldr	r3, [r3, #0]
			break;
 7ea:	e7b6      	b.n	75a <Isr_UART0+0x2>
		}
	}
}
 7ec:	bc70      	pop	{r4, r5, r6}
 7ee:	bc01      	pop	{r0}
 7f0:	4700      	bx	r0
 7f2:	46c0      	nop			; (mov r8, r8)
 7f4:	e000c008 	.word	0xe000c008
 7f8:	e000c014 	.word	0xe000c014
 7fc:	40000000 	.word	0x40000000
 800:	e000c000 	.word	0xe000c000
 804:	40000080 	.word	0x40000080

00000808 <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
 808:	4b01      	ldr	r3, [pc, #4]	; (810 <uart0_test+0x8>)
 80a:	8898      	ldrh	r0, [r3, #4]
}
 80c:	4770      	bx	lr
 80e:	46c0      	nop			; (mov r8, r8)
 810:	40000000 	.word	0x40000000

00000814 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
 814:	4a0a      	ldr	r2, [pc, #40]	; (840 <uart0_getc+0x2c>)
 816:	8893      	ldrh	r3, [r2, #4]
 818:	2b00      	cmp	r3, #0
 81a:	d0fb      	beq.n	814 <uart0_getc>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
 81c:	8813      	ldrh	r3, [r2, #0]
	d = RxBuff0.buff[i++];
 81e:	18d1      	adds	r1, r2, r3
 820:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
 822:	217f      	movs	r1, #127	; 0x7f

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
	d = RxBuff0.buff[i++];
 824:	3301      	adds	r3, #1
	RxBuff0.ri = i % UART0_RXB;
 826:	400b      	ands	r3, r1
 828:	8013      	strh	r3, [r2, #0]
	U0IER = 0;		/* Disable interrupts */
 82a:	2300      	movs	r3, #0
 82c:	4905      	ldr	r1, [pc, #20]	; (844 <uart0_getc+0x30>)
 82e:	600b      	str	r3, [r1, #0]
	RxBuff0.ct--;
 830:	8893      	ldrh	r3, [r2, #4]
 832:	3b01      	subs	r3, #1
 834:	041b      	lsls	r3, r3, #16
 836:	0c1b      	lsrs	r3, r3, #16
 838:	8093      	strh	r3, [r2, #4]
	U0IER = 0x07;	/* Reenable interrupt */
 83a:	2307      	movs	r3, #7
 83c:	600b      	str	r3, [r1, #0]

	return d;
}
 83e:	4770      	bx	lr
 840:	40000000 	.word	0x40000000
 844:	e000c004 	.word	0xe000c004

00000848 <uart0_putc>:


void uart0_putc (uint8_t d)
{
 848:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
 84a:	4b10      	ldr	r3, [pc, #64]	; (88c <uart0_putc+0x44>)
 84c:	3306      	adds	r3, #6
 84e:	889a      	ldrh	r2, [r3, #4]
 850:	2a7f      	cmp	r2, #127	; 0x7f
 852:	d8fa      	bhi.n	84a <uart0_putc+0x2>

	U0IER = 0x05;		/* Disable Tx Interrupt */
 854:	2205      	movs	r2, #5
 856:	490e      	ldr	r1, [pc, #56]	; (890 <uart0_putc+0x48>)
 858:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
 85a:	88da      	ldrh	r2, [r3, #6]
 85c:	2a00      	cmp	r2, #0
 85e:	d00c      	beq.n	87a <uart0_putc+0x32>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
 860:	885a      	ldrh	r2, [r3, #2]
		TxBuff0.buff[i++] = d;
 862:	189c      	adds	r4, r3, r2
 864:	7220      	strb	r0, [r4, #8]
		TxBuff0.wi = i % UART0_TXB;
 866:	207f      	movs	r0, #127	; 0x7f
	while (TxBuff0.ct >= UART0_TXB) ;

	U0IER = 0x05;		/* Disable Tx Interrupt */
	if (TxBuff0.act) {
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
		TxBuff0.buff[i++] = d;
 868:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
 86a:	4002      	ands	r2, r0
 86c:	805a      	strh	r2, [r3, #2]
		TxBuff0.ct++;
 86e:	889a      	ldrh	r2, [r3, #4]
 870:	3201      	adds	r2, #1
 872:	0412      	lsls	r2, r2, #16
 874:	0c12      	lsrs	r2, r2, #16
 876:	809a      	strh	r2, [r3, #4]
 878:	e003      	b.n	882 <uart0_putc+0x3a>
	} else {
		U0THR = d;		/* Trigger Tx sequense */
 87a:	4a06      	ldr	r2, [pc, #24]	; (894 <uart0_putc+0x4c>)
 87c:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
 87e:	2201      	movs	r2, #1
 880:	80da      	strh	r2, [r3, #6]
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
 882:	2307      	movs	r3, #7
 884:	600b      	str	r3, [r1, #0]
}
 886:	bc10      	pop	{r4}
 888:	bc01      	pop	{r0}
 88a:	4700      	bx	r0
 88c:	40000080 	.word	0x40000080
 890:	e000c004 	.word	0xe000c004
 894:	e000c000 	.word	0xe000c000

00000898 <uart0_init>:


void uart0_init (void)
{
	/* Enable UART0 module */
	__set_PCONP(PCUART0);
 898:	2108      	movs	r1, #8
 89a:	4a1e      	ldr	r2, [pc, #120]	; (914 <uart0_init+0x7c>)
 89c:	6813      	ldr	r3, [r2, #0]
 89e:	430b      	orrs	r3, r1
	U0IER = 0x07;		/* Reenable Tx Interrupt */
}


void uart0_init (void)
{
 8a0:	b570      	push	{r4, r5, r6, lr}
	/* Enable UART0 module */
	__set_PCONP(PCUART0);
 8a2:	6013      	str	r3, [r2, #0]
	__set_PCLKSEL(PCLK_UART0, PCLKDIV);
 8a4:	4a1c      	ldr	r2, [pc, #112]	; (918 <uart0_init+0x80>)
 8a6:	6813      	ldr	r3, [r2, #0]
 8a8:	31b8      	adds	r1, #184	; 0xb8
 8aa:	438b      	bics	r3, r1
 8ac:	6013      	str	r3, [r2, #0]

	/* Initialize UART */
	U0IER = 0x00;			/* Disable interrupt */
	U0LCR = 0x83;			/* Select baud rate divisor latch */
 8ae:	2083      	movs	r0, #131	; 0x83
	/* Enable UART0 module */
	__set_PCONP(PCUART0);
	__set_PCLKSEL(PCLK_UART0, PCLKDIV);

	/* Initialize UART */
	U0IER = 0x00;			/* Disable interrupt */
 8b0:	2300      	movs	r3, #0
	U0LCR = 0x83;			/* Select baud rate divisor latch */
	U0DLM = DLVAL0 / 256;	/* Set BRG dividers */
	U0DLL = DLVAL0 % 256;
	U0FDR = (MULVAL << 4) | DIVADD;
 8b2:	2685      	movs	r6, #133	; 0x85
	/* Enable UART0 module */
	__set_PCONP(PCUART0);
	__set_PCLKSEL(PCLK_UART0, PCLKDIV);

	/* Initialize UART */
	U0IER = 0x00;			/* Disable interrupt */
 8b4:	4c19      	ldr	r4, [pc, #100]	; (91c <uart0_init+0x84>)
	U0LCR = 0x83;			/* Select baud rate divisor latch */
 8b6:	4a1a      	ldr	r2, [pc, #104]	; (920 <uart0_init+0x88>)
	U0DLM = DLVAL0 / 256;	/* Set BRG dividers */
	U0DLL = DLVAL0 % 256;
 8b8:	4d1a      	ldr	r5, [pc, #104]	; (924 <uart0_init+0x8c>)
	/* Enable UART0 module */
	__set_PCONP(PCUART0);
	__set_PCLKSEL(PCLK_UART0, PCLKDIV);

	/* Initialize UART */
	U0IER = 0x00;			/* Disable interrupt */
 8ba:	6023      	str	r3, [r4, #0]
	U0LCR = 0x83;			/* Select baud rate divisor latch */
 8bc:	6010      	str	r0, [r2, #0]
	U0DLM = DLVAL0 / 256;	/* Set BRG dividers */
	U0DLL = DLVAL0 % 256;
 8be:	3880      	subs	r0, #128	; 0x80
	__set_PCLKSEL(PCLK_UART0, PCLKDIV);

	/* Initialize UART */
	U0IER = 0x00;			/* Disable interrupt */
	U0LCR = 0x83;			/* Select baud rate divisor latch */
	U0DLM = DLVAL0 / 256;	/* Set BRG dividers */
 8c0:	6023      	str	r3, [r4, #0]
	U0DLL = DLVAL0 % 256;
 8c2:	6028      	str	r0, [r5, #0]
	U0FDR = (MULVAL << 4) | DIVADD;
 8c4:	4d18      	ldr	r5, [pc, #96]	; (928 <uart0_init+0x90>)
 8c6:	602e      	str	r6, [r5, #0]
	U0LCR = 0x03;			/* Set serial format N81 and deselect divisor latch */
 8c8:	6010      	str	r0, [r2, #0]
	U0FCR = 0x87;			/* Enable FIFO */
 8ca:	4a18      	ldr	r2, [pc, #96]	; (92c <uart0_init+0x94>)
 8cc:	3084      	adds	r0, #132	; 0x84
 8ce:	6010      	str	r0, [r2, #0]
	U0TER = 0x80;			/* Enable Tansmission */
 8d0:	4a17      	ldr	r2, [pc, #92]	; (930 <uart0_init+0x98>)
 8d2:	3807      	subs	r0, #7
 8d4:	6010      	str	r0, [r2, #0]

	/* Clear Tx/Rx buffers */
	TxBuff0.ri = 0; TxBuff0.wi = 0; TxBuff0.ct = 0; TxBuff0.act = 0;
 8d6:	4817      	ldr	r0, [pc, #92]	; (934 <uart0_init+0x9c>)
	RxBuff0.ri = 0; RxBuff0.wi = 0; RxBuff0.ct = 0;
 8d8:	4a17      	ldr	r2, [pc, #92]	; (938 <uart0_init+0xa0>)
	U0LCR = 0x03;			/* Set serial format N81 and deselect divisor latch */
	U0FCR = 0x87;			/* Enable FIFO */
	U0TER = 0x80;			/* Enable Tansmission */

	/* Clear Tx/Rx buffers */
	TxBuff0.ri = 0; TxBuff0.wi = 0; TxBuff0.ct = 0; TxBuff0.act = 0;
 8da:	80c3      	strh	r3, [r0, #6]
 8dc:	8103      	strh	r3, [r0, #8]
 8de:	8143      	strh	r3, [r0, #10]
 8e0:	8183      	strh	r3, [r0, #12]
	RxBuff0.ri = 0; RxBuff0.wi = 0; RxBuff0.ct = 0;
 8e2:	8013      	strh	r3, [r2, #0]
 8e4:	8053      	strh	r3, [r2, #2]
 8e6:	8093      	strh	r3, [r2, #4]

	/* Attach UART0 to I/O pad */
	__set_PINSEL(0, 3, 1);	/* P0.3 - RXD0 */
 8e8:	4a14      	ldr	r2, [pc, #80]	; (93c <uart0_init+0xa4>)
 8ea:	6813      	ldr	r3, [r2, #0]
 8ec:	438b      	bics	r3, r1
 8ee:	3980      	subs	r1, #128	; 0x80
 8f0:	430b      	orrs	r3, r1
 8f2:	6013      	str	r3, [r2, #0]
	__set_PINSEL(0, 2, 1);	/* P0.2 - TXD0 */
 8f4:	6813      	ldr	r3, [r2, #0]
 8f6:	3910      	subs	r1, #16
 8f8:	438b      	bics	r3, r1
 8fa:	3920      	subs	r1, #32
 8fc:	430b      	orrs	r3, r1
 8fe:	6013      	str	r3, [r2, #0]

	/* Enable Tx/Rx/Error interrupts */
	RegisterIrq(UART0_IRQn, Isr_UART0, PRI_LOWEST);
 900:	2006      	movs	r0, #6
 902:	490f      	ldr	r1, [pc, #60]	; (940 <uart0_init+0xa8>)
 904:	220f      	movs	r2, #15
 906:	f7ff ff1f 	bl	748 <RegisterIrq>
	U0IER = 0x07;
 90a:	2307      	movs	r3, #7
 90c:	6023      	str	r3, [r4, #0]
}
 90e:	bc70      	pop	{r4, r5, r6}
 910:	bc01      	pop	{r0}
 912:	4700      	bx	r0
 914:	e01fc0c4 	.word	0xe01fc0c4
 918:	e01fc1a8 	.word	0xe01fc1a8
 91c:	e000c004 	.word	0xe000c004
 920:	e000c00c 	.word	0xe000c00c
 924:	e000c000 	.word	0xe000c000
 928:	e000c028 	.word	0xe000c028
 92c:	e000c008 	.word	0xe000c008
 930:	e000c030 	.word	0xe000c030
 934:	40000080 	.word	0x40000080
 938:	40000000 	.word	0x40000000
 93c:	e002c000 	.word	0xe002c000
 940:	00000759 	.word	0x00000759

00000944 <xputc>:
/*----------------------------------------------*/
/* Put a character                              */
/*----------------------------------------------*/

void xputc (char c)
{
 944:	b510      	push	{r4, lr}
 946:	1e04      	subs	r4, r0, #0
	if (_CR_CRLF && c == '\n') xputc('\r');		/* CR -> CRLF */
 948:	2c0a      	cmp	r4, #10
 94a:	d102      	bne.n	952 <xputc+0xe>
 94c:	200d      	movs	r0, #13
 94e:	f7ff fff9 	bl	944 <xputc>

	if (outptr) {
 952:	4a09      	ldr	r2, [pc, #36]	; (978 <xputc+0x34>)
 954:	6813      	ldr	r3, [r2, #0]
 956:	2b00      	cmp	r3, #0
 958:	d003      	beq.n	962 <xputc+0x1e>
		*outptr++ = (unsigned char)c;
 95a:	1c59      	adds	r1, r3, #1
 95c:	6011      	str	r1, [r2, #0]
 95e:	701c      	strb	r4, [r3, #0]
		return;
 960:	e006      	b.n	970 <xputc+0x2c>
	}

	if (xfunc_out) xfunc_out((unsigned char)c);
 962:	4b06      	ldr	r3, [pc, #24]	; (97c <xputc+0x38>)
 964:	681b      	ldr	r3, [r3, #0]
 966:	2b00      	cmp	r3, #0
 968:	d002      	beq.n	970 <xputc+0x2c>
 96a:	1c20      	adds	r0, r4, #0
 96c:	f000 fa2b 	bl	dc6 <xatoi+0xb2>
}
 970:	bc10      	pop	{r4}
 972:	bc01      	pop	{r0}
 974:	4700      	bx	r0
 976:	46c0      	nop			; (mov r8, r8)
 978:	40000110 	.word	0x40000110
 97c:	40000118 	.word	0x40000118

00000980 <xputs>:
/*----------------------------------------------*/

void xputs (					/* Put a string to the default device */
	const char* str				/* Pointer to the string */
)
{
 980:	b510      	push	{r4, lr}
 982:	1c04      	adds	r4, r0, #0
	while (*str)
 984:	7820      	ldrb	r0, [r4, #0]
 986:	2800      	cmp	r0, #0
 988:	d003      	beq.n	992 <xputs+0x12>
		xputc(*str++);
 98a:	3401      	adds	r4, #1
 98c:	f7ff ffda 	bl	944 <xputc>
 990:	e7f8      	b.n	984 <xputs+0x4>
}
 992:	bc10      	pop	{r4}
 994:	bc01      	pop	{r0}
 996:	4700      	bx	r0

00000998 <xvprintf>:
static
void xvprintf (
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 998:	b5f0      	push	{r4, r5, r6, r7, lr}
 99a:	1c0c      	adds	r4, r1, #0
 99c:	b08b      	sub	sp, #44	; 0x2c
 99e:	9000      	str	r0, [sp, #0]
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 9a0:	9b00      	ldr	r3, [sp, #0]
 9a2:	7818      	ldrb	r0, [r3, #0]
		if (!c) break;				/* End of format? */
 9a4:	2800      	cmp	r0, #0
 9a6:	d100      	bne.n	9aa <xvprintf+0x12>
 9a8:	e0e1      	b.n	b6e <Stack_Size+0x15e>
		if (c != '%') {				/* Pass through it if not a % sequense */
 9aa:	2825      	cmp	r0, #37	; 0x25
 9ac:	d002      	beq.n	9b4 <xvprintf+0x1c>
	unsigned long v;
	char s[16], c, d, *p;


	for (;;) {
		c = *fmt++;					/* Get a char */
 9ae:	3301      	adds	r3, #1
 9b0:	9300      	str	r3, [sp, #0]
 9b2:	e07e      	b.n	ab2 <Stack_Size+0xa2>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 9b4:	9b00      	ldr	r3, [sp, #0]
 9b6:	785e      	ldrb	r6, [r3, #1]
		if (c == '0') {				/* Flag: '0' padded */
 9b8:	2e30      	cmp	r6, #48	; 0x30
 9ba:	d104      	bne.n	9c6 <xvprintf+0x2e>
			f = 1; c = *fmt++;
 9bc:	9a00      	ldr	r2, [sp, #0]
 9be:	3303      	adds	r3, #3
 9c0:	7896      	ldrb	r6, [r2, #2]
 9c2:	2201      	movs	r2, #1
 9c4:	e009      	b.n	9da <xvprintf+0x42>
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 9c6:	9b00      	ldr	r3, [sp, #0]
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: '0' padded */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
 9c8:	2e2d      	cmp	r6, #45	; 0x2d
 9ca:	d002      	beq.n	9d2 <xvprintf+0x3a>
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
		c = *fmt++;					/* Get first char of the sequense */
 9cc:	3302      	adds	r3, #2
		c = *fmt++;					/* Get a char */
		if (!c) break;				/* End of format? */
		if (c != '%') {				/* Pass through it if not a % sequense */
			xputc(c); continue;
		}
		f = 0;
 9ce:	2200      	movs	r2, #0
 9d0:	e003      	b.n	9da <xvprintf+0x42>
		c = *fmt++;					/* Get first char of the sequense */
		if (c == '0') {				/* Flag: '0' padded */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
 9d2:	9a00      	ldr	r2, [sp, #0]
 9d4:	7896      	ldrb	r6, [r2, #2]
 9d6:	2202      	movs	r2, #2
 9d8:	3303      	adds	r3, #3
 9da:	9201      	str	r2, [sp, #4]
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 9dc:	2200      	movs	r2, #0
 9de:	9203      	str	r2, [sp, #12]
 9e0:	1c32      	adds	r2, r6, #0
 9e2:	3a30      	subs	r2, #48	; 0x30
 9e4:	9300      	str	r3, [sp, #0]
 9e6:	2a09      	cmp	r2, #9
 9e8:	d808      	bhi.n	9fc <xvprintf+0x64>
			w = w * 10 + c - '0';
 9ea:	220a      	movs	r2, #10
 9ec:	9903      	ldr	r1, [sp, #12]
 9ee:	4351      	muls	r1, r2
 9f0:	198e      	adds	r6, r1, r6
 9f2:	3e30      	subs	r6, #48	; 0x30
 9f4:	9603      	str	r6, [sp, #12]
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		for (w = 0; c >= '0' && c <= '9'; c = *fmt++)	/* Minimum width */
 9f6:	781e      	ldrb	r6, [r3, #0]
 9f8:	3301      	adds	r3, #1
 9fa:	e7f1      	b.n	9e0 <xvprintf+0x48>
			w = w * 10 + c - '0';
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 9fc:	2220      	movs	r2, #32
 9fe:	1c31      	adds	r1, r6, #0
 a00:	4391      	bics	r1, r2
 a02:	1e0a      	subs	r2, r1, #0
 a04:	2a4c      	cmp	r2, #76	; 0x4c
 a06:	d107      	bne.n	a18 <Stack_Size+0x8>
			f |= 4; c = *fmt++;
 a08:	9901      	ldr	r1, [sp, #4]
 a0a:	3a48      	subs	r2, #72	; 0x48
 a0c:	4311      	orrs	r1, r2
 a0e:	1c1a      	adds	r2, r3, #0
 a10:	3201      	adds	r2, #1
 a12:	9101      	str	r1, [sp, #4]
 a14:	9200      	str	r2, [sp, #0]
 a16:	781e      	ldrb	r6, [r3, #0]
		}
		if (!c) break;				/* End of format? */
 a18:	2e00      	cmp	r6, #0
 a1a:	d100      	bne.n	a1e <Stack_Size+0xe>
 a1c:	e0a7      	b.n	b6e <Stack_Size+0x15e>
 a1e:	1e33      	subs	r3, r6, #0
		d = c;
		if (d >= 'a') d -= 0x20;
 a20:	2b60      	cmp	r3, #96	; 0x60
 a22:	d902      	bls.n	a2a <Stack_Size+0x1a>
 a24:	3b20      	subs	r3, #32
 a26:	061b      	lsls	r3, r3, #24
 a28:	0e1b      	lsrs	r3, r3, #24
		switch (d) {				/* Type is... */
 a2a:	2b4f      	cmp	r3, #79	; 0x4f
 a2c:	d014      	beq.n	a58 <Stack_Size+0x48>
 a2e:	d808      	bhi.n	a42 <Stack_Size+0x32>
 a30:	2b43      	cmp	r3, #67	; 0x43
 a32:	d033      	beq.n	a9c <Stack_Size+0x8c>
 a34:	2b44      	cmp	r3, #68	; 0x44
 a36:	d040      	beq.n	aba <Stack_Size+0xaa>
			while (j++ < w) xputc(' ');
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
 a38:	2202      	movs	r2, #2
 a3a:	9204      	str	r2, [sp, #16]
			f |= 4; c = *fmt++;
		}
		if (!c) break;				/* End of format? */
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
 a3c:	2b42      	cmp	r3, #66	; 0x42
 a3e:	d03e      	beq.n	abe <Stack_Size+0xae>
 a40:	e036      	b.n	ab0 <Stack_Size+0xa0>
 a42:	2b55      	cmp	r3, #85	; 0x55
 a44:	d039      	beq.n	aba <Stack_Size+0xaa>
 a46:	2b58      	cmp	r3, #88	; 0x58
 a48:	d030      	beq.n	aac <Stack_Size+0x9c>
 a4a:	2b53      	cmp	r3, #83	; 0x53
 a4c:	d130      	bne.n	ab0 <Stack_Size+0xa0>
		case 'S' :					/* String */
			p = va_arg(arp, char*);
 a4e:	6825      	ldr	r5, [r4, #0]
 a50:	1d23      	adds	r3, r4, #4
 a52:	9302      	str	r3, [sp, #8]
			for (j = 0; p[j]; j++) ;
 a54:	1c2b      	adds	r3, r5, #0
 a56:	e001      	b.n	a5c <Stack_Size+0x4c>
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
		case 'B' :					/* Binary */
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
 a58:	2208      	movs	r2, #8
 a5a:	e02f      	b.n	abc <Stack_Size+0xac>
 a5c:	1b5c      	subs	r4, r3, r5
 a5e:	3301      	adds	r3, #1
 a60:	1e5a      	subs	r2, r3, #1
		d = c;
		if (d >= 'a') d -= 0x20;
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++) ;
 a62:	7812      	ldrb	r2, [r2, #0]
 a64:	2a00      	cmp	r2, #0
 a66:	d1f9      	bne.n	a5c <Stack_Size+0x4c>
			while (!(f & 2) && j++ < w) xputc(' ');
 a68:	9b01      	ldr	r3, [sp, #4]
 a6a:	079b      	lsls	r3, r3, #30
 a6c:	d409      	bmi.n	a82 <Stack_Size+0x72>
 a6e:	9b03      	ldr	r3, [sp, #12]
 a70:	1c66      	adds	r6, r4, #1
 a72:	429c      	cmp	r4, r3
 a74:	d204      	bcs.n	a80 <Stack_Size+0x70>
 a76:	2020      	movs	r0, #32
 a78:	f7ff ff64 	bl	944 <xputc>
 a7c:	1c34      	adds	r4, r6, #0
 a7e:	e7f3      	b.n	a68 <Stack_Size+0x58>
 a80:	1c34      	adds	r4, r6, #0
			xputs(p);
 a82:	1c28      	adds	r0, r5, #0
 a84:	f7ff ff7c 	bl	980 <xputs>
			while (j++ < w) xputc(' ');
 a88:	9b03      	ldr	r3, [sp, #12]
 a8a:	429c      	cmp	r4, r3
 a8c:	d301      	bcc.n	a92 <Stack_Size+0x82>
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 a8e:	9c02      	ldr	r4, [sp, #8]
 a90:	e786      	b.n	9a0 <xvprintf+0x8>
		case 'S' :					/* String */
			p = va_arg(arp, char*);
			for (j = 0; p[j]; j++) ;
			while (!(f & 2) && j++ < w) xputc(' ');
			xputs(p);
			while (j++ < w) xputc(' ');
 a92:	2020      	movs	r0, #32
 a94:	f7ff ff56 	bl	944 <xputc>
 a98:	3401      	adds	r4, #1
 a9a:	e7f5      	b.n	a88 <Stack_Size+0x78>
			continue;
		case 'C' :					/* Character */
			xputc((char)va_arg(arp, int)); continue;
 a9c:	6820      	ldr	r0, [r4, #0]
 a9e:	0600      	lsls	r0, r0, #24
 aa0:	1d23      	adds	r3, r4, #4
 aa2:	0e00      	lsrs	r0, r0, #24
 aa4:	9302      	str	r3, [sp, #8]
 aa6:	f7ff ff4d 	bl	944 <xputc>
 aaa:	e7f0      	b.n	a8e <Stack_Size+0x7e>
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
		case 'X' :					/* Hexdecimal */
			r = 16; break;
 aac:	2210      	movs	r2, #16
 aae:	e005      	b.n	abc <Stack_Size+0xac>
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
 ab0:	1c30      	adds	r0, r6, #0
 ab2:	f7ff ff47 	bl	944 <xputc>
 ab6:	9402      	str	r4, [sp, #8]
 ab8:	e7e9      	b.n	a8e <Stack_Size+0x7e>
			r = 2; break;
		case 'O' :					/* Octal */
			r = 8; break;
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 aba:	220a      	movs	r2, #10
 abc:	9204      	str	r2, [sp, #16]
 abe:	1d22      	adds	r2, r4, #4
		default:					/* Unknown type (passthrough) */
			xputc(c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
 ac0:	9202      	str	r2, [sp, #8]
 ac2:	6825      	ldr	r5, [r4, #0]
 ac4:	2b44      	cmp	r3, #68	; 0x44
 ac6:	d106      	bne.n	ad6 <Stack_Size+0xc6>
		if (d == 'D' && (v & 0x80000000)) {
 ac8:	2d00      	cmp	r5, #0
 aca:	da04      	bge.n	ad6 <Stack_Size+0xc6>
			v = 0 - v;
			f |= 8;
 acc:	2308      	movs	r3, #8
 ace:	9a01      	ldr	r2, [sp, #4]
 ad0:	431a      	orrs	r2, r3
 ad2:	9201      	str	r2, [sp, #4]
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? va_arg(arp, long) : ((d == 'D') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int));
		if (d == 'D' && (v & 0x80000000)) {
			v = 0 - v;
 ad4:	426d      	negs	r5, r5
			f |= 8;
		}
		i = 0;
 ad6:	2300      	movs	r3, #0
 ad8:	9305      	str	r3, [sp, #20]
		do {
			d = (char)(v % r); v /= r;
 ada:	1c28      	adds	r0, r5, #0
 adc:	9904      	ldr	r1, [sp, #16]
 ade:	f000 fa03 	bl	ee8 <____aeabi_uidivmod_from_thumb>
 ae2:	1c28      	adds	r0, r5, #0
 ae4:	060f      	lsls	r7, r1, #24
 ae6:	1c0c      	adds	r4, r1, #0
 ae8:	9904      	ldr	r1, [sp, #16]
 aea:	f000 fa01 	bl	ef0 <____aeabi_uidiv_from_thumb>
 aee:	0e3f      	lsrs	r7, r7, #24
 af0:	1c05      	adds	r5, r0, #0
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 af2:	2c09      	cmp	r4, #9
 af4:	d906      	bls.n	b04 <Stack_Size+0xf4>
 af6:	2327      	movs	r3, #39	; 0x27
 af8:	2e78      	cmp	r6, #120	; 0x78
 afa:	d000      	beq.n	afe <Stack_Size+0xee>
 afc:	3b20      	subs	r3, #32
 afe:	19df      	adds	r7, r3, r7
 b00:	063f      	lsls	r7, r7, #24
 b02:	0e3f      	lsrs	r7, r7, #24
			s[i++] = d + '0';
 b04:	9b05      	ldr	r3, [sp, #20]
 b06:	9a05      	ldr	r2, [sp, #20]
 b08:	1c5c      	adds	r4, r3, #1
 b0a:	3730      	adds	r7, #48	; 0x30
 b0c:	ab06      	add	r3, sp, #24
 b0e:	549f      	strb	r7, [r3, r2]
		} while (v && i < sizeof(s));
 b10:	2d00      	cmp	r5, #0
 b12:	d003      	beq.n	b1c <Stack_Size+0x10c>
 b14:	2c10      	cmp	r4, #16
 b16:	d001      	beq.n	b1c <Stack_Size+0x10c>
 b18:	9405      	str	r4, [sp, #20]
 b1a:	e7de      	b.n	ada <Stack_Size+0xca>
		if (f & 8) s[i++] = '-';
 b1c:	9b01      	ldr	r3, [sp, #4]
 b1e:	071b      	lsls	r3, r3, #28
 b20:	d503      	bpl.n	b2a <Stack_Size+0x11a>
 b22:	232d      	movs	r3, #45	; 0x2d
 b24:	aa06      	add	r2, sp, #24
 b26:	5513      	strb	r3, [r2, r4]
 b28:	3401      	adds	r4, #1
		j = i; d = (f & 1) ? '0' : ' ';
 b2a:	9b01      	ldr	r3, [sp, #4]
 b2c:	2730      	movs	r7, #48	; 0x30
 b2e:	07db      	lsls	r3, r3, #31
 b30:	d400      	bmi.n	b34 <Stack_Size+0x124>
 b32:	3f10      	subs	r7, #16
 b34:	1c25      	adds	r5, r4, #0
		while (!(f & 2) && j++ < w) xputc(d);
 b36:	9b01      	ldr	r3, [sp, #4]
 b38:	079b      	lsls	r3, r3, #30
 b3a:	d409      	bmi.n	b50 <Stack_Size+0x140>
 b3c:	9b03      	ldr	r3, [sp, #12]
 b3e:	1c6e      	adds	r6, r5, #1
 b40:	429d      	cmp	r5, r3
 b42:	d204      	bcs.n	b4e <Stack_Size+0x13e>
 b44:	1c38      	adds	r0, r7, #0
 b46:	f7ff fefd 	bl	944 <xputc>
 b4a:	1c35      	adds	r5, r6, #0
 b4c:	e7f3      	b.n	b36 <Stack_Size+0x126>
 b4e:	1c35      	adds	r5, r6, #0
		do xputc(s[--i]); while(i);
 b50:	3c01      	subs	r4, #1
 b52:	ab06      	add	r3, sp, #24
 b54:	5d18      	ldrb	r0, [r3, r4]
 b56:	f7ff fef5 	bl	944 <xputc>
 b5a:	2c00      	cmp	r4, #0
 b5c:	d1f8      	bne.n	b50 <Stack_Size+0x140>
		while (j++ < w) xputc(' ');
 b5e:	9b03      	ldr	r3, [sp, #12]
 b60:	429d      	cmp	r5, r3
 b62:	d294      	bcs.n	a8e <Stack_Size+0x7e>
 b64:	2020      	movs	r0, #32
 b66:	f7ff feed 	bl	944 <xputc>
 b6a:	3501      	adds	r5, #1
 b6c:	e7f7      	b.n	b5e <Stack_Size+0x14e>
	}
}
 b6e:	b00b      	add	sp, #44	; 0x2c
 b70:	bcf0      	pop	{r4, r5, r6, r7}
 b72:	bc01      	pop	{r0}
 b74:	4700      	bx	r0

00000b76 <xfputs>:
)
{
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
 b76:	4b08      	ldr	r3, [pc, #32]	; (b98 <xfputs+0x22>)

void xfputs (					/* Put a string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	str				/* Pointer to the string */
)
{
 b78:	b570      	push	{r4, r5, r6, lr}
 b7a:	1c0d      	adds	r5, r1, #0
 b7c:	1c1c      	adds	r4, r3, #0
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
 b7e:	681e      	ldr	r6, [r3, #0]
	xfunc_out = func;	/* Switch output to specified device */
 b80:	6018      	str	r0, [r3, #0]
	while (*str)		/* Put the string */
 b82:	7828      	ldrb	r0, [r5, #0]
 b84:	2800      	cmp	r0, #0
 b86:	d003      	beq.n	b90 <xfputs+0x1a>
		xputc(*str++);
 b88:	3501      	adds	r5, #1
 b8a:	f7ff fedb 	bl	944 <xputc>
 b8e:	e7f8      	b.n	b82 <xfputs+0xc>
	xfunc_out = pf;		/* Restore output device */
 b90:	6026      	str	r6, [r4, #0]
}
 b92:	bc70      	pop	{r4, r5, r6}
 b94:	bc01      	pop	{r0}
 b96:	4700      	bx	r0
 b98:	40000118 	.word	0x40000118

00000b9c <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 b9c:	b40f      	push	{r0, r1, r2, r3}
 b9e:	b507      	push	{r0, r1, r2, lr}
 ba0:	a904      	add	r1, sp, #16
 ba2:	c901      	ldmia	r1!, {r0}
	va_list arp;


	va_start(arp, fmt);
 ba4:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 ba6:	f7ff fef7 	bl	998 <xvprintf>
	va_end(arp);
}
 baa:	b003      	add	sp, #12
 bac:	bc08      	pop	{r3}
 bae:	b004      	add	sp, #16
 bb0:	4718      	bx	r3

00000bb2 <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 bb2:	b40e      	push	{r1, r2, r3}
 bb4:	b517      	push	{r0, r1, r2, r4, lr}
 bb6:	a905      	add	r1, sp, #20
 bb8:	c908      	ldmia	r1!, {r3}
	va_list arp;


	outptr = buff;		/* Switch destination for memory */
 bba:	4c07      	ldr	r4, [pc, #28]	; (bd8 <xsprintf+0x26>)
 bbc:	6020      	str	r0, [r4, #0]

	va_start(arp, fmt);
	xvprintf(fmt, arp);
 bbe:	1c18      	adds	r0, r3, #0
	va_list arp;


	outptr = buff;		/* Switch destination for memory */

	va_start(arp, fmt);
 bc0:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 bc2:	f7ff fee9 	bl	998 <xvprintf>
	va_end(arp);

	*outptr = 0;		/* Terminate output string with a \0 */
 bc6:	2300      	movs	r3, #0
 bc8:	6822      	ldr	r2, [r4, #0]
 bca:	7013      	strb	r3, [r2, #0]
	outptr = 0;			/* Switch destination for device */
 bcc:	6023      	str	r3, [r4, #0]
}
 bce:	bc17      	pop	{r0, r1, r2, r4}
 bd0:	bc08      	pop	{r3}
 bd2:	b003      	add	sp, #12
 bd4:	4718      	bx	r3
 bd6:	46c0      	nop			; (mov r8, r8)
 bd8:	40000110 	.word	0x40000110

00000bdc <xfprintf>:
void xfprintf (					/* Put a formatted string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	fmt,			/* Pointer to the format string */
	...							/* Optional arguments */
)
{
 bdc:	b40e      	push	{r1, r2, r3}
 bde:	b533      	push	{r0, r1, r4, r5, lr}
	va_list arp;
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
 be0:	4c06      	ldr	r4, [pc, #24]	; (bfc <xfprintf+0x20>)
void xfprintf (					/* Put a formatted string to the specified device */
	void(*func)(unsigned char),	/* Pointer to the output function */
	const char*	fmt,			/* Pointer to the format string */
	...							/* Optional arguments */
)
{
 be2:	a905      	add	r1, sp, #20
 be4:	c908      	ldmia	r1!, {r3}
	va_list arp;
	void (*pf)(unsigned char);


	pf = xfunc_out;		/* Save current output device */
 be6:	6825      	ldr	r5, [r4, #0]
	xfunc_out = func;	/* Switch output to specified device */
 be8:	6020      	str	r0, [r4, #0]

	va_start(arp, fmt);
	xvprintf(fmt, arp);
 bea:	1c18      	adds	r0, r3, #0


	pf = xfunc_out;		/* Save current output device */
	xfunc_out = func;	/* Switch output to specified device */

	va_start(arp, fmt);
 bec:	9101      	str	r1, [sp, #4]
	xvprintf(fmt, arp);
 bee:	f7ff fed3 	bl	998 <xvprintf>
	va_end(arp);

	xfunc_out = pf;		/* Restore output device */
 bf2:	6025      	str	r5, [r4, #0]
}
 bf4:	bc33      	pop	{r0, r1, r4, r5}
 bf6:	bc08      	pop	{r3}
 bf8:	b003      	add	sp, #12
 bfa:	4718      	bx	r3
 bfc:	40000118 	.word	0x40000118

00000c00 <put_dump>:
	const void* buff,		/* Pointer to the array to be dumped */
	unsigned long addr,		/* Heading address value */
	int len,				/* Number of items to be dumped */
	int width				/* Size of the items (DW_CHAR, DW_SHORT, DW_LONG) */
)
{
 c00:	b570      	push	{r4, r5, r6, lr}
 c02:	1c04      	adds	r4, r0, #0
	const unsigned char *bp;
	const unsigned short *sp;
	const unsigned long *lp;


	xprintf("%08lX:", addr);		/* address */
 c04:	481f      	ldr	r0, [pc, #124]	; (c84 <put_dump+0x84>)
	const void* buff,		/* Pointer to the array to be dumped */
	unsigned long addr,		/* Heading address value */
	int len,				/* Number of items to be dumped */
	int width				/* Size of the items (DW_CHAR, DW_SHORT, DW_LONG) */
)
{
 c06:	1c1e      	adds	r6, r3, #0
 c08:	1c15      	adds	r5, r2, #0
	const unsigned char *bp;
	const unsigned short *sp;
	const unsigned long *lp;


	xprintf("%08lX:", addr);		/* address */
 c0a:	f7ff ffc7 	bl	b9c <xprintf>

	switch (width) {
 c0e:	2e02      	cmp	r6, #2
 c10:	d01f      	beq.n	c52 <put_dump+0x52>
 c12:	2e04      	cmp	r6, #4
 c14:	d026      	beq.n	c64 <put_dump+0x64>
 c16:	2e01      	cmp	r6, #1
 c18:	d12b      	bne.n	c72 <put_dump+0x72>
 c1a:	1c26      	adds	r6, r4, #0
 c1c:	1b33      	subs	r3, r6, r4
	case DW_CHAR:
		bp = buff;
		for (i = 0; i < len; i++)		/* Hexdecimal dump */
 c1e:	42ab      	cmp	r3, r5
 c20:	da05      	bge.n	c2e <put_dump+0x2e>
			xprintf(" %02X", bp[i]);
 c22:	7831      	ldrb	r1, [r6, #0]
 c24:	4818      	ldr	r0, [pc, #96]	; (c88 <put_dump+0x88>)
 c26:	f7ff ffb9 	bl	b9c <xprintf>
 c2a:	3601      	adds	r6, #1
 c2c:	e7f6      	b.n	c1c <put_dump+0x1c>
		xputc(' ');
 c2e:	2020      	movs	r0, #32
 c30:	f7ff fe88 	bl	944 <xputc>
		for (i = 0; i < len; i++)		/* ASCII dump */
 c34:	1c26      	adds	r6, r4, #0
 c36:	1b33      	subs	r3, r6, r4
 c38:	42ab      	cmp	r3, r5
 c3a:	da1a      	bge.n	c72 <put_dump+0x72>
			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
 c3c:	7833      	ldrb	r3, [r6, #0]
 c3e:	1c1a      	adds	r2, r3, #0
 c40:	3a20      	subs	r2, #32
 c42:	202e      	movs	r0, #46	; 0x2e
 c44:	2a5e      	cmp	r2, #94	; 0x5e
 c46:	d800      	bhi.n	c4a <put_dump+0x4a>
 c48:	1c18      	adds	r0, r3, #0
 c4a:	f7ff fe7b 	bl	944 <xputc>
 c4e:	3601      	adds	r6, #1
 c50:	e7f1      	b.n	c36 <put_dump+0x36>
		break;
	case DW_SHORT:
		sp = buff;
		do								/* Hexdecimal dump */
			xprintf(" %04X", *sp++);
 c52:	8821      	ldrh	r1, [r4, #0]
 c54:	480d      	ldr	r0, [pc, #52]	; (c8c <put_dump+0x8c>)
		while (--len);
 c56:	3d01      	subs	r5, #1
			xputc((bp[i] >= ' ' && bp[i] <= '~') ? bp[i] : '.');
		break;
	case DW_SHORT:
		sp = buff;
		do								/* Hexdecimal dump */
			xprintf(" %04X", *sp++);
 c58:	f7ff ffa0 	bl	b9c <xprintf>
 c5c:	3402      	adds	r4, #2
		while (--len);
 c5e:	2d00      	cmp	r5, #0
 c60:	d1f7      	bne.n	c52 <put_dump+0x52>
 c62:	e006      	b.n	c72 <put_dump+0x72>
		break;
	case DW_LONG:
		lp = buff;
		do								/* Hexdecimal dump */
			xprintf(" %08LX", *lp++);
 c64:	480a      	ldr	r0, [pc, #40]	; (c90 <put_dump+0x90>)
 c66:	cc02      	ldmia	r4!, {r1}
		while (--len);
 c68:	3d01      	subs	r5, #1
		while (--len);
		break;
	case DW_LONG:
		lp = buff;
		do								/* Hexdecimal dump */
			xprintf(" %08LX", *lp++);
 c6a:	f7ff ff97 	bl	b9c <xprintf>
		while (--len);
 c6e:	2d00      	cmp	r5, #0
 c70:	d1f8      	bne.n	c64 <put_dump+0x64>
		break;
	}

#if !_LF_CRLF
	xputc('\r');
 c72:	200d      	movs	r0, #13
 c74:	f7ff fe66 	bl	944 <xputc>
#endif
	xputc('\n');
 c78:	200a      	movs	r0, #10
 c7a:	f7ff fe63 	bl	944 <xputc>
}
 c7e:	bc70      	pop	{r4, r5, r6}
 c80:	bc01      	pop	{r0}
 c82:	4700      	bx	r0
 c84:	00000f39 	.word	0x00000f39
 c88:	00000f40 	.word	0x00000f40
 c8c:	00000f46 	.word	0x00000f46
 c90:	00000f4c 	.word	0x00000f4c

00000c94 <xgets>:

int xgets (		/* 0:End of stream, 1:A line arrived */
	char* buff,	/* Pointer to the buffer */
	int len		/* Buffer length */
)
{
 c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 c96:	2400      	movs	r4, #0
	int c, i;


	if (!xfunc_in) return 0;		/* No input function specified */
 c98:	4d16      	ldr	r5, [pc, #88]	; (cf4 <xgets+0x60>)
 c9a:	682b      	ldr	r3, [r5, #0]

int xgets (		/* 0:End of stream, 1:A line arrived */
	char* buff,	/* Pointer to the buffer */
	int len		/* Buffer length */
)
{
 c9c:	1c06      	adds	r6, r0, #0
 c9e:	9101      	str	r1, [sp, #4]
	int c, i;


	if (!xfunc_in) return 0;		/* No input function specified */
 ca0:	42a3      	cmp	r3, r4
 ca2:	d10a      	bne.n	cba <xgets+0x26>
 ca4:	2000      	movs	r0, #0
 ca6:	e022      	b.n	cee <xgets+0x5a>

	i = 0;
	for (;;) {
		c = xfunc_in();				/* Get a char from the incoming stream */
		if (!c) return 0;			/* End of stream? */
		if (c == '\r') break;		/* End of line? */
 ca8:	280d      	cmp	r0, #13
 caa:	d018      	beq.n	cde <xgets+0x4a>
		if (c == '\b' && i) {		/* Back space? */
 cac:	2808      	cmp	r0, #8
 cae:	d10a      	bne.n	cc6 <xgets+0x32>
 cb0:	2c00      	cmp	r4, #0
 cb2:	d002      	beq.n	cba <xgets+0x26>
			i--;
 cb4:	3c01      	subs	r4, #1
#if _LINE_ECHO
			xputc(c);
 cb6:	f7ff fe45 	bl	944 <xputc>

	if (!xfunc_in) return 0;		/* No input function specified */

	i = 0;
	for (;;) {
		c = xfunc_in();				/* Get a char from the incoming stream */
 cba:	682b      	ldr	r3, [r5, #0]
 cbc:	f000 f883 	bl	dc6 <xatoi+0xb2>
		if (!c) return 0;			/* End of stream? */
 cc0:	2800      	cmp	r0, #0
 cc2:	d1f1      	bne.n	ca8 <xgets+0x14>
 cc4:	e7ee      	b.n	ca4 <xgets+0x10>
#if _LINE_ECHO
			xputc(c);
#endif
			continue;
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
 cc6:	281f      	cmp	r0, #31
 cc8:	ddf7      	ble.n	cba <xgets+0x26>
 cca:	9b01      	ldr	r3, [sp, #4]
 ccc:	3b01      	subs	r3, #1
 cce:	429c      	cmp	r4, r3
 cd0:	daf3      	bge.n	cba <xgets+0x26>
			buff[i++] = c;
 cd2:	5530      	strb	r0, [r6, r4]
 cd4:	1c67      	adds	r7, r4, #1
#if _LINE_ECHO
			xputc(c);
 cd6:	f7ff fe35 	bl	944 <xputc>
			xputc(c);
#endif
			continue;
		}
		if (c >= ' ' && i < len - 1) {	/* Visible chars */
			buff[i++] = c;
 cda:	1c3c      	adds	r4, r7, #0
 cdc:	e7ed      	b.n	cba <xgets+0x26>
#if _LINE_ECHO
			xputc(c);
#endif
		}
	}
	buff[i] = 0;	/* Terminate with a \0 */
 cde:	2300      	movs	r3, #0
 ce0:	5533      	strb	r3, [r6, r4]
#if _LINE_ECHO
#if !_LF_CRLF
		xputc('\r');
 ce2:	f7ff fe2f 	bl	944 <xputc>
#endif
		xputc('\n');
 ce6:	200a      	movs	r0, #10
 ce8:	f7ff fe2c 	bl	944 <xputc>
#endif
	return 1;
 cec:	2001      	movs	r0, #1
}
 cee:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
 cf0:	bc02      	pop	{r1}
 cf2:	4708      	bx	r1
 cf4:	40000114 	.word	0x40000114

00000cf8 <xfgets>:
int xfgets (	/* 0:End of stream, 1:A line arrived */
	unsigned char (*func)(void),	/* Pointer to the input stream function */
	char* buff,	/* Pointer to the buffer */
	int len		/* Buffer length */
)
{
 cf8:	b538      	push	{r3, r4, r5, lr}
	unsigned char (*pf)(void);
	int n;


	pf = xfunc_in;			/* Save current input device */
 cfa:	4c05      	ldr	r4, [pc, #20]	; (d10 <xfgets+0x18>)
 cfc:	6825      	ldr	r5, [r4, #0]
	xfunc_in = func;		/* Switch input to specified device */
 cfe:	6020      	str	r0, [r4, #0]
	n = xgets(buff, len);	/* Get a line */
 d00:	1c08      	adds	r0, r1, #0
 d02:	1c11      	adds	r1, r2, #0
 d04:	f7ff ffc6 	bl	c94 <xgets>
	xfunc_in = pf;			/* Restore input device */
 d08:	6025      	str	r5, [r4, #0]

	return n;
}
 d0a:	bc38      	pop	{r3, r4, r5}
 d0c:	bc02      	pop	{r1}
 d0e:	4708      	bx	r1
 d10:	40000114 	.word	0x40000114

00000d14 <xatoi>:
{
	unsigned long val;
	unsigned char c, r, s = 0;


	*res = 0;
 d14:	2300      	movs	r3, #0

int xatoi (			/* 0:Failed, 1:Successful */
	char **str,		/* Pointer to pointer to the string */
	long *res		/* Pointer to the valiable to store the value */
)
{
 d16:	b570      	push	{r4, r5, r6, lr}
	unsigned long val;
	unsigned char c, r, s = 0;


	*res = 0;
 d18:	600b      	str	r3, [r1, #0]

	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */
 d1a:	6802      	ldr	r2, [r0, #0]
 d1c:	7813      	ldrb	r3, [r2, #0]
 d1e:	2b20      	cmp	r3, #32
 d20:	d102      	bne.n	d28 <xatoi+0x14>
 d22:	3201      	adds	r2, #1
 d24:	6002      	str	r2, [r0, #0]
 d26:	e7f8      	b.n	d1a <xatoi+0x6>
	char **str,		/* Pointer to pointer to the string */
	long *res		/* Pointer to the valiable to store the value */
)
{
	unsigned long val;
	unsigned char c, r, s = 0;
 d28:	2500      	movs	r5, #0

	*res = 0;

	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */

	if (c == '-') {		/* negative? */
 d2a:	2b2d      	cmp	r3, #45	; 0x2d
 d2c:	d103      	bne.n	d36 <xatoi+0x22>
		s = 1;
		c = *(++(*str));
 d2e:	1c53      	adds	r3, r2, #1
 d30:	6003      	str	r3, [r0, #0]
 d32:	7853      	ldrb	r3, [r2, #1]
	*res = 0;

	while ((c = **str) == ' ') (*str)++;	/* Skip leading spaces */

	if (c == '-') {		/* negative? */
		s = 1;
 d34:	3501      	adds	r5, #1
		c = *(++(*str));
	}

	if (c == '0') {
 d36:	2b30      	cmp	r3, #48	; 0x30
 d38:	d11b      	bne.n	d72 <xatoi+0x5e>
		c = *(++(*str));
 d3a:	6802      	ldr	r2, [r0, #0]
 d3c:	1c53      	adds	r3, r2, #1
 d3e:	6003      	str	r3, [r0, #0]
 d40:	7853      	ldrb	r3, [r2, #1]
		switch (c) {
 d42:	2b62      	cmp	r3, #98	; 0x62
 d44:	d006      	beq.n	d54 <xatoi+0x40>
 d46:	2b78      	cmp	r3, #120	; 0x78
 d48:	d109      	bne.n	d5e <xatoi+0x4a>
		case 'x':		/* hexdecimal */
			r = 16; c = *(++(*str));
 d4a:	1c93      	adds	r3, r2, #2
 d4c:	6003      	str	r3, [r0, #0]
 d4e:	2610      	movs	r6, #16
 d50:	7893      	ldrb	r3, [r2, #2]
			break;
 d52:	e013      	b.n	d7c <xatoi+0x68>
		case 'b':		/* binary */
			r = 2; c = *(++(*str));
 d54:	1c93      	adds	r3, r2, #2
 d56:	6003      	str	r3, [r0, #0]
 d58:	2602      	movs	r6, #2
 d5a:	7893      	ldrb	r3, [r2, #2]
			break;
 d5c:	e00e      	b.n	d7c <xatoi+0x68>
		default:
			if (c <= ' ') return 1;	/* single zero */
 d5e:	2201      	movs	r2, #1
 d60:	2b20      	cmp	r3, #32
 d62:	d92c      	bls.n	dbe <xatoi+0xaa>
			if (c < '0' || c > '9') return 0;	/* invalid char */
 d64:	1c1a      	adds	r2, r3, #0
 d66:	3a30      	subs	r2, #48	; 0x30
			r = 8;		/* octal */
 d68:	2608      	movs	r6, #8
		case 'b':		/* binary */
			r = 2; c = *(++(*str));
			break;
		default:
			if (c <= ' ') return 1;	/* single zero */
			if (c < '0' || c > '9') return 0;	/* invalid char */
 d6a:	2a09      	cmp	r2, #9
 d6c:	d906      	bls.n	d7c <xatoi+0x68>
 d6e:	2200      	movs	r2, #0
 d70:	e025      	b.n	dbe <xatoi+0xaa>
			r = 8;		/* octal */
		}
	} else {
		if (c < '0' || c > '9') return 0;	/* EOL or invalid char */
 d72:	1c1a      	adds	r2, r3, #0
 d74:	3a30      	subs	r2, #48	; 0x30
 d76:	2a09      	cmp	r2, #9
 d78:	d8f9      	bhi.n	d6e <xatoi+0x5a>
		r = 10;			/* decimal */
 d7a:	260a      	movs	r6, #10
	}

	val = 0;
 d7c:	2400      	movs	r4, #0
	while (c > ' ') {
 d7e:	2b20      	cmp	r3, #32
 d80:	d918      	bls.n	db4 <xatoi+0xa0>
		if (c >= 'a') c -= 0x20;
 d82:	2b60      	cmp	r3, #96	; 0x60
 d84:	d902      	bls.n	d8c <xatoi+0x78>
 d86:	3b20      	subs	r3, #32
 d88:	061b      	lsls	r3, r3, #24
 d8a:	0e1b      	lsrs	r3, r3, #24
		c -= '0';
 d8c:	1c1a      	adds	r2, r3, #0
 d8e:	3a30      	subs	r2, #48	; 0x30
 d90:	0612      	lsls	r2, r2, #24
 d92:	0e12      	lsrs	r2, r2, #24
		if (c >= 17) {
 d94:	2a10      	cmp	r2, #16
 d96:	d904      	bls.n	da2 <xatoi+0x8e>
			c -= 7;
 d98:	3b37      	subs	r3, #55	; 0x37
 d9a:	061a      	lsls	r2, r3, #24
 d9c:	0e12      	lsrs	r2, r2, #24
			if (c <= 9) return 0;	/* invalid char */
 d9e:	2a09      	cmp	r2, #9
 da0:	d9e5      	bls.n	d6e <xatoi+0x5a>
		}
		if (c >= r) return 0;		/* invalid char for current radix */
 da2:	42b2      	cmp	r2, r6
 da4:	d2e3      	bcs.n	d6e <xatoi+0x5a>
		val = val * r + c;
 da6:	4374      	muls	r4, r6
		c = *(++(*str));
 da8:	6803      	ldr	r3, [r0, #0]
		if (c >= 17) {
			c -= 7;
			if (c <= 9) return 0;	/* invalid char */
		}
		if (c >= r) return 0;		/* invalid char for current radix */
		val = val * r + c;
 daa:	1914      	adds	r4, r2, r4
		c = *(++(*str));
 dac:	1c5a      	adds	r2, r3, #1
 dae:	6002      	str	r2, [r0, #0]
 db0:	785b      	ldrb	r3, [r3, #1]
 db2:	e7e4      	b.n	d7e <xatoi+0x6a>
	}
	if (s) val = 0 - val;			/* apply sign if needed */
 db4:	2d00      	cmp	r5, #0
 db6:	d000      	beq.n	dba <xatoi+0xa6>
 db8:	4264      	negs	r4, r4

	*res = val;
	return 1;
 dba:	2201      	movs	r2, #1
		val = val * r + c;
		c = *(++(*str));
	}
	if (s) val = 0 - val;			/* apply sign if needed */

	*res = val;
 dbc:	600c      	str	r4, [r1, #0]
	return 1;
}
 dbe:	1c10      	adds	r0, r2, #0
 dc0:	bc70      	pop	{r4, r5, r6}
 dc2:	bc02      	pop	{r1}
 dc4:	4708      	bx	r1
 dc6:	4718      	bx	r3

00000dc8 <__aeabi_uidiv>:
 dc8:	e2512001 	subs	r2, r1, #1
 dcc:	012fff1e 	bxeq	lr
 dd0:	3a000036 	bcc	eb0 <__aeabi_uidiv+0xe8>
 dd4:	e1500001 	cmp	r0, r1
 dd8:	9a000022 	bls	e68 <__aeabi_uidiv+0xa0>
 ddc:	e1110002 	tst	r1, r2
 de0:	0a000023 	beq	e74 <__aeabi_uidiv+0xac>
 de4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 de8:	01a01181 	lsleq	r1, r1, #3
 dec:	03a03008 	moveq	r3, #8
 df0:	13a03001 	movne	r3, #1
 df4:	e3510201 	cmp	r1, #268435456	; 0x10000000
 df8:	31510000 	cmpcc	r1, r0
 dfc:	31a01201 	lslcc	r1, r1, #4
 e00:	31a03203 	lslcc	r3, r3, #4
 e04:	3afffffa 	bcc	df4 <__aeabi_uidiv+0x2c>
 e08:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 e0c:	31510000 	cmpcc	r1, r0
 e10:	31a01081 	lslcc	r1, r1, #1
 e14:	31a03083 	lslcc	r3, r3, #1
 e18:	3afffffa 	bcc	e08 <__aeabi_uidiv+0x40>
 e1c:	e3a02000 	mov	r2, #0
 e20:	e1500001 	cmp	r0, r1
 e24:	20400001 	subcs	r0, r0, r1
 e28:	21822003 	orrcs	r2, r2, r3
 e2c:	e15000a1 	cmp	r0, r1, lsr #1
 e30:	204000a1 	subcs	r0, r0, r1, lsr #1
 e34:	218220a3 	orrcs	r2, r2, r3, lsr #1
 e38:	e1500121 	cmp	r0, r1, lsr #2
 e3c:	20400121 	subcs	r0, r0, r1, lsr #2
 e40:	21822123 	orrcs	r2, r2, r3, lsr #2
 e44:	e15001a1 	cmp	r0, r1, lsr #3
 e48:	204001a1 	subcs	r0, r0, r1, lsr #3
 e4c:	218221a3 	orrcs	r2, r2, r3, lsr #3
 e50:	e3500000 	cmp	r0, #0
 e54:	11b03223 	lsrsne	r3, r3, #4
 e58:	11a01221 	lsrne	r1, r1, #4
 e5c:	1affffef 	bne	e20 <__aeabi_uidiv+0x58>
 e60:	e1a00002 	mov	r0, r2
 e64:	e12fff1e 	bx	lr
 e68:	03a00001 	moveq	r0, #1
 e6c:	13a00000 	movne	r0, #0
 e70:	e12fff1e 	bx	lr
 e74:	e3510801 	cmp	r1, #65536	; 0x10000
 e78:	21a01821 	lsrcs	r1, r1, #16
 e7c:	23a02010 	movcs	r2, #16
 e80:	33a02000 	movcc	r2, #0
 e84:	e3510c01 	cmp	r1, #256	; 0x100
 e88:	21a01421 	lsrcs	r1, r1, #8
 e8c:	22822008 	addcs	r2, r2, #8
 e90:	e3510010 	cmp	r1, #16
 e94:	21a01221 	lsrcs	r1, r1, #4
 e98:	22822004 	addcs	r2, r2, #4
 e9c:	e3510004 	cmp	r1, #4
 ea0:	82822003 	addhi	r2, r2, #3
 ea4:	908220a1 	addls	r2, r2, r1, lsr #1
 ea8:	e1a00230 	lsr	r0, r0, r2
 eac:	e12fff1e 	bx	lr
 eb0:	e12fff1f 	bx	pc
 eb4:	e1a00000 	nop			; (mov r0, r0)
 eb8:	e3500000 	cmp	r0, #0
 ebc:	13e00000 	mvnne	r0, #0
 ec0:	ea00000c 	b	ef8 <____aeabi_idiv0_from_arm>

00000ec4 <__aeabi_uidivmod>:
 ec4:	e3510000 	cmp	r1, #0
 ec8:	0afffff8 	beq	eb0 <__aeabi_uidiv+0xe8>
 ecc:	e92d4003 	push	{r0, r1, lr}
 ed0:	ebffffbc 	bl	dc8 <__aeabi_uidiv>
 ed4:	e8bd4006 	pop	{r1, r2, lr}
 ed8:	e0030092 	mul	r3, r2, r0
 edc:	e0411003 	sub	r1, r1, r3
 ee0:	e12fff1e 	bx	lr

00000ee4 <__aeabi_idiv0>:
 ee4:	4770      	bx	lr
 ee6:	46c0      	nop			; (mov r8, r8)

00000ee8 <____aeabi_uidivmod_from_thumb>:
 ee8:	4778      	bx	pc
 eea:	46c0      	nop			; (mov r8, r8)
 eec:	eafffff4 	b	ec4 <__aeabi_uidivmod>

00000ef0 <____aeabi_uidiv_from_thumb>:
 ef0:	4778      	bx	pc
 ef2:	46c0      	nop			; (mov r8, r8)
 ef4:	eaffffb3 	b	dc8 <__aeabi_uidiv>

00000ef8 <____aeabi_idiv0_from_arm>:
 ef8:	e59fc000 	ldr	ip, [pc]	; f00 <VIC_VectAddr>
 efc:	e12fff1c 	bx	ip
 f00:	00000ee5 	.word	0x00000ee5
 f04:	00000000 	.word	0x00000000
 f08:	7461460a 	.word	0x7461460a
 f0c:	6d207346 	.word	0x6d207346
 f10:	6c75646f 	.word	0x6c75646f
 f14:	65742065 	.word	0x65742065
 f18:	6d207473 	.word	0x6d207473
 f1c:	74696e6f 	.word	0x74696e6f
 f20:	6620726f 	.word	0x6620726f
 f24:	4c20726f 	.word	0x4c20726f
 f28:	33324350 	.word	0x33324350
 f2c:	4d2f3030 	.word	0x4d2f3030
 f30:	4e2f4943 	.word	0x4e2f4943
 f34:	0a444e41 	.word	0x0a444e41
 f38:	00          	.byte	0x00
 f39:	25          	.byte	0x25
 f3a:	3830      	.short	0x3830
 f3c:	003a586c 	.word	0x003a586c
 f40:	32302520 	.word	0x32302520
 f44:	25200058 	.word	0x25200058
 f48:	00583430 	.word	0x00583430
 f4c:	38302520 	.word	0x38302520
 f50:	Address 0x0000000000000f50 is out of bounds.

