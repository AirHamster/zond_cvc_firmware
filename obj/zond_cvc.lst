
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003440  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000005a0  40000000  00003440  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000224  400005a0  000039e0  000205a0  2**3
                  ALLOC
  3 .stack        00000a14  400007c4  00003c04  000205a0  2**2
                  ALLOC
  4 .usbram       00000000  7fd00000  7fd00000  000205a0  2**0
                  CONTENTS
  5 .etherram     00000000  7fe00000  7fe00000  000205a0  2**0
                  CONTENTS
  6 .batteryram   00000000  e0084000  e0084000  000205a0  2**0
                  CONTENTS
  7 .comment      0000007f  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 0000002e  00000000  00000000  0002061f  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000110  00000000  00000000  00020650  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00004358  00000000  00000000  00020760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000dad  00000000  00000000  00024ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000c9f  00000000  00000000  00025865  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000c80  00000000  00000000  00026504  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000971  00000000  00000000  00027184  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001323  00000000  00000000  00027af5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000098  00000000  00000000  00028e18  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, =trap		@ Undef entry
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =swi_handler	@ SWI entry
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, =trap		@ PAbt entry
       c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =trap		@ DAbt entry
      10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
      14:	00000000 	.word	0x00000000
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
	LDR     PC, =fiq_handler	@ FIQ entry
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
	LDR	PC, =reset_handler	@ Reset entry
      20:	00000300 	.word	0x00000300
	LDR	PC, =trap		@ Undef entry
      24:	0000038c 	.word	0x0000038c
	LDR	PC, =swi_handler	@ SWI entry
      28:	000003fc 	.word	0x000003fc
	LDR	PC, =irq_handler	@ IRQ entry
      2c:	000003ac 	.word	0x000003ac
	LDR     PC, =fiq_handler	@ FIQ entry
      30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
     304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
     308:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
     30c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
     310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
     314:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
     318:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
     31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
     320:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
     324:	e2400010 	sub	r0, r0, #16

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
     328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
     32c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
     330:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
     334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
     338:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
     33c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
     340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
     344:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
     348:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
	LDR	R2, =_sdata
     350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
	LDR	R3, =_edata
     354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
1:	CMP	R2, R3
     358:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
     35c:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
     360:	34820004 	strcc	r0, [r2], #4
	BLO	1b
     364:	3afffffb 	bcc	358 <reset_handler+0x58>

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
     368:	e3a00000 	mov	r0, #0
	LDR	R1, =_sbss
     36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
	LDR	R2, =_ebss
     370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
3:	CMP	R1, R2
     374:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
     378:	34810004 	strcc	r0, [r1], #4
	BLO	3b
     37c:	3afffffc 	bcc	374 <reset_handler+0x74>

@ Start main()
.extern main
	LDR	R0, =main
     380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
	MOV	LR, PC
     384:	e1a0e00f 	mov	lr, pc
	BX	R0
     388:	e12fff10 	bx	r0

0000038c <trap>:

@ Trap (infinite loop)
trap:
	B	trap
     38c:	eafffffe 	b	38c <trap>
	LDR	R0, =stack_end
     390:	400011d8 	.word	0x400011d8
	LDR	R1, =_sidata
     394:	00003440 	.word	0x00003440
	LDR	R2, =_sdata
     398:	40000000 	.word	0x40000000
	LDR	R3, =_edata
     39c:	400005a0 	.word	0x400005a0
	LDR	R1, =_sbss
     3a0:	400005a0 	.word	0x400005a0
	LDR	R2, =_ebss
     3a4:	400007c4 	.word	0x400007c4
	LDR	R0, =main
     3a8:	000007c1 	.word	0x000007c1

000003ac <irq_handler>:
.equ VIC_VectAddr0,	0x100
.equ VIC_VectPriority0,	0x200
.equ VIC_VectAddr,	0xF00

irq_handler:
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
     3ac:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
     3b0:	e92d4000 	stmfd	sp!, {lr}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
     3b4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
	LDR	R0, [R0, #VIC_VectAddr]
     3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
	MSR	CPSR_c, #M_SVC		@ Enter SVC mode and enable Irq and Fiq
     3c4:	e321f013 	msr	CPSR_c, #19

	STMFD	SP!, {LR}		@ Call the ISR
     3c8:	e92d4000 	stmfd	sp!, {lr}
	MOV	LR, PC
     3cc:	e1a0e00f 	mov	lr, pc
	BX	R0
     3d0:	e12fff10 	bx	r0
	LDMIA	SP!, {LR}
     3d4:	e8bd4000 	ldmfd	sp!, {lr}

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
     3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMIA	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
     3e0:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
	STR	LR, [LR, #VIC_VectAddr]
     3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMIA	SP!, {PC}^		@ Reruen from the IRQ handler
     3ec:	e8fd8000 	ldm	sp!, {pc}^
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
@ FIQ Handler
@ FIQ routine is typically written in assembler
@-----------------------------------------------------------@

fiq_handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq
     3f4:	e24ee004 	sub	lr, lr, #4

	@ Put the FIQ service here

	MOVS	PC, LR			@ Return from FIQ
     3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
@-----------------------------------------------------------@
@ SWI Service (declared in interrupt.h)
@-----------------------------------------------------------@

swi_handler:
	MRS	IP, SPSR
     3fc:	e14fc000 	mrs	ip, SPSR
	TST	IP, #B_Thumb		@ Check caller's state, ARM or Thumb
     400:	e31c0020 	tst	ip, #32
	LDRNEH	IP, [LR, #-2]		@ Get swi instruction code (on Thumb state)
     404:	115ec0b2 	ldrhne	ip, [lr, #-2]
	LDREQ	IP, [LR, #-4]		@ Get swi instruction code (on ARM state)
     408:	051ec004 	ldreq	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
     40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #7			@ Check range
     410:	e35c0007 	cmp	ip, #7
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump to each service function when code is valid
     414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
     418:	e1b0f00e 	movs	pc, lr
     41c:	00000438 	.word	0x00000438
     420:	00000448 	.word	0x00000448
     424:	00000458 	.word	0x00000458
     428:	0000047c 	.word	0x0000047c
     42c:	000004b4 	.word	0x000004b4
     430:	000004d4 	.word	0x000004d4
     434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
	.word	sel_fiq		@ 4 Select FIQ interrupt
	.word	load_fiq	@ 5 Load FIQ shadow regs from memory
	.word	store_fiq	@ 6 Store FIQ shadow regs to memory

irq_disable:
	MRS	R0, SPSR
     438:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq | B_Fiq
     43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     440:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:

irq_enable:
	MRS	R0, SPSR
     448:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq | B_Fiq
     44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     450:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
	MVN	R0, #0				@ Disable all interrupts
     45c:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
     460:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
     464:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
     468:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
     46c:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
     470:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_VectAddr]		@ Issule EOI command
     474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
     478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:

reg_irq:
	CMP	R0, #32				@ Range check
     47c:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     480:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
     488:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
     490:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
     494:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     498:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
     49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
	LDR	R2, [IP, #VIC_IntSelect]	@ Clear corresponding bit in the VICIntSelect
     4a0:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
     4a4:	e1c22001 	bic	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
     4a8:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4ac:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:

sel_fiq:
	CMP	R0, #32				@ Range check
     4b4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     4b8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =LPC_BASE_VIC
     4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
	MOV	R1, #1				@ Set corresponding bit in the VICIntSelect
     4c0:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     4c4:	e1a01011 	lsl	r1, r1, r0
	STR	R1, [IP, #VIC_IntSelect]
     4c8:	e58c100c 	str	r1, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4cc:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:

load_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMIA	R0!, {R8-R12}			@ Load the memory to five shadow registers
     4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4dc:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:

store_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
	STMIA	R0!, {R8-R12}			@ Store five shadow registers to the memory
     4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4ec:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4f0:	e1b0f00e 	movs	pc, lr
	LDR	IP, =LPC_BASE_VIC
     4f4:	fffff000 	.word	0xfffff000
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     4f8:	fffff100 	.word	0xfffff100
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
@ void Copy_un2al (DWORD *dst, const BYTE *src, int count);
.global Copy_un2al
.type Copy_un2al, %function
.func Copy_un2al
Copy_un2al:
	STMFD	SP!, {R4-R8}
     500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
     504:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
     508:	0a000012 	beq	558 <lb_align>

	BIC	R1, #3
     50c:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
     510:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     514:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
     518:	e8b10080 	ldm	r1!, {r7}
1:	MOV	R3, R7
     51c:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
     524:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
     528:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
     52c:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
     530:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
     534:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
     538:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
     53c:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
     540:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
     544:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	1b
     54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
	LDMFD	SP!, {R4-R8}
     550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     554:	e12fff1e 	bx	lr

00000558 <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
     558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
     55c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
     564:	1afffffb 	bne	558 <lb_align>
	LDMFD	SP!, {R4-R8}
     568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
@ void Copy_al2un (BYTE *dst, const DWORD *src, int count);
.global Copy_al2un
.type Copy_al2un, %function
.func Copy_al2un
Copy_al2un:
	STMFD	SP!, {R4-R8}
     570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
     574:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
     578:	0a000021 	beq	604 <sb_align>

	MOV	IP, IP, LSL #3
     57c:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     580:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
     584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
1:	STRB	R4, [R0], #1
     588:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
     58c:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
     590:	e3100003 	tst	r0, #3
	BNE	1b
     594:	1afffffb 	bne	588 <Copy_al2un+0x18>
	ORR	R4, R4, R5, LSL IP
     598:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     59c:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5a4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5ac:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
     5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}

2:	MOV	R3, R7
     5b4:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
     5bc:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
     5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
     5c4:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
     5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     5cc:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5d4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5dc:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	2b
     5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>

	MOV	R7, R7, LSR R8
     5e8:	e1a07837 	lsr	r7, r7, r8
3:	SUBS	IP, IP, #8
     5ec:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
     5f0:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
     5f4:	e1a07427 	lsr	r7, r7, #8
	BNE	3b
     5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>

	LDMFD	SP!, {R4-R8}
     5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     600:	e12fff1e 	bx	lr

00000604 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
     604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
     608:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
     610:	1afffffb 	bne	604 <sb_align>
	LDMFD	SP!, {R4-R8}
     614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     618:	e12fff1e 	bx	lr

0000061c <gpio_init>:
uint16_t volts, curr;
uint16_t curr_array[CONV_NUMBER];
uint16_t volt_array[CONV_NUMBER];
void gpio_init (void)
{	
	SCS |= 1;
     61c:	2301      	movs	r3, #1
     61e:	4a0e      	ldr	r2, [pc, #56]	; (658 <gpio_init+0x3c>)
     620:	6811      	ldr	r1, [r2, #0]
     622:	430b      	orrs	r3, r1
     624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
     626:	2200      	movs	r2, #0
     628:	4b0c      	ldr	r3, [pc, #48]	; (65c <gpio_init+0x40>)
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2) | (1 << OP_AMP_PIN);
     62a:	490d      	ldr	r1, [pc, #52]	; (660 <gpio_init+0x44>)
	FIO2MASK = 0;
     62c:	601a      	str	r2, [r3, #0]
	FIO2DIR |= (1 << LED1) | (1 << LED2) | (1 << OP_AMP_PIN);
     62e:	4b0d      	ldr	r3, [pc, #52]	; (664 <gpio_init+0x48>)
     630:	6808      	ldr	r0, [r1, #0]
     632:	4303      	orrs	r3, r0
     634:	600b      	str	r3, [r1, #0]

	/* FIO1MASK = 0xFFFFFFFF & (0 << DAC) | (0 << ADC); */
	FIO1MASK = 0;
     636:	4b0c      	ldr	r3, [pc, #48]	; (668 <gpio_init+0x4c>)
     638:	601a      	str	r2, [r3, #0]
	FIO1DIR |=  (1 << DAC) | (1 << ADC) | (1 << ADC_DIN) | (1 << ADC_SCLK);	/*  Slave select pins  */
     63a:	4b0c      	ldr	r3, [pc, #48]	; (66c <gpio_init+0x50>)
     63c:	4a0c      	ldr	r2, [pc, #48]	; (670 <gpio_init+0x54>)
     63e:	6819      	ldr	r1, [r3, #0]
     640:	430a      	orrs	r2, r1
     642:	601a      	str	r2, [r3, #0]
	FIO1DIR &= ~(1 << ADC_DOUT);
     644:	490b      	ldr	r1, [pc, #44]	; (674 <gpio_init+0x58>)
     646:	681a      	ldr	r2, [r3, #0]
     648:	400a      	ands	r2, r1
     64a:	601a      	str	r2, [r3, #0]
	/* FIO1DIR |=  (1 << DAC) | (1 << ADC);[> 	Slave select pins  <] */
	FIO1SET |= (1 << ADC) | (1 << DAC) | (1 << ADC_SCLK);	 /*  Set hight level  */
     64c:	4a0a      	ldr	r2, [pc, #40]	; (678 <gpio_init+0x5c>)
     64e:	4b0b      	ldr	r3, [pc, #44]	; (67c <gpio_init+0x60>)
     650:	6811      	ldr	r1, [r2, #0]
     652:	430b      	orrs	r3, r1
     654:	6013      	str	r3, [r2, #0]
}
     656:	4770      	bx	lr
     658:	e01fc1a0 	.word	0xe01fc1a0
     65c:	3fffc050 	.word	0x3fffc050
     660:	3fffc040 	.word	0x3fffc040
     664:	00002003 	.word	0x00002003
     668:	3fffc030 	.word	0x3fffc030
     66c:	3fffc020 	.word	0x3fffc020
     670:	21140000 	.word	0x21140000
     674:	ff7fffff 	.word	0xff7fffff
     678:	3fffc038 	.word	0x3fffc038
     67c:	20140000 	.word	0x20140000

00000680 <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
     680:	2301      	movs	r3, #1
     682:	4083      	lsls	r3, r0
     684:	4a02      	ldr	r2, [pc, #8]	; (690 <led_set+0x10>)
     686:	6811      	ldr	r1, [r2, #0]
     688:	430b      	orrs	r3, r1
     68a:	6013      	str	r3, [r2, #0]
}
     68c:	4770      	bx	lr
     68e:	46c0      	nop			; (mov r8, r8)
     690:	3fffc058 	.word	0x3fffc058

00000694 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
     694:	2301      	movs	r3, #1
     696:	4083      	lsls	r3, r0
     698:	4a02      	ldr	r2, [pc, #8]	; (6a4 <led_clear+0x10>)
     69a:	6811      	ldr	r1, [r2, #0]
     69c:	430b      	orrs	r3, r1
     69e:	6013      	str	r3, [r2, #0]
}
     6a0:	4770      	bx	lr
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	3fffc05c 	.word	0x3fffc05c

000006a8 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
     6a8:	2801      	cmp	r0, #1
     6aa:	d00b      	beq.n	6c4 <gpio_set+0x1c>
     6ac:	2800      	cmp	r0, #0
     6ae:	d002      	beq.n	6b6 <gpio_set+0xe>
     6b0:	2802      	cmp	r0, #2
     6b2:	d00d      	beq.n	6d0 <gpio_set+0x28>
			FIO2SET |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6b4:	4770      	bx	lr
			FIO0SET |= (1 << pin);
     6b6:	4a07      	ldr	r2, [pc, #28]	; (6d4 <gpio_set+0x2c>)
			FIO2SET |= (1 << pin);
     6b8:	2301      	movs	r3, #1
     6ba:	408b      	lsls	r3, r1
     6bc:	6810      	ldr	r0, [r2, #0]
     6be:	4303      	orrs	r3, r0
     6c0:	6013      	str	r3, [r2, #0]
}
     6c2:	e7f7      	b.n	6b4 <gpio_set+0xc>
			FIO1SET |= (1 << pin);
     6c4:	4088      	lsls	r0, r1
     6c6:	4b04      	ldr	r3, [pc, #16]	; (6d8 <gpio_set+0x30>)
     6c8:	681a      	ldr	r2, [r3, #0]
     6ca:	4310      	orrs	r0, r2
     6cc:	6018      	str	r0, [r3, #0]
			break;
     6ce:	e7f1      	b.n	6b4 <gpio_set+0xc>
			FIO2SET |= (1 << pin);
     6d0:	4a02      	ldr	r2, [pc, #8]	; (6dc <gpio_set+0x34>)
     6d2:	e7f1      	b.n	6b8 <gpio_set+0x10>
     6d4:	3fffc018 	.word	0x3fffc018
     6d8:	3fffc038 	.word	0x3fffc038
     6dc:	3fffc058 	.word	0x3fffc058

000006e0 <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
     6e0:	2801      	cmp	r0, #1
     6e2:	d00b      	beq.n	6fc <gpio_clear+0x1c>
     6e4:	2800      	cmp	r0, #0
     6e6:	d002      	beq.n	6ee <gpio_clear+0xe>
     6e8:	2802      	cmp	r0, #2
     6ea:	d00d      	beq.n	708 <gpio_clear+0x28>
			FIO2CLR |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6ec:	4770      	bx	lr
			FIO0CLR |= (1 << pin);
     6ee:	4a07      	ldr	r2, [pc, #28]	; (70c <gpio_clear+0x2c>)
			FIO2CLR |= (1 << pin);
     6f0:	2301      	movs	r3, #1
     6f2:	408b      	lsls	r3, r1
     6f4:	6810      	ldr	r0, [r2, #0]
     6f6:	4303      	orrs	r3, r0
     6f8:	6013      	str	r3, [r2, #0]
}
     6fa:	e7f7      	b.n	6ec <gpio_clear+0xc>
			FIO1CLR |= (1 << pin);
     6fc:	4088      	lsls	r0, r1
     6fe:	4b04      	ldr	r3, [pc, #16]	; (710 <gpio_clear+0x30>)
     700:	681a      	ldr	r2, [r3, #0]
     702:	4310      	orrs	r0, r2
     704:	6018      	str	r0, [r3, #0]
			break;
     706:	e7f1      	b.n	6ec <gpio_clear+0xc>
			FIO2CLR |= (1 << pin);
     708:	4a02      	ldr	r2, [pc, #8]	; (714 <gpio_clear+0x34>)
     70a:	e7f1      	b.n	6f0 <gpio_clear+0x10>
     70c:	3fffc01c 	.word	0x3fffc01c
     710:	3fffc03c 	.word	0x3fffc03c
     714:	3fffc05c 	.word	0x3fffc05c

00000718 <pll_init>:
void pll_init(void)
{
	// 1. Init OSC
	SCS = (1 << 5);
     718:	2220      	movs	r2, #32
     71a:	4b1f      	ldr	r3, [pc, #124]	; (798 <pll_init+0x80>)
{
     71c:	b570      	push	{r4, r5, r6, lr}
	SCS = (1 << 5);
     71e:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
     720:	1892      	adds	r2, r2, r2
     722:	6819      	ldr	r1, [r3, #0]
     724:	4211      	tst	r1, r2
     726:	d0fc      	beq.n	722 <pll_init+0xa>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     728:	24aa      	movs	r4, #170	; 0xaa
	PLLFEED = 0x55;
     72a:	2055      	movs	r0, #85	; 0x55
	PLLCON = 1; 
     72c:	2101      	movs	r1, #1
	// 4. Disable PLL
	PLLCON = 0;
     72e:	2500      	movs	r5, #0
	PLLFEED = 0xAA;
     730:	4b1a      	ldr	r3, [pc, #104]	; (79c <pll_init+0x84>)
	PLLCON = 1; 
     732:	4a1b      	ldr	r2, [pc, #108]	; (7a0 <pll_init+0x88>)
     734:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     736:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     738:	6018      	str	r0, [r3, #0]
	PLLCON = 0;
     73a:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     73c:	4d19      	ldr	r5, [pc, #100]	; (7a4 <pll_init+0x8c>)
	PLLFEED = 0xAA;
     73e:	601c      	str	r4, [r3, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     740:	4e19      	ldr	r6, [pc, #100]	; (7a8 <pll_init+0x90>)
	PLLFEED = 0x55;
     742:	6018      	str	r0, [r3, #0]
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     744:	6029      	str	r1, [r5, #0]
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     746:	4d19      	ldr	r5, [pc, #100]	; (7ac <pll_init+0x94>)
     748:	602e      	str	r6, [r5, #0]
	PLLFEED = 0xAA;
     74a:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     74c:	6018      	str	r0, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
     74e:	6815      	ldr	r5, [r2, #0]
     750:	4329      	orrs	r1, r5
     752:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     754:	2180      	movs	r1, #128	; 0x80
	PLLFEED = 0xAA;
     756:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     758:	6018      	str	r0, [r3, #0]
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     75a:	4c15      	ldr	r4, [pc, #84]	; (7b0 <pll_init+0x98>)
     75c:	04c9      	lsls	r1, r1, #19
     75e:	6820      	ldr	r0, [r4, #0]
     760:	4208      	tst	r0, r1
     762:	d0fc      	beq.n	75e <pll_init+0x46>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
     764:	2003      	movs	r0, #3
     766:	4913      	ldr	r1, [pc, #76]	; (7b4 <pll_init+0x9c>)
     768:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
     76a:	2000      	movs	r0, #0
     76c:	4912      	ldr	r1, [pc, #72]	; (7b8 <pll_init+0xa0>)
     76e:	4c13      	ldr	r4, [pc, #76]	; (7bc <pll_init+0xa4>)
     770:	6008      	str	r0, [r1, #0]
     772:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
     774:	3004      	adds	r0, #4
     776:	6008      	str	r0, [r1, #0]

	// 10. Connect the PLL
	PLLCON |= 1 << 1;
     778:	2102      	movs	r1, #2
     77a:	6810      	ldr	r0, [r2, #0]
     77c:	4301      	orrs	r1, r0
     77e:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     780:	22aa      	movs	r2, #170	; 0xaa
     782:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
     784:	3a55      	subs	r2, #85	; 0x55
     786:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
     788:	f000 f844 	bl	814 <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
     78c:	f000 f840 	bl	810 <IrqEnable>

}
     790:	bc70      	pop	{r4, r5, r6}
     792:	bc01      	pop	{r0}
     794:	4700      	bx	r0
     796:	46c0      	nop			; (mov r8, r8)
     798:	e01fc1a0 	.word	0xe01fc1a0
     79c:	e01fc08c 	.word	0xe01fc08c
     7a0:	e01fc080 	.word	0xe01fc080
     7a4:	e01fc10c 	.word	0xe01fc10c
     7a8:	00010017 	.word	0x00010017
     7ac:	e01fc084 	.word	0xe01fc084
     7b0:	e01fc088 	.word	0xe01fc088
     7b4:	e01fc104 	.word	0xe01fc104
     7b8:	e01fc1ac 	.word	0xe01fc1ac
     7bc:	e01fc1a8 	.word	0xe01fc1a8

000007c0 <main>:


int main (void)
{
     7c0:	b510      	push	{r4, lr}
	uart0_init();	
	/* SPI0_init(); */
	timer0_init();
	gpio_init();
	adc_init();
	FIO1CLR |= 1 << DAC;
     7c2:	2480      	movs	r4, #128	; 0x80
	pll_init();
     7c4:	f7ff ffa8 	bl	718 <pll_init>
	uart0_init();	
     7c8:	f000 f8b0 	bl	92c <uart0_init>
	timer0_init();
     7cc:	f000 fcbe 	bl	114c <timer0_init>
	gpio_init();
     7d0:	f7ff ff24 	bl	61c <gpio_init>
	adc_init();
     7d4:	f000 fbbb 	bl	f4e <adc_init>
	FIO1CLR |= 1 << DAC;
     7d8:	4a08      	ldr	r2, [pc, #32]	; (7fc <main+0x3c>)
     7da:	6813      	ldr	r3, [r2, #0]
     7dc:	05a4      	lsls	r4, r4, #22
     7de:	4323      	orrs	r3, r4
     7e0:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((0x1000 | 1382), DAC);
     7e2:	211d      	movs	r1, #29
     7e4:	4806      	ldr	r0, [pc, #24]	; (800 <USR_Stack_Size>)
     7e6:	f000 fb5d 	bl	ea4 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     7ea:	4b06      	ldr	r3, [pc, #24]	; (804 <USR_Stack_Size+0x4>)
     7ec:	681a      	ldr	r2, [r3, #0]
     7ee:	4314      	orrs	r4, r2
     7f0:	601c      	str	r4, [r3, #0]
	UART0_send("\nLPC initialized\n", 17);
     7f2:	2111      	movs	r1, #17
     7f4:	4804      	ldr	r0, [pc, #16]	; (808 <USR_Stack_Size+0x8>)
     7f6:	f000 f911 	bl	a1c <UART0_send>
     7fa:	e7fe      	b.n	7fa <main+0x3a>
     7fc:	3fffc03c 	.word	0x3fffc03c
     800:	00001566 	.word	0x00001566
     804:	3fffc038 	.word	0x3fffc038
     808:	00003281 	.word	0x00003281

0000080c <IrqDisable>:


/* Disable/Enable Irq */
void IrqDisable (void)
{
	asm ("swi 0\n");
     80c:	df00      	svc	0
}
     80e:	4770      	bx	lr

00000810 <IrqEnable>:

void IrqEnable (void)
{
	asm ("swi 1\n");
     810:	df01      	svc	1
}
     812:	4770      	bx	lr

00000814 <ClearVector>:


/* Unregister all ISRs */
void ClearVector (void)
{
	asm ("swi 2\n");
     814:	df02      	svc	2
}
     816:	4770      	bx	lr

00000818 <RegisterIrq>:
	int irq,
	void(*isr)(void),
	int pri
)
{
	asm (
     818:	df03      	svc	3
	"@ MOV R0, %0\n"
	"@ MOV R1, %1\n"
	"@ MOV R2, %2\n"
	"swi 3\n" : : "r" (irq), "r" (isr), "r" (pri)
	);
}
     81a:	4770      	bx	lr

0000081c <SelectFiq>:
/* Switch an interrtupt source as FIQ */
void SelectFiq (
	int irq
)
{
	asm (
     81c:	df04      	svc	4
	"@ MOV R0, %0\n"
	"swi 4\n" : : "r" (irq)
	);
}
     81e:	4770      	bx	lr

00000820 <LoadFiqRegs>:
/* Load shadow regs R8-R12 from memory */
void LoadFiqRegs (
	long *regs
)
{
	asm (
     820:	df05      	svc	5
	"@ MOV R0, %0\n"
	"swi 5\n" : : "r" (regs)
	);
}
     822:	4770      	bx	lr

00000824 <StoreFiqRegs>:
/* Store shadow regs R8-R12 to memory */
void StoreFiqRegs (
	long *regs
)
{
	asm (
     824:	df06      	svc	6
	"@ MOV R0, %0\n"
	"swi 6\n" : : "r" (regs)
	);
}
     826:	4770      	bx	lr

00000828 <Isr_UART0>:
{

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
     828:	4b14      	ldr	r3, [pc, #80]	; (87c <Isr_UART0+0x54>)
     82a:	681a      	ldr	r2, [r3, #0]
     82c:	4b14      	ldr	r3, [pc, #80]	; (880 <Isr_UART0+0x58>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     82e:	681b      	ldr	r3, [r3, #0]
     830:	061b      	lsls	r3, r3, #24
{
     832:	b570      	push	{r4, r5, r6, lr}
		d = U0RBR;
     834:	0e1b      	lsrs	r3, r3, #24
	if(iir & 1 != 0)
     836:	07d2      	lsls	r2, r2, #31
     838:	d515      	bpl.n	866 <Isr_UART0+0x3e>
     83a:	4c12      	ldr	r4, [pc, #72]	; (884 <Isr_UART0+0x5c>)
     83c:	4812      	ldr	r0, [pc, #72]	; (888 <Isr_UART0+0x60>)
		if (d == '\n')
     83e:	2b0a      	cmp	r3, #10
     840:	d10d      	bne.n	85e <Isr_UART0+0x36>
		{
			resiever[rec_len++] = 0;	/* Make null-terminated string */
     842:	2500      	movs	r5, #0
     844:	7823      	ldrb	r3, [r4, #0]
     846:	1c5a      	adds	r2, r3, #1
     848:	7022      	strb	r2, [r4, #0]
     84a:	54c5      	strb	r5, [r0, r3]
			process_command(resiever);
     84c:	f000 f9a2 	bl	b94 <process_command>
			rec_len = 0;
     850:	7025      	strb	r5, [r4, #0]
	}else if (d == 'O')
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);

	}
	VICVectAddr = 0;
     852:	2200      	movs	r2, #0
     854:	4b0d      	ldr	r3, [pc, #52]	; (88c <Isr_UART0+0x64>)
     856:	601a      	str	r2, [r3, #0]

}
     858:	bc70      	pop	{r4, r5, r6}
     85a:	bc01      	pop	{r0}
     85c:	4700      	bx	r0
			resiever[rec_len++] = d;
     85e:	7822      	ldrb	r2, [r4, #0]
     860:	1c51      	adds	r1, r2, #1
     862:	7021      	strb	r1, [r4, #0]
     864:	5483      	strb	r3, [r0, r2]
	if (d == 'L')
     866:	2b4c      	cmp	r3, #76	; 0x4c
     868:	d103      	bne.n	872 <Isr_UART0+0x4a>
		FIO2SET = (1 << LED1) | (1 << LED2);
     86a:	2203      	movs	r2, #3
     86c:	4b08      	ldr	r3, [pc, #32]	; (890 <Isr_UART0+0x68>)
		FIO2CLR = (1 << LED1) | (1 << LED2);
     86e:	601a      	str	r2, [r3, #0]
     870:	e7ef      	b.n	852 <Isr_UART0+0x2a>
	}else if (d == 'O')
     872:	2b4f      	cmp	r3, #79	; 0x4f
     874:	d1ed      	bne.n	852 <Isr_UART0+0x2a>
		FIO2CLR = (1 << LED1) | (1 << LED2);
     876:	2203      	movs	r2, #3
     878:	4b06      	ldr	r3, [pc, #24]	; (894 <Isr_UART0+0x6c>)
     87a:	e7f8      	b.n	86e <Isr_UART0+0x46>
     87c:	e000c014 	.word	0xe000c014
     880:	e000c000 	.word	0xe000c000
     884:	400005a2 	.word	0x400005a2
     888:	40000790 	.word	0x40000790
     88c:	ffffff00 	.word	0xffffff00
     890:	3fffc058 	.word	0x3fffc058
     894:	3fffc05c 	.word	0x3fffc05c

00000898 <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
     898:	4b01      	ldr	r3, [pc, #4]	; (8a0 <uart0_test+0x8>)
     89a:	88d8      	ldrh	r0, [r3, #6]
}
     89c:	4770      	bx	lr
     89e:	46c0      	nop			; (mov r8, r8)
     8a0:	400005a2 	.word	0x400005a2

000008a4 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
     8a4:	4b0b      	ldr	r3, [pc, #44]	; (8d4 <uart0_getc+0x30>)
     8a6:	3302      	adds	r3, #2
     8a8:	889a      	ldrh	r2, [r3, #4]
     8aa:	2a00      	cmp	r2, #0
     8ac:	d0fc      	beq.n	8a8 <uart0_getc+0x4>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
     8ae:	881a      	ldrh	r2, [r3, #0]
	d = RxBuff0.buff[i++];
     8b0:	1899      	adds	r1, r3, r2
     8b2:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
     8b4:	217f      	movs	r1, #127	; 0x7f
	d = RxBuff0.buff[i++];
     8b6:	3201      	adds	r2, #1
	RxBuff0.ri = i % UART0_RXB;
     8b8:	400a      	ands	r2, r1
     8ba:	801a      	strh	r2, [r3, #0]
	U0IER = 0;		/* Disable interrupts */
     8bc:	2200      	movs	r2, #0
     8be:	4906      	ldr	r1, [pc, #24]	; (8d8 <uart0_getc+0x34>)
     8c0:	600a      	str	r2, [r1, #0]
	RxBuff0.ct--;
     8c2:	889a      	ldrh	r2, [r3, #4]
     8c4:	3a01      	subs	r2, #1
     8c6:	0412      	lsls	r2, r2, #16
     8c8:	0c12      	lsrs	r2, r2, #16
     8ca:	809a      	strh	r2, [r3, #4]
	U0IER = 0x07;	/* Reenable interrupt */
     8cc:	2307      	movs	r3, #7
     8ce:	600b      	str	r3, [r1, #0]

	return d;
}
     8d0:	4770      	bx	lr
     8d2:	46c0      	nop			; (mov r8, r8)
     8d4:	400005a2 	.word	0x400005a2
     8d8:	e000c004 	.word	0xe000c004

000008dc <uart0_putc>:


void uart0_putc (uint8_t d)
{
     8dc:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
     8de:	4b10      	ldr	r3, [pc, #64]	; (920 <uart0_putc+0x44>)
     8e0:	899a      	ldrh	r2, [r3, #12]
     8e2:	2a7f      	cmp	r2, #127	; 0x7f
     8e4:	d8fc      	bhi.n	8e0 <uart0_putc+0x4>

	U0IER = 0x05;		/* Disable Tx Interrupt */
     8e6:	2205      	movs	r2, #5
     8e8:	490e      	ldr	r1, [pc, #56]	; (924 <uart0_putc+0x48>)
     8ea:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
     8ec:	89da      	ldrh	r2, [r3, #14]
     8ee:	2a00      	cmp	r2, #0
     8f0:	d010      	beq.n	914 <uart0_putc+0x38>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
     8f2:	895a      	ldrh	r2, [r3, #10]
		TxBuff0.buff[i++] = d;
     8f4:	189c      	adds	r4, r3, r2
     8f6:	7420      	strb	r0, [r4, #16]
		TxBuff0.wi = i % UART0_TXB;
     8f8:	207f      	movs	r0, #127	; 0x7f
		TxBuff0.buff[i++] = d;
     8fa:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
     8fc:	4002      	ands	r2, r0
     8fe:	815a      	strh	r2, [r3, #10]
		TxBuff0.ct++;
     900:	899a      	ldrh	r2, [r3, #12]
     902:	3201      	adds	r2, #1
     904:	0412      	lsls	r2, r2, #16
     906:	0c12      	lsrs	r2, r2, #16
     908:	819a      	strh	r2, [r3, #12]
	} else {
		U0THR = d;		/* Trigger Tx sequense */
		TxBuff0.act = 1;
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
     90a:	2307      	movs	r3, #7
     90c:	600b      	str	r3, [r1, #0]
}
     90e:	bc10      	pop	{r4}
     910:	bc01      	pop	{r0}
     912:	4700      	bx	r0
		U0THR = d;		/* Trigger Tx sequense */
     914:	4a04      	ldr	r2, [pc, #16]	; (928 <uart0_putc+0x4c>)
     916:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
     918:	2201      	movs	r2, #1
     91a:	81da      	strh	r2, [r3, #14]
     91c:	e7f5      	b.n	90a <uart0_putc+0x2e>
     91e:	46c0      	nop			; (mov r8, r8)
     920:	40000622 	.word	0x40000622
     924:	e000c004 	.word	0xe000c004
     928:	e000c000 	.word	0xe000c000

0000092c <uart0_init>:


void uart0_init (void)
{
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     92c:	2308      	movs	r3, #8
     92e:	4a16      	ldr	r2, [pc, #88]	; (988 <uart0_init+0x5c>)
     930:	6811      	ldr	r1, [r2, #0]
     932:	430b      	orrs	r3, r1
{
     934:	b510      	push	{r4, lr}
	PCONP |= 1 << PCUART0; // Питание на UART0
     936:	6013      	str	r3, [r2, #0]
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     938:	2283      	movs	r2, #131	; 0x83
     93a:	4b14      	ldr	r3, [pc, #80]	; (98c <uart0_init+0x60>)
     93c:	6819      	ldr	r1, [r3, #0]
     93e:	430a      	orrs	r2, r1
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     940:	21c1      	movs	r1, #193	; 0xc1
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     942:	601a      	str	r2, [r3, #0]
	U0FDR = 0xC1;
     944:	4a12      	ldr	r2, [pc, #72]	; (990 <uart0_init+0x64>)
     946:	6011      	str	r1, [r2, #0]
	U0DLL = 0x09;
     948:	4a12      	ldr	r2, [pc, #72]	; (994 <uart0_init+0x68>)
     94a:	39b8      	subs	r1, #184	; 0xb8
     94c:	6011      	str	r1, [r2, #0]
	U0DLM = 0x00;
     94e:	2100      	movs	r1, #0
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     950:	2080      	movs	r0, #128	; 0x80
	U0DLM = 0x00;
     952:	4a11      	ldr	r2, [pc, #68]	; (998 <uart0_init+0x6c>)
     954:	6011      	str	r1, [r2, #0]
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     956:	6819      	ldr	r1, [r3, #0]
     958:	4381      	bics	r1, r0
     95a:	6019      	str	r1, [r3, #0]

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     95c:	2307      	movs	r3, #7
     95e:	490f      	ldr	r1, [pc, #60]	; (99c <uart0_init+0x70>)
     960:	6808      	ldr	r0, [r1, #0]
     962:	4303      	orrs	r3, r0
     964:	600b      	str	r3, [r1, #0]

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     966:	2350      	movs	r3, #80	; 0x50
     968:	490d      	ldr	r1, [pc, #52]	; (9a0 <uart0_init+0x74>)
     96a:	6808      	ldr	r0, [r1, #0]
     96c:	4303      	orrs	r3, r0
     96e:	600b      	str	r3, [r1, #0]

	//Interrupts
	/* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
	/* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
	U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
     970:	2301      	movs	r3, #1
     972:	6811      	ldr	r1, [r2, #0]
     974:	430b      	orrs	r3, r1
     976:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
     978:	490a      	ldr	r1, [pc, #40]	; (9a4 <uart0_init+0x78>)
     97a:	220f      	movs	r2, #15
     97c:	2006      	movs	r0, #6
     97e:	f7ff ff4b 	bl	818 <RegisterIrq>

}
     982:	bc10      	pop	{r4}
     984:	bc01      	pop	{r0}
     986:	4700      	bx	r0
     988:	e01fc0c4 	.word	0xe01fc0c4
     98c:	e000c00c 	.word	0xe000c00c
     990:	e000c028 	.word	0xe000c028
     994:	e000c000 	.word	0xe000c000
     998:	e000c004 	.word	0xe000c004
     99c:	e000c008 	.word	0xe000c008
     9a0:	e002c000 	.word	0xe002c000
     9a4:	00000829 	.word	0x00000829

000009a8 <hex_to_int>:


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     9a8:	230a      	movs	r3, #10
	uint16_t first = c / 16 - 3;
     9aa:	0902      	lsrs	r2, r0, #4
     9ac:	3a03      	subs	r2, #3
	uint16_t result = first*10 + second;
     9ae:	4353      	muls	r3, r2
	uint16_t second = c % 16;
     9b0:	220f      	movs	r2, #15
     9b2:	4010      	ands	r0, r2
	uint16_t result = first*10 + second;
     9b4:	18c0      	adds	r0, r0, r3
     9b6:	0400      	lsls	r0, r0, #16
     9b8:	0c00      	lsrs	r0, r0, #16
	if(result > 9) result--;
     9ba:	2809      	cmp	r0, #9
     9bc:	d902      	bls.n	9c4 <hex_to_int+0x1c>
     9be:	3801      	subs	r0, #1
     9c0:	0400      	lsls	r0, r0, #16
     9c2:	0c00      	lsrs	r0, r0, #16
	return result;
}
     9c4:	4770      	bx	lr

000009c6 <hex_to_ascii>:

uint16_t hex_to_ascii(uint16_t c){
     9c6:	b570      	push	{r4, r5, r6, lr}
     9c8:	0004      	movs	r4, r0
	uint16_t high = hex_to_int(c >> 8) * 16;
     9ca:	0a00      	lsrs	r0, r0, #8
     9cc:	f7ff ffec 	bl	9a8 <hex_to_int>
     9d0:	0005      	movs	r5, r0
	uint16_t low = hex_to_int(c & 0xFF);
     9d2:	0620      	lsls	r0, r4, #24
     9d4:	0e00      	lsrs	r0, r0, #24
     9d6:	f7ff ffe7 	bl	9a8 <hex_to_int>
	uint16_t high = hex_to_int(c >> 8) * 16;
     9da:	012d      	lsls	r5, r5, #4
	return high+low;
     9dc:	1940      	adds	r0, r0, r5
     9de:	0400      	lsls	r0, r0, #16
     9e0:	0c00      	lsrs	r0, r0, #16
}
     9e2:	bc70      	pop	{r4, r5, r6}
     9e4:	bc02      	pop	{r1}
     9e6:	4708      	bx	r1

000009e8 <UART0_send_byte>:
#endif
}
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9e8:	2101      	movs	r1, #1
     9ea:	4b09      	ldr	r3, [pc, #36]	; (a10 <Stack_Size>)
     9ec:	681a      	ldr	r2, [r3, #0]
     9ee:	438a      	bics	r2, r1
{
     9f0:	b510      	push	{r4, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9f2:	601a      	str	r2, [r3, #0]
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9f4:	2220      	movs	r2, #32
     9f6:	4c07      	ldr	r4, [pc, #28]	; (a14 <Stack_Size+0x4>)
     9f8:	6821      	ldr	r1, [r4, #0]
     9fa:	4211      	tst	r1, r2
     9fc:	d0fc      	beq.n	9f8 <UART0_send_byte+0x10>
	U0THR = byte;
     9fe:	4a06      	ldr	r2, [pc, #24]	; (a18 <Stack_Size+0x8>)
     a00:	6010      	str	r0, [r2, #0]
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a02:	2201      	movs	r2, #1
     a04:	6819      	ldr	r1, [r3, #0]
     a06:	430a      	orrs	r2, r1
     a08:	601a      	str	r2, [r3, #0]
}
     a0a:	bc10      	pop	{r4}
     a0c:	bc01      	pop	{r0}
     a0e:	4700      	bx	r0
     a10:	e000c004 	.word	0xe000c004
     a14:	e000c014 	.word	0xe000c014
     a18:	e000c000 	.word	0xe000c000

00000a1c <UART0_send>:
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
     a1c:	b570      	push	{r4, r5, r6, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     a1e:	2401      	movs	r4, #1
     a20:	4b0d      	ldr	r3, [pc, #52]	; (a58 <UART0_send+0x3c>)
     a22:	681a      	ldr	r2, [r3, #0]
     a24:	43a2      	bics	r2, r4
     a26:	601a      	str	r2, [r3, #0]

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a28:	4d0c      	ldr	r5, [pc, #48]	; (a5c <UART0_send+0x40>)
     a2a:	001a      	movs	r2, r3
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a2c:	4b0c      	ldr	r3, [pc, #48]	; (a60 <UART0_send+0x44>)
     a2e:	341f      	adds	r4, #31
	while ( Length != 0 )
     a30:	2900      	cmp	r1, #0
     a32:	d106      	bne.n	a42 <UART0_send+0x26>
		BufferPtr++;
		Length--;
	}
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a34:	2301      	movs	r3, #1
     a36:	6811      	ldr	r1, [r2, #0]
     a38:	430b      	orrs	r3, r1
     a3a:	6013      	str	r3, [r2, #0]

	return;
}
     a3c:	bc70      	pop	{r4, r5, r6}
     a3e:	bc01      	pop	{r0}
     a40:	4700      	bx	r0
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a42:	681e      	ldr	r6, [r3, #0]
     a44:	4226      	tst	r6, r4
     a46:	d0fc      	beq.n	a42 <UART0_send+0x26>
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a48:	7806      	ldrb	r6, [r0, #0]
		Length--;
     a4a:	3901      	subs	r1, #1
     a4c:	0409      	lsls	r1, r1, #16
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a4e:	602e      	str	r6, [r5, #0]
		BufferPtr++;
     a50:	3001      	adds	r0, #1
		Length--;
     a52:	0c09      	lsrs	r1, r1, #16
     a54:	e7ec      	b.n	a30 <UART0_send+0x14>
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	e000c004 	.word	0xe000c004
     a5c:	e000c000 	.word	0xe000c000
     a60:	e000c014 	.word	0xe000c014

00000a64 <atof>:
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
	int c;
	uint8_t neg_flag = 0;
     a64:	2200      	movs	r2, #0
{
     a66:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((c = *s) == '-')
     a68:	7803      	ldrb	r3, [r0, #0]
{
     a6a:	b085      	sub	sp, #20
	uint8_t neg_flag = 0;
     a6c:	9202      	str	r2, [sp, #8]
	if ((c = *s) == '-')
     a6e:	2b2d      	cmp	r3, #45	; 0x2d
     a70:	d102      	bne.n	a78 <atof+0x14>
	{
		neg_flag = 1;
     a72:	3b2c      	subs	r3, #44	; 0x2c
     a74:	9302      	str	r3, [sp, #8]
		*s++;
     a76:	3001      	adds	r0, #1
	uint8_t neg_flag = 0;
     a78:	2700      	movs	r7, #0
     a7a:	003e      	movs	r6, r7
	}
	while ((c = *s++) != '\0' && isdigit(c)) {
     a7c:	1c43      	adds	r3, r0, #1
     a7e:	9301      	str	r3, [sp, #4]
     a80:	7803      	ldrb	r3, [r0, #0]
     a82:	2b00      	cmp	r3, #0
     a84:	d029      	beq.n	ada <atof+0x76>
     a86:	001c      	movs	r4, r3
     a88:	3c30      	subs	r4, #48	; 0x30
     a8a:	2c09      	cmp	r4, #9
     a8c:	d931      	bls.n	af2 <atof+0x8e>
		a = a*10.0 + (c - '0');
	}
	if (c == '.') {
     a8e:	2b2e      	cmp	r3, #46	; 0x2e
     a90:	d155      	bne.n	b3e <atof+0xda>
	while ((c = *s++) != '\0' && isdigit(c)) {
     a92:	9b01      	ldr	r3, [sp, #4]
     a94:	9a01      	ldr	r2, [sp, #4]
     a96:	1ad4      	subs	r4, r2, r3
		while ((c = *s++) != '\0' && isdigit(c)) {
     a98:	781a      	ldrb	r2, [r3, #0]
     a9a:	1c5d      	adds	r5, r3, #1
     a9c:	1e13      	subs	r3, r2, #0
     a9e:	d01a      	beq.n	ad6 <atof+0x72>
     aa0:	3a30      	subs	r2, #48	; 0x30
     aa2:	9203      	str	r2, [sp, #12]
     aa4:	2a09      	cmp	r2, #9
     aa6:	d937      	bls.n	b18 <atof+0xb4>
			a = a*10.0 + (c - '0');
			e = e-1;
		}
	}
	if (c == 'e' || c == 'E') {
     aa8:	2b65      	cmp	r3, #101	; 0x65
     aaa:	d001      	beq.n	ab0 <atof+0x4c>
     aac:	2b45      	cmp	r3, #69	; 0x45
     aae:	d112      	bne.n	ad6 <atof+0x72>
		int sign = 1;
		int i = 0;
		c = *s++;
     ab0:	782b      	ldrb	r3, [r5, #0]
		if (c == '+')
     ab2:	2b2b      	cmp	r3, #43	; 0x2b
     ab4:	d146      	bne.n	b44 <atof+0xe0>
			c = *s++;
     ab6:	786b      	ldrb	r3, [r5, #1]
     ab8:	1caa      	adds	r2, r5, #2
		int sign = 1;
     aba:	2001      	movs	r0, #1
     abc:	2100      	movs	r1, #0
		else if (c == '-') {
			c = *s++;
			sign = -1;
		}
		while (isdigit(c)) {
			i = i*10 + (c - '0');
     abe:	250a      	movs	r5, #10
		while (isdigit(c)) {
     ac0:	3b30      	subs	r3, #48	; 0x30
     ac2:	2b09      	cmp	r3, #9
     ac4:	d947      	bls.n	b56 <atof+0xf2>
			c = *s++;
		}
		e += i*sign;
     ac6:	4341      	muls	r1, r0
     ac8:	190c      	adds	r4, r1, r4
     aca:	0025      	movs	r5, r4
	}
	while (e > 0) {
     acc:	2d00      	cmp	r5, #0
     ace:	dc47      	bgt.n	b60 <atof+0xfc>
     ad0:	43e3      	mvns	r3, r4
     ad2:	17db      	asrs	r3, r3, #31
     ad4:	439c      	bics	r4, r3
		a *= 10.0;
		e--;
	}
	while (e < 0) {
     ad6:	2c00      	cmp	r4, #0
     ad8:	d14c      	bne.n	b74 <atof+0x110>
		a *= 0.1;
		e++;
	}
	if (neg_flag == 1)
     ada:	9b02      	ldr	r3, [sp, #8]
     adc:	2b01      	cmp	r3, #1
     ade:	d102      	bne.n	ae6 <atof+0x82>
		a = a*(-1);
     ae0:	2380      	movs	r3, #128	; 0x80
     ae2:	061b      	lsls	r3, r3, #24
     ae4:	18f6      	adds	r6, r6, r3
	return a;
}
     ae6:	0038      	movs	r0, r7
     ae8:	0031      	movs	r1, r6
     aea:	b005      	add	sp, #20
     aec:	bcf0      	pop	{r4, r5, r6, r7}
     aee:	bc04      	pop	{r2}
     af0:	4710      	bx	r2
		a = a*10.0 + (c - '0');
     af2:	2200      	movs	r2, #0
     af4:	4b24      	ldr	r3, [pc, #144]	; (b88 <atof+0x124>)
     af6:	0038      	movs	r0, r7
     af8:	0031      	movs	r1, r6
     afa:	f002 fb0d 	bl	3118 <____aeabi_dmul_from_thumb>
     afe:	0006      	movs	r6, r0
     b00:	000f      	movs	r7, r1
     b02:	0020      	movs	r0, r4
     b04:	f002 fb32 	bl	316c <____aeabi_i2d_from_thumb>
     b08:	0032      	movs	r2, r6
     b0a:	003b      	movs	r3, r7
     b0c:	f002 fb14 	bl	3138 <____aeabi_dadd_from_thumb>
     b10:	0007      	movs	r7, r0
     b12:	000e      	movs	r6, r1
	while ((c = *s++) != '\0' && isdigit(c)) {
     b14:	9801      	ldr	r0, [sp, #4]
     b16:	e7b1      	b.n	a7c <atof+0x18>
			a = a*10.0 + (c - '0');
     b18:	2200      	movs	r2, #0
     b1a:	4b1b      	ldr	r3, [pc, #108]	; (b88 <atof+0x124>)
     b1c:	0038      	movs	r0, r7
     b1e:	0031      	movs	r1, r6
     b20:	f002 fafa 	bl	3118 <____aeabi_dmul_from_thumb>
     b24:	0006      	movs	r6, r0
     b26:	000f      	movs	r7, r1
     b28:	9803      	ldr	r0, [sp, #12]
     b2a:	f002 fb1f 	bl	316c <____aeabi_i2d_from_thumb>
     b2e:	003b      	movs	r3, r7
     b30:	0032      	movs	r2, r6
     b32:	f002 fb01 	bl	3138 <____aeabi_dadd_from_thumb>
		while ((c = *s++) != '\0' && isdigit(c)) {
     b36:	002b      	movs	r3, r5
			a = a*10.0 + (c - '0');
     b38:	0007      	movs	r7, r0
     b3a:	000e      	movs	r6, r1
     b3c:	e7aa      	b.n	a94 <atof+0x30>
	while ((c = *s++) != '\0' && isdigit(c)) {
     b3e:	9d01      	ldr	r5, [sp, #4]
	int e = 0;
     b40:	2400      	movs	r4, #0
     b42:	e7b1      	b.n	aa8 <atof+0x44>
		else if (c == '-') {
     b44:	2b2d      	cmp	r3, #45	; 0x2d
     b46:	d001      	beq.n	b4c <atof+0xe8>
		c = *s++;
     b48:	1c6a      	adds	r2, r5, #1
     b4a:	e7b6      	b.n	aba <atof+0x56>
			sign = -1;
     b4c:	2001      	movs	r0, #1
			c = *s++;
     b4e:	1caa      	adds	r2, r5, #2
     b50:	786b      	ldrb	r3, [r5, #1]
			sign = -1;
     b52:	4240      	negs	r0, r0
     b54:	e7b2      	b.n	abc <atof+0x58>
			i = i*10 + (c - '0');
     b56:	4369      	muls	r1, r5
     b58:	1859      	adds	r1, r3, r1
			c = *s++;
     b5a:	7813      	ldrb	r3, [r2, #0]
     b5c:	3201      	adds	r2, #1
     b5e:	e7af      	b.n	ac0 <atof+0x5c>
		a *= 10.0;
     b60:	0038      	movs	r0, r7
     b62:	0031      	movs	r1, r6
     b64:	2200      	movs	r2, #0
     b66:	4b08      	ldr	r3, [pc, #32]	; (b88 <atof+0x124>)
     b68:	f002 fad6 	bl	3118 <____aeabi_dmul_from_thumb>
		e--;
     b6c:	3d01      	subs	r5, #1
		a *= 10.0;
     b6e:	0007      	movs	r7, r0
     b70:	000e      	movs	r6, r1
     b72:	e7ab      	b.n	acc <atof+0x68>
		a *= 0.1;
     b74:	0038      	movs	r0, r7
     b76:	0031      	movs	r1, r6
     b78:	4a04      	ldr	r2, [pc, #16]	; (b8c <atof+0x128>)
     b7a:	4b05      	ldr	r3, [pc, #20]	; (b90 <atof+0x12c>)
     b7c:	f002 facc 	bl	3118 <____aeabi_dmul_from_thumb>
		e++;
     b80:	3401      	adds	r4, #1
		a *= 0.1;
     b82:	0007      	movs	r7, r0
     b84:	000e      	movs	r6, r1
     b86:	e7a6      	b.n	ad6 <atof+0x72>
     b88:	40240000 	.word	0x40240000
     b8c:	9999999a 	.word	0x9999999a
     b90:	3fb99999 	.word	0x3fb99999

00000b94 <process_command>:
{
     b94:	b570      	push	{r4, r5, r6, lr}
		if(strncmp(cmd, "Z?", 2) == 0)
     b96:	2202      	movs	r2, #2
     b98:	495d      	ldr	r1, [pc, #372]	; (d10 <process_command+0x17c>)
{
     b9a:	0005      	movs	r5, r0
		if(strncmp(cmd, "Z?", 2) == 0)
     b9c:	f000 fdf8 	bl	1790 <strncmp>
     ba0:	2800      	cmp	r0, #0
     ba2:	d106      	bne.n	bb2 <process_command+0x1e>
		UART0_send("z\n", 2);
     ba4:	485b      	ldr	r0, [pc, #364]	; (d14 <process_command+0x180>)
     ba6:	2102      	movs	r1, #2
     ba8:	f7ff ff38 	bl	a1c <UART0_send>
		led_set(LED2);
     bac:	2001      	movs	r0, #1
     bae:	f7ff fd67 	bl	680 <led_set>
	if(strncmp(cmd, "start", 5) == 0)
     bb2:	2205      	movs	r2, #5
     bb4:	4958      	ldr	r1, [pc, #352]	; (d18 <process_command+0x184>)
     bb6:	0028      	movs	r0, r5
     bb8:	f000 fdea 	bl	1790 <strncmp>
     bbc:	1e04      	subs	r4, r0, #0
     bbe:	d111      	bne.n	be4 <process_command+0x50>
		UART0_send("\nStarted\n", 9);
     bc0:	2109      	movs	r1, #9
     bc2:	4856      	ldr	r0, [pc, #344]	; (d1c <process_command+0x188>)
     bc4:	f7ff ff2a 	bl	a1c <UART0_send>
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     bc8:	210d      	movs	r1, #13
     bca:	2002      	movs	r0, #2
     bcc:	f7ff fd6c 	bl	6a8 <gpio_set>
		led_set(LED1);
     bd0:	0020      	movs	r0, r4
     bd2:	f7ff fd55 	bl	680 <led_set>
		read_curr();
     bd6:	f000 fa77 	bl	10c8 <read_curr>
		timer0_set_freq(1);
     bda:	2001      	movs	r0, #1
     bdc:	f000 fa94 	bl	1108 <timer0_set_freq>
		timer0_start();
     be0:	f000 fae6 	bl	11b0 <timer0_start>
	if(strncmp(cmd, "stop", 4) == 0)
     be4:	2204      	movs	r2, #4
     be6:	494e      	ldr	r1, [pc, #312]	; (d20 <process_command+0x18c>)
     be8:	0028      	movs	r0, r5
     bea:	f000 fdd1 	bl	1790 <strncmp>
     bee:	1e04      	subs	r4, r0, #0
     bf0:	d118      	bne.n	c24 <process_command+0x90>
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     bf2:	210d      	movs	r1, #13
     bf4:	2002      	movs	r0, #2
     bf6:	f7ff fd73 	bl	6e0 <gpio_clear>
		led_clear(LED1);
     bfa:	0020      	movs	r0, r4
		FIO1CLR |= 1 << DAC;
     bfc:	2480      	movs	r4, #128	; 0x80
		led_clear(LED1);
     bfe:	f7ff fd49 	bl	694 <led_clear>
		timer0_stop();
     c02:	f000 fae5 	bl	11d0 <timer0_stop>
		FIO1CLR |= 1 << DAC;
     c06:	4a47      	ldr	r2, [pc, #284]	; (d24 <process_command+0x190>)
     c08:	6813      	ldr	r3, [r2, #0]
     c0a:	05a4      	lsls	r4, r4, #22
     c0c:	4323      	orrs	r3, r4
     c0e:	6013      	str	r3, [r2, #0]
		SPI0_send_2_byte((0x1000 | 1382), DAC);
     c10:	211d      	movs	r1, #29
     c12:	4845      	ldr	r0, [pc, #276]	; (d28 <process_command+0x194>)
     c14:	f000 f946 	bl	ea4 <SPI0_send_2_byte>
		FIO1SET |= 1 << DAC;
     c18:	4b44      	ldr	r3, [pc, #272]	; (d2c <process_command+0x198>)
     c1a:	681a      	ldr	r2, [r3, #0]
     c1c:	4314      	orrs	r4, r2
     c1e:	601c      	str	r4, [r3, #0]
		adc_init();
     c20:	f000 f995 	bl	f4e <adc_init>
	if(strncmp(cmd, "set", 3) == 0)
     c24:	2203      	movs	r2, #3
     c26:	4942      	ldr	r1, [pc, #264]	; (d30 <process_command+0x19c>)
     c28:	0028      	movs	r0, r5
     c2a:	f000 fdb1 	bl	1790 <strncmp>
     c2e:	2800      	cmp	r0, #0
     c30:	d116      	bne.n	c60 <process_command+0xcc>
		if (native == 1)
     c32:	4b40      	ldr	r3, [pc, #256]	; (d34 <process_command+0x1a0>)
     c34:	781b      	ldrb	r3, [r3, #0]
		lenth = strlen(cmd+4)-1;
     c36:	1d28      	adds	r0, r5, #4
		if (native == 1)
     c38:	2b01      	cmp	r3, #1
     c3a:	d14f      	bne.n	cdc <process_command+0x148>
		num = atoi(cmd + 4);
     c3c:	f000 fcce 	bl	15dc <atoi>
		num = (int)input;
     c40:	0404      	lsls	r4, r0, #16
     c42:	0c24      	lsrs	r4, r4, #16
		UART0_send("\nOK\n", 4);
     c44:	2104      	movs	r1, #4
     c46:	483c      	ldr	r0, [pc, #240]	; (d38 <process_command+0x1a4>)
     c48:	f7ff fee8 	bl	a1c <UART0_send>
		UART0_send_byte(num >> 8);
     c4c:	0a20      	lsrs	r0, r4, #8
     c4e:	f7ff fecb 	bl	9e8 <UART0_send_byte>
		UART0_send_byte(num);
     c52:	0620      	lsls	r0, r4, #24
     c54:	0e00      	lsrs	r0, r0, #24
     c56:	f7ff fec7 	bl	9e8 <UART0_send_byte>
		dac_set_voltage(num);
     c5a:	0020      	movs	r0, r4
     c5c:	f000 f9ce 	bl	ffc <dac_set_voltage>
	if(strncmp(cmd, "get", 3) == 0)
     c60:	2203      	movs	r2, #3
     c62:	4936      	ldr	r1, [pc, #216]	; (d3c <process_command+0x1a8>)
     c64:	0028      	movs	r0, r5
     c66:	f000 fd93 	bl	1790 <strncmp>
     c6a:	2800      	cmp	r0, #0
     c6c:	d115      	bne.n	c9a <process_command+0x106>
		if (native == 1)
     c6e:	4b31      	ldr	r3, [pc, #196]	; (d34 <process_command+0x1a0>)
     c70:	781b      	ldrb	r3, [r3, #0]
		lenth = strlen(cmd+4)-1;
     c72:	1d28      	adds	r0, r5, #4
		if (native == 1)
     c74:	2b01      	cmp	r3, #1
     c76:	d13e      	bne.n	cf6 <process_command+0x162>
		num = atoi(cmd + 4);
     c78:	f000 fcb0 	bl	15dc <atoi>
		num = (int)input;
     c7c:	0400      	lsls	r0, r0, #16
     c7e:	0c00      	lsrs	r0, r0, #16
		dac_set_voltage(num);
     c80:	f000 f9bc 	bl	ffc <dac_set_voltage>
		getflag = 1;
     c84:	2201      	movs	r2, #1
     c86:	4b2e      	ldr	r3, [pc, #184]	; (d40 <process_command+0x1ac>)
		timer0_set_freq(100);
     c88:	2064      	movs	r0, #100	; 0x64
		getflag = 1;
     c8a:	701a      	strb	r2, [r3, #0]
		timer0_set_freq(100);
     c8c:	f000 fa3c 	bl	1108 <timer0_set_freq>
		led_set(LED1);
     c90:	2000      	movs	r0, #0
     c92:	f7ff fcf5 	bl	680 <led_set>
		timer0_start();
     c96:	f000 fa8b 	bl	11b0 <timer0_start>
	if(strncmp(cmd, "help", 4) == 0)
     c9a:	2204      	movs	r2, #4
     c9c:	4929      	ldr	r1, [pc, #164]	; (d44 <process_command+0x1b0>)
     c9e:	0028      	movs	r0, r5
     ca0:	f000 fd76 	bl	1790 <strncmp>
     ca4:	2800      	cmp	r0, #0
     ca6:	d103      	bne.n	cb0 <process_command+0x11c>
		UART0_send(help_msg, sizeof(help_msg)-1);
     ca8:	21d0      	movs	r1, #208	; 0xd0
     caa:	4827      	ldr	r0, [pc, #156]	; (d48 <process_command+0x1b4>)
     cac:	f7ff feb6 	bl	a1c <UART0_send>
	if (strncmp(cmd, "native", 6) == 0)
     cb0:	2206      	movs	r2, #6
     cb2:	4926      	ldr	r1, [pc, #152]	; (d4c <process_command+0x1b8>)
     cb4:	0028      	movs	r0, r5
     cb6:	f000 fd6b 	bl	1790 <strncmp>
     cba:	2800      	cmp	r0, #0
     cbc:	d102      	bne.n	cc4 <process_command+0x130>
		native = 1;
     cbe:	2201      	movs	r2, #1
     cc0:	4b1c      	ldr	r3, [pc, #112]	; (d34 <process_command+0x1a0>)
     cc2:	701a      	strb	r2, [r3, #0]
	if (strncmp(cmd, "ascii", 5) == 0)
     cc4:	2205      	movs	r2, #5
     cc6:	4922      	ldr	r1, [pc, #136]	; (d50 <process_command+0x1bc>)
     cc8:	0028      	movs	r0, r5
     cca:	f000 fd61 	bl	1790 <strncmp>
     cce:	2800      	cmp	r0, #0
     cd0:	d101      	bne.n	cd6 <process_command+0x142>
		native = 0;
     cd2:	4b18      	ldr	r3, [pc, #96]	; (d34 <process_command+0x1a0>)
     cd4:	7018      	strb	r0, [r3, #0]
}
     cd6:	bc70      	pop	{r4, r5, r6}
     cd8:	bc01      	pop	{r0}
     cda:	4700      	bx	r0
		input = atof(cmd + 4);
     cdc:	f7ff fec2 	bl	a64 <atof>
		input = input/0.01846 + 1382;	
     ce0:	4a1c      	ldr	r2, [pc, #112]	; (d54 <process_command+0x1c0>)
     ce2:	4b1d      	ldr	r3, [pc, #116]	; (d58 <process_command+0x1c4>)
     ce4:	f002 fa36 	bl	3154 <____aeabi_ddiv_from_thumb>
     ce8:	2200      	movs	r2, #0
     cea:	4b1c      	ldr	r3, [pc, #112]	; (d5c <process_command+0x1c8>)
     cec:	f002 fa24 	bl	3138 <____aeabi_dadd_from_thumb>
		num = (int)input;
     cf0:	f002 fa06 	bl	3100 <____aeabi_d2iz_from_thumb>
     cf4:	e7a4      	b.n	c40 <process_command+0xac>
		input = atof(cmd + 4);
     cf6:	f7ff feb5 	bl	a64 <atof>
		input = input/0.01846 + 1382;	
     cfa:	4a16      	ldr	r2, [pc, #88]	; (d54 <process_command+0x1c0>)
     cfc:	4b16      	ldr	r3, [pc, #88]	; (d58 <process_command+0x1c4>)
     cfe:	f002 fa29 	bl	3154 <____aeabi_ddiv_from_thumb>
     d02:	2200      	movs	r2, #0
     d04:	4b15      	ldr	r3, [pc, #84]	; (d5c <process_command+0x1c8>)
     d06:	f002 fa17 	bl	3138 <____aeabi_dadd_from_thumb>
		num = (int)input;
     d0a:	f002 f9f9 	bl	3100 <____aeabi_d2iz_from_thumb>
     d0e:	e7b5      	b.n	c7c <process_command+0xe8>
     d10:	00003293 	.word	0x00003293
     d14:	000032ce 	.word	0x000032ce
     d18:	00003296 	.word	0x00003296
     d1c:	0000329c 	.word	0x0000329c
     d20:	000032a6 	.word	0x000032a6
     d24:	3fffc03c 	.word	0x3fffc03c
     d28:	00001566 	.word	0x00001566
     d2c:	3fffc038 	.word	0x3fffc038
     d30:	000032ab 	.word	0x000032ab
     d34:	400005a1 	.word	0x400005a1
     d38:	000032af 	.word	0x000032af
     d3c:	000032b4 	.word	0x000032b4
     d40:	400005a0 	.word	0x400005a0
     d44:	000032b8 	.word	0x000032b8
     d48:	000031b0 	.word	0x000031b0
     d4c:	000032bd 	.word	0x000032bd
     d50:	000032c4 	.word	0x000032c4
     d54:	a122fad7 	.word	0xa122fad7
     d58:	3f92e72d 	.word	0x3f92e72d
     d5c:	40959800 	.word	0x40959800

00000d60 <SPI_ADC_data_transfers_16bit>:
	}
	return dat;
}

uint16_t SPI_ADC_data_transfers_16bit (uint16_t data)
{
     d60:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
     d62:	2780      	movs	r7, #128	; 0x80
{
     d64:	210f      	movs	r1, #15
	uint16_t dat = 0;
     d66:	2200      	movs	r2, #0
		if(data & (1 << (i - 1)))
     d68:	2401      	movs	r4, #1
			FIO1PIN |= 1 << ADC_DIN;
     d6a:	047f      	lsls	r7, r7, #17
		FIO1PIN &= ~(1 << ADC_SCLK);
     d6c:	4b14      	ldr	r3, [pc, #80]	; (dc0 <SPI_ADC_data_transfers_16bit+0x60>)
     d6e:	4e15      	ldr	r6, [pc, #84]	; (dc4 <SPI_ADC_data_transfers_16bit+0x64>)
     d70:	681d      	ldr	r5, [r3, #0]
     d72:	4035      	ands	r5, r6
     d74:	601d      	str	r5, [r3, #0]
		if(data & (1 << (i - 1)))
     d76:	0005      	movs	r5, r0
     d78:	410d      	asrs	r5, r1
     d7a:	4225      	tst	r5, r4
     d7c:	d017      	beq.n	dae <SPI_ADC_data_transfers_16bit+0x4e>
			FIO1PIN |= 1 << ADC_DIN;
     d7e:	681d      	ldr	r5, [r3, #0]
     d80:	433d      	orrs	r5, r7
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     d82:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     d84:	601d      	str	r5, [r3, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     d86:	681d      	ldr	r5, [r3, #0]
     d88:	0376      	lsls	r6, r6, #13
     d8a:	4335      	orrs	r5, r6
     d8c:	601d      	str	r5, [r3, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     d8e:	2580      	movs	r5, #128	; 0x80
     d90:	681b      	ldr	r3, [r3, #0]
     d92:	042d      	lsls	r5, r5, #16
     d94:	422b      	tst	r3, r5
     d96:	d00e      	beq.n	db6 <SPI_ADC_data_transfers_16bit+0x56>
			dat |= 1 << (i - 1);
     d98:	0023      	movs	r3, r4
     d9a:	408b      	lsls	r3, r1
     d9c:	431a      	orrs	r2, r3
     d9e:	0412      	lsls	r2, r2, #16
     da0:	0c12      	lsrs	r2, r2, #16
	for(i = 16;  i > 0 ; i--)
     da2:	3901      	subs	r1, #1
     da4:	d2e2      	bcs.n	d6c <SPI_ADC_data_transfers_16bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     da6:	0010      	movs	r0, r2
     da8:	bcf0      	pop	{r4, r5, r6, r7}
     daa:	bc02      	pop	{r1}
     dac:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     dae:	681d      	ldr	r5, [r3, #0]
     db0:	4e05      	ldr	r6, [pc, #20]	; (dc8 <SPI_ADC_data_transfers_16bit+0x68>)
     db2:	4035      	ands	r5, r6
     db4:	e7e5      	b.n	d82 <SPI_ADC_data_transfers_16bit+0x22>
			dat &= ~(1 << (i - 1));
     db6:	0023      	movs	r3, r4
     db8:	408b      	lsls	r3, r1
     dba:	439a      	bics	r2, r3
     dbc:	e7f1      	b.n	da2 <SPI_ADC_data_transfers_16bit+0x42>
     dbe:	46c0      	nop			; (mov r8, r8)
     dc0:	3fffc034 	.word	0x3fffc034
     dc4:	ffefffff 	.word	0xffefffff
     dc8:	feffffff 	.word	0xfeffffff

00000dcc <SPI_ADC_data_transfers_8bit>:

unsigned char SPI_ADC_data_transfers_8bit (unsigned char data)
{
     dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		if(data & (1 << (i - 1)))
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
     dce:	2780      	movs	r7, #128	; 0x80
{
     dd0:	2107      	movs	r1, #7
	unsigned char dat = 0;
     dd2:	2200      	movs	r2, #0
		if(data & (1 << (i - 1)))
     dd4:	2401      	movs	r4, #1
			FIO1PIN |= 1 << ADC_DIN;
     dd6:	047f      	lsls	r7, r7, #17
		FIO1PIN &= ~(1 << ADC_SCLK);
     dd8:	4b14      	ldr	r3, [pc, #80]	; (e2c <SPI_ADC_data_transfers_8bit+0x60>)
     dda:	4e15      	ldr	r6, [pc, #84]	; (e30 <SPI_ADC_data_transfers_8bit+0x64>)
     ddc:	681d      	ldr	r5, [r3, #0]
     dde:	4035      	ands	r5, r6
     de0:	601d      	str	r5, [r3, #0]
		if(data & (1 << (i - 1)))
     de2:	0005      	movs	r5, r0
     de4:	410d      	asrs	r5, r1
     de6:	4225      	tst	r5, r4
     de8:	d017      	beq.n	e1a <SPI_ADC_data_transfers_8bit+0x4e>
			FIO1PIN |= 1 << ADC_DIN;
     dea:	681d      	ldr	r5, [r3, #0]
     dec:	433d      	orrs	r5, r7
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     dee:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     df0:	601d      	str	r5, [r3, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     df2:	681d      	ldr	r5, [r3, #0]
     df4:	0376      	lsls	r6, r6, #13
     df6:	4335      	orrs	r5, r6
     df8:	601d      	str	r5, [r3, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     dfa:	2580      	movs	r5, #128	; 0x80
     dfc:	681b      	ldr	r3, [r3, #0]
     dfe:	042d      	lsls	r5, r5, #16
     e00:	422b      	tst	r3, r5
     e02:	d00e      	beq.n	e22 <SPI_ADC_data_transfers_8bit+0x56>
			dat |= 1 << (i - 1);
     e04:	0023      	movs	r3, r4
     e06:	408b      	lsls	r3, r1
     e08:	431a      	orrs	r2, r3
     e0a:	0612      	lsls	r2, r2, #24
     e0c:	0e12      	lsrs	r2, r2, #24
	for(i = 8;  i > 0 ; i--)
     e0e:	3901      	subs	r1, #1
     e10:	d2e2      	bcs.n	dd8 <SPI_ADC_data_transfers_8bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     e12:	0010      	movs	r0, r2
     e14:	bcf0      	pop	{r4, r5, r6, r7}
     e16:	bc02      	pop	{r1}
     e18:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     e1a:	681d      	ldr	r5, [r3, #0]
     e1c:	4e05      	ldr	r6, [pc, #20]	; (e34 <SPI_ADC_data_transfers_8bit+0x68>)
     e1e:	4035      	ands	r5, r6
     e20:	e7e5      	b.n	dee <SPI_ADC_data_transfers_8bit+0x22>
			dat &= ~(1 << (i - 1));
     e22:	0023      	movs	r3, r4
     e24:	408b      	lsls	r3, r1
     e26:	439a      	bics	r2, r3
     e28:	e7f1      	b.n	e0e <SPI_ADC_data_transfers_8bit+0x42>
     e2a:	46c0      	nop			; (mov r8, r8)
     e2c:	3fffc034 	.word	0x3fffc034
     e30:	ffefffff 	.word	0xffefffff
     e34:	feffffff 	.word	0xfeffffff

00000e38 <SPI_DAC_data_transfers_16bit>:
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     e38:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t dat = 0;
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
     e3a:	2480      	movs	r4, #128	; 0x80
{
     e3c:	210f      	movs	r1, #15
	uint16_t dat = 0;
     e3e:	2200      	movs	r2, #0
     e40:	2601      	movs	r6, #1
	mask = 0x8000;
     e42:	0224      	lsls	r4, r4, #8
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
     e44:	2780      	movs	r7, #128	; 0x80
     e46:	4b14      	ldr	r3, [pc, #80]	; (e98 <SPI_DAC_data_transfers_16bit+0x60>)
     e48:	681d      	ldr	r5, [r3, #0]
     e4a:	037f      	lsls	r7, r7, #13
     e4c:	433d      	orrs	r5, r7
     e4e:	601d      	str	r5, [r3, #0]
		if(data & mask)
			FIO1PIN |= 1 << ADC_DIN;
     e50:	681d      	ldr	r5, [r3, #0]
		if(data & mask)
     e52:	4204      	tst	r4, r0
     e54:	d018      	beq.n	e88 <SPI_DAC_data_transfers_16bit+0x50>
			FIO1PIN |= 1 << ADC_DIN;
     e56:	2780      	movs	r7, #128	; 0x80
     e58:	047f      	lsls	r7, r7, #17
     e5a:	433d      	orrs	r5, r7
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     e5c:	601d      	str	r5, [r3, #0]

		//SCLK
		mask = mask >> 1;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     e5e:	4f0f      	ldr	r7, [pc, #60]	; (e9c <SPI_DAC_data_transfers_16bit+0x64>)
     e60:	681d      	ldr	r5, [r3, #0]
     e62:	403d      	ands	r5, r7
     e64:	601d      	str	r5, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e66:	2580      	movs	r5, #128	; 0x80
     e68:	681b      	ldr	r3, [r3, #0]
     e6a:	042d      	lsls	r5, r5, #16
		mask = mask >> 1;
     e6c:	0864      	lsrs	r4, r4, #1
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e6e:	422b      	tst	r3, r5
     e70:	d00d      	beq.n	e8e <SPI_DAC_data_transfers_16bit+0x56>
			dat |= 1 << (i - 1);
     e72:	0033      	movs	r3, r6
     e74:	408b      	lsls	r3, r1
     e76:	431a      	orrs	r2, r3
     e78:	0412      	lsls	r2, r2, #16
     e7a:	0c12      	lsrs	r2, r2, #16
	for(i = 16;  i > 0 ; i--)
     e7c:	3901      	subs	r1, #1
     e7e:	d2e1      	bcs.n	e44 <SPI_DAC_data_transfers_16bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     e80:	0010      	movs	r0, r2
     e82:	bcf0      	pop	{r4, r5, r6, r7}
     e84:	bc02      	pop	{r1}
     e86:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     e88:	4f05      	ldr	r7, [pc, #20]	; (ea0 <SPI_DAC_data_transfers_16bit+0x68>)
     e8a:	403d      	ands	r5, r7
     e8c:	e7e6      	b.n	e5c <SPI_DAC_data_transfers_16bit+0x24>
			dat &= ~(1 << (i - 1));
     e8e:	0033      	movs	r3, r6
     e90:	408b      	lsls	r3, r1
     e92:	439a      	bics	r2, r3
     e94:	e7f2      	b.n	e7c <SPI_DAC_data_transfers_16bit+0x44>
     e96:	46c0      	nop			; (mov r8, r8)
     e98:	3fffc034 	.word	0x3fffc034
     e9c:	ffefffff 	.word	0xffefffff
     ea0:	feffffff 	.word	0xfeffffff

00000ea4 <SPI0_send_2_byte>:
{
     ea4:	b510      	push	{r4, lr}
	if (slave == ADC )
     ea6:	2912      	cmp	r1, #18
     ea8:	d106      	bne.n	eb8 <SPI0_send_2_byte+0x14>
	dat = SPI_ADC_data_transfers_16bit(data);
     eaa:	f7ff ff59 	bl	d60 <SPI_ADC_data_transfers_16bit>
	dat = SPI_DAC_data_transfers_16bit(data);
     eae:	0003      	movs	r3, r0
}
     eb0:	0018      	movs	r0, r3
     eb2:	bc10      	pop	{r4}
     eb4:	bc02      	pop	{r1}
     eb6:	4708      	bx	r1
	}else if (slave == DAC)
     eb8:	291d      	cmp	r1, #29
     eba:	d1f9      	bne.n	eb0 <SPI0_send_2_byte+0xc>
	dat = SPI_DAC_data_transfers_16bit(data);
     ebc:	f7ff ffbc 	bl	e38 <SPI_DAC_data_transfers_16bit>
     ec0:	e7f5      	b.n	eae <SPI0_send_2_byte+0xa>

00000ec2 <SPI_DAC_data_transfers_8bit>:

unsigned char SPI_DAC_data_transfers_8bit (unsigned char data)
{
     ec2:	b5f0      	push	{r4, r5, r6, r7, lr}

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
     ec4:	2780      	movs	r7, #128	; 0x80
{
     ec6:	2107      	movs	r1, #7
	unsigned char dat = 0;
     ec8:	2200      	movs	r2, #0
		if(data & (1 << (i - 1)))
     eca:	2401      	movs	r4, #1
			FIO1PIN |= 1 << ADC_DIN;
     ecc:	047f      	lsls	r7, r7, #17
		if(data & (1 << (i - 1)))
     ece:	0005      	movs	r5, r0
     ed0:	410d      	asrs	r5, r1
     ed2:	4b13      	ldr	r3, [pc, #76]	; (f20 <VIC_VectAddr+0x20>)
     ed4:	4225      	tst	r5, r4
     ed6:	d01b      	beq.n	f10 <VIC_VectAddr+0x10>
			FIO1PIN |= 1 << ADC_DIN;
     ed8:	681d      	ldr	r5, [r3, #0]
     eda:	433d      	orrs	r5, r7
		else
			FIO1PIN &= ~(1 << ADC_DIN);

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     edc:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     ede:	601d      	str	r5, [r3, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     ee0:	681d      	ldr	r5, [r3, #0]
     ee2:	0376      	lsls	r6, r6, #13
     ee4:	4335      	orrs	r5, r6
     ee6:	601d      	str	r5, [r3, #0]
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     ee8:	4e0e      	ldr	r6, [pc, #56]	; (f24 <VIC_VectAddr+0x24>)
     eea:	681d      	ldr	r5, [r3, #0]
     eec:	4035      	ands	r5, r6
     eee:	601d      	str	r5, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     ef0:	2580      	movs	r5, #128	; 0x80
     ef2:	681b      	ldr	r3, [r3, #0]
     ef4:	042d      	lsls	r5, r5, #16
     ef6:	422b      	tst	r3, r5
     ef8:	d00e      	beq.n	f18 <VIC_VectAddr+0x18>
			dat |= 1 << (i - 1);
     efa:	0023      	movs	r3, r4
     efc:	408b      	lsls	r3, r1
     efe:	431a      	orrs	r2, r3
     f00:	0612      	lsls	r2, r2, #24
     f02:	0e12      	lsrs	r2, r2, #24
	for(i = 8;  i > 0 ; i--)
     f04:	3901      	subs	r1, #1
     f06:	d2e2      	bcs.n	ece <SPI_DAC_data_transfers_8bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     f08:	0010      	movs	r0, r2
     f0a:	bcf0      	pop	{r4, r5, r6, r7}
     f0c:	bc02      	pop	{r1}
     f0e:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     f10:	681d      	ldr	r5, [r3, #0]
     f12:	4e05      	ldr	r6, [pc, #20]	; (f28 <VIC_VectAddr+0x28>)
     f14:	4035      	ands	r5, r6
     f16:	e7e1      	b.n	edc <SPI_DAC_data_transfers_8bit+0x1a>
			dat &= ~(1 << (i - 1));
     f18:	0023      	movs	r3, r4
     f1a:	408b      	lsls	r3, r1
     f1c:	439a      	bics	r2, r3
     f1e:	e7f1      	b.n	f04 <VIC_VectAddr+0x4>
     f20:	3fffc034 	.word	0x3fffc034
     f24:	ffefffff 	.word	0xffefffff
     f28:	feffffff 	.word	0xfeffffff

00000f2c <SPI0_send_1_byte>:
{
     f2c:	b510      	push	{r4, lr}
	if (slave == ADC )
     f2e:	2912      	cmp	r1, #18
     f30:	d106      	bne.n	f40 <SPI0_send_1_byte+0x14>
	dat = SPI_ADC_data_transfers_8bit(data);
     f32:	f7ff ff4b 	bl	dcc <SPI_ADC_data_transfers_8bit>
	dat = SPI_DAC_data_transfers_8bit(data);
     f36:	0003      	movs	r3, r0
}
     f38:	0018      	movs	r0, r3
     f3a:	bc10      	pop	{r4}
     f3c:	bc02      	pop	{r1}
     f3e:	4708      	bx	r1
	uint8_t dat = 0;
     f40:	2300      	movs	r3, #0
	}else if (slave == DAC)
     f42:	291d      	cmp	r1, #29
     f44:	d1f8      	bne.n	f38 <SPI0_send_1_byte+0xc>
	dat = SPI_DAC_data_transfers_8bit(data);
     f46:	f7ff ffbc 	bl	ec2 <SPI_DAC_data_transfers_8bit>
     f4a:	e7f4      	b.n	f36 <SPI0_send_1_byte+0xa>

00000f4c <Delay>:
{
	int i, j;
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
     f4c:	4770      	bx	lr

00000f4e <adc_init>:
void adc_init(void)
{
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
     f4e:	2380      	movs	r3, #128	; 0x80
{
     f50:	b570      	push	{r4, r5, r6, lr}
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
     f52:	2680      	movs	r6, #128	; 0x80
	FIO1PIN |= (1 << ADC_SCLK);
     f54:	4a24      	ldr	r2, [pc, #144]	; (fe8 <adc_init+0x9a>)
     f56:	6811      	ldr	r1, [r2, #0]
     f58:	035b      	lsls	r3, r3, #13
     f5a:	430b      	orrs	r3, r1
     f5c:	6013      	str	r3, [r2, #0]
	FIO1CLR |= 1 << ADC;
     f5e:	4d23      	ldr	r5, [pc, #140]	; (fec <adc_init+0x9e>)
     f60:	682b      	ldr	r3, [r5, #0]
     f62:	02f6      	lsls	r6, r6, #11
     f64:	4333      	orrs	r3, r6
     f66:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(0xFF, ADC);
     f68:	2112      	movs	r1, #18
     f6a:	20ff      	movs	r0, #255	; 0xff
     f6c:	f7ff ffde 	bl	f2c <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f70:	2112      	movs	r1, #18
     f72:	20ff      	movs	r0, #255	; 0xff
	SPI0_send_1_byte(0xFF, ADC);
	SPI0_send_1_byte(0xFF, ADC);
	FIO1SET |= 1 << ADC;
     f74:	4c1e      	ldr	r4, [pc, #120]	; (ff0 <adc_init+0xa2>)
	SPI0_send_1_byte(0xFF, ADC);
     f76:	f7ff ffd9 	bl	f2c <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f7a:	2112      	movs	r1, #18
     f7c:	20ff      	movs	r0, #255	; 0xff
     f7e:	f7ff ffd5 	bl	f2c <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f82:	2112      	movs	r1, #18
     f84:	20ff      	movs	r0, #255	; 0xff
     f86:	f7ff ffd1 	bl	f2c <SPI0_send_1_byte>
	FIO1SET |= 1 << ADC;
     f8a:	6823      	ldr	r3, [r4, #0]
     f8c:	4333      	orrs	r3, r6
     f8e:	6023      	str	r3, [r4, #0]

	/* Delay because adc needs 500us after reset sequence */
	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     f90:	682b      	ldr	r3, [r5, #0]
     f92:	4333      	orrs	r3, r6
     f94:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     f96:	2112      	movs	r1, #18
     f98:	2010      	movs	r0, #16
     f9a:	f7ff ffc7 	bl	f2c <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
     f9e:	2112      	movs	r1, #18
     fa0:	4814      	ldr	r0, [pc, #80]	; (ff4 <adc_init+0xa6>)
     fa2:	f7ff ff7f 	bl	ea4 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     fa6:	6823      	ldr	r3, [r4, #0]
     fa8:	4333      	orrs	r3, r6
     faa:	6023      	str	r3, [r4, #0]

	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     fac:	682b      	ldr	r3, [r5, #0]
     fae:	4333      	orrs	r3, r6
     fb0:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     fb2:	2112      	movs	r1, #18
     fb4:	2008      	movs	r0, #8
     fb6:	f7ff ffb9 	bl	f2c <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
     fba:	2112      	movs	r1, #18
     fbc:	2001      	movs	r0, #1
     fbe:	f7ff ff71 	bl	ea4 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     fc2:	6823      	ldr	r3, [r4, #0]
     fc4:	431e      	orrs	r6, r3
     fc6:	6026      	str	r6, [r4, #0]

	FIO1CLR |= 1 << DAC;
     fc8:	2680      	movs	r6, #128	; 0x80
     fca:	682b      	ldr	r3, [r5, #0]
     fcc:	05b6      	lsls	r6, r6, #22
     fce:	4333      	orrs	r3, r6
     fd0:	602b      	str	r3, [r5, #0]
	SPI0_send_2_byte((0x1000 | 578), DAC);
     fd2:	211d      	movs	r1, #29
     fd4:	4808      	ldr	r0, [pc, #32]	; (ff8 <adc_init+0xaa>)
     fd6:	f7ff ff65 	bl	ea4 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     fda:	6823      	ldr	r3, [r4, #0]
     fdc:	431e      	orrs	r6, r3
     fde:	6026      	str	r6, [r4, #0]
//read_volt();
//read_curr();
	/* Switch on green led to indicate successful  initialization */
	//led_set(LED1);

}
     fe0:	bc70      	pop	{r4, r5, r6}
     fe2:	bc01      	pop	{r0}
     fe4:	4700      	bx	r0
     fe6:	46c0      	nop			; (mov r8, r8)
     fe8:	3fffc034 	.word	0x3fffc034
     fec:	3fffc03c 	.word	0x3fffc03c
     ff0:	3fffc038 	.word	0x3fffc038
     ff4:	00001001 	.word	0x00001001
     ff8:	00001242 	.word	0x00001242

00000ffc <dac_set_voltage>:
	/* SPI0_send_2_byte((voltage | DAC_LOAD_CMD)); */
	if (voltage > 4095)
		{
			voltage = 4095;
		}
	FIO1CLR |= 1 << DAC;
     ffc:	2380      	movs	r3, #128	; 0x80
     ffe:	4a0e      	ldr	r2, [pc, #56]	; (1038 <dac_set_voltage+0x3c>)
    1000:	6811      	ldr	r1, [r2, #0]
    1002:	059b      	lsls	r3, r3, #22
    1004:	430b      	orrs	r3, r1
{
    1006:	b510      	push	{r4, lr}
	FIO1CLR |= 1 << DAC;
    1008:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((0x1000 | voltage), DAC);
    100a:	4a0c      	ldr	r2, [pc, #48]	; (103c <dac_set_voltage+0x40>)
    100c:	1c03      	adds	r3, r0, #0
    100e:	4290      	cmp	r0, r2
    1010:	d900      	bls.n	1014 <dac_set_voltage+0x18>
    1012:	1c13      	adds	r3, r2, #0
    1014:	2080      	movs	r0, #128	; 0x80
    1016:	0140      	lsls	r0, r0, #5
    1018:	4318      	orrs	r0, r3
    101a:	0400      	lsls	r0, r0, #16
    101c:	211d      	movs	r1, #29
    101e:	0c00      	lsrs	r0, r0, #16
    1020:	f7ff ff40 	bl	ea4 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
    1024:	2380      	movs	r3, #128	; 0x80
    1026:	4a06      	ldr	r2, [pc, #24]	; (1040 <dac_set_voltage+0x44>)
    1028:	6811      	ldr	r1, [r2, #0]
    102a:	059b      	lsls	r3, r3, #22
    102c:	430b      	orrs	r3, r1
    102e:	6013      	str	r3, [r2, #0]
}
    1030:	bc10      	pop	{r4}
    1032:	bc01      	pop	{r0}
    1034:	4700      	bx	r0
    1036:	46c0      	nop			; (mov r8, r8)
    1038:	3fffc03c 	.word	0x3fffc03c
    103c:	00000fff 	.word	0x00000fff
    1040:	3fffc038 	.word	0x3fffc038

00001044 <adc_read_voltage>:

	return current;
}

uint16_t adc_read_voltage(void)
{
    1044:	b510      	push	{r4, lr}
//	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
//	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
//	FIO1SET |= 1 << ADC;
	for (voltage = 0; voltage < 200; voltage ++);

	FIO1CLR |= 1 << ADC;
    1046:	2480      	movs	r4, #128	; 0x80
    1048:	4a09      	ldr	r2, [pc, #36]	; (1070 <adc_read_voltage+0x2c>)
    104a:	6813      	ldr	r3, [r2, #0]
    104c:	02e4      	lsls	r4, r4, #11
    104e:	4323      	orrs	r3, r4
    1050:	6013      	str	r3, [r2, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
    1052:	2112      	movs	r1, #18
    1054:	2058      	movs	r0, #88	; 0x58
    1056:	f7ff ff69 	bl	f2c <SPI0_send_1_byte>
	voltage = SPI0_send_2_byte(0xFFFF, ADC);
    105a:	2112      	movs	r1, #18
    105c:	4805      	ldr	r0, [pc, #20]	; (1074 <adc_read_voltage+0x30>)
    105e:	f7ff ff21 	bl	ea4 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    1062:	4b05      	ldr	r3, [pc, #20]	; (1078 <adc_read_voltage+0x34>)
    1064:	681a      	ldr	r2, [r3, #0]
    1066:	4314      	orrs	r4, r2
    1068:	601c      	str	r4, [r3, #0]

	return voltage;

}
    106a:	bc10      	pop	{r4}
    106c:	bc02      	pop	{r1}
    106e:	4708      	bx	r1
    1070:	3fffc03c 	.word	0x3fffc03c
    1074:	0000ffff 	.word	0x0000ffff
    1078:	3fffc038 	.word	0x3fffc038

0000107c <adc_read_current>:
    107c:	b510      	push	{r4, lr}
    107e:	f7ff ffe1 	bl	1044 <adc_read_voltage>
    1082:	bc10      	pop	{r4}
    1084:	bc02      	pop	{r1}
    1086:	4708      	bx	r1

00001088 <read_volt>:
		}
	}
	VICVectAddr = 0;
}
uint16_t read_volt(void)
{
    1088:	b570      	push	{r4, r5, r6, lr}
		uint16_t v = adc_read_voltage();
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    108a:	2480      	movs	r4, #128	; 0x80
		uint16_t v = adc_read_voltage();
    108c:	f7ff ffda 	bl	1044 <adc_read_voltage>
		FIO1CLR |= 1 << ADC;
    1090:	4a0b      	ldr	r2, [pc, #44]	; (10c0 <read_volt+0x38>)
    1092:	6813      	ldr	r3, [r2, #0]
    1094:	02e4      	lsls	r4, r4, #11
    1096:	4323      	orrs	r3, r4
		uint16_t v = adc_read_voltage();
    1098:	0005      	movs	r5, r0
		FIO1CLR |= 1 << ADC;
    109a:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    109c:	2112      	movs	r1, #18
    109e:	2010      	movs	r0, #16
    10a0:	f7ff ff44 	bl	f2c <SPI0_send_1_byte>
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
    10a4:	2080      	movs	r0, #128	; 0x80
    10a6:	2112      	movs	r1, #18
    10a8:	0140      	lsls	r0, r0, #5
    10aa:	f7ff fefb 	bl	ea4 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    10ae:	4b05      	ldr	r3, [pc, #20]	; (10c4 <read_volt+0x3c>)
    10b0:	681a      	ldr	r2, [r3, #0]
    10b2:	4314      	orrs	r4, r2
		
		return v;
}
    10b4:	0028      	movs	r0, r5
		FIO1SET |= 1 << ADC;
    10b6:	601c      	str	r4, [r3, #0]
}
    10b8:	bc70      	pop	{r4, r5, r6}
    10ba:	bc02      	pop	{r1}
    10bc:	4708      	bx	r1
    10be:	46c0      	nop			; (mov r8, r8)
    10c0:	3fffc03c 	.word	0x3fffc03c
    10c4:	3fffc038 	.word	0x3fffc038

000010c8 <read_curr>:
uint16_t read_curr(void){
    10c8:	b570      	push	{r4, r5, r6, lr}
		
		uint16_t c = adc_read_current();
    10ca:	f7ff ffd7 	bl	107c <adc_read_current>
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    10ce:	2480      	movs	r4, #128	; 0x80
		uint16_t c = adc_read_current();
    10d0:	0005      	movs	r5, r0
		FIO1CLR |= 1 << ADC;
    10d2:	4a0a      	ldr	r2, [pc, #40]	; (10fc <read_curr+0x34>)
    10d4:	6813      	ldr	r3, [r2, #0]
    10d6:	02e4      	lsls	r4, r4, #11
    10d8:	4323      	orrs	r3, r4
    10da:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    10dc:	2112      	movs	r1, #18
    10de:	2010      	movs	r0, #16
    10e0:	f7ff ff24 	bl	f2c <SPI0_send_1_byte>
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
    10e4:	2112      	movs	r1, #18
    10e6:	4806      	ldr	r0, [pc, #24]	; (1100 <read_curr+0x38>)
    10e8:	f7ff fedc 	bl	ea4 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    10ec:	4b05      	ldr	r3, [pc, #20]	; (1104 <read_curr+0x3c>)
    10ee:	681a      	ldr	r2, [r3, #0]
    10f0:	4314      	orrs	r4, r2
		
		return c;
}
    10f2:	0028      	movs	r0, r5
		FIO1SET |= 1 << ADC;
    10f4:	601c      	str	r4, [r3, #0]
}
    10f6:	bc70      	pop	{r4, r5, r6}
    10f8:	bc02      	pop	{r1}
    10fa:	4708      	bx	r1
    10fc:	3fffc03c 	.word	0x3fffc03c
    1100:	00001001 	.word	0x00001001
    1104:	3fffc038 	.word	0x3fffc038

00001108 <timer0_set_freq>:
void timer0_set_freq(uint8_t hz){
	T0TCR = 0;	/* Disable tim0 */
    1108:	2200      	movs	r2, #0
    110a:	4b0b      	ldr	r3, [pc, #44]	; (1138 <timer0_set_freq+0x30>)
void timer0_set_freq(uint8_t hz){
    110c:	b570      	push	{r4, r5, r6, lr}
	T0TCR = 0;	/* Disable tim0 */
    110e:	601a      	str	r2, [r3, #0]
    1110:	4d0a      	ldr	r5, [pc, #40]	; (113c <timer0_set_freq+0x34>)
    1112:	4c0b      	ldr	r4, [pc, #44]	; (1140 <timer0_set_freq+0x38>)
	if (hz == 100)
    1114:	2864      	cmp	r0, #100	; 0x64
    1116:	d107      	bne.n	1128 <timer0_set_freq+0x20>
	{
		T0PR = 250;	/* Prescaler */
    1118:	23fa      	movs	r3, #250	; 0xfa
    111a:	602b      	str	r3, [r5, #0]
		T0MR0 = 720;	/* Top value (100 Hz) */
    111c:	33d7      	adds	r3, #215	; 0xd7
    111e:	33ff      	adds	r3, #255	; 0xff
	}else{
		//T0MR0 = 72000;	/* Top value (40 Hz) */
		UART0_send("100hz\n", 6);
		T0PR = 250;	/* Prescaler */
		T0MR0 = 36000;	/* Top value (1 Hz) */
    1120:	6023      	str	r3, [r4, #0]
	}
}
    1122:	bc70      	pop	{r4, r5, r6}
    1124:	bc01      	pop	{r0}
    1126:	4700      	bx	r0
		UART0_send("100hz\n", 6);
    1128:	2106      	movs	r1, #6
    112a:	4806      	ldr	r0, [pc, #24]	; (1144 <timer0_set_freq+0x3c>)
    112c:	f7ff fc76 	bl	a1c <UART0_send>
		T0PR = 250;	/* Prescaler */
    1130:	23fa      	movs	r3, #250	; 0xfa
    1132:	602b      	str	r3, [r5, #0]
		T0MR0 = 36000;	/* Top value (1 Hz) */
    1134:	4b04      	ldr	r3, [pc, #16]	; (1148 <timer0_set_freq+0x40>)
    1136:	e7f3      	b.n	1120 <timer0_set_freq+0x18>
    1138:	e0004004 	.word	0xe0004004
    113c:	e000400c 	.word	0xe000400c
    1140:	e0004018 	.word	0xe0004018
    1144:	000032ca 	.word	0x000032ca
    1148:	00008ca0 	.word	0x00008ca0

0000114c <timer0_init>:

		}
}
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
    114c:	2302      	movs	r3, #2
    114e:	4a0f      	ldr	r2, [pc, #60]	; (118c <timer0_init+0x40>)
    1150:	6811      	ldr	r1, [r2, #0]
    1152:	430b      	orrs	r3, r1
{
    1154:	b510      	push	{r4, lr}
	PCONP |= (1 << 1);	/* Power on tim0 */
    1156:	6013      	str	r3, [r2, #0]
	T0TCR = 0;	/* Disable tim0 */
    1158:	2300      	movs	r3, #0

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    115a:	2101      	movs	r1, #1
	T0TCR = 0;	/* Disable tim0 */
    115c:	4a0c      	ldr	r2, [pc, #48]	; (1190 <timer0_init+0x44>)
    115e:	6013      	str	r3, [r2, #0]
	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    1160:	4a0c      	ldr	r2, [pc, #48]	; (1194 <timer0_init+0x48>)
    1162:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
    1164:	4a0c      	ldr	r2, [pc, #48]	; (1198 <timer0_init+0x4c>)
    1166:	3102      	adds	r1, #2
    1168:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
    116a:	4a0c      	ldr	r2, [pc, #48]	; (119c <timer0_init+0x50>)
    116c:	6013      	str	r3, [r2, #0]
	T0PR = 25;	/* Prescaler */
    116e:	2219      	movs	r2, #25
    1170:	4b0b      	ldr	r3, [pc, #44]	; (11a0 <timer0_init+0x54>)
    1172:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
    1174:	4a0b      	ldr	r2, [pc, #44]	; (11a4 <timer0_init+0x58>)
    1176:	4b0c      	ldr	r3, [pc, #48]	; (11a8 <timer0_init+0x5c>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    1178:	490c      	ldr	r1, [pc, #48]	; (11ac <timer0_init+0x60>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
    117a:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    117c:	2004      	movs	r0, #4
    117e:	220f      	movs	r2, #15
    1180:	f7ff fb4a 	bl	818 <RegisterIrq>
}
    1184:	bc10      	pop	{r4}
    1186:	bc01      	pop	{r0}
    1188:	4700      	bx	r0
    118a:	46c0      	nop			; (mov r8, r8)
    118c:	e01fc0c4 	.word	0xe01fc0c4
    1190:	e0004004 	.word	0xe0004004
    1194:	e0004000 	.word	0xe0004000
    1198:	e0004014 	.word	0xe0004014
    119c:	e0004070 	.word	0xe0004070
    11a0:	e000400c 	.word	0xe000400c
    11a4:	00011940 	.word	0x00011940
    11a8:	e0004018 	.word	0xe0004018
    11ac:	000014f9 	.word	0x000014f9

000011b0 <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
    11b0:	2301      	movs	r3, #1
    11b2:	4a06      	ldr	r2, [pc, #24]	; (11cc <timer0_start+0x1c>)
{
    11b4:	b510      	push	{r4, lr}
	T0TCR |= 1;
    11b6:	6811      	ldr	r1, [r2, #0]
    11b8:	430b      	orrs	r3, r1
    11ba:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
    11bc:	210d      	movs	r1, #13
    11be:	2002      	movs	r0, #2
    11c0:	f7ff fa72 	bl	6a8 <gpio_set>
}
    11c4:	bc10      	pop	{r4}
    11c6:	bc01      	pop	{r0}
    11c8:	4700      	bx	r0
    11ca:	46c0      	nop			; (mov r8, r8)
    11cc:	e0004004 	.word	0xe0004004

000011d0 <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
    11d0:	2101      	movs	r1, #1
    11d2:	4a06      	ldr	r2, [pc, #24]	; (11ec <timer0_stop+0x1c>)
{
    11d4:	b510      	push	{r4, lr}
	T0TCR &= ~1;
    11d6:	6813      	ldr	r3, [r2, #0]
    11d8:	438b      	bics	r3, r1
    11da:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
    11dc:	310c      	adds	r1, #12
    11de:	2002      	movs	r0, #2
    11e0:	f7ff fa7e 	bl	6e0 <gpio_clear>
}
    11e4:	bc10      	pop	{r4}
    11e6:	bc01      	pop	{r0}
    11e8:	4700      	bx	r0
    11ea:	46c0      	nop			; (mov r8, r8)
    11ec:	e0004004 	.word	0xe0004004

000011f0 <ftoa>:

void ftoa(float num, char *str)
{
    11f0:	b570      	push	{r4, r5, r6, lr}
    11f2:	b086      	sub	sp, #24
    11f4:	000c      	movs	r4, r1
    11f6:	1c05      	adds	r5, r0, #0
    int intpart = num;
    11f8:	f001 ff96 	bl	3128 <____aeabi_f2iz_from_thumb>
    int intdecimal;
    int i;
    float decimal_part;
    char decimal[20];

    memset(str, 0x0, 20);
    11fc:	2100      	movs	r1, #0
    int intpart = num;
    11fe:	0006      	movs	r6, r0
    memset(str, 0x0, 20);
    1200:	2214      	movs	r2, #20
    1202:	0020      	movs	r0, r4
    1204:	f000 fa12 	bl	162c <memset>
    if (num > (-1) && num < (0))
    1208:	4922      	ldr	r1, [pc, #136]	; (1294 <ftoa+0xa4>)
    120a:	1c28      	adds	r0, r5, #0
    120c:	f001 ffc2 	bl	3194 <____aeabi_fcmpgt_from_thumb>
    1210:	2800      	cmp	r0, #0
    1212:	d035      	beq.n	1280 <ftoa+0x90>
    1214:	2100      	movs	r1, #0
    1216:	1c28      	adds	r0, r5, #0
    1218:	f001 ffa0 	bl	315c <____aeabi_fcmplt_from_thumb>
    121c:	2800      	cmp	r0, #0
    121e:	d02f      	beq.n	1280 <ftoa+0x90>
    {
        strcat(str, "-");
    1220:	491d      	ldr	r1, [pc, #116]	; (1298 <ftoa+0xa8>)
    1222:	0020      	movs	r0, r4
    1224:	f000 fa50 	bl	16c8 <strcat>
        itoa(num, str+1, 10);
    1228:	220a      	movs	r2, #10
    122a:	1c61      	adds	r1, r4, #1
    }else{
        itoa(num, str, 10);
    122c:	0030      	movs	r0, r6
    122e:	f000 f9f7 	bl	1620 <itoa>
    }
    strcat(str, ".");
    1232:	491a      	ldr	r1, [pc, #104]	; (129c <ftoa+0xac>)
    1234:	0020      	movs	r0, r4
    1236:	f000 fa47 	bl	16c8 <strcat>

    decimal_part = num - intpart;
    123a:	0030      	movs	r0, r6
    123c:	f001 ff64 	bl	3108 <____aeabi_i2f_from_thumb>
    1240:	1c01      	adds	r1, r0, #0
    1242:	1c28      	adds	r0, r5, #0
    1244:	f001 ff64 	bl	3110 <____aeabi_fsub_from_thumb>
    intdecimal = decimal_part * 1000000;
    1248:	4915      	ldr	r1, [pc, #84]	; (12a0 <ftoa+0xb0>)
    124a:	f001 ff69 	bl	3120 <____aeabi_fmul_from_thumb>
    124e:	f001 ff6b 	bl	3128 <____aeabi_f2iz_from_thumb>

    if(intdecimal < 0)
    {
        intdecimal = -intdecimal;
    }
    itoa(intdecimal, decimal, 10);
    1252:	17c3      	asrs	r3, r0, #31
    1254:	18c0      	adds	r0, r0, r3
    1256:	4058      	eors	r0, r3
    1258:	220a      	movs	r2, #10
    125a:	a901      	add	r1, sp, #4
    125c:	f000 f9e0 	bl	1620 <itoa>
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    1260:	2500      	movs	r5, #0
    1262:	2606      	movs	r6, #6
    1264:	a801      	add	r0, sp, #4
    1266:	f000 fa5f 	bl	1728 <strlen>
    126a:	1a30      	subs	r0, r6, r0
    126c:	42a8      	cmp	r0, r5
    126e:	d80a      	bhi.n	1286 <ftoa+0x96>
    {
        strcat(str, "0");
    }
    strcat(str, decimal);
    1270:	a901      	add	r1, sp, #4
    1272:	0020      	movs	r0, r4
    1274:	f000 fa28 	bl	16c8 <strcat>
}
    1278:	b006      	add	sp, #24
    127a:	bc70      	pop	{r4, r5, r6}
    127c:	bc01      	pop	{r0}
    127e:	4700      	bx	r0
        itoa(num, str, 10);
    1280:	220a      	movs	r2, #10
    1282:	0021      	movs	r1, r4
    1284:	e7d2      	b.n	122c <ftoa+0x3c>
        strcat(str, "0");
    1286:	4907      	ldr	r1, [pc, #28]	; (12a4 <ftoa+0xb4>)
    1288:	0020      	movs	r0, r4
    128a:	f000 fa1d 	bl	16c8 <strcat>
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    128e:	3501      	adds	r5, #1
    1290:	e7e8      	b.n	1264 <ftoa+0x74>
    1292:	46c0      	nop			; (mov r8, r8)
    1294:	bf800000 	.word	0xbf800000
    1298:	000032d1 	.word	0x000032d1
    129c:	000032d3 	.word	0x000032d3
    12a0:	49742400 	.word	0x49742400
    12a4:	000032d5 	.word	0x000032d5

000012a8 <send_results>:
void send_results(void){
    12a8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (native == 1)
    12aa:	4b3a      	ldr	r3, [pc, #232]	; (1394 <send_results+0xec>)
    12ac:	781d      	ldrb	r5, [r3, #0]
void send_results(void){
    12ae:	b0e5      	sub	sp, #404	; 0x194
    12b0:	4c39      	ldr	r4, [pc, #228]	; (1398 <send_results+0xf0>)
    12b2:	4f3a      	ldr	r7, [pc, #232]	; (139c <send_results+0xf4>)
	if (native == 1)
    12b4:	2d01      	cmp	r5, #1
    12b6:	d13a      	bne.n	132e <send_results+0x86>
			UART0_send("\n\nVoltage, V  : ",16 );
    12b8:	4839      	ldr	r0, [pc, #228]	; (13a0 <send_results+0xf8>)
    12ba:	2110      	movs	r1, #16
    12bc:	f7ff fbae 	bl	a1c <UART0_send>
			if (volts < 10000)
    12c0:	4e38      	ldr	r6, [pc, #224]	; (13a4 <send_results+0xfc>)
    12c2:	8820      	ldrh	r0, [r4, #0]
	uint8_t num = 5;
    12c4:	2405      	movs	r4, #5
			if (volts < 10000)
    12c6:	42b0      	cmp	r0, r6
    12c8:	d80b      	bhi.n	12e2 <send_results+0x3a>
			if (volts < 1000)
    12ca:	4b37      	ldr	r3, [pc, #220]	; (13a8 <send_results+0x100>)
				num = 4;
    12cc:	3c01      	subs	r4, #1
			if (volts < 1000)
    12ce:	4298      	cmp	r0, r3
    12d0:	d807      	bhi.n	12e2 <send_results+0x3a>
				num = 3;
    12d2:	3c01      	subs	r4, #1
			if (volts < 100)
    12d4:	2863      	cmp	r0, #99	; 0x63
    12d6:	d804      	bhi.n	12e2 <send_results+0x3a>
				num = 1;
    12d8:	3406      	adds	r4, #6
    12da:	4284      	cmp	r4, r0
    12dc:	41a4      	sbcs	r4, r4
    12de:	4264      	negs	r4, r4
    12e0:	3401      	adds	r4, #1
			UART0_send(itoa(volts, volt_ascii,10), num);
    12e2:	220a      	movs	r2, #10
    12e4:	4669      	mov	r1, sp
    12e6:	f000 f99b 	bl	1620 <itoa>
    12ea:	0421      	lsls	r1, r4, #16
    12ec:	0c09      	lsrs	r1, r1, #16
    12ee:	f7ff fb95 	bl	a1c <UART0_send>
			UART0_send("\nCurrent, mkA: ",15 );
    12f2:	482e      	ldr	r0, [pc, #184]	; (13ac <send_results+0x104>)
    12f4:	210f      	movs	r1, #15
    12f6:	f7ff fb91 	bl	a1c <UART0_send>
			if (curr < 10000)
    12fa:	8838      	ldrh	r0, [r7, #0]
    12fc:	42b0      	cmp	r0, r6
    12fe:	d80a      	bhi.n	1316 <send_results+0x6e>
			if (curr < 1000)
    1300:	4b29      	ldr	r3, [pc, #164]	; (13a8 <send_results+0x100>)
				num = 4;
    1302:	2404      	movs	r4, #4
			if (curr < 1000)
    1304:	4298      	cmp	r0, r3
    1306:	d806      	bhi.n	1316 <send_results+0x6e>
				num = 3;
    1308:	3c01      	subs	r4, #1
			if (curr < 100)
    130a:	2863      	cmp	r0, #99	; 0x63
    130c:	d803      	bhi.n	1316 <send_results+0x6e>
				num = 2;
    130e:	3c01      	subs	r4, #1
			if (curr < 10)
    1310:	2809      	cmp	r0, #9
    1312:	d800      	bhi.n	1316 <send_results+0x6e>
				num = 1;
    1314:	002c      	movs	r4, r5
			UART0_send(itoa(curr, curr_ascii,10), num);
    1316:	a932      	add	r1, sp, #200	; 0xc8
    1318:	220a      	movs	r2, #10
    131a:	f000 f981 	bl	1620 <itoa>
    131e:	0421      	lsls	r1, r4, #16
    1320:	0c09      	lsrs	r1, r1, #16
			UART0_send("\n", 1);
    1322:	f7ff fb7b 	bl	a1c <UART0_send>
}
    1326:	b065      	add	sp, #404	; 0x194
    1328:	bcf0      	pop	{r4, r5, r6, r7}
    132a:	bc01      	pop	{r0}
    132c:	4700      	bx	r0
			fvolts = (volts - 22166)/803.0;
    132e:	8820      	ldrh	r0, [r4, #0]
    1330:	4b1f      	ldr	r3, [pc, #124]	; (13b0 <send_results+0x108>)
    1332:	18c0      	adds	r0, r0, r3
    1334:	f001 ff1a 	bl	316c <____aeabi_i2d_from_thumb>
    1338:	2200      	movs	r2, #0
    133a:	4b1e      	ldr	r3, [pc, #120]	; (13b4 <send_results+0x10c>)
    133c:	f001 ff0a 	bl	3154 <____aeabi_ddiv_from_thumb>
    1340:	f001 ff04 	bl	314c <____aeabi_d2f_from_thumb>
			fcurr = (curr - 6037)/0.7927817;
    1344:	4b1c      	ldr	r3, [pc, #112]	; (13b8 <send_results+0x110>)
			fvolts = (volts - 22166)/803.0;
    1346:	1c04      	adds	r4, r0, #0
			fcurr = (curr - 6037)/0.7927817;
    1348:	8838      	ldrh	r0, [r7, #0]
    134a:	18c0      	adds	r0, r0, r3
    134c:	f001 ff0e 	bl	316c <____aeabi_i2d_from_thumb>
    1350:	4a1a      	ldr	r2, [pc, #104]	; (13bc <send_results+0x114>)
    1352:	4b1b      	ldr	r3, [pc, #108]	; (13c0 <send_results+0x118>)
    1354:	f001 fefe 	bl	3154 <____aeabi_ddiv_from_thumb>
    1358:	f001 fef8 	bl	314c <____aeabi_d2f_from_thumb>
			UART0_send("V", 1);
    135c:	2101      	movs	r1, #1
			fcurr = (curr - 6037)/0.7927817;
    135e:	1c05      	adds	r5, r0, #0
			UART0_send("V", 1);
    1360:	4818      	ldr	r0, [pc, #96]	; (13c4 <send_results+0x11c>)
    1362:	f7ff fb5b 	bl	a1c <UART0_send>
			ftoa(fvolts, volt_ascii);
    1366:	4669      	mov	r1, sp
    1368:	1c20      	adds	r0, r4, #0
    136a:	f7ff ff41 	bl	11f0 <ftoa>
			UART0_send(volt_ascii, 6);
    136e:	2106      	movs	r1, #6
    1370:	4668      	mov	r0, sp
    1372:	f7ff fb53 	bl	a1c <UART0_send>
			UART0_send("C", 1);
    1376:	2101      	movs	r1, #1
    1378:	4813      	ldr	r0, [pc, #76]	; (13c8 <send_results+0x120>)
    137a:	f7ff fb4f 	bl	a1c <UART0_send>
			ftoa(fcurr, curr_ascii);
    137e:	a932      	add	r1, sp, #200	; 0xc8
    1380:	1c28      	adds	r0, r5, #0
    1382:	f7ff ff35 	bl	11f0 <ftoa>
			UART0_send(curr_ascii, 6);
    1386:	2106      	movs	r1, #6
    1388:	a832      	add	r0, sp, #200	; 0xc8
    138a:	f7ff fb47 	bl	a1c <UART0_send>
			UART0_send("\n", 1);
    138e:	2101      	movs	r1, #1
    1390:	480e      	ldr	r0, [pc, #56]	; (13cc <send_results+0x124>)
    1392:	e7c6      	b.n	1322 <send_results+0x7a>
    1394:	400005a1 	.word	0x400005a1
    1398:	4000078e 	.word	0x4000078e
    139c:	40000728 	.word	0x40000728
    13a0:	000032d7 	.word	0x000032d7
    13a4:	0000270f 	.word	0x0000270f
    13a8:	000003e7 	.word	0x000003e7
    13ac:	000032e8 	.word	0x000032e8
    13b0:	ffffa96a 	.word	0xffffa96a
    13b4:	40891800 	.word	0x40891800
    13b8:	ffffe86b 	.word	0xffffe86b
    13bc:	ba4bc0c9 	.word	0xba4bc0c9
    13c0:	3fe95e77 	.word	0x3fe95e77
    13c4:	000032f8 	.word	0x000032f8
    13c8:	000032fa 	.word	0x000032fa
    13cc:	000032b2 	.word	0x000032b2

000013d0 <calculateSD>:

float calculateSD(uint16_t *data)
{
    13d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    13d2:	0007      	movs	r7, r0
    13d4:	0004      	movs	r4, r0
    13d6:	0005      	movs	r5, r0
    float sum = 0.0, mean, standardDeviation = 0.0;
    13d8:	2600      	movs	r6, #0
    13da:	3764      	adds	r7, #100	; 0x64

    int i;

    for(i=0; i<CONV_NUMBER; ++i)
    {
        sum += data[i];
    13dc:	8828      	ldrh	r0, [r5, #0]
    13de:	f001 fe93 	bl	3108 <____aeabi_i2f_from_thumb>
    13e2:	1c01      	adds	r1, r0, #0
    13e4:	1c30      	adds	r0, r6, #0
    13e6:	f001 febd 	bl	3164 <____aeabi_fadd_from_thumb>
    13ea:	3502      	adds	r5, #2
    13ec:	1c06      	adds	r6, r0, #0
    for(i=0; i<CONV_NUMBER; ++i)
    13ee:	42af      	cmp	r7, r5
    13f0:	d1f4      	bne.n	13dc <calculateSD+0xc>
    }

    mean = sum/CONV_NUMBER;
    13f2:	4917      	ldr	r1, [pc, #92]	; (1450 <calculateSD+0x80>)
    13f4:	f001 feca 	bl	318c <____aeabi_fdiv_from_thumb>
    float sum = 0.0, mean, standardDeviation = 0.0;
    13f8:	2600      	movs	r6, #0
    mean = sum/CONV_NUMBER;
    13fa:	1c07      	adds	r7, r0, #0

    for(i=0; i<CONV_NUMBER; ++i)
        standardDeviation += pow(data[i] - mean, 2);
    13fc:	8820      	ldrh	r0, [r4, #0]
    13fe:	f001 fe83 	bl	3108 <____aeabi_i2f_from_thumb>
    1402:	1c39      	adds	r1, r7, #0
    1404:	f001 fe84 	bl	3110 <____aeabi_fsub_from_thumb>
    1408:	f001 fec8 	bl	319c <____aeabi_f2d_from_thumb>
    140c:	0002      	movs	r2, r0
    140e:	000b      	movs	r3, r1
    1410:	f001 fe82 	bl	3118 <____aeabi_dmul_from_thumb>
    1414:	9000      	str	r0, [sp, #0]
    1416:	9101      	str	r1, [sp, #4]
    1418:	1c30      	adds	r0, r6, #0
    141a:	f001 febf 	bl	319c <____aeabi_f2d_from_thumb>
    141e:	0002      	movs	r2, r0
    1420:	000b      	movs	r3, r1
    1422:	9800      	ldr	r0, [sp, #0]
    1424:	9901      	ldr	r1, [sp, #4]
    1426:	f001 fe87 	bl	3138 <____aeabi_dadd_from_thumb>
    142a:	f001 fe8f 	bl	314c <____aeabi_d2f_from_thumb>
    142e:	3402      	adds	r4, #2
    1430:	1c06      	adds	r6, r0, #0
    for(i=0; i<CONV_NUMBER; ++i)
    1432:	42a5      	cmp	r5, r4
    1434:	d1e2      	bne.n	13fc <calculateSD+0x2c>

    return sqrt(standardDeviation/CONV_NUMBER);
    1436:	4906      	ldr	r1, [pc, #24]	; (1450 <calculateSD+0x80>)
    1438:	f001 fea8 	bl	318c <____aeabi_fdiv_from_thumb>
    143c:	f001 feae 	bl	319c <____aeabi_f2d_from_thumb>
    1440:	f001 fc56 	bl	2cf0 <sqrt>
    1444:	f001 fe82 	bl	314c <____aeabi_d2f_from_thumb>
}
    1448:	bcfe      	pop	{r1, r2, r3, r4, r5, r6, r7}
    144a:	bc02      	pop	{r1}
    144c:	4708      	bx	r1
    144e:	46c0      	nop			; (mov r8, r8)
    1450:	42480000 	.word	0x42480000

00001454 <process_array>:

float process_array(uint16_t *array)
{
    1454:	b5f0      	push	{r4, r5, r6, r7, lr}
    1456:	0007      	movs	r7, r0
    1458:	0005      	movs	r5, r0
    145a:	0004      	movs	r4, r0
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    145c:	2600      	movs	r6, #0
{
    145e:	b085      	sub	sp, #20
    1460:	9001      	str	r0, [sp, #4]
    1462:	3764      	adds	r7, #100	; 0x64
    int i, counter = 0;
    
    for (i = 0; i < CONV_NUMBER; i++)
    {
       median += array[i];
    1464:	8820      	ldrh	r0, [r4, #0]
    1466:	f001 fe4f 	bl	3108 <____aeabi_i2f_from_thumb>
    146a:	1c01      	adds	r1, r0, #0
    146c:	1c30      	adds	r0, r6, #0
    146e:	f001 fe79 	bl	3164 <____aeabi_fadd_from_thumb>
    1472:	3402      	adds	r4, #2
    1474:	1c06      	adds	r6, r0, #0
    for (i = 0; i < CONV_NUMBER; i++)
    1476:	42a7      	cmp	r7, r4
    1478:	d1f4      	bne.n	1464 <process_array+0x10>
    }
    median = median / CONV_NUMBER;
    147a:	491e      	ldr	r1, [pc, #120]	; (14f4 <process_array+0xa0>)
    147c:	f001 fe86 	bl	318c <____aeabi_fdiv_from_thumb>
    1480:	9002      	str	r0, [sp, #8]
    
    sd = calculateSD(array);
    1482:	0028      	movs	r0, r5
    1484:	f7ff ffa4 	bl	13d0 <calculateSD>
    int i, counter = 0;
    1488:	2500      	movs	r5, #0
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    148a:	2600      	movs	r6, #0
    sd = calculateSD(array);
    148c:	9003      	str	r0, [sp, #12]
    
    for (i = 0; i < CONV_NUMBER; i++)
    {
       if (!((array[i] < (median - sd)) || (array[i] > (median + sd))))
    148e:	9b01      	ldr	r3, [sp, #4]
    1490:	8818      	ldrh	r0, [r3, #0]
    1492:	f001 fe39 	bl	3108 <____aeabi_i2f_from_thumb>
    1496:	9903      	ldr	r1, [sp, #12]
    1498:	1c07      	adds	r7, r0, #0
    149a:	9802      	ldr	r0, [sp, #8]
    149c:	f001 fe38 	bl	3110 <____aeabi_fsub_from_thumb>
    14a0:	1c01      	adds	r1, r0, #0
    14a2:	1c38      	adds	r0, r7, #0
    14a4:	f001 fe5a 	bl	315c <____aeabi_fcmplt_from_thumb>
    14a8:	2800      	cmp	r0, #0
    14aa:	d10f      	bne.n	14cc <process_array+0x78>
    14ac:	9903      	ldr	r1, [sp, #12]
    14ae:	9802      	ldr	r0, [sp, #8]
    14b0:	f001 fe58 	bl	3164 <____aeabi_fadd_from_thumb>
    14b4:	1c01      	adds	r1, r0, #0
    14b6:	1c38      	adds	r0, r7, #0
    14b8:	f001 fe6c 	bl	3194 <____aeabi_fcmpgt_from_thumb>
    14bc:	2800      	cmp	r0, #0
    14be:	d105      	bne.n	14cc <process_array+0x78>
       {
           median2 += array[i];
    14c0:	1c30      	adds	r0, r6, #0
    14c2:	1c39      	adds	r1, r7, #0
    14c4:	f001 fe4e 	bl	3164 <____aeabi_fadd_from_thumb>
           counter++;
    14c8:	3501      	adds	r5, #1
           median2 += array[i];
    14ca:	1c06      	adds	r6, r0, #0
    14cc:	9b01      	ldr	r3, [sp, #4]
    14ce:	3302      	adds	r3, #2
    14d0:	9301      	str	r3, [sp, #4]
    for (i = 0; i < CONV_NUMBER; i++)
    14d2:	429c      	cmp	r4, r3
    14d4:	d1db      	bne.n	148e <process_array+0x3a>
    }
    if (counter != 0)
    {
      return (median2 / counter);
    }else{
        return 0;
    14d6:	2000      	movs	r0, #0
    if (counter != 0)
    14d8:	2d00      	cmp	r5, #0
    14da:	d006      	beq.n	14ea <process_array+0x96>
      return (median2 / counter);
    14dc:	0028      	movs	r0, r5
    14de:	f001 fe13 	bl	3108 <____aeabi_i2f_from_thumb>
    14e2:	1c01      	adds	r1, r0, #0
    14e4:	1c30      	adds	r0, r6, #0
    14e6:	f001 fe51 	bl	318c <____aeabi_fdiv_from_thumb>
    }
}
    14ea:	b005      	add	sp, #20
    14ec:	bcf0      	pop	{r4, r5, r6, r7}
    14ee:	bc02      	pop	{r1}
    14f0:	4708      	bx	r1
    14f2:	46c0      	nop			; (mov r8, r8)
    14f4:	42480000 	.word	0x42480000

000014f8 <Isr_TIM0>:
	T0IR = 0x3F;
    14f8:	223f      	movs	r2, #63	; 0x3f
    14fa:	4b2e      	ldr	r3, [pc, #184]	; (15b4 <Isr_TIM0+0xbc>)
{
    14fc:	b570      	push	{r4, r5, r6, lr}
	T0IR = 0x3F;
    14fe:	601a      	str	r2, [r3, #0]
	FIO1PIN |= (1 << ADC_SCLK);
    1500:	2380      	movs	r3, #128	; 0x80
    1502:	4a2d      	ldr	r2, [pc, #180]	; (15b8 <Isr_TIM0+0xc0>)
    1504:	6811      	ldr	r1, [r2, #0]
    1506:	035b      	lsls	r3, r3, #13
    1508:	430b      	orrs	r3, r1
    150a:	6013      	str	r3, [r2, #0]
	if (getflag == 0){
    150c:	4c2b      	ldr	r4, [pc, #172]	; (15bc <Isr_TIM0+0xc4>)
    150e:	7823      	ldrb	r3, [r4, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d007      	beq.n	1524 <Isr_TIM0+0x2c>
		if (conv_number == CONV_NUMBER*2 + 1) {
    1514:	4e2a      	ldr	r6, [pc, #168]	; (15c0 <Isr_TIM0+0xc8>)
    1516:	7835      	ldrb	r5, [r6, #0]
    1518:	2d65      	cmp	r5, #101	; 0x65
    151a:	d109      	bne.n	1530 <Isr_TIM0+0x38>
			conv_number--;
    151c:	2364      	movs	r3, #100	; 0x64
    151e:	7033      	strb	r3, [r6, #0]
			read_curr();
    1520:	f7ff fdd2 	bl	10c8 <read_curr>
	VICVectAddr = 0;
    1524:	2200      	movs	r2, #0
    1526:	4b27      	ldr	r3, [pc, #156]	; (15c4 <Isr_TIM0+0xcc>)
    1528:	601a      	str	r2, [r3, #0]
}
    152a:	bc70      	pop	{r4, r5, r6}
    152c:	bc01      	pop	{r0}
    152e:	4700      	bx	r0
		}else if (conv_number != 0){
    1530:	2d00      	cmp	r5, #0
    1532:	d01b      	beq.n	156c <Isr_TIM0+0x74>
			conv_number--;
    1534:	1e6c      	subs	r4, r5, #1
    1536:	0624      	lsls	r4, r4, #24
    1538:	0e24      	lsrs	r4, r4, #24
    153a:	7034      	strb	r4, [r6, #0]
			if (conv_number > CONV_NUMBER)
    153c:	2c32      	cmp	r4, #50	; 0x32
    153e:	d906      	bls.n	154e <Isr_TIM0+0x56>
				volt_array[conv_number - CONV_NUMBER] = adc_read_voltage();
    1540:	f7ff fd80 	bl	1044 <adc_read_voltage>
    1544:	3c32      	subs	r4, #50	; 0x32
    1546:	4b20      	ldr	r3, [pc, #128]	; (15c8 <Isr_TIM0+0xd0>)
    1548:	0064      	lsls	r4, r4, #1
				curr_array[conv_number] = adc_read_current();
    154a:	52e0      	strh	r0, [r4, r3]
    154c:	e7ea      	b.n	1524 <Isr_TIM0+0x2c>
			}else if (conv_number == CONV_NUMBER)
    154e:	2c32      	cmp	r4, #50	; 0x32
    1550:	d104      	bne.n	155c <Isr_TIM0+0x64>
				volt_array[conv_number - CONV_NUMBER] = read_volt();
    1552:	f7ff fd99 	bl	1088 <read_volt>
    1556:	4b1c      	ldr	r3, [pc, #112]	; (15c8 <Isr_TIM0+0xd0>)
    1558:	8018      	strh	r0, [r3, #0]
    155a:	e7e3      	b.n	1524 <Isr_TIM0+0x2c>
			}else if ((conv_number < CONV_NUMBER) && (conv_number > 0))
    155c:	3d02      	subs	r5, #2
    155e:	2d30      	cmp	r5, #48	; 0x30
    1560:	d8e0      	bhi.n	1524 <Isr_TIM0+0x2c>
				curr_array[conv_number] = adc_read_current();
    1562:	f7ff fd8b 	bl	107c <adc_read_current>
    1566:	0064      	lsls	r4, r4, #1
    1568:	4b18      	ldr	r3, [pc, #96]	; (15cc <Isr_TIM0+0xd4>)
    156a:	e7ee      	b.n	154a <Isr_TIM0+0x52>
			curr_array[conv_number - CONV_NUMBER] = read_curr();
    156c:	f7ff fdac 	bl	10c8 <read_curr>
    1570:	4b16      	ldr	r3, [pc, #88]	; (15cc <Isr_TIM0+0xd4>)
    1572:	001a      	movs	r2, r3
    1574:	3a64      	subs	r2, #100	; 0x64
    1576:	8010      	strh	r0, [r2, #0]
			curr = process_array(curr_array);
    1578:	0018      	movs	r0, r3
    157a:	f7ff ff6b 	bl	1454 <process_array>
    157e:	f001 fdfd 	bl	317c <____aeabi_f2uiz_from_thumb>
    1582:	4b13      	ldr	r3, [pc, #76]	; (15d0 <Isr_TIM0+0xd8>)
    1584:	8018      	strh	r0, [r3, #0]
			volts = process_array(volt_array);
    1586:	4810      	ldr	r0, [pc, #64]	; (15c8 <Isr_TIM0+0xd0>)
    1588:	f7ff ff64 	bl	1454 <process_array>
    158c:	f001 fdf6 	bl	317c <____aeabi_f2uiz_from_thumb>
    1590:	4b10      	ldr	r3, [pc, #64]	; (15d4 <Isr_TIM0+0xdc>)
    1592:	8018      	strh	r0, [r3, #0]
			conv_number = CONV_NUMBER*2 + 1;
    1594:	2365      	movs	r3, #101	; 0x65
		curr_big = 0;
    1596:	2000      	movs	r0, #0
    1598:	2100      	movs	r1, #0
			conv_number = CONV_NUMBER*2 + 1;
    159a:	7033      	strb	r3, [r6, #0]
		curr_big = 0;
    159c:	4b0e      	ldr	r3, [pc, #56]	; (15d8 <Isr_TIM0+0xe0>)
			getflag = 0;
    159e:	7025      	strb	r5, [r4, #0]
		curr_big = 0;
    15a0:	6018      	str	r0, [r3, #0]
    15a2:	6059      	str	r1, [r3, #4]
		send_results();
    15a4:	f7ff fe80 	bl	12a8 <send_results>
		timer0_stop();
    15a8:	f7ff fe12 	bl	11d0 <timer0_stop>
		led_clear(LED1);
    15ac:	0028      	movs	r0, r5
    15ae:	f7ff f871 	bl	694 <led_clear>
    15b2:	e7b7      	b.n	1524 <Isr_TIM0+0x2c>
    15b4:	e0004000 	.word	0xe0004000
    15b8:	3fffc034 	.word	0x3fffc034
    15bc:	400005a0 	.word	0x400005a0
    15c0:	40000000 	.word	0x40000000
    15c4:	ffffff00 	.word	0xffffff00
    15c8:	400006b8 	.word	0x400006b8
    15cc:	4000072a 	.word	0x4000072a
    15d0:	40000728 	.word	0x40000728
    15d4:	4000078e 	.word	0x4000078e
    15d8:	40000720 	.word	0x40000720

000015dc <atoi>:
    15dc:	b510      	push	{r4, lr}
    15de:	220a      	movs	r2, #10
    15e0:	2100      	movs	r1, #0
    15e2:	f000 f9df 	bl	19a4 <strtol>
    15e6:	bc10      	pop	{r4}
    15e8:	bc02      	pop	{r1}
    15ea:	4708      	bx	r1

000015ec <__itoa>:
    15ec:	1e93      	subs	r3, r2, #2
    15ee:	b510      	push	{r4, lr}
    15f0:	000c      	movs	r4, r1
    15f2:	2b22      	cmp	r3, #34	; 0x22
    15f4:	d810      	bhi.n	1618 <__itoa+0x2c>
    15f6:	2a0a      	cmp	r2, #10
    15f8:	d10c      	bne.n	1614 <__itoa+0x28>
    15fa:	2800      	cmp	r0, #0
    15fc:	da0a      	bge.n	1614 <__itoa+0x28>
    15fe:	232d      	movs	r3, #45	; 0x2d
    1600:	700b      	strb	r3, [r1, #0]
    1602:	2101      	movs	r1, #1
    1604:	4240      	negs	r0, r0
    1606:	1861      	adds	r1, r4, r1
    1608:	f000 f9e4 	bl	19d4 <__utoa>
    160c:	0020      	movs	r0, r4
    160e:	bc10      	pop	{r4}
    1610:	bc02      	pop	{r1}
    1612:	4708      	bx	r1
    1614:	2100      	movs	r1, #0
    1616:	e7f6      	b.n	1606 <__itoa+0x1a>
    1618:	2300      	movs	r3, #0
    161a:	2000      	movs	r0, #0
    161c:	700b      	strb	r3, [r1, #0]
    161e:	e7f6      	b.n	160e <__itoa+0x22>

00001620 <itoa>:
    1620:	b510      	push	{r4, lr}
    1622:	f7ff ffe3 	bl	15ec <__itoa>
    1626:	bc10      	pop	{r4}
    1628:	bc02      	pop	{r1}
    162a:	4708      	bx	r1

0000162c <memset>:
    162c:	b5f0      	push	{r4, r5, r6, r7, lr}
    162e:	0783      	lsls	r3, r0, #30
    1630:	d047      	beq.n	16c2 <memset+0x96>
    1632:	1e54      	subs	r4, r2, #1
    1634:	2a00      	cmp	r2, #0
    1636:	d041      	beq.n	16bc <memset+0x90>
    1638:	060d      	lsls	r5, r1, #24
    163a:	0e2d      	lsrs	r5, r5, #24
    163c:	0002      	movs	r2, r0
    163e:	2603      	movs	r6, #3
    1640:	e002      	b.n	1648 <memset+0x1c>
    1642:	001a      	movs	r2, r3
    1644:	3c01      	subs	r4, #1
    1646:	d339      	bcc.n	16bc <memset+0x90>
    1648:	1c53      	adds	r3, r2, #1
    164a:	7015      	strb	r5, [r2, #0]
    164c:	4233      	tst	r3, r6
    164e:	d1f8      	bne.n	1642 <memset+0x16>
    1650:	2c03      	cmp	r4, #3
    1652:	d92a      	bls.n	16aa <memset+0x7e>
    1654:	22ff      	movs	r2, #255	; 0xff
    1656:	400a      	ands	r2, r1
    1658:	0215      	lsls	r5, r2, #8
    165a:	4315      	orrs	r5, r2
    165c:	042a      	lsls	r2, r5, #16
    165e:	4315      	orrs	r5, r2
    1660:	2c0f      	cmp	r4, #15
    1662:	d914      	bls.n	168e <memset+0x62>
    1664:	0027      	movs	r7, r4
    1666:	001a      	movs	r2, r3
    1668:	3f10      	subs	r7, #16
    166a:	093e      	lsrs	r6, r7, #4
    166c:	3601      	adds	r6, #1
    166e:	0136      	lsls	r6, r6, #4
    1670:	199e      	adds	r6, r3, r6
    1672:	6015      	str	r5, [r2, #0]
    1674:	6055      	str	r5, [r2, #4]
    1676:	6095      	str	r5, [r2, #8]
    1678:	60d5      	str	r5, [r2, #12]
    167a:	3210      	adds	r2, #16
    167c:	4296      	cmp	r6, r2
    167e:	d1f8      	bne.n	1672 <memset+0x46>
    1680:	220f      	movs	r2, #15
    1682:	4397      	bics	r7, r2
    1684:	3710      	adds	r7, #16
    1686:	19db      	adds	r3, r3, r7
    1688:	4014      	ands	r4, r2
    168a:	2c03      	cmp	r4, #3
    168c:	d90d      	bls.n	16aa <memset+0x7e>
    168e:	001a      	movs	r2, r3
    1690:	1f27      	subs	r7, r4, #4
    1692:	08be      	lsrs	r6, r7, #2
    1694:	3601      	adds	r6, #1
    1696:	00b6      	lsls	r6, r6, #2
    1698:	199e      	adds	r6, r3, r6
    169a:	c220      	stmia	r2!, {r5}
    169c:	42b2      	cmp	r2, r6
    169e:	d1fc      	bne.n	169a <memset+0x6e>
    16a0:	2203      	movs	r2, #3
    16a2:	4397      	bics	r7, r2
    16a4:	3704      	adds	r7, #4
    16a6:	19db      	adds	r3, r3, r7
    16a8:	4014      	ands	r4, r2
    16aa:	2c00      	cmp	r4, #0
    16ac:	d006      	beq.n	16bc <memset+0x90>
    16ae:	0609      	lsls	r1, r1, #24
    16b0:	191c      	adds	r4, r3, r4
    16b2:	0e09      	lsrs	r1, r1, #24
    16b4:	7019      	strb	r1, [r3, #0]
    16b6:	3301      	adds	r3, #1
    16b8:	429c      	cmp	r4, r3
    16ba:	d1fb      	bne.n	16b4 <memset+0x88>
    16bc:	bcf0      	pop	{r4, r5, r6, r7}
    16be:	bc02      	pop	{r1}
    16c0:	4708      	bx	r1
    16c2:	0014      	movs	r4, r2
    16c4:	0003      	movs	r3, r0
    16c6:	e7c3      	b.n	1650 <memset+0x24>

000016c8 <strcat>:
    16c8:	b570      	push	{r4, r5, r6, lr}
    16ca:	0005      	movs	r5, r0
    16cc:	0783      	lsls	r3, r0, #30
    16ce:	d116      	bne.n	16fe <strcat+0x36>
    16d0:	6802      	ldr	r2, [r0, #0]
    16d2:	4b0f      	ldr	r3, [pc, #60]	; (1710 <strcat+0x48>)
    16d4:	4c0f      	ldr	r4, [pc, #60]	; (1714 <strcat+0x4c>)
    16d6:	18d3      	adds	r3, r2, r3
    16d8:	4393      	bics	r3, r2
    16da:	4223      	tst	r3, r4
    16dc:	d10f      	bne.n	16fe <strcat+0x36>
    16de:	3004      	adds	r0, #4
    16e0:	6802      	ldr	r2, [r0, #0]
    16e2:	4b0b      	ldr	r3, [pc, #44]	; (1710 <strcat+0x48>)
    16e4:	18d3      	adds	r3, r2, r3
    16e6:	4393      	bics	r3, r2
    16e8:	4223      	tst	r3, r4
    16ea:	d108      	bne.n	16fe <strcat+0x36>
    16ec:	3004      	adds	r0, #4
    16ee:	6802      	ldr	r2, [r0, #0]
    16f0:	4b07      	ldr	r3, [pc, #28]	; (1710 <strcat+0x48>)
    16f2:	18d3      	adds	r3, r2, r3
    16f4:	4393      	bics	r3, r2
    16f6:	4223      	tst	r3, r4
    16f8:	d0f1      	beq.n	16de <strcat+0x16>
    16fa:	e000      	b.n	16fe <strcat+0x36>
    16fc:	3001      	adds	r0, #1
    16fe:	7803      	ldrb	r3, [r0, #0]
    1700:	2b00      	cmp	r3, #0
    1702:	d1fb      	bne.n	16fc <strcat+0x34>
    1704:	f000 f808 	bl	1718 <strcpy>
    1708:	0028      	movs	r0, r5
    170a:	bc70      	pop	{r4, r5, r6}
    170c:	bc02      	pop	{r1}
    170e:	4708      	bx	r1
    1710:	fefefeff 	.word	0xfefefeff
    1714:	80808080 	.word	0x80808080

00001718 <strcpy>:
    1718:	1c03      	adds	r3, r0, #0
    171a:	780a      	ldrb	r2, [r1, #0]
    171c:	3101      	adds	r1, #1
    171e:	701a      	strb	r2, [r3, #0]
    1720:	3301      	adds	r3, #1
    1722:	2a00      	cmp	r2, #0
    1724:	d1f9      	bne.n	171a <strcpy+0x2>
    1726:	4770      	bx	lr

00001728 <strlen>:
    1728:	b510      	push	{r4, lr}
    172a:	0783      	lsls	r3, r0, #30
    172c:	d027      	beq.n	177e <strlen+0x56>
    172e:	7803      	ldrb	r3, [r0, #0]
    1730:	2b00      	cmp	r3, #0
    1732:	d026      	beq.n	1782 <strlen+0x5a>
    1734:	0003      	movs	r3, r0
    1736:	2103      	movs	r1, #3
    1738:	e002      	b.n	1740 <strlen+0x18>
    173a:	781a      	ldrb	r2, [r3, #0]
    173c:	2a00      	cmp	r2, #0
    173e:	d01c      	beq.n	177a <strlen+0x52>
    1740:	3301      	adds	r3, #1
    1742:	420b      	tst	r3, r1
    1744:	d1f9      	bne.n	173a <strlen+0x12>
    1746:	6819      	ldr	r1, [r3, #0]
    1748:	4a0f      	ldr	r2, [pc, #60]	; (1788 <strlen+0x60>)
    174a:	4c10      	ldr	r4, [pc, #64]	; (178c <strlen+0x64>)
    174c:	188a      	adds	r2, r1, r2
    174e:	438a      	bics	r2, r1
    1750:	4222      	tst	r2, r4
    1752:	d106      	bne.n	1762 <strlen+0x3a>
    1754:	3304      	adds	r3, #4
    1756:	6819      	ldr	r1, [r3, #0]
    1758:	4a0b      	ldr	r2, [pc, #44]	; (1788 <strlen+0x60>)
    175a:	188a      	adds	r2, r1, r2
    175c:	438a      	bics	r2, r1
    175e:	4222      	tst	r2, r4
    1760:	d0f8      	beq.n	1754 <strlen+0x2c>
    1762:	001a      	movs	r2, r3
    1764:	781b      	ldrb	r3, [r3, #0]
    1766:	2b00      	cmp	r3, #0
    1768:	d003      	beq.n	1772 <strlen+0x4a>
    176a:	3201      	adds	r2, #1
    176c:	7811      	ldrb	r1, [r2, #0]
    176e:	2900      	cmp	r1, #0
    1770:	d1fb      	bne.n	176a <strlen+0x42>
    1772:	1a10      	subs	r0, r2, r0
    1774:	bc10      	pop	{r4}
    1776:	bc02      	pop	{r1}
    1778:	4708      	bx	r1
    177a:	1a18      	subs	r0, r3, r0
    177c:	e7fa      	b.n	1774 <strlen+0x4c>
    177e:	0003      	movs	r3, r0
    1780:	e7e1      	b.n	1746 <strlen+0x1e>
    1782:	2000      	movs	r0, #0
    1784:	e7f6      	b.n	1774 <strlen+0x4c>
    1786:	46c0      	nop			; (mov r8, r8)
    1788:	fefefeff 	.word	0xfefefeff
    178c:	80808080 	.word	0x80808080

00001790 <strncmp>:
    1790:	b530      	push	{r4, r5, lr}
    1792:	2300      	movs	r3, #0
    1794:	2a00      	cmp	r2, #0
    1796:	d036      	beq.n	1806 <strncmp+0x76>
    1798:	0004      	movs	r4, r0
    179a:	430c      	orrs	r4, r1
    179c:	07a4      	lsls	r4, r4, #30
    179e:	d120      	bne.n	17e2 <strncmp+0x52>
    17a0:	2a03      	cmp	r2, #3
    17a2:	d91e      	bls.n	17e2 <strncmp+0x52>
    17a4:	6804      	ldr	r4, [r0, #0]
    17a6:	680d      	ldr	r5, [r1, #0]
    17a8:	42ac      	cmp	r4, r5
    17aa:	d11a      	bne.n	17e2 <strncmp+0x52>
    17ac:	3a04      	subs	r2, #4
    17ae:	2a00      	cmp	r2, #0
    17b0:	d029      	beq.n	1806 <strncmp+0x76>
    17b2:	4d1a      	ldr	r5, [pc, #104]	; (181c <strncmp+0x8c>)
    17b4:	1965      	adds	r5, r4, r5
    17b6:	43a5      	bics	r5, r4
    17b8:	002c      	movs	r4, r5
    17ba:	4d19      	ldr	r5, [pc, #100]	; (1820 <strncmp+0x90>)
    17bc:	422c      	tst	r4, r5
    17be:	d00c      	beq.n	17da <strncmp+0x4a>
    17c0:	e021      	b.n	1806 <strncmp+0x76>
    17c2:	6803      	ldr	r3, [r0, #0]
    17c4:	680c      	ldr	r4, [r1, #0]
    17c6:	42a3      	cmp	r3, r4
    17c8:	d10b      	bne.n	17e2 <strncmp+0x52>
    17ca:	3a04      	subs	r2, #4
    17cc:	2a00      	cmp	r2, #0
    17ce:	d01e      	beq.n	180e <strncmp+0x7e>
    17d0:	4c12      	ldr	r4, [pc, #72]	; (181c <strncmp+0x8c>)
    17d2:	191c      	adds	r4, r3, r4
    17d4:	439c      	bics	r4, r3
    17d6:	422c      	tst	r4, r5
    17d8:	d119      	bne.n	180e <strncmp+0x7e>
    17da:	3004      	adds	r0, #4
    17dc:	3104      	adds	r1, #4
    17de:	2a03      	cmp	r2, #3
    17e0:	d8ef      	bhi.n	17c2 <strncmp+0x32>
    17e2:	7804      	ldrb	r4, [r0, #0]
    17e4:	780b      	ldrb	r3, [r1, #0]
    17e6:	3a01      	subs	r2, #1
    17e8:	42a3      	cmp	r3, r4
    17ea:	d112      	bne.n	1812 <strncmp+0x82>
    17ec:	2b00      	cmp	r3, #0
    17ee:	d00e      	beq.n	180e <strncmp+0x7e>
    17f0:	2a00      	cmp	r2, #0
    17f2:	d00c      	beq.n	180e <strncmp+0x7e>
    17f4:	3001      	adds	r0, #1
    17f6:	3101      	adds	r1, #1
    17f8:	7803      	ldrb	r3, [r0, #0]
    17fa:	780c      	ldrb	r4, [r1, #0]
    17fc:	3a01      	subs	r2, #1
    17fe:	42a3      	cmp	r3, r4
    1800:	d0f4      	beq.n	17ec <strncmp+0x5c>
    1802:	0020      	movs	r0, r4
    1804:	1a1b      	subs	r3, r3, r0
    1806:	0018      	movs	r0, r3
    1808:	bc30      	pop	{r4, r5}
    180a:	bc02      	pop	{r1}
    180c:	4708      	bx	r1
    180e:	2300      	movs	r3, #0
    1810:	e7f9      	b.n	1806 <strncmp+0x76>
    1812:	0018      	movs	r0, r3
    1814:	0023      	movs	r3, r4
    1816:	1a1b      	subs	r3, r3, r0
    1818:	e7f5      	b.n	1806 <strncmp+0x76>
    181a:	46c0      	nop			; (mov r8, r8)
    181c:	fefefeff 	.word	0xfefefeff
    1820:	80808080 	.word	0x80808080

00001824 <_strtol_l.isra.0>:
    1824:	b5f0      	push	{r4, r5, r6, r7, lr}
    1826:	4645      	mov	r5, r8
    1828:	46de      	mov	lr, fp
    182a:	464e      	mov	r6, r9
    182c:	4657      	mov	r7, sl
    182e:	b5e0      	push	{r5, r6, r7, lr}
    1830:	001e      	movs	r6, r3
    1832:	2308      	movs	r3, #8
    1834:	b083      	sub	sp, #12
    1836:	9001      	str	r0, [sp, #4]
    1838:	9100      	str	r1, [sp, #0]
    183a:	4693      	mov	fp, r2
    183c:	000d      	movs	r5, r1
    183e:	4698      	mov	r8, r3
    1840:	e000      	b.n	1844 <_strtol_l.isra.0+0x20>
    1842:	003d      	movs	r5, r7
    1844:	980c      	ldr	r0, [sp, #48]	; 0x30
    1846:	782c      	ldrb	r4, [r5, #0]
    1848:	f000 f90c 	bl	1a64 <__locale_ctype_ptr_l>
    184c:	4642      	mov	r2, r8
    184e:	1900      	adds	r0, r0, r4
    1850:	7843      	ldrb	r3, [r0, #1]
    1852:	1c6f      	adds	r7, r5, #1
    1854:	421a      	tst	r2, r3
    1856:	d1f4      	bne.n	1842 <_strtol_l.isra.0+0x1e>
    1858:	2c2d      	cmp	r4, #45	; 0x2d
    185a:	d05f      	beq.n	191c <_strtol_l.isra.0+0xf8>
    185c:	2c2b      	cmp	r4, #43	; 0x2b
    185e:	d100      	bne.n	1862 <_strtol_l.isra.0+0x3e>
    1860:	e08e      	b.n	1980 <_strtol_l.isra.0+0x15c>
    1862:	2310      	movs	r3, #16
    1864:	0032      	movs	r2, r6
    1866:	439a      	bics	r2, r3
    1868:	4691      	mov	r9, r2
    186a:	d100      	bne.n	186e <_strtol_l.isra.0+0x4a>
    186c:	e078      	b.n	1960 <_strtol_l.isra.0+0x13c>
    186e:	2300      	movs	r3, #0
    1870:	4699      	mov	r9, r3
    1872:	4b4b      	ldr	r3, [pc, #300]	; (19a0 <_strtol_l.isra.0+0x17c>)
    1874:	46b0      	mov	r8, r6
    1876:	003d      	movs	r5, r7
    1878:	469a      	mov	sl, r3
    187a:	4641      	mov	r1, r8
    187c:	4650      	mov	r0, sl
    187e:	f001 fc57 	bl	3130 <____aeabi_uidivmod_from_thumb>
    1882:	4650      	mov	r0, sl
    1884:	000f      	movs	r7, r1
    1886:	4641      	mov	r1, r8
    1888:	f001 fc7c 	bl	3184 <____aeabi_uidiv_from_thumb>
    188c:	2300      	movs	r3, #0
    188e:	0002      	movs	r2, r0
    1890:	0021      	movs	r1, r4
    1892:	2000      	movs	r0, #0
    1894:	e012      	b.n	18bc <_strtol_l.isra.0+0x98>
    1896:	3937      	subs	r1, #55	; 0x37
    1898:	000c      	movs	r4, r1
    189a:	42b4      	cmp	r4, r6
    189c:	da1d      	bge.n	18da <_strtol_l.isra.0+0xb6>
    189e:	2b00      	cmp	r3, #0
    18a0:	db08      	blt.n	18b4 <_strtol_l.isra.0+0x90>
    18a2:	4282      	cmp	r2, r0
    18a4:	d306      	bcc.n	18b4 <_strtol_l.isra.0+0x90>
    18a6:	d12e      	bne.n	1906 <_strtol_l.isra.0+0xe2>
    18a8:	2301      	movs	r3, #1
    18aa:	42a7      	cmp	r7, r4
    18ac:	db00      	blt.n	18b0 <_strtol_l.isra.0+0x8c>
    18ae:	2300      	movs	r3, #0
    18b0:	061b      	lsls	r3, r3, #24
    18b2:	d028      	beq.n	1906 <_strtol_l.isra.0+0xe2>
    18b4:	2301      	movs	r3, #1
    18b6:	425b      	negs	r3, r3
    18b8:	7829      	ldrb	r1, [r5, #0]
    18ba:	3501      	adds	r5, #1
    18bc:	000c      	movs	r4, r1
    18be:	3c30      	subs	r4, #48	; 0x30
    18c0:	2c09      	cmp	r4, #9
    18c2:	d9ea      	bls.n	189a <_strtol_l.isra.0+0x76>
    18c4:	3c11      	subs	r4, #17
    18c6:	2c19      	cmp	r4, #25
    18c8:	d9e5      	bls.n	1896 <_strtol_l.isra.0+0x72>
    18ca:	000c      	movs	r4, r1
    18cc:	3c61      	subs	r4, #97	; 0x61
    18ce:	2c19      	cmp	r4, #25
    18d0:	d803      	bhi.n	18da <_strtol_l.isra.0+0xb6>
    18d2:	3957      	subs	r1, #87	; 0x57
    18d4:	000c      	movs	r4, r1
    18d6:	42b4      	cmp	r4, r6
    18d8:	dbe1      	blt.n	189e <_strtol_l.isra.0+0x7a>
    18da:	1c5a      	adds	r2, r3, #1
    18dc:	d038      	beq.n	1950 <_strtol_l.isra.0+0x12c>
    18de:	464a      	mov	r2, r9
    18e0:	2a00      	cmp	r2, #0
    18e2:	d115      	bne.n	1910 <_strtol_l.isra.0+0xec>
    18e4:	465a      	mov	r2, fp
    18e6:	2a00      	cmp	r2, #0
    18e8:	d004      	beq.n	18f4 <_strtol_l.isra.0+0xd0>
    18ea:	9a00      	ldr	r2, [sp, #0]
    18ec:	2b00      	cmp	r3, #0
    18ee:	d111      	bne.n	1914 <_strtol_l.isra.0+0xf0>
    18f0:	465b      	mov	r3, fp
    18f2:	601a      	str	r2, [r3, #0]
    18f4:	b003      	add	sp, #12
    18f6:	bc3c      	pop	{r2, r3, r4, r5}
    18f8:	4690      	mov	r8, r2
    18fa:	4699      	mov	r9, r3
    18fc:	46a2      	mov	sl, r4
    18fe:	46ab      	mov	fp, r5
    1900:	bcf0      	pop	{r4, r5, r6, r7}
    1902:	bc02      	pop	{r1}
    1904:	4708      	bx	r1
    1906:	4643      	mov	r3, r8
    1908:	4343      	muls	r3, r0
    190a:	18e0      	adds	r0, r4, r3
    190c:	2301      	movs	r3, #1
    190e:	e7d3      	b.n	18b8 <_strtol_l.isra.0+0x94>
    1910:	4240      	negs	r0, r0
    1912:	e7e7      	b.n	18e4 <_strtol_l.isra.0+0xc0>
    1914:	4682      	mov	sl, r0
    1916:	1e6a      	subs	r2, r5, #1
    1918:	4650      	mov	r0, sl
    191a:	e7e9      	b.n	18f0 <_strtol_l.isra.0+0xcc>
    191c:	4273      	negs	r3, r6
    191e:	4173      	adcs	r3, r6
    1920:	0031      	movs	r1, r6
    1922:	2210      	movs	r2, #16
    1924:	4391      	bics	r1, r2
    1926:	000a      	movs	r2, r1
    1928:	2101      	movs	r1, #1
    192a:	3502      	adds	r5, #2
    192c:	783c      	ldrb	r4, [r7, #0]
    192e:	4689      	mov	r9, r1
    1930:	2a00      	cmp	r2, #0
    1932:	d12e      	bne.n	1992 <_strtol_l.isra.0+0x16e>
    1934:	2c30      	cmp	r4, #48	; 0x30
    1936:	d018      	beq.n	196a <_strtol_l.isra.0+0x146>
    1938:	2b00      	cmp	r3, #0
    193a:	d02f      	beq.n	199c <_strtol_l.isra.0+0x178>
    193c:	230a      	movs	r3, #10
    193e:	260a      	movs	r6, #10
    1940:	4698      	mov	r8, r3
    1942:	464b      	mov	r3, r9
    1944:	1e5a      	subs	r2, r3, #1
    1946:	4193      	sbcs	r3, r2
    1948:	4a15      	ldr	r2, [pc, #84]	; (19a0 <_strtol_l.isra.0+0x17c>)
    194a:	4692      	mov	sl, r2
    194c:	449a      	add	sl, r3
    194e:	e794      	b.n	187a <_strtol_l.isra.0+0x56>
    1950:	9a01      	ldr	r2, [sp, #4]
    1952:	3323      	adds	r3, #35	; 0x23
    1954:	6013      	str	r3, [r2, #0]
    1956:	465b      	mov	r3, fp
    1958:	4650      	mov	r0, sl
    195a:	2b00      	cmp	r3, #0
    195c:	d1db      	bne.n	1916 <_strtol_l.isra.0+0xf2>
    195e:	e7c9      	b.n	18f4 <_strtol_l.isra.0+0xd0>
    1960:	4273      	negs	r3, r6
    1962:	4173      	adcs	r3, r6
    1964:	003d      	movs	r5, r7
    1966:	2c30      	cmp	r4, #48	; 0x30
    1968:	d1e6      	bne.n	1938 <_strtol_l.isra.0+0x114>
    196a:	2120      	movs	r1, #32
    196c:	782a      	ldrb	r2, [r5, #0]
    196e:	438a      	bics	r2, r1
    1970:	2a58      	cmp	r2, #88	; 0x58
    1972:	d108      	bne.n	1986 <_strtol_l.isra.0+0x162>
    1974:	2310      	movs	r3, #16
    1976:	786c      	ldrb	r4, [r5, #1]
    1978:	4698      	mov	r8, r3
    197a:	3502      	adds	r5, #2
    197c:	2610      	movs	r6, #16
    197e:	e7e0      	b.n	1942 <_strtol_l.isra.0+0x11e>
    1980:	783c      	ldrb	r4, [r7, #0]
    1982:	1caf      	adds	r7, r5, #2
    1984:	e76d      	b.n	1862 <_strtol_l.isra.0+0x3e>
    1986:	2b00      	cmp	r3, #0
    1988:	d008      	beq.n	199c <_strtol_l.isra.0+0x178>
    198a:	2308      	movs	r3, #8
    198c:	2608      	movs	r6, #8
    198e:	4698      	mov	r8, r3
    1990:	e7d7      	b.n	1942 <_strtol_l.isra.0+0x11e>
    1992:	2380      	movs	r3, #128	; 0x80
    1994:	061b      	lsls	r3, r3, #24
    1996:	46b0      	mov	r8, r6
    1998:	469a      	mov	sl, r3
    199a:	e76e      	b.n	187a <_strtol_l.isra.0+0x56>
    199c:	46b0      	mov	r8, r6
    199e:	e7d0      	b.n	1942 <_strtol_l.isra.0+0x11e>
    19a0:	7fffffff 	.word	0x7fffffff

000019a4 <strtol>:
    19a4:	0013      	movs	r3, r2
    19a6:	4a09      	ldr	r2, [pc, #36]	; (19cc <strtol+0x28>)
    19a8:	b530      	push	{r4, r5, lr}
    19aa:	0005      	movs	r5, r0
    19ac:	6810      	ldr	r0, [r2, #0]
    19ae:	6b44      	ldr	r4, [r0, #52]	; 0x34
    19b0:	b083      	sub	sp, #12
    19b2:	2c00      	cmp	r4, #0
    19b4:	d008      	beq.n	19c8 <strtol+0x24>
    19b6:	000a      	movs	r2, r1
    19b8:	9400      	str	r4, [sp, #0]
    19ba:	0029      	movs	r1, r5
    19bc:	f7ff ff32 	bl	1824 <_strtol_l.isra.0>
    19c0:	b003      	add	sp, #12
    19c2:	bc30      	pop	{r4, r5}
    19c4:	bc02      	pop	{r1}
    19c6:	4708      	bx	r1
    19c8:	4c01      	ldr	r4, [pc, #4]	; (19d0 <strtol+0x2c>)
    19ca:	e7f4      	b.n	19b6 <strtol+0x12>
    19cc:	40000004 	.word	0x40000004
    19d0:	40000430 	.word	0x40000430

000019d4 <__utoa>:
    19d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d6:	4646      	mov	r6, r8
    19d8:	46d6      	mov	lr, sl
    19da:	464f      	mov	r7, r9
    19dc:	b5c0      	push	{r6, r7, lr}
    19de:	b08a      	sub	sp, #40	; 0x28
    19e0:	4690      	mov	r8, r2
    19e2:	466a      	mov	r2, sp
    19e4:	4b1e      	ldr	r3, [pc, #120]	; (1a60 <__utoa+0x8c>)
    19e6:	000d      	movs	r5, r1
    19e8:	0006      	movs	r6, r0
    19ea:	cb13      	ldmia	r3!, {r0, r1, r4}
    19ec:	c213      	stmia	r2!, {r0, r1, r4}
    19ee:	cb13      	ldmia	r3!, {r0, r1, r4}
    19f0:	c213      	stmia	r2!, {r0, r1, r4}
    19f2:	cb13      	ldmia	r3!, {r0, r1, r4}
    19f4:	c213      	stmia	r2!, {r0, r1, r4}
    19f6:	781b      	ldrb	r3, [r3, #0]
    19f8:	7013      	strb	r3, [r2, #0]
    19fa:	4643      	mov	r3, r8
    19fc:	3b02      	subs	r3, #2
    19fe:	46ea      	mov	sl, sp
    1a00:	002f      	movs	r7, r5
    1a02:	2400      	movs	r4, #0
    1a04:	2b22      	cmp	r3, #34	; 0x22
    1a06:	d901      	bls.n	1a0c <__utoa+0x38>
    1a08:	e026      	b.n	1a58 <__utoa+0x84>
    1a0a:	464c      	mov	r4, r9
    1a0c:	1c63      	adds	r3, r4, #1
    1a0e:	0030      	movs	r0, r6
    1a10:	4641      	mov	r1, r8
    1a12:	4699      	mov	r9, r3
    1a14:	f001 fb8c 	bl	3130 <____aeabi_uidivmod_from_thumb>
    1a18:	4653      	mov	r3, sl
    1a1a:	5c5b      	ldrb	r3, [r3, r1]
    1a1c:	0030      	movs	r0, r6
    1a1e:	703b      	strb	r3, [r7, #0]
    1a20:	4641      	mov	r1, r8
    1a22:	f001 fbaf 	bl	3184 <____aeabi_uidiv_from_thumb>
    1a26:	3701      	adds	r7, #1
    1a28:	1e06      	subs	r6, r0, #0
    1a2a:	d1ee      	bne.n	1a0a <__utoa+0x36>
    1a2c:	464b      	mov	r3, r9
    1a2e:	54e8      	strb	r0, [r5, r3]
    1a30:	2300      	movs	r3, #0
    1a32:	2c00      	cmp	r4, #0
    1a34:	d007      	beq.n	1a46 <__utoa+0x72>
    1a36:	5cea      	ldrb	r2, [r5, r3]
    1a38:	5d29      	ldrb	r1, [r5, r4]
    1a3a:	54e9      	strb	r1, [r5, r3]
    1a3c:	552a      	strb	r2, [r5, r4]
    1a3e:	3301      	adds	r3, #1
    1a40:	3c01      	subs	r4, #1
    1a42:	42a3      	cmp	r3, r4
    1a44:	dbf7      	blt.n	1a36 <__utoa+0x62>
    1a46:	0028      	movs	r0, r5
    1a48:	b00a      	add	sp, #40	; 0x28
    1a4a:	bc1c      	pop	{r2, r3, r4}
    1a4c:	4690      	mov	r8, r2
    1a4e:	4699      	mov	r9, r3
    1a50:	46a2      	mov	sl, r4
    1a52:	bcf0      	pop	{r4, r5, r6, r7}
    1a54:	bc02      	pop	{r1}
    1a56:	4708      	bx	r1
    1a58:	702c      	strb	r4, [r5, #0]
    1a5a:	2000      	movs	r0, #0
    1a5c:	e7f4      	b.n	1a48 <__utoa+0x74>
    1a5e:	46c0      	nop			; (mov r8, r8)
    1a60:	000032fc 	.word	0x000032fc

00001a64 <__locale_ctype_ptr_l>:
    1a64:	23ec      	movs	r3, #236	; 0xec
    1a66:	58c0      	ldr	r0, [r0, r3]
    1a68:	4770      	bx	lr
    1a6a:	46c0      	nop			; (mov r8, r8)

00001a6c <__ascii_mbtowc>:
    1a6c:	b082      	sub	sp, #8
    1a6e:	2900      	cmp	r1, #0
    1a70:	d00a      	beq.n	1a88 <__ascii_mbtowc+0x1c>
    1a72:	2a00      	cmp	r2, #0
    1a74:	d00b      	beq.n	1a8e <__ascii_mbtowc+0x22>
    1a76:	2b00      	cmp	r3, #0
    1a78:	d00b      	beq.n	1a92 <__ascii_mbtowc+0x26>
    1a7a:	7813      	ldrb	r3, [r2, #0]
    1a7c:	600b      	str	r3, [r1, #0]
    1a7e:	7810      	ldrb	r0, [r2, #0]
    1a80:	1e43      	subs	r3, r0, #1
    1a82:	4198      	sbcs	r0, r3
    1a84:	b002      	add	sp, #8
    1a86:	4770      	bx	lr
    1a88:	a901      	add	r1, sp, #4
    1a8a:	2a00      	cmp	r2, #0
    1a8c:	d1f3      	bne.n	1a76 <__ascii_mbtowc+0xa>
    1a8e:	2000      	movs	r0, #0
    1a90:	e7f8      	b.n	1a84 <__ascii_mbtowc+0x18>
    1a92:	2002      	movs	r0, #2
    1a94:	4240      	negs	r0, r0
    1a96:	e7f5      	b.n	1a84 <__ascii_mbtowc+0x18>

00001a98 <__ascii_wctomb>:
    1a98:	2900      	cmp	r1, #0
    1a9a:	d004      	beq.n	1aa6 <__ascii_wctomb+0xe>
    1a9c:	2aff      	cmp	r2, #255	; 0xff
    1a9e:	d804      	bhi.n	1aaa <__ascii_wctomb+0x12>
    1aa0:	2001      	movs	r0, #1
    1aa2:	700a      	strb	r2, [r1, #0]
    1aa4:	4770      	bx	lr
    1aa6:	2000      	movs	r0, #0
    1aa8:	e7fc      	b.n	1aa4 <__ascii_wctomb+0xc>
    1aaa:	238a      	movs	r3, #138	; 0x8a
    1aac:	6003      	str	r3, [r0, #0]
    1aae:	2001      	movs	r0, #1
    1ab0:	4240      	negs	r0, r0
    1ab2:	e7f7      	b.n	1aa4 <__ascii_wctomb+0xc>

00001ab4 <__udivsi3>:
    1ab4:	e2512001 	subs	r2, r1, #1
    1ab8:	012fff1e 	bxeq	lr
    1abc:	3a000036 	bcc	1b9c <__udivsi3+0xe8>
    1ac0:	e1500001 	cmp	r0, r1
    1ac4:	9a000022 	bls	1b54 <__udivsi3+0xa0>
    1ac8:	e1110002 	tst	r1, r2
    1acc:	0a000023 	beq	1b60 <__udivsi3+0xac>
    1ad0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    1ad4:	01a01181 	lsleq	r1, r1, #3
    1ad8:	03a03008 	moveq	r3, #8
    1adc:	13a03001 	movne	r3, #1
    1ae0:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1ae4:	31510000 	cmpcc	r1, r0
    1ae8:	31a01201 	lslcc	r1, r1, #4
    1aec:	31a03203 	lslcc	r3, r3, #4
    1af0:	3afffffa 	bcc	1ae0 <__udivsi3+0x2c>
    1af4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1af8:	31510000 	cmpcc	r1, r0
    1afc:	31a01081 	lslcc	r1, r1, #1
    1b00:	31a03083 	lslcc	r3, r3, #1
    1b04:	3afffffa 	bcc	1af4 <__udivsi3+0x40>
    1b08:	e3a02000 	mov	r2, #0
    1b0c:	e1500001 	cmp	r0, r1
    1b10:	20400001 	subcs	r0, r0, r1
    1b14:	21822003 	orrcs	r2, r2, r3
    1b18:	e15000a1 	cmp	r0, r1, lsr #1
    1b1c:	204000a1 	subcs	r0, r0, r1, lsr #1
    1b20:	218220a3 	orrcs	r2, r2, r3, lsr #1
    1b24:	e1500121 	cmp	r0, r1, lsr #2
    1b28:	20400121 	subcs	r0, r0, r1, lsr #2
    1b2c:	21822123 	orrcs	r2, r2, r3, lsr #2
    1b30:	e15001a1 	cmp	r0, r1, lsr #3
    1b34:	204001a1 	subcs	r0, r0, r1, lsr #3
    1b38:	218221a3 	orrcs	r2, r2, r3, lsr #3
    1b3c:	e3500000 	cmp	r0, #0
    1b40:	11b03223 	lsrsne	r3, r3, #4
    1b44:	11a01221 	lsrne	r1, r1, #4
    1b48:	1affffef 	bne	1b0c <__udivsi3+0x58>
    1b4c:	e1a00002 	mov	r0, r2
    1b50:	e12fff1e 	bx	lr
    1b54:	03a00001 	moveq	r0, #1
    1b58:	13a00000 	movne	r0, #0
    1b5c:	e12fff1e 	bx	lr
    1b60:	e3510801 	cmp	r1, #65536	; 0x10000
    1b64:	21a01821 	lsrcs	r1, r1, #16
    1b68:	23a02010 	movcs	r2, #16
    1b6c:	33a02000 	movcc	r2, #0
    1b70:	e3510c01 	cmp	r1, #256	; 0x100
    1b74:	21a01421 	lsrcs	r1, r1, #8
    1b78:	22822008 	addcs	r2, r2, #8
    1b7c:	e3510010 	cmp	r1, #16
    1b80:	21a01221 	lsrcs	r1, r1, #4
    1b84:	22822004 	addcs	r2, r2, #4
    1b88:	e3510004 	cmp	r1, #4
    1b8c:	82822003 	addhi	r2, r2, #3
    1b90:	908220a1 	addls	r2, r2, r1, lsr #1
    1b94:	e1a00230 	lsr	r0, r0, r2
    1b98:	e12fff1e 	bx	lr
    1b9c:	e12fff1f 	bx	pc
    1ba0:	e1a00000 	nop			; (mov r0, r0)
    1ba4:	e3500000 	cmp	r0, #0
    1ba8:	13e00000 	mvnne	r0, #0
    1bac:	ea000563 	b	3140 <____aeabi_idiv0_from_arm>

00001bb0 <__aeabi_uidivmod>:
    1bb0:	e3510000 	cmp	r1, #0
    1bb4:	0afffff8 	beq	1b9c <__udivsi3+0xe8>
    1bb8:	e92d4003 	push	{r0, r1, lr}
    1bbc:	ebffffbc 	bl	1ab4 <__udivsi3>
    1bc0:	e8bd4006 	pop	{r1, r2, lr}
    1bc4:	e0030092 	mul	r3, r2, r0
    1bc8:	e0411003 	sub	r1, r1, r3
    1bcc:	e12fff1e 	bx	lr

00001bd0 <__aeabi_idiv0>:
    1bd0:	4770      	bx	lr
    1bd2:	46c0      	nop			; (mov r8, r8)

00001bd4 <__aeabi_drsub>:
    1bd4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1bd8:	ea000000 	b	1be0 <__adddf3>

00001bdc <__aeabi_dsub>:
    1bdc:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001be0 <__adddf3>:
    1be0:	e92d4030 	push	{r4, r5, lr}
    1be4:	e1a04081 	lsl	r4, r1, #1
    1be8:	e1a05083 	lsl	r5, r3, #1
    1bec:	e1340005 	teq	r4, r5
    1bf0:	01300002 	teqeq	r0, r2
    1bf4:	1194c000 	orrsne	ip, r4, r0
    1bf8:	1195c002 	orrsne	ip, r5, r2
    1bfc:	11f0cac4 	mvnsne	ip, r4, asr #21
    1c00:	11f0cac5 	mvnsne	ip, r5, asr #21
    1c04:	0a00008c 	beq	1e3c <__adddf3+0x25c>
    1c08:	e1a04aa4 	lsr	r4, r4, #21
    1c0c:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1c10:	b2655000 	rsblt	r5, r5, #0
    1c14:	da000006 	ble	1c34 <__adddf3+0x54>
    1c18:	e0844005 	add	r4, r4, r5
    1c1c:	e0202002 	eor	r2, r0, r2
    1c20:	e0213003 	eor	r3, r1, r3
    1c24:	e0220000 	eor	r0, r2, r0
    1c28:	e0231001 	eor	r1, r3, r1
    1c2c:	e0202002 	eor	r2, r0, r2
    1c30:	e0213003 	eor	r3, r1, r3
    1c34:	e3550036 	cmp	r5, #54	; 0x36
    1c38:	88bd4030 	pophi	{r4, r5, lr}
    1c3c:	812fff1e 	bxhi	lr
    1c40:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1c44:	e1a01601 	lsl	r1, r1, #12
    1c48:	e3a0c601 	mov	ip, #1048576	; 0x100000
    1c4c:	e18c1621 	orr	r1, ip, r1, lsr #12
    1c50:	0a000001 	beq	1c5c <__adddf3+0x7c>
    1c54:	e2700000 	rsbs	r0, r0, #0
    1c58:	e2e11000 	rsc	r1, r1, #0
    1c5c:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1c60:	e1a03603 	lsl	r3, r3, #12
    1c64:	e18c3623 	orr	r3, ip, r3, lsr #12
    1c68:	0a000001 	beq	1c74 <__adddf3+0x94>
    1c6c:	e2722000 	rsbs	r2, r2, #0
    1c70:	e2e33000 	rsc	r3, r3, #0
    1c74:	e1340005 	teq	r4, r5
    1c78:	0a000069 	beq	1e24 <__adddf3+0x244>
    1c7c:	e2444001 	sub	r4, r4, #1
    1c80:	e275e020 	rsbs	lr, r5, #32
    1c84:	ba000005 	blt	1ca0 <__adddf3+0xc0>
    1c88:	e1a0ce12 	lsl	ip, r2, lr
    1c8c:	e0900532 	adds	r0, r0, r2, lsr r5
    1c90:	e2a11000 	adc	r1, r1, #0
    1c94:	e0900e13 	adds	r0, r0, r3, lsl lr
    1c98:	e0b11553 	adcs	r1, r1, r3, asr r5
    1c9c:	ea000006 	b	1cbc <__adddf3+0xdc>
    1ca0:	e2455020 	sub	r5, r5, #32
    1ca4:	e28ee020 	add	lr, lr, #32
    1ca8:	e3520001 	cmp	r2, #1
    1cac:	e1a0ce13 	lsl	ip, r3, lr
    1cb0:	238cc002 	orrcs	ip, ip, #2
    1cb4:	e0900553 	adds	r0, r0, r3, asr r5
    1cb8:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1cbc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1cc0:	5a000002 	bpl	1cd0 <__adddf3+0xf0>
    1cc4:	e27cc000 	rsbs	ip, ip, #0
    1cc8:	e2f00000 	rscs	r0, r0, #0
    1ccc:	e2e11000 	rsc	r1, r1, #0
    1cd0:	e3510601 	cmp	r1, #1048576	; 0x100000
    1cd4:	3a00000f 	bcc	1d18 <__adddf3+0x138>
    1cd8:	e3510602 	cmp	r1, #2097152	; 0x200000
    1cdc:	3a000006 	bcc	1cfc <__adddf3+0x11c>
    1ce0:	e1b010a1 	lsrs	r1, r1, #1
    1ce4:	e1b00060 	rrxs	r0, r0
    1ce8:	e1a0c06c 	rrx	ip, ip
    1cec:	e2844001 	add	r4, r4, #1
    1cf0:	e1a02a84 	lsl	r2, r4, #21
    1cf4:	e3720501 	cmn	r2, #4194304	; 0x400000
    1cf8:	2a00006b 	bcs	1eac <__adddf3+0x2cc>
    1cfc:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    1d00:	01b0c0a0 	lsrseq	ip, r0, #1
    1d04:	e2b00000 	adcs	r0, r0, #0
    1d08:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1d0c:	e1811005 	orr	r1, r1, r5
    1d10:	e8bd4030 	pop	{r4, r5, lr}
    1d14:	e12fff1e 	bx	lr
    1d18:	e1b0c08c 	lsls	ip, ip, #1
    1d1c:	e0b00000 	adcs	r0, r0, r0
    1d20:	e0a11001 	adc	r1, r1, r1
    1d24:	e3110601 	tst	r1, #1048576	; 0x100000
    1d28:	e2444001 	sub	r4, r4, #1
    1d2c:	1afffff2 	bne	1cfc <__adddf3+0x11c>
    1d30:	e3310000 	teq	r1, #0
    1d34:	13a03014 	movne	r3, #20
    1d38:	03a03034 	moveq	r3, #52	; 0x34
    1d3c:	01a01000 	moveq	r1, r0
    1d40:	03a00000 	moveq	r0, #0
    1d44:	e1a02001 	mov	r2, r1
    1d48:	e3520801 	cmp	r2, #65536	; 0x10000
    1d4c:	21a02822 	lsrcs	r2, r2, #16
    1d50:	22433010 	subcs	r3, r3, #16
    1d54:	e3520c01 	cmp	r2, #256	; 0x100
    1d58:	21a02422 	lsrcs	r2, r2, #8
    1d5c:	22433008 	subcs	r3, r3, #8
    1d60:	e3520010 	cmp	r2, #16
    1d64:	21a02222 	lsrcs	r2, r2, #4
    1d68:	22433004 	subcs	r3, r3, #4
    1d6c:	e3520004 	cmp	r2, #4
    1d70:	22433002 	subcs	r3, r3, #2
    1d74:	304330a2 	subcc	r3, r3, r2, lsr #1
    1d78:	e04331a2 	sub	r3, r3, r2, lsr #3
    1d7c:	e2532020 	subs	r2, r3, #32
    1d80:	aa000007 	bge	1da4 <__adddf3+0x1c4>
    1d84:	e292200c 	adds	r2, r2, #12
    1d88:	da000004 	ble	1da0 <__adddf3+0x1c0>
    1d8c:	e282c014 	add	ip, r2, #20
    1d90:	e262200c 	rsb	r2, r2, #12
    1d94:	e1a00c11 	lsl	r0, r1, ip
    1d98:	e1a01231 	lsr	r1, r1, r2
    1d9c:	ea000004 	b	1db4 <__adddf3+0x1d4>
    1da0:	e2822014 	add	r2, r2, #20
    1da4:	d262c020 	rsble	ip, r2, #32
    1da8:	e1a01211 	lsl	r1, r1, r2
    1dac:	d1811c30 	orrle	r1, r1, r0, lsr ip
    1db0:	d1a00210 	lslle	r0, r0, r2
    1db4:	e0544003 	subs	r4, r4, r3
    1db8:	a0811a04 	addge	r1, r1, r4, lsl #20
    1dbc:	a1811005 	orrge	r1, r1, r5
    1dc0:	a8bd4030 	popge	{r4, r5, lr}
    1dc4:	a12fff1e 	bxge	lr
    1dc8:	e1e04004 	mvn	r4, r4
    1dcc:	e254401f 	subs	r4, r4, #31
    1dd0:	aa00000f 	bge	1e14 <__adddf3+0x234>
    1dd4:	e294400c 	adds	r4, r4, #12
    1dd8:	ca000006 	bgt	1df8 <__adddf3+0x218>
    1ddc:	e2844014 	add	r4, r4, #20
    1de0:	e2642020 	rsb	r2, r4, #32
    1de4:	e1a00430 	lsr	r0, r0, r4
    1de8:	e1800211 	orr	r0, r0, r1, lsl r2
    1dec:	e1851431 	orr	r1, r5, r1, lsr r4
    1df0:	e8bd4030 	pop	{r4, r5, lr}
    1df4:	e12fff1e 	bx	lr
    1df8:	e264400c 	rsb	r4, r4, #12
    1dfc:	e2642020 	rsb	r2, r4, #32
    1e00:	e1a00230 	lsr	r0, r0, r2
    1e04:	e1800411 	orr	r0, r0, r1, lsl r4
    1e08:	e1a01005 	mov	r1, r5
    1e0c:	e8bd4030 	pop	{r4, r5, lr}
    1e10:	e12fff1e 	bx	lr
    1e14:	e1a00431 	lsr	r0, r1, r4
    1e18:	e1a01005 	mov	r1, r5
    1e1c:	e8bd4030 	pop	{r4, r5, lr}
    1e20:	e12fff1e 	bx	lr
    1e24:	e3340000 	teq	r4, #0
    1e28:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1e2c:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1e30:	02844001 	addeq	r4, r4, #1
    1e34:	12455001 	subne	r5, r5, #1
    1e38:	eaffff8f 	b	1c7c <__adddf3+0x9c>
    1e3c:	e1f0cac4 	mvns	ip, r4, asr #21
    1e40:	11f0cac5 	mvnsne	ip, r5, asr #21
    1e44:	0a00001d 	beq	1ec0 <__adddf3+0x2e0>
    1e48:	e1340005 	teq	r4, r5
    1e4c:	01300002 	teqeq	r0, r2
    1e50:	0a000004 	beq	1e68 <__adddf3+0x288>
    1e54:	e194c000 	orrs	ip, r4, r0
    1e58:	01a01003 	moveq	r1, r3
    1e5c:	01a00002 	moveq	r0, r2
    1e60:	e8bd4030 	pop	{r4, r5, lr}
    1e64:	e12fff1e 	bx	lr
    1e68:	e1310003 	teq	r1, r3
    1e6c:	13a01000 	movne	r1, #0
    1e70:	13a00000 	movne	r0, #0
    1e74:	18bd4030 	popne	{r4, r5, lr}
    1e78:	112fff1e 	bxne	lr
    1e7c:	e1b0caa4 	lsrs	ip, r4, #21
    1e80:	1a000004 	bne	1e98 <__adddf3+0x2b8>
    1e84:	e1b00080 	lsls	r0, r0, #1
    1e88:	e0b11001 	adcs	r1, r1, r1
    1e8c:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1e90:	e8bd4030 	pop	{r4, r5, lr}
    1e94:	e12fff1e 	bx	lr
    1e98:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1e9c:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1ea0:	38bd4030 	popcc	{r4, r5, lr}
    1ea4:	312fff1e 	bxcc	lr
    1ea8:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1eac:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1eb0:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1eb4:	e3a00000 	mov	r0, #0
    1eb8:	e8bd4030 	pop	{r4, r5, lr}
    1ebc:	e12fff1e 	bx	lr
    1ec0:	e1f0cac4 	mvns	ip, r4, asr #21
    1ec4:	11a01003 	movne	r1, r3
    1ec8:	11a00002 	movne	r0, r2
    1ecc:	01f0cac5 	mvnseq	ip, r5, asr #21
    1ed0:	11a03001 	movne	r3, r1
    1ed4:	11a02000 	movne	r2, r0
    1ed8:	e1904601 	orrs	r4, r0, r1, lsl #12
    1edc:	01925603 	orrseq	r5, r2, r3, lsl #12
    1ee0:	01310003 	teqeq	r1, r3
    1ee4:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1ee8:	e8bd4030 	pop	{r4, r5, lr}
    1eec:	e12fff1e 	bx	lr

00001ef0 <__aeabi_ui2d>:
    1ef0:	e3300000 	teq	r0, #0
    1ef4:	03a01000 	moveq	r1, #0
    1ef8:	012fff1e 	bxeq	lr
    1efc:	e92d4030 	push	{r4, r5, lr}
    1f00:	e3a04b01 	mov	r4, #1024	; 0x400
    1f04:	e2844032 	add	r4, r4, #50	; 0x32
    1f08:	e3a05000 	mov	r5, #0
    1f0c:	e3a01000 	mov	r1, #0
    1f10:	eaffff86 	b	1d30 <__adddf3+0x150>

00001f14 <__aeabi_i2d>:
    1f14:	e3300000 	teq	r0, #0
    1f18:	03a01000 	moveq	r1, #0
    1f1c:	012fff1e 	bxeq	lr
    1f20:	e92d4030 	push	{r4, r5, lr}
    1f24:	e3a04b01 	mov	r4, #1024	; 0x400
    1f28:	e2844032 	add	r4, r4, #50	; 0x32
    1f2c:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1f30:	42600000 	rsbmi	r0, r0, #0
    1f34:	e3a01000 	mov	r1, #0
    1f38:	eaffff7c 	b	1d30 <__adddf3+0x150>

00001f3c <__aeabi_f2d>:
    1f3c:	e1b02080 	lsls	r2, r0, #1
    1f40:	e1a011c2 	asr	r1, r2, #3
    1f44:	e1a01061 	rrx	r1, r1
    1f48:	e1a00e02 	lsl	r0, r2, #28
    1f4c:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1f50:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1f54:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1f58:	112fff1e 	bxne	lr
    1f5c:	e3320000 	teq	r2, #0
    1f60:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1f64:	012fff1e 	bxeq	lr
    1f68:	e92d4030 	push	{r4, r5, lr}
    1f6c:	e3a04d0e 	mov	r4, #896	; 0x380
    1f70:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1f74:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1f78:	eaffff6c 	b	1d30 <__adddf3+0x150>

00001f7c <__aeabi_ul2d>:
    1f7c:	e1902001 	orrs	r2, r0, r1
    1f80:	012fff1e 	bxeq	lr
    1f84:	e92d4030 	push	{r4, r5, lr}
    1f88:	e3a05000 	mov	r5, #0
    1f8c:	ea000006 	b	1fac <__aeabi_l2d+0x1c>

00001f90 <__aeabi_l2d>:
    1f90:	e1902001 	orrs	r2, r0, r1
    1f94:	012fff1e 	bxeq	lr
    1f98:	e92d4030 	push	{r4, r5, lr}
    1f9c:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1fa0:	5a000001 	bpl	1fac <__aeabi_l2d+0x1c>
    1fa4:	e2700000 	rsbs	r0, r0, #0
    1fa8:	e2e11000 	rsc	r1, r1, #0
    1fac:	e3a04b01 	mov	r4, #1024	; 0x400
    1fb0:	e2844032 	add	r4, r4, #50	; 0x32
    1fb4:	e1b0cb21 	lsrs	ip, r1, #22
    1fb8:	0affff44 	beq	1cd0 <__adddf3+0xf0>
    1fbc:	e3a02003 	mov	r2, #3
    1fc0:	e1b0c1ac 	lsrs	ip, ip, #3
    1fc4:	12822003 	addne	r2, r2, #3
    1fc8:	e1b0c1ac 	lsrs	ip, ip, #3
    1fcc:	12822003 	addne	r2, r2, #3
    1fd0:	e08221ac 	add	r2, r2, ip, lsr #3
    1fd4:	e2623020 	rsb	r3, r2, #32
    1fd8:	e1a0c310 	lsl	ip, r0, r3
    1fdc:	e1a00230 	lsr	r0, r0, r2
    1fe0:	e1800311 	orr	r0, r0, r1, lsl r3
    1fe4:	e1a01231 	lsr	r1, r1, r2
    1fe8:	e0844002 	add	r4, r4, r2
    1fec:	eaffff37 	b	1cd0 <__adddf3+0xf0>

00001ff0 <__aeabi_dmul>:
    1ff0:	e92d4070 	push	{r4, r5, r6, lr}
    1ff4:	e3a0c0ff 	mov	ip, #255	; 0xff
    1ff8:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    1ffc:	e01c4a21 	ands	r4, ip, r1, lsr #20
    2000:	101c5a23 	andsne	r5, ip, r3, lsr #20
    2004:	1134000c 	teqne	r4, ip
    2008:	1135000c 	teqne	r5, ip
    200c:	0b000075 	bleq	21e8 <__aeabi_dmul+0x1f8>
    2010:	e0844005 	add	r4, r4, r5
    2014:	e0216003 	eor	r6, r1, r3
    2018:	e1c11a8c 	bic	r1, r1, ip, lsl #21
    201c:	e1c33a8c 	bic	r3, r3, ip, lsl #21
    2020:	e1905601 	orrs	r5, r0, r1, lsl #12
    2024:	11925603 	orrsne	r5, r2, r3, lsl #12
    2028:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    202c:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    2030:	0a00001d 	beq	20ac <__aeabi_dmul+0xbc>
    2034:	e08ec290 	umull	ip, lr, r0, r2
    2038:	e3a05000 	mov	r5, #0
    203c:	e0a5e291 	umlal	lr, r5, r1, r2
    2040:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    2044:	e0a5e390 	umlal	lr, r5, r0, r3
    2048:	e3a06000 	mov	r6, #0
    204c:	e0a65391 	umlal	r5, r6, r1, r3
    2050:	e33c0000 	teq	ip, #0
    2054:	138ee001 	orrne	lr, lr, #1
    2058:	e24440ff 	sub	r4, r4, #255	; 0xff
    205c:	e3560c02 	cmp	r6, #512	; 0x200
    2060:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    2064:	2a000002 	bcs	2074 <__aeabi_dmul+0x84>
    2068:	e1b0e08e 	lsls	lr, lr, #1
    206c:	e0b55005 	adcs	r5, r5, r5
    2070:	e0a66006 	adc	r6, r6, r6
    2074:	e1821586 	orr	r1, r2, r6, lsl #11
    2078:	e1811aa5 	orr	r1, r1, r5, lsr #21
    207c:	e1a00585 	lsl	r0, r5, #11
    2080:	e1800aae 	orr	r0, r0, lr, lsr #21
    2084:	e1a0e58e 	lsl	lr, lr, #11
    2088:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    208c:	835c0c07 	cmphi	ip, #1792	; 0x700
    2090:	8a000011 	bhi	20dc <__aeabi_dmul+0xec>
    2094:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    2098:	01b0e0a0 	lsrseq	lr, r0, #1
    209c:	e2b00000 	adcs	r0, r0, #0
    20a0:	e0a11a04 	adc	r1, r1, r4, lsl #20
    20a4:	e8bd4070 	pop	{r4, r5, r6, lr}
    20a8:	e12fff1e 	bx	lr
    20ac:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    20b0:	e1861001 	orr	r1, r6, r1
    20b4:	e1800002 	orr	r0, r0, r2
    20b8:	e0211003 	eor	r1, r1, r3
    20bc:	e05440ac 	subs	r4, r4, ip, lsr #1
    20c0:	c074500c 	rsbsgt	r5, r4, ip
    20c4:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    20c8:	c8bd4070 	popgt	{r4, r5, r6, lr}
    20cc:	c12fff1e 	bxgt	lr
    20d0:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    20d4:	e3a0e000 	mov	lr, #0
    20d8:	e2544001 	subs	r4, r4, #1
    20dc:	ca00005d 	bgt	2258 <__aeabi_dmul+0x268>
    20e0:	e3740036 	cmn	r4, #54	; 0x36
    20e4:	d3a00000 	movle	r0, #0
    20e8:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    20ec:	d8bd4070 	pople	{r4, r5, r6, lr}
    20f0:	d12fff1e 	bxle	lr
    20f4:	e2644000 	rsb	r4, r4, #0
    20f8:	e2544020 	subs	r4, r4, #32
    20fc:	aa00001a 	bge	216c <__aeabi_dmul+0x17c>
    2100:	e294400c 	adds	r4, r4, #12
    2104:	ca00000c 	bgt	213c <__aeabi_dmul+0x14c>
    2108:	e2844014 	add	r4, r4, #20
    210c:	e2645020 	rsb	r5, r4, #32
    2110:	e1a03510 	lsl	r3, r0, r5
    2114:	e1a00430 	lsr	r0, r0, r4
    2118:	e1800511 	orr	r0, r0, r1, lsl r5
    211c:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    2120:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2124:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2128:	e0a21431 	adc	r1, r2, r1, lsr r4
    212c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2130:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2134:	e8bd4070 	pop	{r4, r5, r6, lr}
    2138:	e12fff1e 	bx	lr
    213c:	e264400c 	rsb	r4, r4, #12
    2140:	e2645020 	rsb	r5, r4, #32
    2144:	e1a03410 	lsl	r3, r0, r4
    2148:	e1a00530 	lsr	r0, r0, r5
    214c:	e1800411 	orr	r0, r0, r1, lsl r4
    2150:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2154:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2158:	e2a11000 	adc	r1, r1, #0
    215c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2160:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2164:	e8bd4070 	pop	{r4, r5, r6, lr}
    2168:	e12fff1e 	bx	lr
    216c:	e2645020 	rsb	r5, r4, #32
    2170:	e18ee510 	orr	lr, lr, r0, lsl r5
    2174:	e1a03430 	lsr	r3, r0, r4
    2178:	e1833511 	orr	r3, r3, r1, lsl r5
    217c:	e1a00431 	lsr	r0, r1, r4
    2180:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2184:	e1c00431 	bic	r0, r0, r1, lsr r4
    2188:	e0800fa3 	add	r0, r0, r3, lsr #31
    218c:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2190:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2194:	e8bd4070 	pop	{r4, r5, r6, lr}
    2198:	e12fff1e 	bx	lr
    219c:	e3340000 	teq	r4, #0
    21a0:	1a000008 	bne	21c8 <__aeabi_dmul+0x1d8>
    21a4:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    21a8:	e1b00080 	lsls	r0, r0, #1
    21ac:	e0a11001 	adc	r1, r1, r1
    21b0:	e3110601 	tst	r1, #1048576	; 0x100000
    21b4:	02444001 	subeq	r4, r4, #1
    21b8:	0afffffa 	beq	21a8 <__aeabi_dmul+0x1b8>
    21bc:	e1811006 	orr	r1, r1, r6
    21c0:	e3350000 	teq	r5, #0
    21c4:	112fff1e 	bxne	lr
    21c8:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    21cc:	e1b02082 	lsls	r2, r2, #1
    21d0:	e0a33003 	adc	r3, r3, r3
    21d4:	e3130601 	tst	r3, #1048576	; 0x100000
    21d8:	02455001 	subeq	r5, r5, #1
    21dc:	0afffffa 	beq	21cc <__aeabi_dmul+0x1dc>
    21e0:	e1833006 	orr	r3, r3, r6
    21e4:	e12fff1e 	bx	lr
    21e8:	e134000c 	teq	r4, ip
    21ec:	e00c5a23 	and	r5, ip, r3, lsr #20
    21f0:	1135000c 	teqne	r5, ip
    21f4:	0a000007 	beq	2218 <__aeabi_dmul+0x228>
    21f8:	e1906081 	orrs	r6, r0, r1, lsl #1
    21fc:	11926083 	orrsne	r6, r2, r3, lsl #1
    2200:	1affffe5 	bne	219c <__aeabi_dmul+0x1ac>
    2204:	e0211003 	eor	r1, r1, r3
    2208:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    220c:	e3a00000 	mov	r0, #0
    2210:	e8bd4070 	pop	{r4, r5, r6, lr}
    2214:	e12fff1e 	bx	lr
    2218:	e1906081 	orrs	r6, r0, r1, lsl #1
    221c:	01a00002 	moveq	r0, r2
    2220:	01a01003 	moveq	r1, r3
    2224:	11926083 	orrsne	r6, r2, r3, lsl #1
    2228:	0a000010 	beq	2270 <__aeabi_dmul+0x280>
    222c:	e134000c 	teq	r4, ip
    2230:	1a000001 	bne	223c <__aeabi_dmul+0x24c>
    2234:	e1906601 	orrs	r6, r0, r1, lsl #12
    2238:	1a00000c 	bne	2270 <__aeabi_dmul+0x280>
    223c:	e135000c 	teq	r5, ip
    2240:	1a000003 	bne	2254 <__aeabi_dmul+0x264>
    2244:	e1926603 	orrs	r6, r2, r3, lsl #12
    2248:	11a00002 	movne	r0, r2
    224c:	11a01003 	movne	r1, r3
    2250:	1a000006 	bne	2270 <__aeabi_dmul+0x280>
    2254:	e0211003 	eor	r1, r1, r3
    2258:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    225c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2260:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2264:	e3a00000 	mov	r0, #0
    2268:	e8bd4070 	pop	{r4, r5, r6, lr}
    226c:	e12fff1e 	bx	lr
    2270:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2274:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    2278:	e8bd4070 	pop	{r4, r5, r6, lr}
    227c:	e12fff1e 	bx	lr

00002280 <__aeabi_ddiv>:
    2280:	e92d4070 	push	{r4, r5, r6, lr}
    2284:	e3a0c0ff 	mov	ip, #255	; 0xff
    2288:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    228c:	e01c4a21 	ands	r4, ip, r1, lsr #20
    2290:	101c5a23 	andsne	r5, ip, r3, lsr #20
    2294:	1134000c 	teqne	r4, ip
    2298:	1135000c 	teqne	r5, ip
    229c:	0b00005e 	bleq	241c <__aeabi_ddiv+0x19c>
    22a0:	e0444005 	sub	r4, r4, r5
    22a4:	e021e003 	eor	lr, r1, r3
    22a8:	e1925603 	orrs	r5, r2, r3, lsl #12
    22ac:	e1a01601 	lsl	r1, r1, #12
    22b0:	0a00004c 	beq	23e8 <__aeabi_ddiv+0x168>
    22b4:	e1a03603 	lsl	r3, r3, #12
    22b8:	e3a05201 	mov	r5, #268435456	; 0x10000000
    22bc:	e1853223 	orr	r3, r5, r3, lsr #4
    22c0:	e1833c22 	orr	r3, r3, r2, lsr #24
    22c4:	e1a02402 	lsl	r2, r2, #8
    22c8:	e1855221 	orr	r5, r5, r1, lsr #4
    22cc:	e1855c20 	orr	r5, r5, r0, lsr #24
    22d0:	e1a06400 	lsl	r6, r0, #8
    22d4:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    22d8:	e1550003 	cmp	r5, r3
    22dc:	01560002 	cmpeq	r6, r2
    22e0:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    22e4:	e2844c03 	add	r4, r4, #768	; 0x300
    22e8:	2a000001 	bcs	22f4 <__aeabi_ddiv+0x74>
    22ec:	e1b030a3 	lsrs	r3, r3, #1
    22f0:	e1a02062 	rrx	r2, r2
    22f4:	e0566002 	subs	r6, r6, r2
    22f8:	e0c55003 	sbc	r5, r5, r3
    22fc:	e1b030a3 	lsrs	r3, r3, #1
    2300:	e1a02062 	rrx	r2, r2
    2304:	e3a00601 	mov	r0, #1048576	; 0x100000
    2308:	e3a0c702 	mov	ip, #524288	; 0x80000
    230c:	e056e002 	subs	lr, r6, r2
    2310:	e0d5e003 	sbcs	lr, r5, r3
    2314:	20466002 	subcs	r6, r6, r2
    2318:	21a0500e 	movcs	r5, lr
    231c:	2180000c 	orrcs	r0, r0, ip
    2320:	e1b030a3 	lsrs	r3, r3, #1
    2324:	e1a02062 	rrx	r2, r2
    2328:	e056e002 	subs	lr, r6, r2
    232c:	e0d5e003 	sbcs	lr, r5, r3
    2330:	20466002 	subcs	r6, r6, r2
    2334:	21a0500e 	movcs	r5, lr
    2338:	218000ac 	orrcs	r0, r0, ip, lsr #1
    233c:	e1b030a3 	lsrs	r3, r3, #1
    2340:	e1a02062 	rrx	r2, r2
    2344:	e056e002 	subs	lr, r6, r2
    2348:	e0d5e003 	sbcs	lr, r5, r3
    234c:	20466002 	subcs	r6, r6, r2
    2350:	21a0500e 	movcs	r5, lr
    2354:	2180012c 	orrcs	r0, r0, ip, lsr #2
    2358:	e1b030a3 	lsrs	r3, r3, #1
    235c:	e1a02062 	rrx	r2, r2
    2360:	e056e002 	subs	lr, r6, r2
    2364:	e0d5e003 	sbcs	lr, r5, r3
    2368:	20466002 	subcs	r6, r6, r2
    236c:	21a0500e 	movcs	r5, lr
    2370:	218001ac 	orrcs	r0, r0, ip, lsr #3
    2374:	e195e006 	orrs	lr, r5, r6
    2378:	0a00000d 	beq	23b4 <__aeabi_ddiv+0x134>
    237c:	e1a05205 	lsl	r5, r5, #4
    2380:	e1855e26 	orr	r5, r5, r6, lsr #28
    2384:	e1a06206 	lsl	r6, r6, #4
    2388:	e1a03183 	lsl	r3, r3, #3
    238c:	e1833ea2 	orr	r3, r3, r2, lsr #29
    2390:	e1a02182 	lsl	r2, r2, #3
    2394:	e1b0c22c 	lsrs	ip, ip, #4
    2398:	1affffdb 	bne	230c <__aeabi_ddiv+0x8c>
    239c:	e3110601 	tst	r1, #1048576	; 0x100000
    23a0:	1a000006 	bne	23c0 <__aeabi_ddiv+0x140>
    23a4:	e1811000 	orr	r1, r1, r0
    23a8:	e3a00000 	mov	r0, #0
    23ac:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    23b0:	eaffffd5 	b	230c <__aeabi_ddiv+0x8c>
    23b4:	e3110601 	tst	r1, #1048576	; 0x100000
    23b8:	01811000 	orreq	r1, r1, r0
    23bc:	03a00000 	moveq	r0, #0
    23c0:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    23c4:	835c0c07 	cmphi	ip, #1792	; 0x700
    23c8:	8affff43 	bhi	20dc <__aeabi_dmul+0xec>
    23cc:	e055c003 	subs	ip, r5, r3
    23d0:	0056c002 	subseq	ip, r6, r2
    23d4:	01b0c0a0 	lsrseq	ip, r0, #1
    23d8:	e2b00000 	adcs	r0, r0, #0
    23dc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    23e0:	e8bd4070 	pop	{r4, r5, r6, lr}
    23e4:	e12fff1e 	bx	lr
    23e8:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    23ec:	e18e1621 	orr	r1, lr, r1, lsr #12
    23f0:	e09440ac 	adds	r4, r4, ip, lsr #1
    23f4:	c074500c 	rsbsgt	r5, r4, ip
    23f8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    23fc:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2400:	c12fff1e 	bxgt	lr
    2404:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2408:	e3a0e000 	mov	lr, #0
    240c:	e2544001 	subs	r4, r4, #1
    2410:	eaffff31 	b	20dc <__aeabi_dmul+0xec>
    2414:	e185e006 	orr	lr, r5, r6
    2418:	eaffff2f 	b	20dc <__aeabi_dmul+0xec>
    241c:	e00c5a23 	and	r5, ip, r3, lsr #20
    2420:	e134000c 	teq	r4, ip
    2424:	0135000c 	teqeq	r5, ip
    2428:	0affff90 	beq	2270 <__aeabi_dmul+0x280>
    242c:	e134000c 	teq	r4, ip
    2430:	1a000006 	bne	2450 <__aeabi_ddiv+0x1d0>
    2434:	e1904601 	orrs	r4, r0, r1, lsl #12
    2438:	1affff8c 	bne	2270 <__aeabi_dmul+0x280>
    243c:	e135000c 	teq	r5, ip
    2440:	1affff83 	bne	2254 <__aeabi_dmul+0x264>
    2444:	e1a00002 	mov	r0, r2
    2448:	e1a01003 	mov	r1, r3
    244c:	eaffff87 	b	2270 <__aeabi_dmul+0x280>
    2450:	e135000c 	teq	r5, ip
    2454:	1a000004 	bne	246c <__aeabi_ddiv+0x1ec>
    2458:	e1925603 	orrs	r5, r2, r3, lsl #12
    245c:	0affff68 	beq	2204 <__aeabi_dmul+0x214>
    2460:	e1a00002 	mov	r0, r2
    2464:	e1a01003 	mov	r1, r3
    2468:	eaffff80 	b	2270 <__aeabi_dmul+0x280>
    246c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2470:	11926083 	orrsne	r6, r2, r3, lsl #1
    2474:	1affff48 	bne	219c <__aeabi_dmul+0x1ac>
    2478:	e1904081 	orrs	r4, r0, r1, lsl #1
    247c:	1affff74 	bne	2254 <__aeabi_dmul+0x264>
    2480:	e1925083 	orrs	r5, r2, r3, lsl #1
    2484:	1affff5e 	bne	2204 <__aeabi_dmul+0x214>
    2488:	eaffff78 	b	2270 <__aeabi_dmul+0x280>

0000248c <__aeabi_d2iz>:
    248c:	e1a02081 	lsl	r2, r1, #1
    2490:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    2494:	2a00000c 	bcs	24cc <__aeabi_d2iz+0x40>
    2498:	5a000009 	bpl	24c4 <__aeabi_d2iz+0x38>
    249c:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    24a0:	e0532ac2 	subs	r2, r3, r2, asr #21
    24a4:	9a00000a 	bls	24d4 <__aeabi_d2iz+0x48>
    24a8:	e1a03581 	lsl	r3, r1, #11
    24ac:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    24b0:	e1833aa0 	orr	r3, r3, r0, lsr #21
    24b4:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    24b8:	e1a00233 	lsr	r0, r3, r2
    24bc:	12600000 	rsbne	r0, r0, #0
    24c0:	e12fff1e 	bx	lr
    24c4:	e3a00000 	mov	r0, #0
    24c8:	e12fff1e 	bx	lr
    24cc:	e1900601 	orrs	r0, r0, r1, lsl #12
    24d0:	1a000002 	bne	24e0 <__aeabi_d2iz+0x54>
    24d4:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    24d8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    24dc:	e12fff1e 	bx	lr
    24e0:	e3a00000 	mov	r0, #0
    24e4:	e12fff1e 	bx	lr

000024e8 <__aeabi_d2f>:
    24e8:	e1a02081 	lsl	r2, r1, #1
    24ec:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    24f0:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
    24f4:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    24f8:	9a000006 	bls	2518 <__aeabi_d2f+0x30>
    24fc:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    2500:	e1a02180 	lsl	r2, r0, #3
    2504:	e18c0ea0 	orr	r0, ip, r0, lsr #29
    2508:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    250c:	e0a00103 	adc	r0, r0, r3, lsl #2
    2510:	03c00001 	biceq	r0, r0, #1
    2514:	e12fff1e 	bx	lr
    2518:	e3110101 	tst	r1, #1073741824	; 0x40000000
    251c:	1a00000f 	bne	2560 <__aeabi_d2f+0x78>
    2520:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    2524:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    2528:	b12fff1e 	bxlt	lr
    252c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2530:	e1a02aa2 	lsr	r2, r2, #21
    2534:	e2622018 	rsb	r2, r2, #24
    2538:	e262c020 	rsb	ip, r2, #32
    253c:	e1b03c10 	lsls	r3, r0, ip
    2540:	e1a00230 	lsr	r0, r0, r2
    2544:	13800001 	orrne	r0, r0, #1
    2548:	e1a03581 	lsl	r3, r1, #11
    254c:	e1a035a3 	lsr	r3, r3, #11
    2550:	e1800c13 	orr	r0, r0, r3, lsl ip
    2554:	e1a03233 	lsr	r3, r3, r2
    2558:	e1a03083 	lsl	r3, r3, #1
    255c:	eaffffe6 	b	24fc <__aeabi_d2f+0x14>
    2560:	e1f03ac2 	mvns	r3, r2, asr #21
    2564:	1a000003 	bne	2578 <__aeabi_d2f+0x90>
    2568:	e1903601 	orrs	r3, r0, r1, lsl #12
    256c:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    2570:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    2574:	112fff1e 	bxne	lr
    2578:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    257c:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    2580:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2584:	e12fff1e 	bx	lr

00002588 <__aeabi_frsub>:
    2588:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    258c:	ea000000 	b	2594 <__addsf3>

00002590 <__aeabi_fsub>:
    2590:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

00002594 <__addsf3>:
    2594:	e1b02080 	lsls	r2, r0, #1
    2598:	11b03081 	lslsne	r3, r1, #1
    259c:	11320003 	teqne	r2, r3
    25a0:	11f0cc42 	mvnsne	ip, r2, asr #24
    25a4:	11f0cc43 	mvnsne	ip, r3, asr #24
    25a8:	0a000047 	beq	26cc <__addsf3+0x138>
    25ac:	e1a02c22 	lsr	r2, r2, #24
    25b0:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    25b4:	c0822003 	addgt	r2, r2, r3
    25b8:	c0201001 	eorgt	r1, r0, r1
    25bc:	c0210000 	eorgt	r0, r1, r0
    25c0:	c0201001 	eorgt	r1, r0, r1
    25c4:	b2633000 	rsblt	r3, r3, #0
    25c8:	e3530019 	cmp	r3, #25
    25cc:	812fff1e 	bxhi	lr
    25d0:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    25d4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    25d8:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    25dc:	12600000 	rsbne	r0, r0, #0
    25e0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    25e4:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    25e8:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    25ec:	12611000 	rsbne	r1, r1, #0
    25f0:	e1320003 	teq	r2, r3
    25f4:	0a00002e 	beq	26b4 <__addsf3+0x120>
    25f8:	e2422001 	sub	r2, r2, #1
    25fc:	e0900351 	adds	r0, r0, r1, asr r3
    2600:	e2633020 	rsb	r3, r3, #32
    2604:	e1a01311 	lsl	r1, r1, r3
    2608:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    260c:	5a000001 	bpl	2618 <__addsf3+0x84>
    2610:	e2711000 	rsbs	r1, r1, #0
    2614:	e2e00000 	rsc	r0, r0, #0
    2618:	e3500502 	cmp	r0, #8388608	; 0x800000
    261c:	3a00000b 	bcc	2650 <__addsf3+0xbc>
    2620:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2624:	3a000004 	bcc	263c <__addsf3+0xa8>
    2628:	e1b000a0 	lsrs	r0, r0, #1
    262c:	e1a01061 	rrx	r1, r1
    2630:	e2822001 	add	r2, r2, #1
    2634:	e35200fe 	cmp	r2, #254	; 0xfe
    2638:	2a000038 	bcs	2720 <__addsf3+0x18c>
    263c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2640:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2644:	03c00001 	biceq	r0, r0, #1
    2648:	e1800003 	orr	r0, r0, r3
    264c:	e12fff1e 	bx	lr
    2650:	e1b01081 	lsls	r1, r1, #1
    2654:	e0a00000 	adc	r0, r0, r0
    2658:	e3100502 	tst	r0, #8388608	; 0x800000
    265c:	e2422001 	sub	r2, r2, #1
    2660:	1afffff5 	bne	263c <__addsf3+0xa8>
    2664:	e1b0c620 	lsrs	ip, r0, #12
    2668:	01a00600 	lsleq	r0, r0, #12
    266c:	0242200c 	subeq	r2, r2, #12
    2670:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2674:	01a00400 	lsleq	r0, r0, #8
    2678:	02422008 	subeq	r2, r2, #8
    267c:	e310060f 	tst	r0, #15728640	; 0xf00000
    2680:	01a00200 	lsleq	r0, r0, #4
    2684:	02422004 	subeq	r2, r2, #4
    2688:	e3100503 	tst	r0, #12582912	; 0xc00000
    268c:	01a00100 	lsleq	r0, r0, #2
    2690:	02422002 	subeq	r2, r2, #2
    2694:	e3500502 	cmp	r0, #8388608	; 0x800000
    2698:	31a00080 	lslcc	r0, r0, #1
    269c:	e2d22000 	sbcs	r2, r2, #0
    26a0:	a0800b82 	addge	r0, r0, r2, lsl #23
    26a4:	b2622000 	rsblt	r2, r2, #0
    26a8:	a1800003 	orrge	r0, r0, r3
    26ac:	b1830230 	orrlt	r0, r3, r0, lsr r2
    26b0:	e12fff1e 	bx	lr
    26b4:	e3320000 	teq	r2, #0
    26b8:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    26bc:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    26c0:	02822001 	addeq	r2, r2, #1
    26c4:	12433001 	subne	r3, r3, #1
    26c8:	eaffffca 	b	25f8 <__addsf3+0x64>
    26cc:	e1a03081 	lsl	r3, r1, #1
    26d0:	e1f0cc42 	mvns	ip, r2, asr #24
    26d4:	11f0cc43 	mvnsne	ip, r3, asr #24
    26d8:	0a000013 	beq	272c <__addsf3+0x198>
    26dc:	e1320003 	teq	r2, r3
    26e0:	0a000002 	beq	26f0 <__addsf3+0x15c>
    26e4:	e3320000 	teq	r2, #0
    26e8:	01a00001 	moveq	r0, r1
    26ec:	e12fff1e 	bx	lr
    26f0:	e1300001 	teq	r0, r1
    26f4:	13a00000 	movne	r0, #0
    26f8:	112fff1e 	bxne	lr
    26fc:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2700:	1a000002 	bne	2710 <__addsf3+0x17c>
    2704:	e1b00080 	lsls	r0, r0, #1
    2708:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    270c:	e12fff1e 	bx	lr
    2710:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2714:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2718:	312fff1e 	bxcc	lr
    271c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2720:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2724:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2728:	e12fff1e 	bx	lr
    272c:	e1f02c42 	mvns	r2, r2, asr #24
    2730:	11a00001 	movne	r0, r1
    2734:	01f03c43 	mvnseq	r3, r3, asr #24
    2738:	11a01000 	movne	r1, r0
    273c:	e1b02480 	lsls	r2, r0, #9
    2740:	01b03481 	lslseq	r3, r1, #9
    2744:	01300001 	teqeq	r0, r1
    2748:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    274c:	e12fff1e 	bx	lr

00002750 <__aeabi_ui2f>:
    2750:	e3a03000 	mov	r3, #0
    2754:	ea000001 	b	2760 <__aeabi_i2f+0x8>

00002758 <__aeabi_i2f>:
    2758:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    275c:	42600000 	rsbmi	r0, r0, #0
    2760:	e1b0c000 	movs	ip, r0
    2764:	012fff1e 	bxeq	lr
    2768:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    276c:	e1a01000 	mov	r1, r0
    2770:	e3a00000 	mov	r0, #0
    2774:	ea00000f 	b	27b8 <__aeabi_l2f+0x30>

00002778 <__aeabi_ul2f>:
    2778:	e1902001 	orrs	r2, r0, r1
    277c:	012fff1e 	bxeq	lr
    2780:	e3a03000 	mov	r3, #0
    2784:	ea000005 	b	27a0 <__aeabi_l2f+0x18>

00002788 <__aeabi_l2f>:
    2788:	e1902001 	orrs	r2, r0, r1
    278c:	012fff1e 	bxeq	lr
    2790:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    2794:	5a000001 	bpl	27a0 <__aeabi_l2f+0x18>
    2798:	e2700000 	rsbs	r0, r0, #0
    279c:	e2e11000 	rsc	r1, r1, #0
    27a0:	e1b0c001 	movs	ip, r1
    27a4:	01a0c000 	moveq	ip, r0
    27a8:	01a01000 	moveq	r1, r0
    27ac:	03a00000 	moveq	r0, #0
    27b0:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    27b4:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    27b8:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    27bc:	e3a02017 	mov	r2, #23
    27c0:	e35c0801 	cmp	ip, #65536	; 0x10000
    27c4:	21a0c82c 	lsrcs	ip, ip, #16
    27c8:	22422010 	subcs	r2, r2, #16
    27cc:	e35c0c01 	cmp	ip, #256	; 0x100
    27d0:	21a0c42c 	lsrcs	ip, ip, #8
    27d4:	22422008 	subcs	r2, r2, #8
    27d8:	e35c0010 	cmp	ip, #16
    27dc:	21a0c22c 	lsrcs	ip, ip, #4
    27e0:	22422004 	subcs	r2, r2, #4
    27e4:	e35c0004 	cmp	ip, #4
    27e8:	22422002 	subcs	r2, r2, #2
    27ec:	304220ac 	subcc	r2, r2, ip, lsr #1
    27f0:	e05221ac 	subs	r2, r2, ip, lsr #3
    27f4:	e0433b82 	sub	r3, r3, r2, lsl #23
    27f8:	ba000006 	blt	2818 <__aeabi_l2f+0x90>
    27fc:	e0833211 	add	r3, r3, r1, lsl r2
    2800:	e1a0c210 	lsl	ip, r0, r2
    2804:	e2622020 	rsb	r2, r2, #32
    2808:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    280c:	e0a30230 	adc	r0, r3, r0, lsr r2
    2810:	03c00001 	biceq	r0, r0, #1
    2814:	e12fff1e 	bx	lr
    2818:	e2822020 	add	r2, r2, #32
    281c:	e1a0c211 	lsl	ip, r1, r2
    2820:	e2622020 	rsb	r2, r2, #32
    2824:	e190008c 	orrs	r0, r0, ip, lsl #1
    2828:	e0a30231 	adc	r0, r3, r1, lsr r2
    282c:	01c00fac 	biceq	r0, r0, ip, lsr #31
    2830:	e12fff1e 	bx	lr

00002834 <__aeabi_fmul>:
    2834:	e3a0c0ff 	mov	ip, #255	; 0xff
    2838:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    283c:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    2840:	1132000c 	teqne	r2, ip
    2844:	1133000c 	teqne	r3, ip
    2848:	0a00003e 	beq	2948 <__aeabi_fmul+0x114>
    284c:	e0822003 	add	r2, r2, r3
    2850:	e020c001 	eor	ip, r0, r1
    2854:	e1b00480 	lsls	r0, r0, #9
    2858:	11b01481 	lslsne	r1, r1, #9
    285c:	0a000010 	beq	28a4 <__aeabi_fmul+0x70>
    2860:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2864:	e18302a0 	orr	r0, r3, r0, lsr #5
    2868:	e18312a1 	orr	r1, r3, r1, lsr #5
    286c:	e0813190 	umull	r3, r1, r0, r1
    2870:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    2874:	e3510502 	cmp	r1, #8388608	; 0x800000
    2878:	31a01081 	lslcc	r1, r1, #1
    287c:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    2880:	31a03083 	lslcc	r3, r3, #1
    2884:	e1800001 	orr	r0, r0, r1
    2888:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    288c:	e35200fd 	cmp	r2, #253	; 0xfd
    2890:	8a00000f 	bhi	28d4 <__aeabi_fmul+0xa0>
    2894:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    2898:	e0a00b82 	adc	r0, r0, r2, lsl #23
    289c:	03c00001 	biceq	r0, r0, #1
    28a0:	e12fff1e 	bx	lr
    28a4:	e3300000 	teq	r0, #0
    28a8:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    28ac:	01a01481 	lsleq	r1, r1, #9
    28b0:	e18c04a0 	orr	r0, ip, r0, lsr #9
    28b4:	e18004a1 	orr	r0, r0, r1, lsr #9
    28b8:	e252207f 	subs	r2, r2, #127	; 0x7f
    28bc:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    28c0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    28c4:	c12fff1e 	bxgt	lr
    28c8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    28cc:	e3a03000 	mov	r3, #0
    28d0:	e2522001 	subs	r2, r2, #1
    28d4:	ca000035 	bgt	29b0 <__aeabi_fmul+0x17c>
    28d8:	e3720019 	cmn	r2, #25
    28dc:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    28e0:	d12fff1e 	bxle	lr
    28e4:	e2622000 	rsb	r2, r2, #0
    28e8:	e1b01080 	lsls	r1, r0, #1
    28ec:	e1a01231 	lsr	r1, r1, r2
    28f0:	e2622020 	rsb	r2, r2, #32
    28f4:	e1a0c210 	lsl	ip, r0, r2
    28f8:	e1b00061 	rrxs	r0, r1
    28fc:	e2a00000 	adc	r0, r0, #0
    2900:	e193308c 	orrs	r3, r3, ip, lsl #1
    2904:	01c00fac 	biceq	r0, r0, ip, lsr #31
    2908:	e12fff1e 	bx	lr
    290c:	e3320000 	teq	r2, #0
    2910:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    2914:	01a00080 	lsleq	r0, r0, #1
    2918:	03100502 	tsteq	r0, #8388608	; 0x800000
    291c:	02422001 	subeq	r2, r2, #1
    2920:	0afffffb 	beq	2914 <__aeabi_fmul+0xe0>
    2924:	e180000c 	orr	r0, r0, ip
    2928:	e3330000 	teq	r3, #0
    292c:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    2930:	01a01081 	lsleq	r1, r1, #1
    2934:	03110502 	tsteq	r1, #8388608	; 0x800000
    2938:	02433001 	subeq	r3, r3, #1
    293c:	0afffffb 	beq	2930 <__aeabi_fmul+0xfc>
    2940:	e181100c 	orr	r1, r1, ip
    2944:	eaffffc0 	b	284c <__aeabi_fmul+0x18>
    2948:	e00c3ba1 	and	r3, ip, r1, lsr #23
    294c:	e132000c 	teq	r2, ip
    2950:	1133000c 	teqne	r3, ip
    2954:	0a000005 	beq	2970 <__aeabi_fmul+0x13c>
    2958:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    295c:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    2960:	1affffe9 	bne	290c <__aeabi_fmul+0xd8>
    2964:	e0200001 	eor	r0, r0, r1
    2968:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    296c:	e12fff1e 	bx	lr
    2970:	e3300000 	teq	r0, #0
    2974:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2978:	01a00001 	moveq	r0, r1
    297c:	13310000 	teqne	r1, #0
    2980:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    2984:	0a00000d 	beq	29c0 <__aeabi_fmul+0x18c>
    2988:	e132000c 	teq	r2, ip
    298c:	1a000001 	bne	2998 <__aeabi_fmul+0x164>
    2990:	e1b02480 	lsls	r2, r0, #9
    2994:	1a000009 	bne	29c0 <__aeabi_fmul+0x18c>
    2998:	e133000c 	teq	r3, ip
    299c:	1a000002 	bne	29ac <__aeabi_fmul+0x178>
    29a0:	e1b03481 	lsls	r3, r1, #9
    29a4:	11a00001 	movne	r0, r1
    29a8:	1a000004 	bne	29c0 <__aeabi_fmul+0x18c>
    29ac:	e0200001 	eor	r0, r0, r1
    29b0:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    29b4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    29b8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    29bc:	e12fff1e 	bx	lr
    29c0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    29c4:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    29c8:	e12fff1e 	bx	lr

000029cc <__aeabi_fdiv>:
    29cc:	e3a0c0ff 	mov	ip, #255	; 0xff
    29d0:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    29d4:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    29d8:	1132000c 	teqne	r2, ip
    29dc:	1133000c 	teqne	r3, ip
    29e0:	0a00003a 	beq	2ad0 <__aeabi_fdiv+0x104>
    29e4:	e0422003 	sub	r2, r2, r3
    29e8:	e020c001 	eor	ip, r0, r1
    29ec:	e1b01481 	lsls	r1, r1, #9
    29f0:	e1a00480 	lsl	r0, r0, #9
    29f4:	0a00001c 	beq	2a6c <__aeabi_fdiv+0xa0>
    29f8:	e3a03201 	mov	r3, #268435456	; 0x10000000
    29fc:	e1831221 	orr	r1, r3, r1, lsr #4
    2a00:	e1833220 	orr	r3, r3, r0, lsr #4
    2a04:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    2a08:	e1530001 	cmp	r3, r1
    2a0c:	31a03083 	lslcc	r3, r3, #1
    2a10:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2a14:	e3a0c502 	mov	ip, #8388608	; 0x800000
    2a18:	e1530001 	cmp	r3, r1
    2a1c:	20433001 	subcs	r3, r3, r1
    2a20:	2180000c 	orrcs	r0, r0, ip
    2a24:	e15300a1 	cmp	r3, r1, lsr #1
    2a28:	204330a1 	subcs	r3, r3, r1, lsr #1
    2a2c:	218000ac 	orrcs	r0, r0, ip, lsr #1
    2a30:	e1530121 	cmp	r3, r1, lsr #2
    2a34:	20433121 	subcs	r3, r3, r1, lsr #2
    2a38:	2180012c 	orrcs	r0, r0, ip, lsr #2
    2a3c:	e15301a1 	cmp	r3, r1, lsr #3
    2a40:	204331a1 	subcs	r3, r3, r1, lsr #3
    2a44:	218001ac 	orrcs	r0, r0, ip, lsr #3
    2a48:	e1b03203 	lsls	r3, r3, #4
    2a4c:	11b0c22c 	lsrsne	ip, ip, #4
    2a50:	1afffff0 	bne	2a18 <__aeabi_fdiv+0x4c>
    2a54:	e35200fd 	cmp	r2, #253	; 0xfd
    2a58:	8affff9d 	bhi	28d4 <__aeabi_fmul+0xa0>
    2a5c:	e1530001 	cmp	r3, r1
    2a60:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2a64:	03c00001 	biceq	r0, r0, #1
    2a68:	e12fff1e 	bx	lr
    2a6c:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    2a70:	e18c04a0 	orr	r0, ip, r0, lsr #9
    2a74:	e292207f 	adds	r2, r2, #127	; 0x7f
    2a78:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2a7c:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    2a80:	c12fff1e 	bxgt	lr
    2a84:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2a88:	e3a03000 	mov	r3, #0
    2a8c:	e2522001 	subs	r2, r2, #1
    2a90:	eaffff8f 	b	28d4 <__aeabi_fmul+0xa0>
    2a94:	e3320000 	teq	r2, #0
    2a98:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    2a9c:	01a00080 	lsleq	r0, r0, #1
    2aa0:	03100502 	tsteq	r0, #8388608	; 0x800000
    2aa4:	02422001 	subeq	r2, r2, #1
    2aa8:	0afffffb 	beq	2a9c <__aeabi_fdiv+0xd0>
    2aac:	e180000c 	orr	r0, r0, ip
    2ab0:	e3330000 	teq	r3, #0
    2ab4:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    2ab8:	01a01081 	lsleq	r1, r1, #1
    2abc:	03110502 	tsteq	r1, #8388608	; 0x800000
    2ac0:	02433001 	subeq	r3, r3, #1
    2ac4:	0afffffb 	beq	2ab8 <__aeabi_fdiv+0xec>
    2ac8:	e181100c 	orr	r1, r1, ip
    2acc:	eaffffc4 	b	29e4 <__aeabi_fdiv+0x18>
    2ad0:	e00c3ba1 	and	r3, ip, r1, lsr #23
    2ad4:	e132000c 	teq	r2, ip
    2ad8:	1a000005 	bne	2af4 <__aeabi_fdiv+0x128>
    2adc:	e1b02480 	lsls	r2, r0, #9
    2ae0:	1affffb6 	bne	29c0 <__aeabi_fmul+0x18c>
    2ae4:	e133000c 	teq	r3, ip
    2ae8:	1affffaf 	bne	29ac <__aeabi_fmul+0x178>
    2aec:	e1a00001 	mov	r0, r1
    2af0:	eaffffb2 	b	29c0 <__aeabi_fmul+0x18c>
    2af4:	e133000c 	teq	r3, ip
    2af8:	1a000003 	bne	2b0c <__aeabi_fdiv+0x140>
    2afc:	e1b03481 	lsls	r3, r1, #9
    2b00:	0affff97 	beq	2964 <__aeabi_fmul+0x130>
    2b04:	e1a00001 	mov	r0, r1
    2b08:	eaffffac 	b	29c0 <__aeabi_fmul+0x18c>
    2b0c:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    2b10:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    2b14:	1affffde 	bne	2a94 <__aeabi_fdiv+0xc8>
    2b18:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    2b1c:	1affffa2 	bne	29ac <__aeabi_fmul+0x178>
    2b20:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2b24:	1affff8e 	bne	2964 <__aeabi_fmul+0x130>
    2b28:	eaffffa4 	b	29c0 <__aeabi_fmul+0x18c>

00002b2c <__gesf2>:
    2b2c:	e3e0c000 	mvn	ip, #0
    2b30:	ea000002 	b	2b40 <__cmpsf2+0x4>

00002b34 <__lesf2>:
    2b34:	e3a0c001 	mov	ip, #1
    2b38:	ea000000 	b	2b40 <__cmpsf2+0x4>

00002b3c <__cmpsf2>:
    2b3c:	e3a0c001 	mov	ip, #1
    2b40:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    2b44:	e1a02080 	lsl	r2, r0, #1
    2b48:	e1a03081 	lsl	r3, r1, #1
    2b4c:	e1f0cc42 	mvns	ip, r2, asr #24
    2b50:	11f0cc43 	mvnsne	ip, r3, asr #24
    2b54:	0a000007 	beq	2b78 <__cmpsf2+0x3c>
    2b58:	e28dd004 	add	sp, sp, #4
    2b5c:	e192c0a3 	orrs	ip, r2, r3, lsr #1
    2b60:	11300001 	teqne	r0, r1
    2b64:	50520003 	subspl	r0, r2, r3
    2b68:	81a00fc1 	asrhi	r0, r1, #31
    2b6c:	31e00fc1 	mvncc	r0, r1, asr #31
    2b70:	13800001 	orrne	r0, r0, #1
    2b74:	e12fff1e 	bx	lr
    2b78:	e1f0cc42 	mvns	ip, r2, asr #24
    2b7c:	1a000001 	bne	2b88 <__cmpsf2+0x4c>
    2b80:	e1b0c480 	lsls	ip, r0, #9
    2b84:	1a000003 	bne	2b98 <__cmpsf2+0x5c>
    2b88:	e1f0cc43 	mvns	ip, r3, asr #24
    2b8c:	1afffff1 	bne	2b58 <__cmpsf2+0x1c>
    2b90:	e1b0c481 	lsls	ip, r1, #9
    2b94:	0affffef 	beq	2b58 <__cmpsf2+0x1c>
    2b98:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    2b9c:	e12fff1e 	bx	lr

00002ba0 <__aeabi_cfrcmple>:
    2ba0:	e1a0c000 	mov	ip, r0
    2ba4:	e1a00001 	mov	r0, r1
    2ba8:	e1a0100c 	mov	r1, ip
    2bac:	eaffffff 	b	2bb0 <__aeabi_cfcmpeq>

00002bb0 <__aeabi_cfcmpeq>:
    2bb0:	e92d400f 	push	{r0, r1, r2, r3, lr}
    2bb4:	ebffffe0 	bl	2b3c <__cmpsf2>
    2bb8:	e3500000 	cmp	r0, #0
    2bbc:	43700000 	cmnmi	r0, #0
    2bc0:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    2bc4:	e12fff1e 	bx	lr

00002bc8 <__aeabi_fcmpeq>:
    2bc8:	e52de008 	str	lr, [sp, #-8]!
    2bcc:	ebfffff7 	bl	2bb0 <__aeabi_cfcmpeq>
    2bd0:	03a00001 	moveq	r0, #1
    2bd4:	13a00000 	movne	r0, #0
    2bd8:	e49de008 	ldr	lr, [sp], #8
    2bdc:	e12fff1e 	bx	lr

00002be0 <__aeabi_fcmplt>:
    2be0:	e52de008 	str	lr, [sp, #-8]!
    2be4:	ebfffff1 	bl	2bb0 <__aeabi_cfcmpeq>
    2be8:	33a00001 	movcc	r0, #1
    2bec:	23a00000 	movcs	r0, #0
    2bf0:	e49de008 	ldr	lr, [sp], #8
    2bf4:	e12fff1e 	bx	lr

00002bf8 <__aeabi_fcmple>:
    2bf8:	e52de008 	str	lr, [sp, #-8]!
    2bfc:	ebffffeb 	bl	2bb0 <__aeabi_cfcmpeq>
    2c00:	93a00001 	movls	r0, #1
    2c04:	83a00000 	movhi	r0, #0
    2c08:	e49de008 	ldr	lr, [sp], #8
    2c0c:	e12fff1e 	bx	lr

00002c10 <__aeabi_fcmpge>:
    2c10:	e52de008 	str	lr, [sp, #-8]!
    2c14:	ebffffe1 	bl	2ba0 <__aeabi_cfrcmple>
    2c18:	93a00001 	movls	r0, #1
    2c1c:	83a00000 	movhi	r0, #0
    2c20:	e49de008 	ldr	lr, [sp], #8
    2c24:	e12fff1e 	bx	lr

00002c28 <__aeabi_fcmpgt>:
    2c28:	e52de008 	str	lr, [sp, #-8]!
    2c2c:	ebffffdb 	bl	2ba0 <__aeabi_cfrcmple>
    2c30:	33a00001 	movcc	r0, #1
    2c34:	23a00000 	movcs	r0, #0
    2c38:	e49de008 	ldr	lr, [sp], #8
    2c3c:	e12fff1e 	bx	lr

00002c40 <__aeabi_f2iz>:
    2c40:	e1a02080 	lsl	r2, r0, #1
    2c44:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2c48:	3a000008 	bcc	2c70 <__aeabi_f2iz+0x30>
    2c4c:	e3a0309e 	mov	r3, #158	; 0x9e
    2c50:	e0532c22 	subs	r2, r3, r2, lsr #24
    2c54:	9a000007 	bls	2c78 <__aeabi_f2iz+0x38>
    2c58:	e1a03400 	lsl	r3, r0, #8
    2c5c:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2c60:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2c64:	e1a00233 	lsr	r0, r3, r2
    2c68:	12600000 	rsbne	r0, r0, #0
    2c6c:	e12fff1e 	bx	lr
    2c70:	e3a00000 	mov	r0, #0
    2c74:	e12fff1e 	bx	lr
    2c78:	e3720061 	cmn	r2, #97	; 0x61
    2c7c:	1a000001 	bne	2c88 <__aeabi_f2iz+0x48>
    2c80:	e1b02480 	lsls	r2, r0, #9
    2c84:	1a000002 	bne	2c94 <__aeabi_f2iz+0x54>
    2c88:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2c8c:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2c90:	e12fff1e 	bx	lr
    2c94:	e3a00000 	mov	r0, #0
    2c98:	e12fff1e 	bx	lr

00002c9c <__aeabi_f2uiz>:
    2c9c:	e1b02080 	lsls	r2, r0, #1
    2ca0:	2a000008 	bcs	2cc8 <__aeabi_f2uiz+0x2c>
    2ca4:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2ca8:	3a000006 	bcc	2cc8 <__aeabi_f2uiz+0x2c>
    2cac:	e3a0309e 	mov	r3, #158	; 0x9e
    2cb0:	e0532c22 	subs	r2, r3, r2, lsr #24
    2cb4:	4a000005 	bmi	2cd0 <__aeabi_f2uiz+0x34>
    2cb8:	e1a03400 	lsl	r3, r0, #8
    2cbc:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2cc0:	e1a00233 	lsr	r0, r3, r2
    2cc4:	e12fff1e 	bx	lr
    2cc8:	e3a00000 	mov	r0, #0
    2ccc:	e12fff1e 	bx	lr
    2cd0:	e3720061 	cmn	r2, #97	; 0x61
    2cd4:	1a000001 	bne	2ce0 <__aeabi_f2uiz+0x44>
    2cd8:	e1b02480 	lsls	r2, r0, #9
    2cdc:	1a000001 	bne	2ce8 <__aeabi_f2uiz+0x4c>
    2ce0:	e3e00000 	mvn	r0, #0
    2ce4:	e12fff1e 	bx	lr
    2ce8:	e3a00000 	mov	r0, #0
    2cec:	e12fff1e 	bx	lr

00002cf0 <sqrt>:
    2cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2cf2:	46ce      	mov	lr, r9
    2cf4:	4647      	mov	r7, r8
    2cf6:	b580      	push	{r7, lr}
    2cf8:	b08d      	sub	sp, #52	; 0x34
    2cfa:	0004      	movs	r4, r0
    2cfc:	000d      	movs	r5, r1
    2cfe:	f000 f863 	bl	2dc8 <__ieee754_sqrt>
    2d02:	4b2f      	ldr	r3, [pc, #188]	; (2dc0 <sqrt+0xd0>)
    2d04:	781b      	ldrb	r3, [r3, #0]
    2d06:	061b      	lsls	r3, r3, #24
    2d08:	161b      	asrs	r3, r3, #24
    2d0a:	0006      	movs	r6, r0
    2d0c:	000f      	movs	r7, r1
    2d0e:	4699      	mov	r9, r3
    2d10:	3301      	adds	r3, #1
    2d12:	d016      	beq.n	2d42 <sqrt+0x52>
    2d14:	2301      	movs	r3, #1
    2d16:	0022      	movs	r2, r4
    2d18:	4698      	mov	r8, r3
    2d1a:	0020      	movs	r0, r4
    2d1c:	002b      	movs	r3, r5
    2d1e:	0029      	movs	r1, r5
    2d20:	f000 fa28 	bl	3174 <____aeabi_dcmpun_from_thumb>
    2d24:	2800      	cmp	r0, #0
    2d26:	d015      	beq.n	2d54 <sqrt+0x64>
    2d28:	4643      	mov	r3, r8
    2d2a:	061b      	lsls	r3, r3, #24
    2d2c:	0e1b      	lsrs	r3, r3, #24
    2d2e:	4698      	mov	r8, r3
    2d30:	d107      	bne.n	2d42 <sqrt+0x52>
    2d32:	2200      	movs	r2, #0
    2d34:	2300      	movs	r3, #0
    2d36:	0020      	movs	r0, r4
    2d38:	0029      	movs	r1, r5
    2d3a:	f000 f9dd 	bl	30f8 <____aeabi_dcmplt_from_thumb>
    2d3e:	2800      	cmp	r0, #0
    2d40:	d10b      	bne.n	2d5a <sqrt+0x6a>
    2d42:	0030      	movs	r0, r6
    2d44:	0039      	movs	r1, r7
    2d46:	b00d      	add	sp, #52	; 0x34
    2d48:	bc0c      	pop	{r2, r3}
    2d4a:	4690      	mov	r8, r2
    2d4c:	4699      	mov	r9, r3
    2d4e:	bcf0      	pop	{r4, r5, r6, r7}
    2d50:	bc04      	pop	{r2}
    2d52:	4710      	bx	r2
    2d54:	2300      	movs	r3, #0
    2d56:	4698      	mov	r8, r3
    2d58:	e7e6      	b.n	2d28 <sqrt+0x38>
    2d5a:	2301      	movs	r3, #1
    2d5c:	9302      	str	r3, [sp, #8]
    2d5e:	4b19      	ldr	r3, [pc, #100]	; (2dc4 <sqrt+0xd4>)
    2d60:	9303      	str	r3, [sp, #12]
    2d62:	4643      	mov	r3, r8
    2d64:	930a      	str	r3, [sp, #40]	; 0x28
    2d66:	464b      	mov	r3, r9
    2d68:	9406      	str	r4, [sp, #24]
    2d6a:	9507      	str	r5, [sp, #28]
    2d6c:	9404      	str	r4, [sp, #16]
    2d6e:	9505      	str	r5, [sp, #20]
    2d70:	2b00      	cmp	r3, #0
    2d72:	d015      	beq.n	2da0 <sqrt+0xb0>
    2d74:	2300      	movs	r3, #0
    2d76:	2200      	movs	r2, #0
    2d78:	0019      	movs	r1, r3
    2d7a:	0010      	movs	r0, r2
    2d7c:	f000 f9ea 	bl	3154 <____aeabi_ddiv_from_thumb>
    2d80:	464b      	mov	r3, r9
    2d82:	9008      	str	r0, [sp, #32]
    2d84:	9109      	str	r1, [sp, #36]	; 0x24
    2d86:	2b02      	cmp	r3, #2
    2d88:	d10e      	bne.n	2da8 <sqrt+0xb8>
    2d8a:	f000 f9af 	bl	30ec <__errno>
    2d8e:	2321      	movs	r3, #33	; 0x21
    2d90:	6003      	str	r3, [r0, #0]
    2d92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2d94:	9301      	str	r3, [sp, #4]
    2d96:	2b00      	cmp	r3, #0
    2d98:	d10c      	bne.n	2db4 <sqrt+0xc4>
    2d9a:	9e08      	ldr	r6, [sp, #32]
    2d9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    2d9e:	e7d0      	b.n	2d42 <sqrt+0x52>
    2da0:	2300      	movs	r3, #0
    2da2:	2400      	movs	r4, #0
    2da4:	9308      	str	r3, [sp, #32]
    2da6:	9409      	str	r4, [sp, #36]	; 0x24
    2da8:	a802      	add	r0, sp, #8
    2daa:	f000 f8df 	bl	2f6c <matherr>
    2dae:	2800      	cmp	r0, #0
    2db0:	d1ef      	bne.n	2d92 <sqrt+0xa2>
    2db2:	e7ea      	b.n	2d8a <sqrt+0x9a>
    2db4:	f000 f99a 	bl	30ec <__errno>
    2db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2dba:	9301      	str	r3, [sp, #4]
    2dbc:	6003      	str	r3, [r0, #0]
    2dbe:	e7ec      	b.n	2d9a <sqrt+0xaa>
    2dc0:	4000059c 	.word	0x4000059c
    2dc4:	00003438 	.word	0x00003438

00002dc8 <__ieee754_sqrt>:
    2dc8:	4b65      	ldr	r3, [pc, #404]	; (2f60 <__ieee754_sqrt+0x198>)
    2dca:	b5f0      	push	{r4, r5, r6, r7, lr}
    2dcc:	000a      	movs	r2, r1
    2dce:	4646      	mov	r6, r8
    2dd0:	000d      	movs	r5, r1
    2dd2:	46d6      	mov	lr, sl
    2dd4:	464f      	mov	r7, r9
    2dd6:	0019      	movs	r1, r3
    2dd8:	b5c0      	push	{r6, r7, lr}
    2dda:	0004      	movs	r4, r0
    2ddc:	0006      	movs	r6, r0
    2dde:	4029      	ands	r1, r5
    2de0:	4299      	cmp	r1, r3
    2de2:	d100      	bne.n	2de6 <__ieee754_sqrt+0x1e>
    2de4:	e09c      	b.n	2f20 <__ieee754_sqrt+0x158>
    2de6:	2d00      	cmp	r5, #0
    2de8:	dc00      	bgt.n	2dec <__ieee754_sqrt+0x24>
    2dea:	e078      	b.n	2ede <__ieee754_sqrt+0x116>
    2dec:	152f      	asrs	r7, r5, #20
    2dee:	d100      	bne.n	2df2 <__ieee754_sqrt+0x2a>
    2df0:	e085      	b.n	2efe <__ieee754_sqrt+0x136>
    2df2:	4b5c      	ldr	r3, [pc, #368]	; (2f64 <__ieee754_sqrt+0x19c>)
    2df4:	469c      	mov	ip, r3
    2df6:	2380      	movs	r3, #128	; 0x80
    2df8:	0312      	lsls	r2, r2, #12
    2dfa:	0b12      	lsrs	r2, r2, #12
    2dfc:	035b      	lsls	r3, r3, #13
    2dfe:	4467      	add	r7, ip
    2e00:	431a      	orrs	r2, r3
    2e02:	07fb      	lsls	r3, r7, #31
    2e04:	d466      	bmi.n	2ed4 <__ieee754_sqrt+0x10c>
    2e06:	107b      	asrs	r3, r7, #1
    2e08:	469c      	mov	ip, r3
    2e0a:	0fe3      	lsrs	r3, r4, #31
    2e0c:	189b      	adds	r3, r3, r2
    2e0e:	189b      	adds	r3, r3, r2
    2e10:	2280      	movs	r2, #128	; 0x80
    2e12:	2116      	movs	r1, #22
    2e14:	2600      	movs	r6, #0
    2e16:	2500      	movs	r5, #0
    2e18:	0064      	lsls	r4, r4, #1
    2e1a:	0392      	lsls	r2, r2, #14
    2e1c:	18a8      	adds	r0, r5, r2
    2e1e:	4298      	cmp	r0, r3
    2e20:	dc02      	bgt.n	2e28 <__ieee754_sqrt+0x60>
    2e22:	1885      	adds	r5, r0, r2
    2e24:	1a1b      	subs	r3, r3, r0
    2e26:	18b6      	adds	r6, r6, r2
    2e28:	0fe0      	lsrs	r0, r4, #31
    2e2a:	005b      	lsls	r3, r3, #1
    2e2c:	3901      	subs	r1, #1
    2e2e:	181b      	adds	r3, r3, r0
    2e30:	0064      	lsls	r4, r4, #1
    2e32:	0852      	lsrs	r2, r2, #1
    2e34:	2900      	cmp	r1, #0
    2e36:	d1f1      	bne.n	2e1c <__ieee754_sqrt+0x54>
    2e38:	2200      	movs	r2, #0
    2e3a:	4692      	mov	sl, r2
    2e3c:	4690      	mov	r8, r2
    2e3e:	2280      	movs	r2, #128	; 0x80
    2e40:	2020      	movs	r0, #32
    2e42:	0612      	lsls	r2, r2, #24
    2e44:	e014      	b.n	2e70 <__ieee754_sqrt+0xa8>
    2e46:	1b5b      	subs	r3, r3, r5
    2e48:	4699      	mov	r9, r3
    2e4a:	188b      	adds	r3, r1, r2
    2e4c:	4698      	mov	r8, r3
    2e4e:	2900      	cmp	r1, #0
    2e50:	db1b      	blt.n	2e8a <__ieee754_sqrt+0xc2>
    2e52:	428c      	cmp	r4, r1
    2e54:	419b      	sbcs	r3, r3
    2e56:	464f      	mov	r7, r9
    2e58:	425b      	negs	r3, r3
    2e5a:	1afb      	subs	r3, r7, r3
    2e5c:	1a64      	subs	r4, r4, r1
    2e5e:	4492      	add	sl, r2
    2e60:	0fe1      	lsrs	r1, r4, #31
    2e62:	18c9      	adds	r1, r1, r3
    2e64:	3801      	subs	r0, #1
    2e66:	18cb      	adds	r3, r1, r3
    2e68:	0064      	lsls	r4, r4, #1
    2e6a:	0852      	lsrs	r2, r2, #1
    2e6c:	2800      	cmp	r0, #0
    2e6e:	d010      	beq.n	2e92 <__ieee754_sqrt+0xca>
    2e70:	4641      	mov	r1, r8
    2e72:	1851      	adds	r1, r2, r1
    2e74:	42ab      	cmp	r3, r5
    2e76:	dce6      	bgt.n	2e46 <__ieee754_sqrt+0x7e>
    2e78:	1b5f      	subs	r7, r3, r5
    2e7a:	46b9      	mov	r9, r7
    2e7c:	d1f0      	bne.n	2e60 <__ieee754_sqrt+0x98>
    2e7e:	428c      	cmp	r4, r1
    2e80:	d3ee      	bcc.n	2e60 <__ieee754_sqrt+0x98>
    2e82:	188b      	adds	r3, r1, r2
    2e84:	4698      	mov	r8, r3
    2e86:	2900      	cmp	r1, #0
    2e88:	dae3      	bge.n	2e52 <__ieee754_sqrt+0x8a>
    2e8a:	43db      	mvns	r3, r3
    2e8c:	0fdb      	lsrs	r3, r3, #31
    2e8e:	18ed      	adds	r5, r5, r3
    2e90:	e7df      	b.n	2e52 <__ieee754_sqrt+0x8a>
    2e92:	4323      	orrs	r3, r4
    2e94:	d117      	bne.n	2ec6 <__ieee754_sqrt+0xfe>
    2e96:	4653      	mov	r3, sl
    2e98:	085b      	lsrs	r3, r3, #1
    2e9a:	4933      	ldr	r1, [pc, #204]	; (2f68 <__ieee754_sqrt+0x1a0>)
    2e9c:	4688      	mov	r8, r1
    2e9e:	1072      	asrs	r2, r6, #1
    2ea0:	4442      	add	r2, r8
    2ea2:	07f1      	lsls	r1, r6, #31
    2ea4:	d502      	bpl.n	2eac <__ieee754_sqrt+0xe4>
    2ea6:	2180      	movs	r1, #128	; 0x80
    2ea8:	0609      	lsls	r1, r1, #24
    2eaa:	430b      	orrs	r3, r1
    2eac:	4661      	mov	r1, ip
    2eae:	001e      	movs	r6, r3
    2eb0:	050f      	lsls	r7, r1, #20
    2eb2:	18bd      	adds	r5, r7, r2
    2eb4:	0030      	movs	r0, r6
    2eb6:	0029      	movs	r1, r5
    2eb8:	bc1c      	pop	{r2, r3, r4}
    2eba:	4690      	mov	r8, r2
    2ebc:	4699      	mov	r9, r3
    2ebe:	46a2      	mov	sl, r4
    2ec0:	bcf0      	pop	{r4, r5, r6, r7}
    2ec2:	bc04      	pop	{r2}
    2ec4:	4710      	bx	r2
    2ec6:	4653      	mov	r3, sl
    2ec8:	3301      	adds	r3, #1
    2eca:	d035      	beq.n	2f38 <__ieee754_sqrt+0x170>
    2ecc:	4653      	mov	r3, sl
    2ece:	3301      	adds	r3, #1
    2ed0:	085b      	lsrs	r3, r3, #1
    2ed2:	e7e2      	b.n	2e9a <__ieee754_sqrt+0xd2>
    2ed4:	0fe1      	lsrs	r1, r4, #31
    2ed6:	0052      	lsls	r2, r2, #1
    2ed8:	188a      	adds	r2, r1, r2
    2eda:	0064      	lsls	r4, r4, #1
    2edc:	e793      	b.n	2e06 <__ieee754_sqrt+0x3e>
    2ede:	006b      	lsls	r3, r5, #1
    2ee0:	085b      	lsrs	r3, r3, #1
    2ee2:	4303      	orrs	r3, r0
    2ee4:	d0e6      	beq.n	2eb4 <__ieee754_sqrt+0xec>
    2ee6:	2700      	movs	r7, #0
    2ee8:	2d00      	cmp	r5, #0
    2eea:	d12d      	bne.n	2f48 <__ieee754_sqrt+0x180>
    2eec:	0ae2      	lsrs	r2, r4, #11
    2eee:	3f15      	subs	r7, #21
    2ef0:	0564      	lsls	r4, r4, #21
    2ef2:	2a00      	cmp	r2, #0
    2ef4:	d0fa      	beq.n	2eec <__ieee754_sqrt+0x124>
    2ef6:	2380      	movs	r3, #128	; 0x80
    2ef8:	035b      	lsls	r3, r3, #13
    2efa:	421a      	tst	r2, r3
    2efc:	d11f      	bne.n	2f3e <__ieee754_sqrt+0x176>
    2efe:	2080      	movs	r0, #128	; 0x80
    2f00:	2300      	movs	r3, #0
    2f02:	0340      	lsls	r0, r0, #13
    2f04:	e000      	b.n	2f08 <__ieee754_sqrt+0x140>
    2f06:	000b      	movs	r3, r1
    2f08:	0052      	lsls	r2, r2, #1
    2f0a:	1c59      	adds	r1, r3, #1
    2f0c:	4202      	tst	r2, r0
    2f0e:	d0fa      	beq.n	2f06 <__ieee754_sqrt+0x13e>
    2f10:	2020      	movs	r0, #32
    2f12:	1a40      	subs	r0, r0, r1
    2f14:	1aff      	subs	r7, r7, r3
    2f16:	0023      	movs	r3, r4
    2f18:	40c3      	lsrs	r3, r0
    2f1a:	408c      	lsls	r4, r1
    2f1c:	431a      	orrs	r2, r3
    2f1e:	e768      	b.n	2df2 <__ieee754_sqrt+0x2a>
    2f20:	002b      	movs	r3, r5
    2f22:	0002      	movs	r2, r0
    2f24:	0029      	movs	r1, r5
    2f26:	f000 f8f7 	bl	3118 <____aeabi_dmul_from_thumb>
    2f2a:	0032      	movs	r2, r6
    2f2c:	002b      	movs	r3, r5
    2f2e:	f000 f903 	bl	3138 <____aeabi_dadd_from_thumb>
    2f32:	0006      	movs	r6, r0
    2f34:	000d      	movs	r5, r1
    2f36:	e7bd      	b.n	2eb4 <__ieee754_sqrt+0xec>
    2f38:	3601      	adds	r6, #1
    2f3a:	2300      	movs	r3, #0
    2f3c:	e7ad      	b.n	2e9a <__ieee754_sqrt+0xd2>
    2f3e:	2301      	movs	r3, #1
    2f40:	2100      	movs	r1, #0
    2f42:	2020      	movs	r0, #32
    2f44:	425b      	negs	r3, r3
    2f46:	e7e5      	b.n	2f14 <__ieee754_sqrt+0x14c>
    2f48:	002b      	movs	r3, r5
    2f4a:	0002      	movs	r2, r0
    2f4c:	0029      	movs	r1, r5
    2f4e:	f000 f929 	bl	31a4 <____aeabi_dsub_from_thumb>
    2f52:	0002      	movs	r2, r0
    2f54:	000b      	movs	r3, r1
    2f56:	f000 f8fd 	bl	3154 <____aeabi_ddiv_from_thumb>
    2f5a:	0006      	movs	r6, r0
    2f5c:	000d      	movs	r5, r1
    2f5e:	e7a9      	b.n	2eb4 <__ieee754_sqrt+0xec>
    2f60:	7ff00000 	.word	0x7ff00000
    2f64:	fffffc01 	.word	0xfffffc01
    2f68:	3fe00000 	.word	0x3fe00000

00002f6c <matherr>:
    2f6c:	2000      	movs	r0, #0
    2f6e:	4770      	bx	lr

00002f70 <__gedf2>:
    2f70:	e3e0c000 	mvn	ip, #0
    2f74:	ea000002 	b	2f84 <__cmpdf2+0x4>

00002f78 <__ledf2>:
    2f78:	e3a0c001 	mov	ip, #1
    2f7c:	ea000000 	b	2f84 <__cmpdf2+0x4>

00002f80 <__cmpdf2>:
    2f80:	e3a0c001 	mov	ip, #1
    2f84:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    2f88:	e1a0c081 	lsl	ip, r1, #1
    2f8c:	e1f0cacc 	mvns	ip, ip, asr #21
    2f90:	e1a0c083 	lsl	ip, r3, #1
    2f94:	11f0cacc 	mvnsne	ip, ip, asr #21
    2f98:	0a00000e 	beq	2fd8 <__cmpdf2+0x58>
    2f9c:	e28dd004 	add	sp, sp, #4
    2fa0:	e190c081 	orrs	ip, r0, r1, lsl #1
    2fa4:	0192c083 	orrseq	ip, r2, r3, lsl #1
    2fa8:	11310003 	teqne	r1, r3
    2fac:	01300002 	teqeq	r0, r2
    2fb0:	03a00000 	moveq	r0, #0
    2fb4:	012fff1e 	bxeq	lr
    2fb8:	e3700000 	cmn	r0, #0
    2fbc:	e1310003 	teq	r1, r3
    2fc0:	51510003 	cmppl	r1, r3
    2fc4:	01500002 	cmpeq	r0, r2
    2fc8:	21a00fc3 	asrcs	r0, r3, #31
    2fcc:	31e00fc3 	mvncc	r0, r3, asr #31
    2fd0:	e3800001 	orr	r0, r0, #1
    2fd4:	e12fff1e 	bx	lr
    2fd8:	e1a0c081 	lsl	ip, r1, #1
    2fdc:	e1f0cacc 	mvns	ip, ip, asr #21
    2fe0:	1a000001 	bne	2fec <__cmpdf2+0x6c>
    2fe4:	e190c601 	orrs	ip, r0, r1, lsl #12
    2fe8:	1a000004 	bne	3000 <__cmpdf2+0x80>
    2fec:	e1a0c083 	lsl	ip, r3, #1
    2ff0:	e1f0cacc 	mvns	ip, ip, asr #21
    2ff4:	1affffe8 	bne	2f9c <__cmpdf2+0x1c>
    2ff8:	e192c603 	orrs	ip, r2, r3, lsl #12
    2ffc:	0affffe6 	beq	2f9c <__cmpdf2+0x1c>
    3000:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    3004:	e12fff1e 	bx	lr

00003008 <__aeabi_cdrcmple>:
    3008:	e1a0c000 	mov	ip, r0
    300c:	e1a00002 	mov	r0, r2
    3010:	e1a0200c 	mov	r2, ip
    3014:	e1a0c001 	mov	ip, r1
    3018:	e1a01003 	mov	r1, r3
    301c:	e1a0300c 	mov	r3, ip
    3020:	eaffffff 	b	3024 <__aeabi_cdcmpeq>

00003024 <__aeabi_cdcmpeq>:
    3024:	e92d4001 	push	{r0, lr}
    3028:	ebffffd4 	bl	2f80 <__cmpdf2>
    302c:	e3500000 	cmp	r0, #0
    3030:	43700000 	cmnmi	r0, #0
    3034:	e8bd4001 	pop	{r0, lr}
    3038:	e12fff1e 	bx	lr

0000303c <__aeabi_dcmpeq>:
    303c:	e52de008 	str	lr, [sp, #-8]!
    3040:	ebfffff7 	bl	3024 <__aeabi_cdcmpeq>
    3044:	03a00001 	moveq	r0, #1
    3048:	13a00000 	movne	r0, #0
    304c:	e49de008 	ldr	lr, [sp], #8
    3050:	e12fff1e 	bx	lr

00003054 <__aeabi_dcmplt>:
    3054:	e52de008 	str	lr, [sp, #-8]!
    3058:	ebfffff1 	bl	3024 <__aeabi_cdcmpeq>
    305c:	33a00001 	movcc	r0, #1
    3060:	23a00000 	movcs	r0, #0
    3064:	e49de008 	ldr	lr, [sp], #8
    3068:	e12fff1e 	bx	lr

0000306c <__aeabi_dcmple>:
    306c:	e52de008 	str	lr, [sp, #-8]!
    3070:	ebffffeb 	bl	3024 <__aeabi_cdcmpeq>
    3074:	93a00001 	movls	r0, #1
    3078:	83a00000 	movhi	r0, #0
    307c:	e49de008 	ldr	lr, [sp], #8
    3080:	e12fff1e 	bx	lr

00003084 <__aeabi_dcmpge>:
    3084:	e52de008 	str	lr, [sp, #-8]!
    3088:	ebffffde 	bl	3008 <__aeabi_cdrcmple>
    308c:	93a00001 	movls	r0, #1
    3090:	83a00000 	movhi	r0, #0
    3094:	e49de008 	ldr	lr, [sp], #8
    3098:	e12fff1e 	bx	lr

0000309c <__aeabi_dcmpgt>:
    309c:	e52de008 	str	lr, [sp, #-8]!
    30a0:	ebffffd8 	bl	3008 <__aeabi_cdrcmple>
    30a4:	33a00001 	movcc	r0, #1
    30a8:	23a00000 	movcs	r0, #0
    30ac:	e49de008 	ldr	lr, [sp], #8
    30b0:	e12fff1e 	bx	lr

000030b4 <__aeabi_dcmpun>:
    30b4:	e1a0c081 	lsl	ip, r1, #1
    30b8:	e1f0cacc 	mvns	ip, ip, asr #21
    30bc:	1a000001 	bne	30c8 <__aeabi_dcmpun+0x14>
    30c0:	e190c601 	orrs	ip, r0, r1, lsl #12
    30c4:	1a000006 	bne	30e4 <__aeabi_dcmpun+0x30>
    30c8:	e1a0c083 	lsl	ip, r3, #1
    30cc:	e1f0cacc 	mvns	ip, ip, asr #21
    30d0:	1a000001 	bne	30dc <__aeabi_dcmpun+0x28>
    30d4:	e192c603 	orrs	ip, r2, r3, lsl #12
    30d8:	1a000001 	bne	30e4 <__aeabi_dcmpun+0x30>
    30dc:	e3a00000 	mov	r0, #0
    30e0:	e12fff1e 	bx	lr
    30e4:	e3a00001 	mov	r0, #1
    30e8:	e12fff1e 	bx	lr

000030ec <__errno>:
    30ec:	4b01      	ldr	r3, [pc, #4]	; (30f4 <__errno+0x8>)
    30ee:	6818      	ldr	r0, [r3, #0]
    30f0:	4770      	bx	lr
    30f2:	46c0      	nop			; (mov r8, r8)
    30f4:	40000004 	.word	0x40000004

000030f8 <____aeabi_dcmplt_from_thumb>:
    30f8:	4778      	bx	pc
    30fa:	46c0      	nop			; (mov r8, r8)
    30fc:	eaffffd4 	b	3054 <__aeabi_dcmplt>

00003100 <____aeabi_d2iz_from_thumb>:
    3100:	4778      	bx	pc
    3102:	46c0      	nop			; (mov r8, r8)
    3104:	eafffce0 	b	248c <__aeabi_d2iz>

00003108 <____aeabi_i2f_from_thumb>:
    3108:	4778      	bx	pc
    310a:	46c0      	nop			; (mov r8, r8)
    310c:	eafffd91 	b	2758 <__aeabi_i2f>

00003110 <____aeabi_fsub_from_thumb>:
    3110:	4778      	bx	pc
    3112:	46c0      	nop			; (mov r8, r8)
    3114:	eafffd1d 	b	2590 <__aeabi_fsub>

00003118 <____aeabi_dmul_from_thumb>:
    3118:	4778      	bx	pc
    311a:	46c0      	nop			; (mov r8, r8)
    311c:	eafffbb3 	b	1ff0 <__aeabi_dmul>

00003120 <____aeabi_fmul_from_thumb>:
    3120:	4778      	bx	pc
    3122:	46c0      	nop			; (mov r8, r8)
    3124:	eafffdc2 	b	2834 <__aeabi_fmul>

00003128 <____aeabi_f2iz_from_thumb>:
    3128:	4778      	bx	pc
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	eafffec3 	b	2c40 <__aeabi_f2iz>

00003130 <____aeabi_uidivmod_from_thumb>:
    3130:	4778      	bx	pc
    3132:	46c0      	nop			; (mov r8, r8)
    3134:	eafffa9d 	b	1bb0 <__aeabi_uidivmod>

00003138 <____aeabi_dadd_from_thumb>:
    3138:	4778      	bx	pc
    313a:	46c0      	nop			; (mov r8, r8)
    313c:	eafffaa7 	b	1be0 <__adddf3>

00003140 <____aeabi_idiv0_from_arm>:
    3140:	e59fc000 	ldr	ip, [pc]	; 3148 <____aeabi_idiv0_from_arm+0x8>
    3144:	e12fff1c 	bx	ip
    3148:	00001bd1 	.word	0x00001bd1

0000314c <____aeabi_d2f_from_thumb>:
    314c:	4778      	bx	pc
    314e:	46c0      	nop			; (mov r8, r8)
    3150:	eafffce4 	b	24e8 <__aeabi_d2f>

00003154 <____aeabi_ddiv_from_thumb>:
    3154:	4778      	bx	pc
    3156:	46c0      	nop			; (mov r8, r8)
    3158:	eafffc48 	b	2280 <__aeabi_ddiv>

0000315c <____aeabi_fcmplt_from_thumb>:
    315c:	4778      	bx	pc
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	eafffe9e 	b	2be0 <__aeabi_fcmplt>

00003164 <____aeabi_fadd_from_thumb>:
    3164:	4778      	bx	pc
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	eafffd09 	b	2594 <__addsf3>

0000316c <____aeabi_i2d_from_thumb>:
    316c:	4778      	bx	pc
    316e:	46c0      	nop			; (mov r8, r8)
    3170:	eafffb67 	b	1f14 <__aeabi_i2d>

00003174 <____aeabi_dcmpun_from_thumb>:
    3174:	4778      	bx	pc
    3176:	46c0      	nop			; (mov r8, r8)
    3178:	eaffffcd 	b	30b4 <__aeabi_dcmpun>

0000317c <____aeabi_f2uiz_from_thumb>:
    317c:	4778      	bx	pc
    317e:	46c0      	nop			; (mov r8, r8)
    3180:	eafffec5 	b	2c9c <__aeabi_f2uiz>

00003184 <____aeabi_uidiv_from_thumb>:
    3184:	4778      	bx	pc
    3186:	46c0      	nop			; (mov r8, r8)
    3188:	eafffa49 	b	1ab4 <__udivsi3>

0000318c <____aeabi_fdiv_from_thumb>:
    318c:	4778      	bx	pc
    318e:	46c0      	nop			; (mov r8, r8)
    3190:	eafffe0d 	b	29cc <__aeabi_fdiv>

00003194 <____aeabi_fcmpgt_from_thumb>:
    3194:	4778      	bx	pc
    3196:	46c0      	nop			; (mov r8, r8)
    3198:	eafffea2 	b	2c28 <__aeabi_fcmpgt>

0000319c <____aeabi_f2d_from_thumb>:
    319c:	4778      	bx	pc
    319e:	46c0      	nop			; (mov r8, r8)
    31a0:	eafffb65 	b	1f3c <__aeabi_f2d>

000031a4 <____aeabi_dsub_from_thumb>:
    31a4:	4778      	bx	pc
    31a6:	46c0      	nop			; (mov r8, r8)
    31a8:	eafffa8b 	b	1bdc <__aeabi_dsub>
    31ac:	00000000 	andeq	r0, r0, r0

000031b0 <help_msg>:
    31b0:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
    31c0:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
    31d0:	20202020 72617473 202d2074 72617473         start - star
    31e0:	656d2074 72757361 6e656d65 200a7374     t measurements. 
    31f0:	73202020 20706f74 6966202d 6873696e        stop - finish
    3200:	61656d20 65727573 746e656d 20200a73      measurements.  
    3210:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
    3220:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
    3230:	75746573 20200a70 616e2020 65766974     setup.    native
    3240:	6e202d20 662d6e6f 616d726f 20646574      - non-formated 
    3250:	7074756f 200a7475 61202020 69696373     output.    ascii
    3260:	6f202d20 75707475 6e692074 63736120      - output in asc
    3270:	70206969 65736572 7461746e 0a6e6f69     ii presentation.
    3280:	504c0a00 6e692043 61697469 657a696c     ..LPC initialize
    3290:	5a000a64 7473003f 00747261 6174530a     d..Z?.start..Sta
    32a0:	64657472 7473000a 7300706f 0a007465     rted..stop.set..
    32b0:	000a4b4f 00746567 706c6568 74616e00     OK..get.help.nat
    32c0:	00657669 69637361 30310069 0a7a6830     ive.ascii.100hz.
    32d0:	2e002d00 0a003000 6c6f560a 65676174     .-...0...Voltage
    32e0:	2056202c 00203a20 7275430a 746e6572     , V  : ..Current
    32f0:	6b6d202c 00203a41 00430056 33323130     , mkA: .V.C.0123
    3300:	37363534 62613938 66656463 6a696867     456789abcdefghij
    3310:	6e6d6c6b 7271706f 76757473 7a797877     klmnopqrstuvwxyz
    3320:	00000000 00000043 49534f50 00000058     ....C...POSIX...
    3330:	0000002e                                ....

00003334 <_ctype_>:
    3334:	20202000 20202020 28282020 20282828     .         ((((( 
    3344:	20202020 20202020 20202020 20202020                     
    3354:	10108820 10101010 10101010 10101010      ...............
    3364:	04040410 04040404 10040404 10101010     ................
    3374:	41411010 41414141 01010101 01010101     ..AAAAAA........
    3384:	01010101 01010101 01010101 10101010     ................
    3394:	42421010 42424242 02020202 02020202     ..BBBBBB........
    33a4:	02020202 02020202 02020202 10101010     ................
    33b4:	00000020 00000000 00000000 00000000      ...............
	...
    3438:	74727173 00000000                       sqrt....
