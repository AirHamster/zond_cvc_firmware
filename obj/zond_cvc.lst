
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001000  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  40000000  40000000  00011000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  40000000  40000000  00020000  2**1
                  ALLOC
  3 .stack        00000a14  40000144  40000144  00020000  2**2
                  ALLOC
  4 .usbram       00000000  7fd00000  7fd00000  00011000  2**0
                  CONTENTS
  5 .etherram     00000000  7fe00000  7fe00000  00011000  2**0
                  CONTENTS
  6 .batteryram   00000000  e0084000  e0084000  00011000  2**0
                  CONTENTS
  7 .comment      00000070  00000000  00000000  00011000  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 0000002e  00000000  00000000  00011070  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000130  00000000  00000000  000110a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000159f  00000000  00000000  000111d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000008c0  00000000  00000000  0001276f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000008ed  00000000  00000000  0001302f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000003ec  00000000  00000000  0001391c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000004f2  00000000  00000000  00013d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00000926  00000000  00000000  000141fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  00014b20  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, =trap		@ Undef entry
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =swi_handler	@ SWI entry
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, =trap		@ PAbt entry
       c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =trap		@ DAbt entry
      10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
      14:	00000000 	.word	0x00000000
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
	LDR     PC, =fiq_handler	@ FIQ entry
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
      20:	00000300 	.word	0x00000300
	LDR	PC, =trap		@ Undef entry
      24:	0000038c 	.word	0x0000038c
	LDR	PC, =swi_handler	@ SWI entry
      28:	000003fc 	.word	0x000003fc
	LDR	PC, =trap		@ PAbt entry
	LDR	PC, =trap		@ DAbt entry
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      2c:	000003ac 	.word	0x000003ac
	LDR     PC, =fiq_handler	@ FIQ entry
      30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
     304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
     308:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
     30c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
     310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
     314:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
     318:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
     31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
     320:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
     324:	e2400010 	sub	r0, r0, #16

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
     328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
     32c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
     330:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
     334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
     338:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
     33c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
     340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
     344:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
     348:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
	LDR	R2, =_sdata
     350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
	LDR	R3, =_edata
     354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
1:	CMP	R2, R3
     358:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
     35c:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
     360:	34820004 	strcc	r0, [r2], #4
	BLO	1b
     364:	3afffffb 	bcc	358 <reset_handler+0x58>

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
     368:	e3a00000 	mov	r0, #0
	LDR	R1, =_sbss
     36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
	LDR	R2, =_ebss
     370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
3:	CMP	R1, R2
     374:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
     378:	34810004 	strcc	r0, [r1], #4
	BLO	3b
     37c:	3afffffc 	bcc	374 <reset_handler+0x74>

@ Start main()
.extern main
	LDR	R0, =main
     380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
	MOV	LR, PC
     384:	e1a0e00f 	mov	lr, pc
	BX	R0
     388:	e12fff10 	bx	r0

0000038c <trap>:

@ Trap (infinite loop)
trap:
	B	trap
     38c:	eafffffe 	b	38c <trap>
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     390:	40000b58 	.word	0x40000b58
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
	MOV	SP, R0
	SUB	SL, SP, #USR_Stack_Size

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     394:	00001000 	.word	0x00001000
	LDR	R2, =_sdata
     398:	40000000 	.word	0x40000000
	LDR	R3, =_edata
     39c:	40000000 	.word	0x40000000
	STRLO	R0, [R2], #4
	BLO	1b

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
	LDR	R1, =_sbss
     3a0:	40000000 	.word	0x40000000
	LDR	R2, =_ebss
     3a4:	40000144 	.word	0x40000144
	STRLO	R0, [R1], #4
	BLO	3b

@ Start main()
.extern main
	LDR	R0, =main
     3a8:	000007bd 	.word	0x000007bd

000003ac <irq_handler>:
.equ VIC_VectAddr0,	0x100
.equ VIC_VectPriority0,	0x200
.equ VIC_VectAddr,	0xF00

irq_handler:
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
     3ac:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
     3b0:	e92d4000 	stmfd	sp!, {lr}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
     3b4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
	LDR	R0, [R0, #VIC_VectAddr]
     3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
	MSR	CPSR_c, #M_SVC		@ Enter SVC mode and enable Irq and Fiq
     3c4:	e321f013 	msr	CPSR_c, #19

	STMFD	SP!, {LR}		@ Call the ISR
     3c8:	e92d4000 	stmfd	sp!, {lr}
	MOV	LR, PC
     3cc:	e1a0e00f 	mov	lr, pc
	BX	R0
     3d0:	e12fff10 	bx	r0
	LDMIA	SP!, {LR}
     3d4:	e8bd4000 	ldmfd	sp!, {lr}

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
     3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMIA	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
     3e0:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
	STR	LR, [LR, #VIC_VectAddr]
     3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMIA	SP!, {PC}^		@ Reruen from the IRQ handler
     3ec:	e8fd8000 	ldm	sp!, {pc}^
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
	STMFD	SP!, {LR}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
@ FIQ Handler
@ FIQ routine is typically written in assembler
@-----------------------------------------------------------@

fiq_handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq
     3f4:	e24ee004 	sub	lr, lr, #4

	@ Put the FIQ service here

	MOVS	PC, LR			@ Return from FIQ
     3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
@-----------------------------------------------------------@
@ SWI Service (declared in interrupt.h)
@-----------------------------------------------------------@

swi_handler:
	MRS	IP, SPSR
     3fc:	e14fc000 	mrs	ip, SPSR
	TST	IP, #B_Thumb		@ Check caller's state, ARM or Thumb
     400:	e31c0020 	tst	ip, #32
	LDRNEH	IP, [LR, #-2]		@ Get swi instruction code (on Thumb state)
     404:	115ec0b2 	ldrhne	ip, [lr, #-2]
	LDREQ	IP, [LR, #-4]		@ Get swi instruction code (on ARM state)
     408:	051ec004 	ldreq	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
     40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #7			@ Check range
     410:	e35c0007 	cmp	ip, #7
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump to each service function when code is valid
     414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
     418:	e1b0f00e 	movs	pc, lr
     41c:	00000438 	.word	0x00000438
     420:	00000448 	.word	0x00000448
     424:	00000458 	.word	0x00000458
     428:	0000047c 	.word	0x0000047c
     42c:	000004b4 	.word	0x000004b4
     430:	000004d4 	.word	0x000004d4
     434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
	.word	sel_fiq		@ 4 Select FIQ interrupt
	.word	load_fiq	@ 5 Load FIQ shadow regs from memory
	.word	store_fiq	@ 6 Store FIQ shadow regs to memory

irq_disable:
	MRS	R0, SPSR
     438:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq | B_Fiq
     43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     440:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:

irq_enable:
	MRS	R0, SPSR
     448:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq | B_Fiq
     44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     450:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
	MVN	R0, #0				@ Disable all interrupts
     45c:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
     460:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
     464:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
     468:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
     46c:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
     470:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_VectAddr]		@ Issule EOI command
     474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
     478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:

reg_irq:
	CMP	R0, #32				@ Range check
     47c:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     480:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
     488:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
     490:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
     494:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     498:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
     49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
	LDR	R2, [IP, #VIC_IntSelect]	@ Clear corresponding bit in the VICIntSelect
     4a0:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
     4a4:	e1c22001 	bic	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
     4a8:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4ac:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:

sel_fiq:
	CMP	R0, #32				@ Range check
     4b4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     4b8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =LPC_BASE_VIC
     4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
	MOV	R1, #1				@ Set corresponding bit in the VICIntSelect
     4c0:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     4c4:	e1a01011 	lsl	r1, r1, r0
	STR	R1, [IP, #VIC_IntSelect]
     4c8:	e58c100c 	str	r1, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4cc:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:

load_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMIA	R0!, {R8-R12}			@ Load the memory to five shadow registers
     4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4dc:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:

store_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
	STMIA	R0!, {R8-R12}			@ Store five shadow registers to the memory
     4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4ec:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4f0:	e1b0f00e 	movs	pc, lr
	BIC	R0, R0, #B_Irq | B_Fiq
	MSR	SPSR_c, R0
	MOVS	PC, LR

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     4f4:	fffff000 	.word	0xfffff000
	MOVS	PC, LR

reg_irq:
	CMP	R0, #32				@ Range check
	MOVCSS	PC, LR
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     4f8:	fffff100 	.word	0xfffff100
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
@ void Copy_un2al (DWORD *dst, const BYTE *src, int count);
.global Copy_un2al
.type Copy_un2al, %function
.func Copy_un2al
Copy_un2al:
	STMFD	SP!, {R4-R8}
     500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
     504:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
     508:	0a000012 	beq	558 <lb_align>

	BIC	R1, #3
     50c:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
     510:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     514:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
     518:	e8b10080 	ldm	r1!, {r7}
1:	MOV	R3, R7
     51c:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
     524:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
     528:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
     52c:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
     530:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
     534:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
     538:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
     53c:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
     540:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
     544:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	1b
     54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
	LDMFD	SP!, {R4-R8}
     550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     554:	e12fff1e 	bx	lr

00000558 <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
     558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
     55c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
     564:	1afffffb 	bne	558 <lb_align>
	LDMFD	SP!, {R4-R8}
     568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
@ void Copy_al2un (BYTE *dst, const DWORD *src, int count);
.global Copy_al2un
.type Copy_al2un, %function
.func Copy_al2un
Copy_al2un:
	STMFD	SP!, {R4-R8}
     570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
     574:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
     578:	0a000021 	beq	604 <sb_align>

	MOV	IP, IP, LSL #3
     57c:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     580:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
     584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
1:	STRB	R4, [R0], #1
     588:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
     58c:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
     590:	e3100003 	tst	r0, #3
	BNE	1b
     594:	1afffffb 	bne	588 <Copy_al2un+0x18>
	ORR	R4, R4, R5, LSL IP
     598:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     59c:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5a4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5ac:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
     5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}

2:	MOV	R3, R7
     5b4:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
     5bc:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
     5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
     5c4:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
     5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     5cc:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5d4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5dc:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	2b
     5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>

	MOV	R7, R7, LSR R8
     5e8:	e1a07837 	lsr	r7, r7, r8
3:	SUBS	IP, IP, #8
     5ec:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
     5f0:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
     5f4:	e1a07427 	lsr	r7, r7, #8
	BNE	3b
     5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>

	LDMFD	SP!, {R4-R8}
     5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     600:	e12fff1e 	bx	lr

00000604 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
     604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
     608:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
     610:	1afffffb 	bne	604 <sb_align>
	LDMFD	SP!, {R4-R8}
     614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     618:	e12fff1e 	bx	lr

0000061c <gpio_init>:
#include "timers.h"
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
     61c:	2101      	movs	r1, #1
     61e:	4a0c      	ldr	r2, [pc, #48]	; (650 <gpio_init+0x34>)
     620:	6813      	ldr	r3, [r2, #0]
     622:	430b      	orrs	r3, r1
     624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
     626:	2200      	movs	r2, #0
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     628:	2003      	movs	r0, #3
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62a:	4b0a      	ldr	r3, [pc, #40]	; (654 <gpio_init+0x38>)
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     62c:	490a      	ldr	r1, [pc, #40]	; (658 <gpio_init+0x3c>)
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62e:	601a      	str	r2, [r3, #0]
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     630:	680b      	ldr	r3, [r1, #0]
     632:	4303      	orrs	r3, r0
     634:	600b      	str	r3, [r1, #0]

	FIO1MASK = 0;
     636:	4b09      	ldr	r3, [pc, #36]	; (65c <gpio_init+0x40>)
     638:	601a      	str	r2, [r3, #0]
	/* FIO1DIR |=  (1 << DAC) | (1 << ADC) | (1 << ADC_DIN);	[>  Slave select pins  <] */
	/* FIO1DIR &= ~(1 << ADC_DOUT); */
	FIO1DIR |=  (1 << DAC) | (1 << ADC);/* 	Slave select pins  */
     63a:	4b09      	ldr	r3, [pc, #36]	; (660 <gpio_init+0x44>)
     63c:	4909      	ldr	r1, [pc, #36]	; (664 <gpio_init+0x48>)
     63e:	681a      	ldr	r2, [r3, #0]
     640:	430a      	orrs	r2, r1
     642:	601a      	str	r2, [r3, #0]
	FIO1SET |= (1 << ADC) | (1 << DAC);	 /*  Set hight level  */
     644:	4a08      	ldr	r2, [pc, #32]	; (668 <gpio_init+0x4c>)
     646:	6813      	ldr	r3, [r2, #0]
     648:	430b      	orrs	r3, r1
     64a:	6013      	str	r3, [r2, #0]
}
     64c:	4770      	bx	lr
     64e:	46c0      	nop			; (mov r8, r8)
     650:	e01fc1a0 	.word	0xe01fc1a0
     654:	3fffc050 	.word	0x3fffc050
     658:	3fffc040 	.word	0x3fffc040
     65c:	3fffc030 	.word	0x3fffc030
     660:	3fffc020 	.word	0x3fffc020
     664:	20040000 	.word	0x20040000
     668:	3fffc038 	.word	0x3fffc038

0000066c <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
     66c:	2201      	movs	r2, #1
     66e:	4082      	lsls	r2, r0
     670:	1c10      	adds	r0, r2, #0
     672:	4902      	ldr	r1, [pc, #8]	; (67c <led_set+0x10>)
     674:	680b      	ldr	r3, [r1, #0]
     676:	4318      	orrs	r0, r3
     678:	6008      	str	r0, [r1, #0]
}
     67a:	4770      	bx	lr
     67c:	3fffc058 	.word	0x3fffc058

00000680 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
     680:	2201      	movs	r2, #1
     682:	4082      	lsls	r2, r0
     684:	1c10      	adds	r0, r2, #0
     686:	4902      	ldr	r1, [pc, #8]	; (690 <led_clear+0x10>)
     688:	680b      	ldr	r3, [r1, #0]
     68a:	4318      	orrs	r0, r3
     68c:	6008      	str	r0, [r1, #0]
}
     68e:	4770      	bx	lr
     690:	3fffc05c 	.word	0x3fffc05c

00000694 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
     694:	b510      	push	{r4, lr}
	switch (port)
     696:	2801      	cmp	r0, #1
     698:	d00f      	beq.n	6ba <gpio_set+0x26>
     69a:	2800      	cmp	r0, #0
     69c:	d009      	beq.n	6b2 <gpio_set+0x1e>
     69e:	2802      	cmp	r0, #2
     6a0:	d110      	bne.n	6c4 <gpio_set+0x30>
			break;
		case 1:
			FIO1SET |= (1 << pin);
			break;
		case 2:
			FIO2SET |= (1 << pin);
     6a2:	2201      	movs	r2, #1
     6a4:	408a      	lsls	r2, r1
     6a6:	1c10      	adds	r0, r2, #0
     6a8:	4c08      	ldr	r4, [pc, #32]	; (6cc <gpio_set+0x38>)
     6aa:	6823      	ldr	r3, [r4, #0]
     6ac:	4318      	orrs	r0, r3
     6ae:	6020      	str	r0, [r4, #0]
			break;
     6b0:	e008      	b.n	6c4 <gpio_set+0x30>
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0SET |= (1 << pin);
     6b2:	4a07      	ldr	r2, [pc, #28]	; (6d0 <gpio_set+0x3c>)
     6b4:	2001      	movs	r0, #1
     6b6:	6813      	ldr	r3, [r2, #0]
     6b8:	e001      	b.n	6be <gpio_set+0x2a>
			break;
		case 1:
			FIO1SET |= (1 << pin);
     6ba:	4a06      	ldr	r2, [pc, #24]	; (6d4 <gpio_set+0x40>)
     6bc:	6813      	ldr	r3, [r2, #0]
     6be:	4088      	lsls	r0, r1
     6c0:	4318      	orrs	r0, r3
     6c2:	6010      	str	r0, [r2, #0]
			FIO2SET |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6c4:	bc10      	pop	{r4}
     6c6:	bc01      	pop	{r0}
     6c8:	4700      	bx	r0
     6ca:	46c0      	nop			; (mov r8, r8)
     6cc:	3fffc058 	.word	0x3fffc058
     6d0:	3fffc018 	.word	0x3fffc018
     6d4:	3fffc038 	.word	0x3fffc038

000006d8 <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
     6d8:	b510      	push	{r4, lr}
	switch (port)
     6da:	2801      	cmp	r0, #1
     6dc:	d00f      	beq.n	6fe <gpio_clear+0x26>
     6de:	2800      	cmp	r0, #0
     6e0:	d009      	beq.n	6f6 <gpio_clear+0x1e>
     6e2:	2802      	cmp	r0, #2
     6e4:	d110      	bne.n	708 <gpio_clear+0x30>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
			break;
		case 2:
			FIO2CLR |= (1 << pin);
     6e6:	2201      	movs	r2, #1
     6e8:	408a      	lsls	r2, r1
     6ea:	1c10      	adds	r0, r2, #0
     6ec:	4c08      	ldr	r4, [pc, #32]	; (710 <gpio_clear+0x38>)
     6ee:	6823      	ldr	r3, [r4, #0]
     6f0:	4318      	orrs	r0, r3
     6f2:	6020      	str	r0, [r4, #0]
			break;
     6f4:	e008      	b.n	708 <gpio_clear+0x30>
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0CLR |= (1 << pin);
     6f6:	4a07      	ldr	r2, [pc, #28]	; (714 <gpio_clear+0x3c>)
     6f8:	2001      	movs	r0, #1
     6fa:	6813      	ldr	r3, [r2, #0]
     6fc:	e001      	b.n	702 <gpio_clear+0x2a>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
     6fe:	4a06      	ldr	r2, [pc, #24]	; (718 <gpio_clear+0x40>)
     700:	6813      	ldr	r3, [r2, #0]
     702:	4088      	lsls	r0, r1
     704:	4318      	orrs	r0, r3
     706:	6010      	str	r0, [r2, #0]
			FIO2CLR |= (1 << pin);
			break;
		default:
			break;	
	}
}
     708:	bc10      	pop	{r4}
     70a:	bc01      	pop	{r0}
     70c:	4700      	bx	r0
     70e:	46c0      	nop			; (mov r8, r8)
     710:	3fffc05c 	.word	0x3fffc05c
     714:	3fffc01c 	.word	0x3fffc01c
     718:	3fffc03c 	.word	0x3fffc03c

0000071c <pll_init>:
void pll_init(void)
{
	// 1. Init OSC
	SCS = (1 << 5);
     71c:	2220      	movs	r2, #32
     71e:	4b1d      	ldr	r3, [pc, #116]	; (794 <pll_init+0x78>)
		default:
			break;	
	}
}
void pll_init(void)
{
     720:	b570      	push	{r4, r5, r6, lr}
	// 1. Init OSC
	SCS = (1 << 5);
     722:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
     724:	681a      	ldr	r2, [r3, #0]
     726:	0652      	lsls	r2, r2, #25
     728:	d5fc      	bpl.n	724 <pll_init+0x8>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     72a:	20aa      	movs	r0, #170	; 0xaa
	PLLFEED = 0x55;
     72c:	2155      	movs	r1, #85	; 0x55
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     72e:	2501      	movs	r5, #1
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
     730:	2400      	movs	r4, #0
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     732:	4b19      	ldr	r3, [pc, #100]	; (798 <pll_init+0x7c>)
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     734:	4a19      	ldr	r2, [pc, #100]	; (79c <pll_init+0x80>)
     736:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
     738:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     73a:	6019      	str	r1, [r3, #0]
	// 4. Disable PLL
	PLLCON = 0;
     73c:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     73e:	4c18      	ldr	r4, [pc, #96]	; (7a0 <pll_init+0x84>)
	PLLCON = 1; 
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
     740:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     742:	4e18      	ldr	r6, [pc, #96]	; (7a4 <pll_init+0x88>)
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
     744:	6019      	str	r1, [r3, #0]
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     746:	6025      	str	r5, [r4, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     748:	4c17      	ldr	r4, [pc, #92]	; (7a8 <pll_init+0x8c>)
     74a:	6026      	str	r6, [r4, #0]
	PLLFEED = 0xAA;
     74c:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     74e:	6019      	str	r1, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
     750:	6814      	ldr	r4, [r2, #0]
     752:	432c      	orrs	r4, r5
     754:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
     756:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     758:	6019      	str	r1, [r3, #0]
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     75a:	4914      	ldr	r1, [pc, #80]	; (7ac <pll_init+0x90>)
     75c:	6809      	ldr	r1, [r1, #0]
     75e:	0149      	lsls	r1, r1, #5
     760:	d5fb      	bpl.n	75a <pll_init+0x3e>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
     762:	2003      	movs	r0, #3
     764:	4912      	ldr	r1, [pc, #72]	; (7b0 <pll_init+0x94>)
     766:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
     768:	2000      	movs	r0, #0
     76a:	4912      	ldr	r1, [pc, #72]	; (7b4 <pll_init+0x98>)
     76c:	4c12      	ldr	r4, [pc, #72]	; (7b8 <pll_init+0x9c>)
     76e:	6008      	str	r0, [r1, #0]
     770:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
     772:	3004      	adds	r0, #4
     774:	6008      	str	r0, [r1, #0]

	// 10. Connect the PLL
	PLLCON |= 1 << 1;
     776:	6811      	ldr	r1, [r2, #0]
     778:	3802      	subs	r0, #2
     77a:	4301      	orrs	r1, r0
     77c:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     77e:	22aa      	movs	r2, #170	; 0xaa
     780:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
     782:	3a55      	subs	r2, #85	; 0x55
     784:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
     786:	f000 f831 	bl	7ec <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
     78a:	f000 f82d 	bl	7e8 <IrqEnable>

}
     78e:	bc70      	pop	{r4, r5, r6}
     790:	bc01      	pop	{r0}
     792:	4700      	bx	r0
     794:	e01fc1a0 	.word	0xe01fc1a0
     798:	e01fc08c 	.word	0xe01fc08c
     79c:	e01fc080 	.word	0xe01fc080
     7a0:	e01fc10c 	.word	0xe01fc10c
     7a4:	00010017 	.word	0x00010017
     7a8:	e01fc084 	.word	0xe01fc084
     7ac:	e01fc088 	.word	0xe01fc088
     7b0:	e01fc104 	.word	0xe01fc104
     7b4:	e01fc1ac 	.word	0xe01fc1ac
     7b8:	e01fc1a8 	.word	0xe01fc1a8

000007bc <main>:


int main (void)
{
     7bc:	b508      	push	{r3, lr}
	pll_init();
     7be:	f7ff ffad 	bl	71c <pll_init>
	uart0_init();	
     7c2:	f000 f89b 	bl	8fc <uart0_init>
	SPI0_init();
     7c6:	f000 f97f 	bl	ac8 <SPI0_init>
	timer0_init();
     7ca:	f000 faff 	bl	dcc <timer0_init>
	gpio_init();
     7ce:	f7ff ff25 	bl	61c <gpio_init>
	adc_init();
     7d2:	f000 fa48 	bl	c66 <adc_init>
	UART0_send("\nLPC initialized\n", 17);
     7d6:	4802      	ldr	r0, [pc, #8]	; (7e0 <main+0x24>)
     7d8:	2111      	movs	r1, #17
     7da:	f000 f903 	bl	9e4 <UART0_send>
		/* led_set(LED2); */
		/* for (i = 0; i < 200; i++); */
		/* led_clear(LED2); */
		/* for (i = 0; i < 200; i++); */
		/* dac_set_voltage(0x0BE1); */
	}
     7de:	e7fe      	b.n	7de <main+0x22>
     7e0:	00000f8f 	.word	0x00000f8f

000007e4 <IrqDisable>:


/* Disable/Enable Irq */
void IrqDisable (void)
{
	asm ("swi 0\n");
     7e4:	df00      	svc	0
}
     7e6:	4770      	bx	lr

000007e8 <IrqEnable>:

void IrqEnable (void)
{
	asm ("swi 1\n");
     7e8:	df01      	svc	1
}
     7ea:	4770      	bx	lr

000007ec <ClearVector>:


/* Unregister all ISRs */
void ClearVector (void)
{
	asm ("swi 2\n");
     7ec:	df02      	svc	2
}
     7ee:	4770      	bx	lr

000007f0 <RegisterIrq>:
	int irq,
	void(*isr)(void),
	int pri
)
{
	asm (
     7f0:	df03      	svc	3
	"@ MOV R0, %0\n"
	"@ MOV R1, %1\n"
	"@ MOV R2, %2\n"
	"swi 3\n" : : "r" (irq), "r" (isr), "r" (pri)
	);
}
     7f2:	4770      	bx	lr

000007f4 <SelectFiq>:
/* Switch an interrtupt source as FIQ */
void SelectFiq (
	int irq
)
{
	asm (
     7f4:	df04      	svc	4
	"@ MOV R0, %0\n"
	"swi 4\n" : : "r" (irq)
	);
}
     7f6:	4770      	bx	lr

000007f8 <LoadFiqRegs>:
/* Load shadow regs R8-R12 from memory */
void LoadFiqRegs (
	long *regs
)
{
	asm (
     7f8:	df05      	svc	5
	"@ MOV R0, %0\n"
	"swi 5\n" : : "r" (regs)
	);
}
     7fa:	4770      	bx	lr

000007fc <StoreFiqRegs>:
/* Store shadow regs R8-R12 to memory */
void StoreFiqRegs (
	long *regs
)
{
	asm (
     7fc:	df06      	svc	6
	"@ MOV R0, %0\n"
	"swi 6\n" : : "r" (regs)
	);
}
     7fe:	4770      	bx	lr

00000800 <Isr_UART0>:
{

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
     800:	4b12      	ldr	r3, [pc, #72]	; (84c <USR_Stack_Size+0x4c>)
     802:	681a      	ldr	r2, [r3, #0]
     804:	4b12      	ldr	r3, [pc, #72]	; (850 <USR_Stack_Size+0x50>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     806:	681b      	ldr	r3, [r3, #0]
     808:	061b      	lsls	r3, r3, #24
	uint16_t	ri, wi, ct;
	uint8_t		buff[UART0_RXB];
} RxBuff0;

void Isr_UART0 (void)
{
     80a:	b510      	push	{r4, lr}
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     80c:	0e1b      	lsrs	r3, r3, #24

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
     80e:	07d2      	lsls	r2, r2, #31
     810:	d50c      	bpl.n	82c <Isr_UART0+0x2c>
     812:	4810      	ldr	r0, [pc, #64]	; (854 <USR_Stack_Size+0x54>)
     814:	4c10      	ldr	r4, [pc, #64]	; (858 <USR_Stack_Size+0x58>)
	{	
		d = U0RBR;
		if (d == '\n')
     816:	2b0a      	cmp	r3, #10
     818:	d104      	bne.n	824 <Isr_UART0+0x24>
		{
			process_command(resiever);
     81a:	f000 f905 	bl	a28 <process_command>
			rec_len = 0;
     81e:	2300      	movs	r3, #0
     820:	7023      	strb	r3, [r4, #0]
     822:	e00d      	b.n	840 <Isr_UART0+0x40>
		}else{
			resiever[rec_len++] = d;
     824:	7822      	ldrb	r2, [r4, #0]
     826:	1c51      	adds	r1, r2, #1
     828:	7021      	strb	r1, [r4, #0]
     82a:	5483      	strb	r3, [r0, r2]
		}
	}else{
		d = U0RBR;
	}
	if (d == 'L')
     82c:	2b4c      	cmp	r3, #76	; 0x4c
     82e:	d102      	bne.n	836 <Isr_UART0+0x36>
	{
		FIO2SET = (1 << LED1) | (1 << LED2);
     830:	2203      	movs	r2, #3
     832:	4b0a      	ldr	r3, [pc, #40]	; (85c <USR_Stack_Size+0x5c>)
     834:	e003      	b.n	83e <Isr_UART0+0x3e>
	}else if (d == 'O')
     836:	2b4f      	cmp	r3, #79	; 0x4f
     838:	d102      	bne.n	840 <Isr_UART0+0x40>
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);
     83a:	2203      	movs	r2, #3
     83c:	4b08      	ldr	r3, [pc, #32]	; (860 <USR_Stack_Size+0x60>)
     83e:	601a      	str	r2, [r3, #0]

	}
	VICVectAddr = 0;
     840:	2200      	movs	r2, #0
     842:	4b08      	ldr	r3, [pc, #32]	; (864 <USR_Stack_Size+0x64>)
     844:	601a      	str	r2, [r3, #0]

}
     846:	bc10      	pop	{r4}
     848:	bc01      	pop	{r0}
     84a:	4700      	bx	r0
     84c:	e000c014 	.word	0xe000c014
     850:	e000c000 	.word	0xe000c000
     854:	40000110 	.word	0x40000110
     858:	40000000 	.word	0x40000000
     85c:	3fffc058 	.word	0x3fffc058
     860:	3fffc05c 	.word	0x3fffc05c
     864:	ffffff00 	.word	0xffffff00

00000868 <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
     868:	4b01      	ldr	r3, [pc, #4]	; (870 <uart0_test+0x8>)
     86a:	88d8      	ldrh	r0, [r3, #6]
}
     86c:	4770      	bx	lr
     86e:	46c0      	nop			; (mov r8, r8)
     870:	40000000 	.word	0x40000000

00000874 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
     874:	4b0b      	ldr	r3, [pc, #44]	; (8a4 <uart0_getc+0x30>)
     876:	88da      	ldrh	r2, [r3, #6]
     878:	3302      	adds	r3, #2
     87a:	2a00      	cmp	r2, #0
     87c:	d0fa      	beq.n	874 <uart0_getc>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
     87e:	881a      	ldrh	r2, [r3, #0]
	d = RxBuff0.buff[i++];
     880:	1899      	adds	r1, r3, r2
     882:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
     884:	217f      	movs	r1, #127	; 0x7f

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
	d = RxBuff0.buff[i++];
     886:	3201      	adds	r2, #1
	RxBuff0.ri = i % UART0_RXB;
     888:	400a      	ands	r2, r1
     88a:	801a      	strh	r2, [r3, #0]
	U0IER = 0;		/* Disable interrupts */
     88c:	2200      	movs	r2, #0
     88e:	4906      	ldr	r1, [pc, #24]	; (8a8 <uart0_getc+0x34>)
     890:	600a      	str	r2, [r1, #0]
	RxBuff0.ct--;
     892:	889a      	ldrh	r2, [r3, #4]
     894:	3a01      	subs	r2, #1
     896:	0412      	lsls	r2, r2, #16
     898:	0c12      	lsrs	r2, r2, #16
     89a:	809a      	strh	r2, [r3, #4]
	U0IER = 0x07;	/* Reenable interrupt */
     89c:	2307      	movs	r3, #7
     89e:	600b      	str	r3, [r1, #0]

	return d;
}
     8a0:	4770      	bx	lr
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	40000000 	.word	0x40000000
     8a8:	e000c004 	.word	0xe000c004

000008ac <uart0_putc>:


void uart0_putc (uint8_t d)
{
     8ac:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
     8ae:	4b10      	ldr	r3, [pc, #64]	; (8f0 <uart0_putc+0x44>)
     8b0:	899a      	ldrh	r2, [r3, #12]
     8b2:	2a7f      	cmp	r2, #127	; 0x7f
     8b4:	d8fb      	bhi.n	8ae <uart0_putc+0x2>

	U0IER = 0x05;		/* Disable Tx Interrupt */
     8b6:	2205      	movs	r2, #5
     8b8:	490e      	ldr	r1, [pc, #56]	; (8f4 <uart0_putc+0x48>)
     8ba:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
     8bc:	89da      	ldrh	r2, [r3, #14]
     8be:	2a00      	cmp	r2, #0
     8c0:	d00c      	beq.n	8dc <uart0_putc+0x30>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
     8c2:	895a      	ldrh	r2, [r3, #10]
		TxBuff0.buff[i++] = d;
     8c4:	189c      	adds	r4, r3, r2
     8c6:	7420      	strb	r0, [r4, #16]
		TxBuff0.wi = i % UART0_TXB;
     8c8:	207f      	movs	r0, #127	; 0x7f
	while (TxBuff0.ct >= UART0_TXB) ;

	U0IER = 0x05;		/* Disable Tx Interrupt */
	if (TxBuff0.act) {
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
		TxBuff0.buff[i++] = d;
     8ca:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
     8cc:	4002      	ands	r2, r0
     8ce:	815a      	strh	r2, [r3, #10]
		TxBuff0.ct++;
     8d0:	899a      	ldrh	r2, [r3, #12]
     8d2:	3201      	adds	r2, #1
     8d4:	0412      	lsls	r2, r2, #16
     8d6:	0c12      	lsrs	r2, r2, #16
     8d8:	819a      	strh	r2, [r3, #12]
     8da:	e003      	b.n	8e4 <uart0_putc+0x38>
	} else {
		U0THR = d;		/* Trigger Tx sequense */
     8dc:	4a06      	ldr	r2, [pc, #24]	; (8f8 <uart0_putc+0x4c>)
     8de:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
     8e0:	2201      	movs	r2, #1
     8e2:	81da      	strh	r2, [r3, #14]
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
     8e4:	2307      	movs	r3, #7
     8e6:	600b      	str	r3, [r1, #0]
}
     8e8:	bc10      	pop	{r4}
     8ea:	bc01      	pop	{r0}
     8ec:	4700      	bx	r0
     8ee:	46c0      	nop			; (mov r8, r8)
     8f0:	40000080 	.word	0x40000080
     8f4:	e000c004 	.word	0xe000c004
     8f8:	e000c000 	.word	0xe000c000

000008fc <uart0_init>:


void uart0_init (void)
{
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     8fc:	2108      	movs	r1, #8
     8fe:	4a16      	ldr	r2, [pc, #88]	; (958 <uart0_init+0x5c>)
	U0IER = 0x07;		/* Reenable Tx Interrupt */
}


void uart0_init (void)
{
     900:	b508      	push	{r3, lr}
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     902:	6813      	ldr	r3, [r2, #0]
     904:	430b      	orrs	r3, r1
     906:	6013      	str	r3, [r2, #0]
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     908:	4b14      	ldr	r3, [pc, #80]	; (95c <uart0_init+0x60>)
     90a:	681a      	ldr	r2, [r3, #0]
     90c:	317b      	adds	r1, #123	; 0x7b
     90e:	430a      	orrs	r2, r1
     910:	601a      	str	r2, [r3, #0]
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     912:	4a13      	ldr	r2, [pc, #76]	; (960 <uart0_init+0x64>)
     914:	313e      	adds	r1, #62	; 0x3e
     916:	6011      	str	r1, [r2, #0]
	U0DLL = 0x09;
     918:	4a12      	ldr	r2, [pc, #72]	; (964 <uart0_init+0x68>)
     91a:	39b8      	subs	r1, #184	; 0xb8
     91c:	6011      	str	r1, [r2, #0]
	U0DLM = 0x00;
     91e:	2100      	movs	r1, #0
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     920:	2080      	movs	r0, #128	; 0x80
	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
	U0DLL = 0x09;
	U0DLM = 0x00;
     922:	4a11      	ldr	r2, [pc, #68]	; (968 <uart0_init+0x6c>)
     924:	6011      	str	r1, [r2, #0]
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     926:	6819      	ldr	r1, [r3, #0]
     928:	4381      	bics	r1, r0
     92a:	6019      	str	r1, [r3, #0]

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     92c:	490f      	ldr	r1, [pc, #60]	; (96c <uart0_init+0x70>)
     92e:	680b      	ldr	r3, [r1, #0]
     930:	3879      	subs	r0, #121	; 0x79
     932:	4303      	orrs	r3, r0
     934:	600b      	str	r3, [r1, #0]

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     936:	490e      	ldr	r1, [pc, #56]	; (970 <uart0_init+0x74>)
     938:	680b      	ldr	r3, [r1, #0]
     93a:	3049      	adds	r0, #73	; 0x49
     93c:	4303      	orrs	r3, r0
     93e:	600b      	str	r3, [r1, #0]

	//Interrupts
	/* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
	/* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
	U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
     940:	2101      	movs	r1, #1
     942:	6813      	ldr	r3, [r2, #0]
     944:	430b      	orrs	r3, r1
     946:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
     948:	384a      	subs	r0, #74	; 0x4a
     94a:	490a      	ldr	r1, [pc, #40]	; (974 <uart0_init+0x78>)
     94c:	220f      	movs	r2, #15
     94e:	f7ff ff4f 	bl	7f0 <RegisterIrq>

}
     952:	bc08      	pop	{r3}
     954:	bc01      	pop	{r0}
     956:	4700      	bx	r0
     958:	e01fc0c4 	.word	0xe01fc0c4
     95c:	e000c00c 	.word	0xe000c00c
     960:	e000c028 	.word	0xe000c028
     964:	e000c000 	.word	0xe000c000
     968:	e000c004 	.word	0xe000c004
     96c:	e000c008 	.word	0xe000c008
     970:	e002c000 	.word	0xe002c000
     974:	00000801 	.word	0x00000801

00000978 <hex_to_int>:


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     978:	220a      	movs	r2, #10
unsigned char RxCount,Index;
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
     97a:	0903      	lsrs	r3, r0, #4
     97c:	3b03      	subs	r3, #3
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     97e:	4353      	muls	r3, r2
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
     980:	3205      	adds	r2, #5
     982:	4010      	ands	r0, r2
	uint16_t result = first*10 + second;
     984:	18c0      	adds	r0, r0, r3
     986:	0400      	lsls	r0, r0, #16
     988:	0c00      	lsrs	r0, r0, #16
	if(result > 9) result--;
     98a:	2809      	cmp	r0, #9
     98c:	d902      	bls.n	994 <hex_to_int+0x1c>
     98e:	3801      	subs	r0, #1
     990:	0400      	lsls	r0, r0, #16
     992:	0c00      	lsrs	r0, r0, #16
	return result;
}
     994:	4770      	bx	lr

00000996 <hex_to_ascii>:

uint16_t hex_to_ascii(uint16_t c){
     996:	b538      	push	{r3, r4, r5, lr}
     998:	1c05      	adds	r5, r0, #0
	uint16_t high = hex_to_int(c >> 8) * 16;
     99a:	0a00      	lsrs	r0, r0, #8
     99c:	f7ff ffec 	bl	978 <hex_to_int>
     9a0:	1c04      	adds	r4, r0, #0
	uint16_t low = hex_to_int(c & 0xFF);
     9a2:	0628      	lsls	r0, r5, #24
     9a4:	0e00      	lsrs	r0, r0, #24
     9a6:	f7ff ffe7 	bl	978 <hex_to_int>
	if(result > 9) result--;
	return result;
}

uint16_t hex_to_ascii(uint16_t c){
	uint16_t high = hex_to_int(c >> 8) * 16;
     9aa:	0124      	lsls	r4, r4, #4
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
     9ac:	1900      	adds	r0, r0, r4
     9ae:	0400      	lsls	r0, r0, #16
     9b0:	0c00      	lsrs	r0, r0, #16
}
     9b2:	bc38      	pop	{r3, r4, r5}
     9b4:	bc02      	pop	{r1}
     9b6:	4708      	bx	r1

000009b8 <UART0_send_byte>:
	}
}
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9b8:	2101      	movs	r1, #1
     9ba:	4b07      	ldr	r3, [pc, #28]	; (9d8 <UART0_send_byte+0x20>)
     9bc:	681a      	ldr	r2, [r3, #0]
     9be:	438a      	bics	r2, r1
     9c0:	601a      	str	r2, [r3, #0]
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9c2:	4a06      	ldr	r2, [pc, #24]	; (9dc <UART0_send_byte+0x24>)
     9c4:	6812      	ldr	r2, [r2, #0]
     9c6:	0692      	lsls	r2, r2, #26
     9c8:	d5fb      	bpl.n	9c2 <UART0_send_byte+0xa>
	U0THR = byte;
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9ca:	2101      	movs	r1, #1
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
	U0THR = byte;
     9cc:	4a04      	ldr	r2, [pc, #16]	; (9e0 <UART0_send_byte+0x28>)
     9ce:	6010      	str	r0, [r2, #0]
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9d0:	681a      	ldr	r2, [r3, #0]
     9d2:	430a      	orrs	r2, r1
     9d4:	601a      	str	r2, [r3, #0]
}
     9d6:	4770      	bx	lr
     9d8:	e000c004 	.word	0xe000c004
     9dc:	e000c014 	.word	0xe000c014
     9e0:	e000c000 	.word	0xe000c000

000009e4 <UART0_send>:
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
     9e4:	b510      	push	{r4, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9e6:	2401      	movs	r4, #1
     9e8:	4b0c      	ldr	r3, [pc, #48]	; (a1c <Stack_Size+0xc>)
     9ea:	681a      	ldr	r2, [r3, #0]
     9ec:	43a2      	bics	r2, r4
     9ee:	1c1c      	adds	r4, r3, #0
     9f0:	601a      	str	r2, [r3, #0]

	while ( Length != 0 )
     9f2:	2900      	cmp	r1, #0
     9f4:	d00b      	beq.n	a0e <UART0_send+0x2a>
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9f6:	4b0a      	ldr	r3, [pc, #40]	; (a20 <Stack_Size+0x10>)
     9f8:	681b      	ldr	r3, [r3, #0]
     9fa:	069b      	lsls	r3, r3, #26
     9fc:	d5fb      	bpl.n	9f6 <UART0_send+0x12>
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     9fe:	7802      	ldrb	r2, [r0, #0]
     a00:	4b08      	ldr	r3, [pc, #32]	; (a24 <Stack_Size+0x14>)
		BufferPtr++;
		Length--;
     a02:	3901      	subs	r1, #1
     a04:	0409      	lsls	r1, r1, #16

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a06:	601a      	str	r2, [r3, #0]
		BufferPtr++;
     a08:	3001      	adds	r0, #1
		Length--;
     a0a:	0c09      	lsrs	r1, r1, #16
     a0c:	e7f1      	b.n	9f2 <UART0_send+0xe>
	}
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a0e:	2201      	movs	r2, #1
     a10:	6823      	ldr	r3, [r4, #0]
     a12:	4313      	orrs	r3, r2
     a14:	6023      	str	r3, [r4, #0]

	return;
}
     a16:	bc10      	pop	{r4}
     a18:	bc01      	pop	{r0}
     a1a:	4700      	bx	r0
     a1c:	e000c004 	.word	0xe000c004
     a20:	e000c014 	.word	0xe000c014
     a24:	e000c000 	.word	0xe000c000

00000a28 <process_command>:
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     a28:	b510      	push	{r4, lr}
	char answer[20]="";
	if(strncmp(cmd, "start", 5) == 0)
     a2a:	4920      	ldr	r1, [pc, #128]	; (aac <process_command+0x84>)
     a2c:	2205      	movs	r2, #5
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     a2e:	1c04      	adds	r4, r0, #0
	char answer[20]="";
	if(strncmp(cmd, "start", 5) == 0)
     a30:	f000 fa1e 	bl	e70 <strncmp>
     a34:	2800      	cmp	r0, #0
     a36:	d10c      	bne.n	a52 <process_command+0x2a>
	{
		UART0_send("\nStarted\n", 9);
     a38:	481d      	ldr	r0, [pc, #116]	; (ab0 <process_command+0x88>)
     a3a:	2109      	movs	r1, #9
     a3c:	f7ff ffd2 	bl	9e4 <UART0_send>
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     a40:	210d      	movs	r1, #13
     a42:	2002      	movs	r0, #2
     a44:	f7ff fe26 	bl	694 <gpio_set>
		led_set(LED2);
     a48:	2001      	movs	r0, #1
     a4a:	f7ff fe0f 	bl	66c <led_set>
		timer0_start();
     a4e:	f000 f9ef 	bl	e30 <timer0_start>
	}    

	/* Turn off amplifier */
	if(strncmp(cmd, "stop", 4) == 0)
     a52:	1c20      	adds	r0, r4, #0
     a54:	4917      	ldr	r1, [pc, #92]	; (ab4 <process_command+0x8c>)
     a56:	2204      	movs	r2, #4
     a58:	f000 fa0a 	bl	e70 <strncmp>
     a5c:	2800      	cmp	r0, #0
     a5e:	d10c      	bne.n	a7a <process_command+0x52>
	{
		UART0_send("\nStopped\n", 9);
     a60:	4815      	ldr	r0, [pc, #84]	; (ab8 <process_command+0x90>)
     a62:	2109      	movs	r1, #9
     a64:	f7ff ffbe 	bl	9e4 <UART0_send>
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     a68:	210d      	movs	r1, #13
     a6a:	2002      	movs	r0, #2
     a6c:	f7ff fe34 	bl	6d8 <gpio_clear>
		led_clear(LED2);
     a70:	2001      	movs	r0, #1
     a72:	f7ff fe05 	bl	680 <led_clear>
		timer0_stop();
     a76:	f000 f9eb 	bl	e50 <timer0_stop>
	}
	/* Voltage setup  */
	if(strncmp(cmd, "set", 3) == 0)
     a7a:	1c20      	adds	r0, r4, #0
     a7c:	490f      	ldr	r1, [pc, #60]	; (abc <process_command+0x94>)
     a7e:	2203      	movs	r2, #3
     a80:	f000 f9f6 	bl	e70 <strncmp>
     a84:	2800      	cmp	r0, #0
     a86:	d102      	bne.n	a8e <process_command+0x66>
	{
		dac_set_voltage(cmd+4);
     a88:	1d20      	adds	r0, r4, #4
     a8a:	f000 f911 	bl	cb0 <dac_set_voltage>
	}

	/* Manual  */
	if(strncmp(cmd, "help", 4) == 0)
     a8e:	1c20      	adds	r0, r4, #0
     a90:	490b      	ldr	r1, [pc, #44]	; (ac0 <process_command+0x98>)
     a92:	2204      	movs	r2, #4
     a94:	f000 f9ec 	bl	e70 <strncmp>
     a98:	2800      	cmp	r0, #0
     a9a:	d103      	bne.n	aa4 <process_command+0x7c>
	{
		UART0_send(help_msg, sizeof(help_msg));
     a9c:	4809      	ldr	r0, [pc, #36]	; (ac4 <process_command+0x9c>)
     a9e:	2187      	movs	r1, #135	; 0x87
     aa0:	f7ff ffa0 	bl	9e4 <UART0_send>
		 * UART0_send(S0PSR, 1);
		 * UART0_send("\n", 1);
		 * UART0_send(S0SPCCR, 1);
		 * UART0_send("\n", 1); */
	}
}
     aa4:	bc10      	pop	{r4}
     aa6:	bc01      	pop	{r0}
     aa8:	4700      	bx	r0
     aaa:	46c0      	nop			; (mov r8, r8)
     aac:	00000fa1 	.word	0x00000fa1
     ab0:	00000fa7 	.word	0x00000fa7
     ab4:	00000fb1 	.word	0x00000fb1
     ab8:	00000fb6 	.word	0x00000fb6
     abc:	00000fc0 	.word	0x00000fc0
     ac0:	00000fc4 	.word	0x00000fc4
     ac4:	00000f08 	.word	0x00000f08

00000ac8 <SPI0_init>:
	return dat;
}

void SPI0_init(void)
{
	PCONP |= (1 << 8);
     ac8:	2180      	movs	r1, #128	; 0x80
     aca:	4a0c      	ldr	r2, [pc, #48]	; (afc <SPI0_init+0x34>)
     acc:	6813      	ldr	r3, [r2, #0]
     ace:	0049      	lsls	r1, r1, #1
     ad0:	430b      	orrs	r3, r1
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
     ad2:	21c0      	movs	r1, #192	; 0xc0
	return dat;
}

void SPI0_init(void)
{
	PCONP |= (1 << 8);
     ad4:	6013      	str	r3, [r2, #0]
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
     ad6:	4a0a      	ldr	r2, [pc, #40]	; (b00 <SPI0_init+0x38>)
     ad8:	6813      	ldr	r3, [r2, #0]
     ada:	0289      	lsls	r1, r1, #10
     adc:	430b      	orrs	r3, r1
	S0SPCR |= (1 << 5);	/*   Master mode*/
     ade:	2120      	movs	r1, #32
}

void SPI0_init(void)
{
	PCONP |= (1 << 8);
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
     ae0:	6013      	str	r3, [r2, #0]
	S0SPCR |= (1 << 5);	/*   Master mode*/
     ae2:	4a08      	ldr	r2, [pc, #32]	; (b04 <SPI0_init+0x3c>)
     ae4:	6813      	ldr	r3, [r2, #0]
     ae6:	430b      	orrs	r3, r1
     ae8:	6013      	str	r3, [r2, #0]
	S0SPCCR = 0x12; 	/* SPI0 perif clock divided by 18 to reach 500kHz */
     aea:	2212      	movs	r2, #18
     aec:	4b06      	ldr	r3, [pc, #24]	; (b08 <SPI0_init+0x40>)
     aee:	601a      	str	r2, [r3, #0]
	PINSEL3 |= ((1 << 9) | (1 << 8) | (1 << 14) | (1 << 15) | (1 << 16) | (1 << 17));/* 	[>MISO0, MOSI0, CLK0 as SPI pins<] */
     af0:	4a06      	ldr	r2, [pc, #24]	; (b0c <SPI0_init+0x44>)
     af2:	4907      	ldr	r1, [pc, #28]	; (b10 <SPI0_init+0x48>)
     af4:	6813      	ldr	r3, [r2, #0]
     af6:	430b      	orrs	r3, r1
     af8:	6013      	str	r3, [r2, #0]
	/* PINMODE3 |= (1 << 15) | (1 << 7); */
}
     afa:	4770      	bx	lr
     afc:	e01fc0c4 	.word	0xe01fc0c4
     b00:	e01fc1a8 	.word	0xe01fc1a8
     b04:	e0020000 	.word	0xe0020000
     b08:	e002000c 	.word	0xe002000c
     b0c:	e002c00c 	.word	0xe002c00c
     b10:	0003c300 	.word	0x0003c300

00000b14 <SPI_ADC_data_transfers_16bit>:

unsigned char SPI_ADC_data_transfers_16bit (unsigned short data)
{
     b14:	b530      	push	{r4, r5, lr}
     b16:	210f      	movs	r1, #15
     b18:	1c04      	adds	r4, r0, #0
	unsigned char dat = 0;
     b1a:	2000      	movs	r0, #0
	char i;

	//Write
	for(i = 16;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
     b1c:	1c22      	adds	r2, r4, #0
     b1e:	410a      	asrs	r2, r1
     b20:	4b11      	ldr	r3, [pc, #68]	; (b68 <SPI_ADC_data_transfers_16bit+0x54>)
     b22:	07d2      	lsls	r2, r2, #31
     b24:	d504      	bpl.n	b30 <SPI_ADC_data_transfers_16bit+0x1c>
			FIO1PIN |= 1 << ADC_DIN;
     b26:	2580      	movs	r5, #128	; 0x80
     b28:	681a      	ldr	r2, [r3, #0]
     b2a:	046d      	lsls	r5, r5, #17
     b2c:	432a      	orrs	r2, r5
     b2e:	e002      	b.n	b36 <SPI_ADC_data_transfers_16bit+0x22>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b30:	681d      	ldr	r5, [r3, #0]
     b32:	4a0e      	ldr	r2, [pc, #56]	; (b6c <SPI_ADC_data_transfers_16bit+0x58>)
     b34:	402a      	ands	r2, r5

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     b36:	2580      	movs	r5, #128	; 0x80
	for(i = 16;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b38:	601a      	str	r2, [r3, #0]

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     b3a:	681a      	ldr	r2, [r3, #0]
     b3c:	036d      	lsls	r5, r5, #13
     b3e:	432a      	orrs	r2, r5
     b40:	601a      	str	r2, [r3, #0]
		FIO1PIN &= ~(1 << ADC_SCLK);
     b42:	4a0b      	ldr	r2, [pc, #44]	; (b70 <SPI_ADC_data_transfers_16bit+0x5c>)
     b44:	681d      	ldr	r5, [r3, #0]
     b46:	402a      	ands	r2, r5
     b48:	601a      	str	r2, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b4a:	681a      	ldr	r2, [r3, #0]
     b4c:	2301      	movs	r3, #1
			dat |= 1 << (i - 1);
     b4e:	408b      	lsls	r3, r1
		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b50:	0212      	lsls	r2, r2, #8
     b52:	d503      	bpl.n	b5c <SPI_ADC_data_transfers_16bit+0x48>
			dat |= 1 << (i - 1);
     b54:	4303      	orrs	r3, r0
     b56:	0618      	lsls	r0, r3, #24
     b58:	0e00      	lsrs	r0, r0, #24
     b5a:	e000      	b.n	b5e <SPI_ADC_data_transfers_16bit+0x4a>
		else
			dat &= ~(1 << (i - 1));
     b5c:	4398      	bics	r0, r3
{
	unsigned char dat = 0;
	char i;

	//Write
	for(i = 16;  i > 0 ; i--)
     b5e:	3901      	subs	r1, #1
     b60:	d2dc      	bcs.n	b1c <SPI_ADC_data_transfers_16bit+0x8>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     b62:	bc30      	pop	{r4, r5}
     b64:	bc02      	pop	{r1}
     b66:	4708      	bx	r1
     b68:	3fffc034 	.word	0x3fffc034
     b6c:	feffffff 	.word	0xfeffffff
     b70:	ffefffff 	.word	0xffefffff

00000b74 <SPI_ADC_data_transfers_8bit>:

unsigned char SPI_ADC_data_transfers_8bit (unsigned char data)
{
     b74:	b530      	push	{r4, r5, lr}
     b76:	2107      	movs	r1, #7
     b78:	1c04      	adds	r4, r0, #0
	unsigned char dat = 0;
     b7a:	2000      	movs	r0, #0
	char i;

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
     b7c:	1c22      	adds	r2, r4, #0
     b7e:	410a      	asrs	r2, r1
     b80:	4b11      	ldr	r3, [pc, #68]	; (bc8 <SPI_ADC_data_transfers_8bit+0x54>)
     b82:	07d2      	lsls	r2, r2, #31
     b84:	d504      	bpl.n	b90 <SPI_ADC_data_transfers_8bit+0x1c>
			FIO1PIN |= 1 << ADC_DIN;
     b86:	2580      	movs	r5, #128	; 0x80
     b88:	681a      	ldr	r2, [r3, #0]
     b8a:	046d      	lsls	r5, r5, #17
     b8c:	432a      	orrs	r2, r5
     b8e:	e002      	b.n	b96 <SPI_ADC_data_transfers_8bit+0x22>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b90:	681d      	ldr	r5, [r3, #0]
     b92:	4a0e      	ldr	r2, [pc, #56]	; (bcc <SPI_ADC_data_transfers_8bit+0x58>)
     b94:	402a      	ands	r2, r5

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     b96:	2580      	movs	r5, #128	; 0x80
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b98:	601a      	str	r2, [r3, #0]

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     b9a:	681a      	ldr	r2, [r3, #0]
     b9c:	036d      	lsls	r5, r5, #13
     b9e:	432a      	orrs	r2, r5
     ba0:	601a      	str	r2, [r3, #0]
		FIO1PIN &= ~(1 << ADC_SCLK);
     ba2:	4a0b      	ldr	r2, [pc, #44]	; (bd0 <SPI_ADC_data_transfers_8bit+0x5c>)
     ba4:	681d      	ldr	r5, [r3, #0]
     ba6:	402a      	ands	r2, r5
     ba8:	601a      	str	r2, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     baa:	681a      	ldr	r2, [r3, #0]
     bac:	2301      	movs	r3, #1
			dat |= 1 << (i - 1);
     bae:	408b      	lsls	r3, r1
		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     bb0:	0212      	lsls	r2, r2, #8
     bb2:	d503      	bpl.n	bbc <SPI_ADC_data_transfers_8bit+0x48>
			dat |= 1 << (i - 1);
     bb4:	4303      	orrs	r3, r0
     bb6:	0618      	lsls	r0, r3, #24
     bb8:	0e00      	lsrs	r0, r0, #24
     bba:	e000      	b.n	bbe <SPI_ADC_data_transfers_8bit+0x4a>
		else
			dat &= ~(1 << (i - 1));
     bbc:	4398      	bics	r0, r3
{
	unsigned char dat = 0;
	char i;

	//Write
	for(i = 8;  i > 0 ; i--)
     bbe:	3901      	subs	r1, #1
     bc0:	d2dc      	bcs.n	b7c <SPI_ADC_data_transfers_8bit+0x8>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     bc2:	bc30      	pop	{r4, r5}
     bc4:	bc02      	pop	{r1}
     bc6:	4708      	bx	r1
     bc8:	3fffc034 	.word	0x3fffc034
     bcc:	feffffff 	.word	0xfeffffff
     bd0:	ffefffff 	.word	0xffefffff

00000bd4 <spi_readStatus>:
uint8_t spi_readStatus (void) {
     bd4:	b513      	push	{r0, r1, r4, lr}

	uint8_t SPIStatus;
	uint8_t abrt, modf, rovr, wcol, spif;

	SPIStatus = S0SPSR;
     bd6:	466a      	mov	r2, sp
     bd8:	4b09      	ldr	r3, [pc, #36]	; (c00 <spi_readStatus+0x2c>)
     bda:	681b      	ldr	r3, [r3, #0]
     bdc:	1dd4      	adds	r4, r2, #7
	UART0_send("\nS0SPSR: ", 9);
     bde:	4809      	ldr	r0, [pc, #36]	; (c04 <spi_readStatus+0x30>)
     be0:	2109      	movs	r1, #9
uint8_t spi_readStatus (void) {

	uint8_t SPIStatus;
	uint8_t abrt, modf, rovr, wcol, spif;

	SPIStatus = S0SPSR;
     be2:	71d3      	strb	r3, [r2, #7]
	UART0_send("\nS0SPSR: ", 9);
     be4:	f7ff fefe 	bl	9e4 <UART0_send>
	UART0_send(&SPIStatus, 1);
     be8:	1c20      	adds	r0, r4, #0
     bea:	2101      	movs	r1, #1
     bec:	f7ff fefa 	bl	9e4 <UART0_send>
	if(spif==1) { 
		UART0_send("\nSPIF is 1 - clearing\n", sizeof("\nSPIF is 1 - clearing\n")-1);
	}
#endif

	S0SPCR = S0SPCR; // write cr register to clear status bit
     bf0:	4b05      	ldr	r3, [pc, #20]	; (c08 <spi_readStatus+0x34>)
	UART0_send(&SPIStatus, 1);
	abrt = (SPIStatus & 0x8 ) >> 3;
	modf = (SPIStatus & 0x10) >> 4;
	rovr = (SPIStatus & 0x20) >> 5;
	wcol = (SPIStatus & 0x40) >> 6;
	spif = (SPIStatus & 0x80) >> 7;
     bf2:	7820      	ldrb	r0, [r4, #0]
	if(spif==1) { 
		UART0_send("\nSPIF is 1 - clearing\n", sizeof("\nSPIF is 1 - clearing\n")-1);
	}
#endif

	S0SPCR = S0SPCR; // write cr register to clear status bit
     bf4:	681a      	ldr	r2, [r3, #0]
	UART0_send(&SPIStatus, 1);
	abrt = (SPIStatus & 0x8 ) >> 3;
	modf = (SPIStatus & 0x10) >> 4;
	rovr = (SPIStatus & 0x20) >> 5;
	wcol = (SPIStatus & 0x40) >> 6;
	spif = (SPIStatus & 0x80) >> 7;
     bf6:	09c0      	lsrs	r0, r0, #7
	if(spif==1) { 
		UART0_send("\nSPIF is 1 - clearing\n", sizeof("\nSPIF is 1 - clearing\n")-1);
	}
#endif

	S0SPCR = S0SPCR; // write cr register to clear status bit
     bf8:	601a      	str	r2, [r3, #0]
	return(spif);
}
     bfa:	bc16      	pop	{r1, r2, r4}
     bfc:	bc02      	pop	{r1}
     bfe:	4708      	bx	r1
     c00:	e0020004 	.word	0xe0020004
     c04:	00000fc9 	.word	0x00000fc9
     c08:	e0020000 	.word	0xe0020000

00000c0c <SPI0_send_1_byte>:


uint8_t SPI0_send_1_byte(uint8_t data)
{
	uint8_t dat;
	S0SPDR = data;
     c0c:	4b06      	ldr	r3, [pc, #24]	; (c28 <SPI0_send_1_byte+0x1c>)
#include "spi.h"
/* #define DEBUG_SPI */


uint8_t SPI0_send_1_byte(uint8_t data)
{
     c0e:	b510      	push	{r4, lr}
     c10:	1c1c      	adds	r4, r3, #0
	uint8_t dat;
	S0SPDR = data;
     c12:	6018      	str	r0, [r3, #0]
	while (spi_readStatus() == 0); 
     c14:	f7ff ffde 	bl	bd4 <spi_readStatus>
     c18:	2800      	cmp	r0, #0
     c1a:	d0fb      	beq.n	c14 <SPI0_send_1_byte+0x8>
	/* data = SPI_ADC_data_transfers_8bit(data); */
	dat = S0SPDR;
     c1c:	6820      	ldr	r0, [r4, #0]
	return dat;
     c1e:	0600      	lsls	r0, r0, #24
     c20:	0e00      	lsrs	r0, r0, #24
}
     c22:	bc10      	pop	{r4}
     c24:	bc02      	pop	{r1}
     c26:	4708      	bx	r1
     c28:	e0020008 	.word	0xe0020008

00000c2c <SPI0_send_2_byte>:

uint16_t SPI0_send_2_byte(uint16_t data)
{
     c2c:	b570      	push	{r4, r5, r6, lr}
     c2e:	1c06      	adds	r6, r0, #0
	uint16_t dat;
	S0SPDR = (data >> 8) & 0xFF;
     c30:	4c0b      	ldr	r4, [pc, #44]	; (c60 <SPI0_send_2_byte+0x34>)
     c32:	0a03      	lsrs	r3, r0, #8
     c34:	6023      	str	r3, [r4, #0]
	while (spi_readStatus() == 0); 
     c36:	f7ff ffcd 	bl	bd4 <spi_readStatus>
     c3a:	2800      	cmp	r0, #0
     c3c:	d0fb      	beq.n	c36 <SPI0_send_2_byte+0xa>
	dat = S0SPDR << 8;
     c3e:	6820      	ldr	r0, [r4, #0]
     c40:	0600      	lsls	r0, r0, #24
     c42:	0c05      	lsrs	r5, r0, #16
	S0SPDR = data & 0xFF;
     c44:	0630      	lsls	r0, r6, #24
     c46:	0e00      	lsrs	r0, r0, #24
     c48:	6020      	str	r0, [r4, #0]
	while (spi_readStatus() == 0); 
     c4a:	f7ff ffc3 	bl	bd4 <spi_readStatus>
     c4e:	2800      	cmp	r0, #0
     c50:	d0fb      	beq.n	c4a <SPI0_send_2_byte+0x1e>
	dat |= S0SPDR;
     c52:	6820      	ldr	r0, [r4, #0]
     c54:	4328      	orrs	r0, r5
	return dat;
     c56:	0400      	lsls	r0, r0, #16
     c58:	0c00      	lsrs	r0, r0, #16
}
     c5a:	bc70      	pop	{r4, r5, r6}
     c5c:	bc02      	pop	{r1}
     c5e:	4708      	bx	r1
     c60:	e0020008 	.word	0xe0020008

00000c64 <Delay>:
{
	int i, j;
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
     c64:	4770      	bx	lr

00000c66 <adc_init>:
void adc_init(void)
{
     c66:	b538      	push	{r3, r4, r5, lr}
	uint8_t dat = 0;

	FIO1CLR |= 1 << ADC;
     c68:	2480      	movs	r4, #128	; 0x80
     c6a:	4a0e      	ldr	r2, [pc, #56]	; (ca4 <adc_init+0x3e>)
     c6c:	6813      	ldr	r3, [r2, #0]
     c6e:	02e4      	lsls	r4, r4, #11
     c70:	4323      	orrs	r3, r4
     c72:	6013      	str	r3, [r2, #0]

	SPI0_send_1_byte(READ_ID_REG);
     c74:	2060      	movs	r0, #96	; 0x60
     c76:	f7ff ffc9 	bl	c0c <SPI0_send_1_byte>
	dat = SPI0_send_1_byte(0xFF);
     c7a:	20ff      	movs	r0, #255	; 0xff
     c7c:	f7ff ffc6 	bl	c0c <SPI0_send_1_byte>
     c80:	1c05      	adds	r5, r0, #0

	FIO1SET |= 1 << ADC;
     c82:	4a09      	ldr	r2, [pc, #36]	; (ca8 <adc_init+0x42>)
     c84:	6813      	ldr	r3, [r2, #0]
     c86:	4323      	orrs	r3, r4
     c88:	6013      	str	r3, [r2, #0]

	UART0_send("\nSPI_recieved: ", 15);
     c8a:	210f      	movs	r1, #15
     c8c:	4807      	ldr	r0, [pc, #28]	; (cac <adc_init+0x46>)
     c8e:	f7ff fea9 	bl	9e4 <UART0_send>
	UART0_send_byte(dat);
     c92:	1c28      	adds	r0, r5, #0
     c94:	f7ff fe90 	bl	9b8 <UART0_send_byte>
	/* SPI0_send_1_byte(WRITE_MODE_REG); */
	/* SPI0_send_2_byte(MODE_REG_VAL); */

	/* SPI0_send_1_byte(WRITE_OFFSET_REG); */
	/* SPI0_send_2_byte(OFFSET_REG_VAL); */
	led_set(LED1);
     c98:	2000      	movs	r0, #0
     c9a:	f7ff fce7 	bl	66c <led_set>

}
     c9e:	bc38      	pop	{r3, r4, r5}
     ca0:	bc01      	pop	{r0}
     ca2:	4700      	bx	r0
     ca4:	3fffc03c 	.word	0x3fffc03c
     ca8:	3fffc038 	.word	0x3fffc038
     cac:	00000fd3 	.word	0x00000fd3

00000cb0 <dac_set_voltage>:

void dac_set_voltage(uint16_t voltage)
{
     cb0:	b510      	push	{r4, lr}
	/* SPI0_send_2_byte((voltage | DAC_LOAD_CMD)); */
	FIO1CLR |= 1 << DAC;
     cb2:	2480      	movs	r4, #128	; 0x80
     cb4:	4a06      	ldr	r2, [pc, #24]	; (cd0 <dac_set_voltage+0x20>)
     cb6:	6813      	ldr	r3, [r2, #0]
     cb8:	05a4      	lsls	r4, r4, #22
     cba:	4323      	orrs	r3, r4
     cbc:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((voltage));
     cbe:	f7ff ffb5 	bl	c2c <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     cc2:	4a04      	ldr	r2, [pc, #16]	; (cd4 <dac_set_voltage+0x24>)
     cc4:	6813      	ldr	r3, [r2, #0]
     cc6:	4323      	orrs	r3, r4
     cc8:	6013      	str	r3, [r2, #0]
}
     cca:	bc10      	pop	{r4}
     ccc:	bc01      	pop	{r0}
     cce:	4700      	bx	r0
     cd0:	3fffc03c 	.word	0x3fffc03c
     cd4:	3fffc038 	.word	0x3fffc038

00000cd8 <adc_read_current>:

uint16_t adc_read_current(void)
{
     cd8:	b570      	push	{r4, r5, r6, lr}
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
     cda:	2580      	movs	r5, #128	; 0x80
     cdc:	4e0e      	ldr	r6, [pc, #56]	; (d18 <adc_read_current+0x40>)
     cde:	6833      	ldr	r3, [r6, #0]
     ce0:	02ed      	lsls	r5, r5, #11
     ce2:	432b      	orrs	r3, r5
     ce4:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_MODE_REG);
	SPI0_send_2_byte(MODE_REG_VAL);
	FIO1SET |= 1 << ADC;
     ce6:	4c0d      	ldr	r4, [pc, #52]	; (d1c <adc_read_current+0x44>)
uint16_t adc_read_current(void)
{
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_MODE_REG);
     ce8:	2008      	movs	r0, #8
     cea:	f7ff ff8f 	bl	c0c <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL);
     cee:	2005      	movs	r0, #5
     cf0:	f7ff ff9c 	bl	c2c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     cf4:	6823      	ldr	r3, [r4, #0]
     cf6:	432b      	orrs	r3, r5
     cf8:	6023      	str	r3, [r4, #0]

	FIO1CLR |= 1 << ADC;
     cfa:	6833      	ldr	r3, [r6, #0]
     cfc:	432b      	orrs	r3, r5
     cfe:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG);
     d00:	2058      	movs	r0, #88	; 0x58
     d02:	f7ff ff83 	bl	c0c <SPI0_send_1_byte>
	current = SPI0_send_2_byte(0xFF);
     d06:	20ff      	movs	r0, #255	; 0xff
     d08:	f7ff ff90 	bl	c2c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     d0c:	6823      	ldr	r3, [r4, #0]
     d0e:	431d      	orrs	r5, r3
     d10:	6025      	str	r5, [r4, #0]

	return current;
}
     d12:	bc70      	pop	{r4, r5, r6}
     d14:	bc02      	pop	{r1}
     d16:	4708      	bx	r1
     d18:	3fffc03c 	.word	0x3fffc03c
     d1c:	3fffc038 	.word	0x3fffc038

00000d20 <adc_read_voltage>:

uint16_t adc_read_voltage(void)
{
     d20:	b570      	push	{r4, r5, r6, lr}
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
     d22:	2580      	movs	r5, #128	; 0x80
     d24:	4e0e      	ldr	r6, [pc, #56]	; (d60 <adc_read_voltage+0x40>)
     d26:	6833      	ldr	r3, [r6, #0]
     d28:	02ed      	lsls	r5, r5, #11
     d2a:	432b      	orrs	r3, r5
     d2c:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_MODE_REG);
	SPI0_send_2_byte((MODE_REG_VAL | 1));	// | 1 - select 2 channel
	FIO1SET |= 1 << ADC;
     d2e:	4c0d      	ldr	r4, [pc, #52]	; (d64 <adc_read_voltage+0x44>)
uint16_t adc_read_voltage(void)
{
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_MODE_REG);
     d30:	2008      	movs	r0, #8
     d32:	f7ff ff6b 	bl	c0c <SPI0_send_1_byte>
	SPI0_send_2_byte((MODE_REG_VAL | 1));	// | 1 - select 2 channel
     d36:	2005      	movs	r0, #5
     d38:	f7ff ff78 	bl	c2c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     d3c:	6823      	ldr	r3, [r4, #0]
     d3e:	432b      	orrs	r3, r5
     d40:	6023      	str	r3, [r4, #0]

	FIO1CLR |= 1 << ADC;
     d42:	6833      	ldr	r3, [r6, #0]
     d44:	432b      	orrs	r3, r5
     d46:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG);
     d48:	2058      	movs	r0, #88	; 0x58
     d4a:	f7ff ff5f 	bl	c0c <SPI0_send_1_byte>
	voltage = SPI0_send_2_byte(0xFF);
     d4e:	20ff      	movs	r0, #255	; 0xff
     d50:	f7ff ff6c 	bl	c2c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     d54:	6823      	ldr	r3, [r4, #0]
     d56:	431d      	orrs	r5, r3
     d58:	6025      	str	r5, [r4, #0]

	return voltage;

}
     d5a:	bc70      	pop	{r4, r5, r6}
     d5c:	bc02      	pop	{r1}
     d5e:	4708      	bx	r1
     d60:	3fffc03c 	.word	0x3fffc03c
     d64:	3fffc038 	.word	0x3fffc038

00000d68 <Isr_TIM0>:
#include "usart_console.h"
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
	T0IR = 0x3F;
     d68:	223f      	movs	r2, #63	; 0x3f
#include "adc_dac.h"
#include "usart_console.h"
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
     d6a:	b538      	push	{r3, r4, r5, lr}
	T0IR = 0x3F;
     d6c:	4b13      	ldr	r3, [pc, #76]	; (dbc <Isr_TIM0+0x54>)
     d6e:	601a      	str	r2, [r3, #0]
	uint16_t volts, curr;
	uint8_t data;
	volts = adc_read_voltage();
     d70:	f7ff ffd6 	bl	d20 <adc_read_voltage>
     d74:	1c05      	adds	r5, r0, #0
	curr = adc_read_current();
     d76:	f7ff ffaf 	bl	cd8 <adc_read_current>
     d7a:	1c04      	adds	r4, r0, #0
	UART0_send("\nOutput voltage: ",17 );
     d7c:	2111      	movs	r1, #17
     d7e:	4810      	ldr	r0, [pc, #64]	; (dc0 <Isr_TIM0+0x58>)
     d80:	f7ff fe30 	bl	9e4 <UART0_send>
	data = volts >> 8;
     d84:	0a28      	lsrs	r0, r5, #8
	UART0_send_byte(data);
     d86:	0600      	lsls	r0, r0, #24
     d88:	0e00      	lsrs	r0, r0, #24
     d8a:	f7ff fe15 	bl	9b8 <UART0_send_byte>
	data = volts & 0xFF;
	UART0_send_byte(data);
     d8e:	0628      	lsls	r0, r5, #24
     d90:	0e00      	lsrs	r0, r0, #24
     d92:	f7ff fe11 	bl	9b8 <UART0_send_byte>

	UART0_send("\nCurrent: ",10 );
     d96:	210a      	movs	r1, #10
     d98:	480a      	ldr	r0, [pc, #40]	; (dc4 <Isr_TIM0+0x5c>)
     d9a:	f7ff fe23 	bl	9e4 <UART0_send>
	data = curr >> 8;
     d9e:	0a20      	lsrs	r0, r4, #8
	UART0_send_byte(data);
     da0:	0600      	lsls	r0, r0, #24
     da2:	0e00      	lsrs	r0, r0, #24
     da4:	f7ff fe08 	bl	9b8 <UART0_send_byte>
	data = curr & 0xFF;
	UART0_send_byte(data);
     da8:	0620      	lsls	r0, r4, #24
     daa:	0e00      	lsrs	r0, r0, #24
     dac:	f7ff fe04 	bl	9b8 <UART0_send_byte>
	/* UART0_send(&data, 1); */
	/* UART0_send("Tim0\n", 5); */
	VICVectAddr = 0;
     db0:	2200      	movs	r2, #0
     db2:	4b05      	ldr	r3, [pc, #20]	; (dc8 <Isr_TIM0+0x60>)
     db4:	601a      	str	r2, [r3, #0]
}
     db6:	bc38      	pop	{r3, r4, r5}
     db8:	bc01      	pop	{r0}
     dba:	4700      	bx	r0
     dbc:	e0004000 	.word	0xe0004000
     dc0:	00000fe3 	.word	0x00000fe3
     dc4:	00000ff5 	.word	0x00000ff5
     dc8:	ffffff00 	.word	0xffffff00

00000dcc <timer0_init>:
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
     dcc:	2102      	movs	r1, #2
     dce:	4a0f      	ldr	r2, [pc, #60]	; (e0c <timer0_init+0x40>)
	/* UART0_send(&data, 1); */
	/* UART0_send("Tim0\n", 5); */
	VICVectAddr = 0;
}
void timer0_init(void)
{
     dd0:	b508      	push	{r3, lr}
	PCONP |= (1 << 1);	/* Power on tim0 */
     dd2:	6813      	ldr	r3, [r2, #0]
     dd4:	430b      	orrs	r3, r1
     dd6:	6013      	str	r3, [r2, #0]
	T0TCR = 0;	/* Disable tim0 */
     dd8:	2300      	movs	r3, #0
     dda:	4a0d      	ldr	r2, [pc, #52]	; (e10 <timer0_init+0x44>)
     ddc:	6013      	str	r3, [r2, #0]

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
     dde:	4a0d      	ldr	r2, [pc, #52]	; (e14 <timer0_init+0x48>)
     de0:	3901      	subs	r1, #1
     de2:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
     de4:	4a0c      	ldr	r2, [pc, #48]	; (e18 <timer0_init+0x4c>)
     de6:	3102      	adds	r1, #2
     de8:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
     dea:	4a0c      	ldr	r2, [pc, #48]	; (e1c <timer0_init+0x50>)
     dec:	6013      	str	r3, [r2, #0]
	T0PR = 400;	/* Prescaler */
     dee:	22c8      	movs	r2, #200	; 0xc8
     df0:	4b0b      	ldr	r3, [pc, #44]	; (e20 <timer0_init+0x54>)
     df2:	0052      	lsls	r2, r2, #1
     df4:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
     df6:	4a0b      	ldr	r2, [pc, #44]	; (e24 <timer0_init+0x58>)
     df8:	4b0b      	ldr	r3, [pc, #44]	; (e28 <timer0_init+0x5c>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
     dfa:	2004      	movs	r0, #4

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
	T0MCR = 3;
	T0CTCR = 0;
	T0PR = 400;	/* Prescaler */
	T0MR0 = 72000;	/* Top value (5 Hz) */
     dfc:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
     dfe:	490b      	ldr	r1, [pc, #44]	; (e2c <timer0_init+0x60>)
     e00:	220f      	movs	r2, #15
     e02:	f7ff fcf5 	bl	7f0 <RegisterIrq>
}
     e06:	bc08      	pop	{r3}
     e08:	bc01      	pop	{r0}
     e0a:	4700      	bx	r0
     e0c:	e01fc0c4 	.word	0xe01fc0c4
     e10:	e0004004 	.word	0xe0004004
     e14:	e0004000 	.word	0xe0004000
     e18:	e0004014 	.word	0xe0004014
     e1c:	e0004070 	.word	0xe0004070
     e20:	e000400c 	.word	0xe000400c
     e24:	00011940 	.word	0x00011940
     e28:	e0004018 	.word	0xe0004018
     e2c:	00000d69 	.word	0x00000d69

00000e30 <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
     e30:	2101      	movs	r1, #1
     e32:	4a06      	ldr	r2, [pc, #24]	; (e4c <timer0_start+0x1c>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
}

void timer0_start(void)
{
     e34:	b508      	push	{r3, lr}
	T0TCR |= 1;
     e36:	6813      	ldr	r3, [r2, #0]
     e38:	430b      	orrs	r3, r1
     e3a:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     e3c:	2002      	movs	r0, #2
     e3e:	310c      	adds	r1, #12
     e40:	f7ff fc28 	bl	694 <gpio_set>
}
     e44:	bc08      	pop	{r3}
     e46:	bc01      	pop	{r0}
     e48:	4700      	bx	r0
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	e0004004 	.word	0xe0004004

00000e50 <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
     e50:	2101      	movs	r1, #1
     e52:	4a06      	ldr	r2, [pc, #24]	; (e6c <timer0_stop+0x1c>)
	T0TCR |= 1;
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
}

void timer0_stop(void)
{
     e54:	b508      	push	{r3, lr}
	T0TCR &= ~1;
     e56:	6813      	ldr	r3, [r2, #0]
     e58:	438b      	bics	r3, r1
     e5a:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     e5c:	2002      	movs	r0, #2
     e5e:	310c      	adds	r1, #12
     e60:	f7ff fc3a 	bl	6d8 <gpio_clear>
}
     e64:	bc08      	pop	{r3}
     e66:	bc01      	pop	{r0}
     e68:	4700      	bx	r0
     e6a:	46c0      	nop			; (mov r8, r8)
     e6c:	e0004004 	.word	0xe0004004

00000e70 <strncmp>:
     e70:	1c03      	adds	r3, r0, #0
     e72:	b530      	push	{r4, r5, lr}
     e74:	2000      	movs	r0, #0
     e76:	2a00      	cmp	r2, #0
     e78:	d03a      	beq.n	ef0 <strncmp+0x80>
     e7a:	1c1c      	adds	r4, r3, #0
     e7c:	430c      	orrs	r4, r1
     e7e:	07a4      	lsls	r4, r4, #30
     e80:	d120      	bne.n	ec4 <strncmp+0x54>
     e82:	2a03      	cmp	r2, #3
     e84:	d91e      	bls.n	ec4 <strncmp+0x54>
     e86:	681c      	ldr	r4, [r3, #0]
     e88:	680d      	ldr	r5, [r1, #0]
     e8a:	42ac      	cmp	r4, r5
     e8c:	d11a      	bne.n	ec4 <strncmp+0x54>
     e8e:	3a04      	subs	r2, #4
     e90:	2a00      	cmp	r2, #0
     e92:	d02d      	beq.n	ef0 <strncmp+0x80>
     e94:	4d1a      	ldr	r5, [pc, #104]	; (f00 <VIC_VectAddr>)
     e96:	1965      	adds	r5, r4, r5
     e98:	43a5      	bics	r5, r4
     e9a:	1c2c      	adds	r4, r5, #0
     e9c:	4d19      	ldr	r5, [pc, #100]	; (f04 <VIC_VectAddr+0x4>)
     e9e:	422c      	tst	r4, r5
     ea0:	d00c      	beq.n	ebc <strncmp+0x4c>
     ea2:	e025      	b.n	ef0 <strncmp+0x80>
     ea4:	6818      	ldr	r0, [r3, #0]
     ea6:	680c      	ldr	r4, [r1, #0]
     ea8:	42a0      	cmp	r0, r4
     eaa:	d10b      	bne.n	ec4 <strncmp+0x54>
     eac:	3a04      	subs	r2, #4
     eae:	2a00      	cmp	r2, #0
     eb0:	d021      	beq.n	ef6 <strncmp+0x86>
     eb2:	4c13      	ldr	r4, [pc, #76]	; (f00 <VIC_VectAddr>)
     eb4:	1904      	adds	r4, r0, r4
     eb6:	4384      	bics	r4, r0
     eb8:	422c      	tst	r4, r5
     eba:	d11c      	bne.n	ef6 <strncmp+0x86>
     ebc:	3304      	adds	r3, #4
     ebe:	3104      	adds	r1, #4
     ec0:	2a03      	cmp	r2, #3
     ec2:	d8ef      	bhi.n	ea4 <strncmp+0x34>
     ec4:	781d      	ldrb	r5, [r3, #0]
     ec6:	7808      	ldrb	r0, [r1, #0]
     ec8:	3a01      	subs	r2, #1
     eca:	4285      	cmp	r5, r0
     ecc:	d115      	bne.n	efa <strncmp+0x8a>
     ece:	2a00      	cmp	r2, #0
     ed0:	d011      	beq.n	ef6 <strncmp+0x86>
     ed2:	2d00      	cmp	r5, #0
     ed4:	d104      	bne.n	ee0 <strncmp+0x70>
     ed6:	e00e      	b.n	ef6 <strncmp+0x86>
     ed8:	2c00      	cmp	r4, #0
     eda:	d00c      	beq.n	ef6 <strncmp+0x86>
     edc:	2a00      	cmp	r2, #0
     ede:	d00a      	beq.n	ef6 <strncmp+0x86>
     ee0:	3301      	adds	r3, #1
     ee2:	3101      	adds	r1, #1
     ee4:	781c      	ldrb	r4, [r3, #0]
     ee6:	7808      	ldrb	r0, [r1, #0]
     ee8:	3a01      	subs	r2, #1
     eea:	4284      	cmp	r4, r0
     eec:	d0f4      	beq.n	ed8 <strncmp+0x68>
     eee:	1a20      	subs	r0, r4, r0
     ef0:	bc30      	pop	{r4, r5}
     ef2:	bc02      	pop	{r1}
     ef4:	4708      	bx	r1
     ef6:	2000      	movs	r0, #0
     ef8:	e7fa      	b.n	ef0 <strncmp+0x80>
     efa:	1c2c      	adds	r4, r5, #0
     efc:	1a20      	subs	r0, r4, r0
     efe:	e7f7      	b.n	ef0 <strncmp+0x80>
     f00:	fefefeff 	.word	0xfefefeff
     f04:	80808080 	.word	0x80808080

00000f08 <help_msg>:
     f08:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
     f18:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
     f28:	20202020 72617473 202d2074 72617473         start - star
     f38:	656d2074 72757361 6e656d65 200a7374     t measurements. 
     f48:	73202020 20706f74 6966202d 6873696e        stop - finish
     f58:	61656d20 65727573 746e656d 20200a73      measurements.  
     f68:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
     f78:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
     f88:	75746573 0a000a70 2043504c 74696e69     setup...LPC init
     f98:	696c6169 0a64657a 61747300 0a007472     ialized..start..
     fa8:	72617453 0a646574 6f747300 530a0070     Started..stop..S
     fb8:	70706f74 000a6465 00746573 706c6568     topped..set.help
     fc8:	30530a00 52535053 0a00203a 5f495053     ..S0SPSR: ..SPI_
     fd8:	69636572 64657665 0a00203a 7074754f     recieved: ..Outp
     fe8:	76207475 61746c6f 203a6567 75430a00     ut voltage: ..Cu
     ff8:	6e657272 00203a74                       rrent: .
