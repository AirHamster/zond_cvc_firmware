
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015c8  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000434  40000000  000015c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  40000434  000019fc  00020434  2**1
                  ALLOC
  3 .stack        00000a10  40000578  40000578  00020434  2**2
                  CONTENTS
  4 .usbram       00000000  7fd00000  7fd00000  00020e44  2**0
                  CONTENTS
  5 .etherram     00000000  7fe00000  7fe00000  00020e44  2**0
                  CONTENTS
  6 .batteryram   00000000  e0084000  e0084000  00020e44  2**0
                  CONTENTS
  7 .comment      00000070  00000000  00000000  00020e44  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 0000002e  00000000  00000000  00020eb4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000240  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000370d  00000000  00000000  00021128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000105a  00000000  00000000  00024835  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000109f  00000000  00000000  0002588f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000548  00000000  00000000  00026930  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000b65  00000000  00000000  00026e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000135c  00000000  00000000  000279dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a8  00000000  00000000  00028d40  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, =trap		@ Undef entry
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =swi_handler	@ SWI entry
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, =trap		@ PAbt entry
       c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =trap		@ DAbt entry
      10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
      14:	00000000 	.word	0x00000000
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
	LDR     PC, =fiq_handler	@ FIQ entry
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
      20:	00000300 	.word	0x00000300
	LDR	PC, =trap		@ Undef entry
      24:	0000038c 	.word	0x0000038c
	LDR	PC, =swi_handler	@ SWI entry
      28:	000003fc 	.word	0x000003fc
	LDR	PC, =trap		@ PAbt entry
	LDR	PC, =trap		@ DAbt entry
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      2c:	000003ac 	.word	0x000003ac
	LDR     PC, =fiq_handler	@ FIQ entry
      30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
     304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
     308:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
     30c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
     310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
     314:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
     318:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
     31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
     320:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
     324:	e2400010 	sub	r0, r0, #16

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
     328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
     32c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
     330:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
     334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
     338:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
     33c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
     340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
     344:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
     348:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
	LDR	R2, =_sdata
     350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
	LDR	R3, =_edata
     354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
1:	CMP	R2, R3
     358:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
     35c:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
     360:	34820004 	strcc	r0, [r2], #4
	BLO	1b
     364:	3afffffb 	bcc	358 <reset_handler+0x58>

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
     368:	e3a00000 	mov	r0, #0
	LDR	R1, =_sbss
     36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
	LDR	R2, =_ebss
     370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
3:	CMP	R1, R2
     374:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
     378:	34810004 	strcc	r0, [r1], #4
	BLO	3b
     37c:	3afffffc 	bcc	374 <reset_handler+0x74>

@ Start main()
.extern main
	LDR	R0, =main
     380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
	MOV	LR, PC
     384:	e1a0e00f 	mov	lr, pc
	BX	R0
     388:	e12fff10 	bx	r0

0000038c <trap>:

@ Trap (infinite loop)
trap:
	B	trap
     38c:	eafffffe 	b	38c <trap>
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     390:	40000f88 	.word	0x40000f88
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
	MOV	SP, R0
	SUB	SL, SP, #USR_Stack_Size

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     394:	000015c8 	.word	0x000015c8
	LDR	R2, =_sdata
     398:	40000000 	.word	0x40000000
	LDR	R3, =_edata
     39c:	40000434 	.word	0x40000434
	STRLO	R0, [R2], #4
	BLO	1b

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
	LDR	R1, =_sbss
     3a0:	40000434 	.word	0x40000434
	LDR	R2, =_ebss
     3a4:	40000578 	.word	0x40000578
	STRLO	R0, [R1], #4
	BLO	3b

@ Start main()
.extern main
	LDR	R0, =main
     3a8:	000007cd 	.word	0x000007cd

000003ac <irq_handler>:
.equ VIC_VectAddr0,	0x100
.equ VIC_VectPriority0,	0x200
.equ VIC_VectAddr,	0xF00

irq_handler:
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
     3ac:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
     3b0:	e92d4000 	stmfd	sp!, {lr}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
     3b4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
	LDR	R0, [R0, #VIC_VectAddr]
     3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
	MSR	CPSR_c, #M_SVC		@ Enter SVC mode and enable Irq and Fiq
     3c4:	e321f013 	msr	CPSR_c, #19

	STMFD	SP!, {LR}		@ Call the ISR
     3c8:	e92d4000 	stmfd	sp!, {lr}
	MOV	LR, PC
     3cc:	e1a0e00f 	mov	lr, pc
	BX	R0
     3d0:	e12fff10 	bx	r0
	LDMIA	SP!, {LR}
     3d4:	e8bd4000 	ldmfd	sp!, {lr}

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
     3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMIA	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
     3e0:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
	STR	LR, [LR, #VIC_VectAddr]
     3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMIA	SP!, {PC}^		@ Reruen from the IRQ handler
     3ec:	e8fd8000 	ldm	sp!, {pc}^
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
	STMFD	SP!, {LR}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
@ FIQ Handler
@ FIQ routine is typically written in assembler
@-----------------------------------------------------------@

fiq_handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq
     3f4:	e24ee004 	sub	lr, lr, #4

	@ Put the FIQ service here

	MOVS	PC, LR			@ Return from FIQ
     3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
@-----------------------------------------------------------@
@ SWI Service (declared in interrupt.h)
@-----------------------------------------------------------@

swi_handler:
	MRS	IP, SPSR
     3fc:	e14fc000 	mrs	ip, SPSR
	TST	IP, #B_Thumb		@ Check caller's state, ARM or Thumb
     400:	e31c0020 	tst	ip, #32
	LDRNEH	IP, [LR, #-2]		@ Get swi instruction code (on Thumb state)
     404:	115ec0b2 	ldrhne	ip, [lr, #-2]
	LDREQ	IP, [LR, #-4]		@ Get swi instruction code (on ARM state)
     408:	051ec004 	ldreq	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
     40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #7			@ Check range
     410:	e35c0007 	cmp	ip, #7
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump to each service function when code is valid
     414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
     418:	e1b0f00e 	movs	pc, lr
     41c:	00000438 	.word	0x00000438
     420:	00000448 	.word	0x00000448
     424:	00000458 	.word	0x00000458
     428:	0000047c 	.word	0x0000047c
     42c:	000004b4 	.word	0x000004b4
     430:	000004d4 	.word	0x000004d4
     434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
	.word	sel_fiq		@ 4 Select FIQ interrupt
	.word	load_fiq	@ 5 Load FIQ shadow regs from memory
	.word	store_fiq	@ 6 Store FIQ shadow regs to memory

irq_disable:
	MRS	R0, SPSR
     438:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq | B_Fiq
     43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     440:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:

irq_enable:
	MRS	R0, SPSR
     448:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq | B_Fiq
     44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     450:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
	MVN	R0, #0				@ Disable all interrupts
     45c:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
     460:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
     464:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
     468:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
     46c:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
     470:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_VectAddr]		@ Issule EOI command
     474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
     478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:

reg_irq:
	CMP	R0, #32				@ Range check
     47c:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     480:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
     488:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
     490:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
     494:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     498:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
     49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
	LDR	R2, [IP, #VIC_IntSelect]	@ Clear corresponding bit in the VICIntSelect
     4a0:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
     4a4:	e1c22001 	bic	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
     4a8:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4ac:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:

sel_fiq:
	CMP	R0, #32				@ Range check
     4b4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     4b8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =LPC_BASE_VIC
     4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
	MOV	R1, #1				@ Set corresponding bit in the VICIntSelect
     4c0:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     4c4:	e1a01011 	lsl	r1, r1, r0
	STR	R1, [IP, #VIC_IntSelect]
     4c8:	e58c100c 	str	r1, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4cc:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:

load_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMIA	R0!, {R8-R12}			@ Load the memory to five shadow registers
     4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4dc:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:

store_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
	STMIA	R0!, {R8-R12}			@ Store five shadow registers to the memory
     4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4ec:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4f0:	e1b0f00e 	movs	pc, lr
	BIC	R0, R0, #B_Irq | B_Fiq
	MSR	SPSR_c, R0
	MOVS	PC, LR

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     4f4:	fffff000 	.word	0xfffff000
	MOVS	PC, LR

reg_irq:
	CMP	R0, #32				@ Range check
	MOVCSS	PC, LR
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     4f8:	fffff100 	.word	0xfffff100
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
@ void Copy_un2al (DWORD *dst, const BYTE *src, int count);
.global Copy_un2al
.type Copy_un2al, %function
.func Copy_un2al
Copy_un2al:
	STMFD	SP!, {R4-R8}
     500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
     504:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
     508:	0a000012 	beq	558 <lb_align>

	BIC	R1, #3
     50c:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
     510:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     514:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
     518:	e8b10080 	ldm	r1!, {r7}
1:	MOV	R3, R7
     51c:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
     524:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
     528:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
     52c:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
     530:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
     534:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
     538:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
     53c:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
     540:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
     544:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	1b
     54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
	LDMFD	SP!, {R4-R8}
     550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     554:	e12fff1e 	bx	lr

00000558 <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
     558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
     55c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
     564:	1afffffb 	bne	558 <lb_align>
	LDMFD	SP!, {R4-R8}
     568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
@ void Copy_al2un (BYTE *dst, const DWORD *src, int count);
.global Copy_al2un
.type Copy_al2un, %function
.func Copy_al2un
Copy_al2un:
	STMFD	SP!, {R4-R8}
     570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
     574:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
     578:	0a000021 	beq	604 <sb_align>

	MOV	IP, IP, LSL #3
     57c:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     580:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
     584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
1:	STRB	R4, [R0], #1
     588:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
     58c:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
     590:	e3100003 	tst	r0, #3
	BNE	1b
     594:	1afffffb 	bne	588 <Copy_al2un+0x18>
	ORR	R4, R4, R5, LSL IP
     598:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     59c:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5a4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5ac:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
     5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}

2:	MOV	R3, R7
     5b4:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
     5bc:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
     5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
     5c4:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
     5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     5cc:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5d4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5dc:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	2b
     5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>

	MOV	R7, R7, LSR R8
     5e8:	e1a07837 	lsr	r7, r7, r8
3:	SUBS	IP, IP, #8
     5ec:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
     5f0:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
     5f4:	e1a07427 	lsr	r7, r7, #8
	BNE	3b
     5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>

	LDMFD	SP!, {R4-R8}
     5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     600:	e12fff1e 	bx	lr

00000604 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
     604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
     608:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
     610:	1afffffb 	bne	604 <sb_align>
	LDMFD	SP!, {R4-R8}
     614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     618:	e12fff1e 	bx	lr

0000061c <gpio_init>:
#include "timers.h"
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
     61c:	2101      	movs	r1, #1
     61e:	4a0e      	ldr	r2, [pc, #56]	; (658 <gpio_init+0x3c>)
     620:	6813      	ldr	r3, [r2, #0]
     622:	430b      	orrs	r3, r1
     624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
     626:	2200      	movs	r2, #0
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     628:	2003      	movs	r0, #3
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62a:	4b0c      	ldr	r3, [pc, #48]	; (65c <gpio_init+0x40>)
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     62c:	490c      	ldr	r1, [pc, #48]	; (660 <gpio_init+0x44>)
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62e:	601a      	str	r2, [r3, #0]
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     630:	680b      	ldr	r3, [r1, #0]
     632:	4303      	orrs	r3, r0
     634:	600b      	str	r3, [r1, #0]

	/* FIO1MASK = 0xFFFFFFFF & (0 << DAC) | (0 << ADC); */
	FIO1MASK = 0;
     636:	4b0b      	ldr	r3, [pc, #44]	; (664 <gpio_init+0x48>)
     638:	601a      	str	r2, [r3, #0]
	FIO1DIR |=  (1 << DAC) | (1 << ADC) | (1 << ADC_DIN) | (1 << ADC_SCLK);	/*  Slave select pins  */
     63a:	4b0b      	ldr	r3, [pc, #44]	; (668 <gpio_init+0x4c>)
     63c:	490b      	ldr	r1, [pc, #44]	; (66c <gpio_init+0x50>)
     63e:	681a      	ldr	r2, [r3, #0]
     640:	430a      	orrs	r2, r1
     642:	601a      	str	r2, [r3, #0]
	FIO1DIR &= ~(1 << ADC_DOUT);
     644:	4a0a      	ldr	r2, [pc, #40]	; (670 <gpio_init+0x54>)
     646:	6819      	ldr	r1, [r3, #0]
     648:	400a      	ands	r2, r1
     64a:	601a      	str	r2, [r3, #0]
	/* FIO1DIR |=  (1 << DAC) | (1 << ADC);[> 	Slave select pins  <] */
	FIO1SET |= (1 << ADC) | (1 << DAC) | (1 << ADC_SCLK);	 /*  Set hight level  */
     64c:	4a09      	ldr	r2, [pc, #36]	; (674 <gpio_init+0x58>)
     64e:	490a      	ldr	r1, [pc, #40]	; (678 <gpio_init+0x5c>)
     650:	6813      	ldr	r3, [r2, #0]
     652:	430b      	orrs	r3, r1
     654:	6013      	str	r3, [r2, #0]
}
     656:	4770      	bx	lr
     658:	e01fc1a0 	.word	0xe01fc1a0
     65c:	3fffc050 	.word	0x3fffc050
     660:	3fffc040 	.word	0x3fffc040
     664:	3fffc030 	.word	0x3fffc030
     668:	3fffc020 	.word	0x3fffc020
     66c:	21140000 	.word	0x21140000
     670:	ff7fffff 	.word	0xff7fffff
     674:	3fffc038 	.word	0x3fffc038
     678:	20140000 	.word	0x20140000

0000067c <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
     67c:	2201      	movs	r2, #1
     67e:	4082      	lsls	r2, r0
     680:	1c10      	adds	r0, r2, #0
     682:	4902      	ldr	r1, [pc, #8]	; (68c <led_set+0x10>)
     684:	680b      	ldr	r3, [r1, #0]
     686:	4318      	orrs	r0, r3
     688:	6008      	str	r0, [r1, #0]
}
     68a:	4770      	bx	lr
     68c:	3fffc058 	.word	0x3fffc058

00000690 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
     690:	2201      	movs	r2, #1
     692:	4082      	lsls	r2, r0
     694:	1c10      	adds	r0, r2, #0
     696:	4902      	ldr	r1, [pc, #8]	; (6a0 <led_clear+0x10>)
     698:	680b      	ldr	r3, [r1, #0]
     69a:	4318      	orrs	r0, r3
     69c:	6008      	str	r0, [r1, #0]
}
     69e:	4770      	bx	lr
     6a0:	3fffc05c 	.word	0x3fffc05c

000006a4 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
     6a4:	b510      	push	{r4, lr}
	switch (port)
     6a6:	2801      	cmp	r0, #1
     6a8:	d00f      	beq.n	6ca <gpio_set+0x26>
     6aa:	2800      	cmp	r0, #0
     6ac:	d009      	beq.n	6c2 <gpio_set+0x1e>
     6ae:	2802      	cmp	r0, #2
     6b0:	d110      	bne.n	6d4 <gpio_set+0x30>
			break;
		case 1:
			FIO1SET |= (1 << pin);
			break;
		case 2:
			FIO2SET |= (1 << pin);
     6b2:	2201      	movs	r2, #1
     6b4:	408a      	lsls	r2, r1
     6b6:	1c10      	adds	r0, r2, #0
     6b8:	4c08      	ldr	r4, [pc, #32]	; (6dc <gpio_set+0x38>)
     6ba:	6823      	ldr	r3, [r4, #0]
     6bc:	4318      	orrs	r0, r3
     6be:	6020      	str	r0, [r4, #0]
			break;
     6c0:	e008      	b.n	6d4 <gpio_set+0x30>
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0SET |= (1 << pin);
     6c2:	4a07      	ldr	r2, [pc, #28]	; (6e0 <gpio_set+0x3c>)
     6c4:	2001      	movs	r0, #1
     6c6:	6813      	ldr	r3, [r2, #0]
     6c8:	e001      	b.n	6ce <gpio_set+0x2a>
			break;
		case 1:
			FIO1SET |= (1 << pin);
     6ca:	4a06      	ldr	r2, [pc, #24]	; (6e4 <gpio_set+0x40>)
     6cc:	6813      	ldr	r3, [r2, #0]
     6ce:	4088      	lsls	r0, r1
     6d0:	4318      	orrs	r0, r3
     6d2:	6010      	str	r0, [r2, #0]
			FIO2SET |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6d4:	bc10      	pop	{r4}
     6d6:	bc01      	pop	{r0}
     6d8:	4700      	bx	r0
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	3fffc058 	.word	0x3fffc058
     6e0:	3fffc018 	.word	0x3fffc018
     6e4:	3fffc038 	.word	0x3fffc038

000006e8 <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
     6e8:	b510      	push	{r4, lr}
	switch (port)
     6ea:	2801      	cmp	r0, #1
     6ec:	d00f      	beq.n	70e <gpio_clear+0x26>
     6ee:	2800      	cmp	r0, #0
     6f0:	d009      	beq.n	706 <gpio_clear+0x1e>
     6f2:	2802      	cmp	r0, #2
     6f4:	d110      	bne.n	718 <gpio_clear+0x30>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
			break;
		case 2:
			FIO2CLR |= (1 << pin);
     6f6:	2201      	movs	r2, #1
     6f8:	408a      	lsls	r2, r1
     6fa:	1c10      	adds	r0, r2, #0
     6fc:	4c08      	ldr	r4, [pc, #32]	; (720 <gpio_clear+0x38>)
     6fe:	6823      	ldr	r3, [r4, #0]
     700:	4318      	orrs	r0, r3
     702:	6020      	str	r0, [r4, #0]
			break;
     704:	e008      	b.n	718 <gpio_clear+0x30>
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0CLR |= (1 << pin);
     706:	4a07      	ldr	r2, [pc, #28]	; (724 <gpio_clear+0x3c>)
     708:	2001      	movs	r0, #1
     70a:	6813      	ldr	r3, [r2, #0]
     70c:	e001      	b.n	712 <gpio_clear+0x2a>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
     70e:	4a06      	ldr	r2, [pc, #24]	; (728 <gpio_clear+0x40>)
     710:	6813      	ldr	r3, [r2, #0]
     712:	4088      	lsls	r0, r1
     714:	4318      	orrs	r0, r3
     716:	6010      	str	r0, [r2, #0]
			FIO2CLR |= (1 << pin);
			break;
		default:
			break;	
	}
}
     718:	bc10      	pop	{r4}
     71a:	bc01      	pop	{r0}
     71c:	4700      	bx	r0
     71e:	46c0      	nop			; (mov r8, r8)
     720:	3fffc05c 	.word	0x3fffc05c
     724:	3fffc01c 	.word	0x3fffc01c
     728:	3fffc03c 	.word	0x3fffc03c

0000072c <pll_init>:
void pll_init(void)
{
	// 1. Init OSC
	SCS = (1 << 5);
     72c:	2220      	movs	r2, #32
     72e:	4b1d      	ldr	r3, [pc, #116]	; (7a4 <pll_init+0x78>)
		default:
			break;	
	}
}
void pll_init(void)
{
     730:	b570      	push	{r4, r5, r6, lr}
	// 1. Init OSC
	SCS = (1 << 5);
     732:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
     734:	681a      	ldr	r2, [r3, #0]
     736:	0652      	lsls	r2, r2, #25
     738:	d5fc      	bpl.n	734 <pll_init+0x8>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     73a:	20aa      	movs	r0, #170	; 0xaa
	PLLFEED = 0x55;
     73c:	2155      	movs	r1, #85	; 0x55
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     73e:	2501      	movs	r5, #1
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
     740:	2400      	movs	r4, #0
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     742:	4b19      	ldr	r3, [pc, #100]	; (7a8 <pll_init+0x7c>)
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     744:	4a19      	ldr	r2, [pc, #100]	; (7ac <pll_init+0x80>)
     746:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
     748:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     74a:	6019      	str	r1, [r3, #0]
	// 4. Disable PLL
	PLLCON = 0;
     74c:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     74e:	4c18      	ldr	r4, [pc, #96]	; (7b0 <pll_init+0x84>)
	PLLCON = 1; 
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
     750:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     752:	4e18      	ldr	r6, [pc, #96]	; (7b4 <pll_init+0x88>)
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
     754:	6019      	str	r1, [r3, #0]
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     756:	6025      	str	r5, [r4, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     758:	4c17      	ldr	r4, [pc, #92]	; (7b8 <pll_init+0x8c>)
     75a:	6026      	str	r6, [r4, #0]
	PLLFEED = 0xAA;
     75c:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     75e:	6019      	str	r1, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
     760:	6814      	ldr	r4, [r2, #0]
     762:	432c      	orrs	r4, r5
     764:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
     766:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     768:	6019      	str	r1, [r3, #0]
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     76a:	4914      	ldr	r1, [pc, #80]	; (7bc <pll_init+0x90>)
     76c:	6809      	ldr	r1, [r1, #0]
     76e:	0149      	lsls	r1, r1, #5
     770:	d5fb      	bpl.n	76a <pll_init+0x3e>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
     772:	2003      	movs	r0, #3
     774:	4912      	ldr	r1, [pc, #72]	; (7c0 <pll_init+0x94>)
     776:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
     778:	2000      	movs	r0, #0
     77a:	4912      	ldr	r1, [pc, #72]	; (7c4 <pll_init+0x98>)
     77c:	4c12      	ldr	r4, [pc, #72]	; (7c8 <pll_init+0x9c>)
     77e:	6008      	str	r0, [r1, #0]
     780:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
     782:	3004      	adds	r0, #4
     784:	6008      	str	r0, [r1, #0]

	// 10. Connect the PLL
	PLLCON |= 1 << 1;
     786:	6811      	ldr	r1, [r2, #0]
     788:	3802      	subs	r0, #2
     78a:	4301      	orrs	r1, r0
     78c:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     78e:	22aa      	movs	r2, #170	; 0xaa
     790:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
     792:	3a55      	subs	r2, #85	; 0x55
     794:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
     796:	f000 f82f 	bl	7f8 <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
     79a:	f000 f82b 	bl	7f4 <IrqEnable>

}
     79e:	bc70      	pop	{r4, r5, r6}
     7a0:	bc01      	pop	{r0}
     7a2:	4700      	bx	r0
     7a4:	e01fc1a0 	.word	0xe01fc1a0
     7a8:	e01fc08c 	.word	0xe01fc08c
     7ac:	e01fc080 	.word	0xe01fc080
     7b0:	e01fc10c 	.word	0xe01fc10c
     7b4:	00010017 	.word	0x00010017
     7b8:	e01fc084 	.word	0xe01fc084
     7bc:	e01fc088 	.word	0xe01fc088
     7c0:	e01fc104 	.word	0xe01fc104
     7c4:	e01fc1ac 	.word	0xe01fc1ac
     7c8:	e01fc1a8 	.word	0xe01fc1a8

000007cc <main>:


int main (void)
{
     7cc:	b508      	push	{r3, lr}
	uint16_t i, j, rise; 
	pll_init();
     7ce:	f7ff ffad 	bl	72c <pll_init>
	uart0_init();	
     7d2:	f000 f89d 	bl	910 <uart0_init>
	/* SPI0_init(); */
	timer0_init();
     7d6:	f000 fb77 	bl	ec8 <timer0_init>
	gpio_init();
     7da:	f7ff ff1f 	bl	61c <gpio_init>
	adc_init();
     7de:	f000 fa6a 	bl	cb6 <adc_init>
	UART0_send("\nLPC initialized\n", 17);
     7e2:	4802      	ldr	r0, [pc, #8]	; (7ec <main+0x20>)
     7e4:	2111      	movs	r1, #17
     7e6:	f000 f907 	bl	9f8 <UART0_send>
		/* led_set(LED2); */
		/* for (i = 0; i < 200; i++); */
		/* led_clear(LED2); */
		/* for (i = 0; i < 200; i++); */
		/* dac_set_voltage(0x0BE1); */
	}
     7ea:	e7fe      	b.n	7ea <main+0x1e>
     7ec:	00001447 	.word	0x00001447

000007f0 <IrqDisable>:


/* Disable/Enable Irq */
void IrqDisable (void)
{
	asm ("swi 0\n");
     7f0:	df00      	svc	0
}
     7f2:	4770      	bx	lr

000007f4 <IrqEnable>:

void IrqEnable (void)
{
	asm ("swi 1\n");
     7f4:	df01      	svc	1
}
     7f6:	4770      	bx	lr

000007f8 <ClearVector>:


/* Unregister all ISRs */
void ClearVector (void)
{
	asm ("swi 2\n");
     7f8:	df02      	svc	2
}
     7fa:	4770      	bx	lr

000007fc <RegisterIrq>:
	int irq,
	void(*isr)(void),
	int pri
)
{
	asm (
     7fc:	df03      	svc	3
	"@ MOV R0, %0\n"
	"@ MOV R1, %1\n"
	"@ MOV R2, %2\n"
	"swi 3\n" : : "r" (irq), "r" (isr), "r" (pri)
	);
}
     7fe:	4770      	bx	lr

00000800 <SelectFiq>:
/* Switch an interrtupt source as FIQ */
void SelectFiq (
	int irq
)
{
	asm (
     800:	df04      	svc	4
	"@ MOV R0, %0\n"
	"swi 4\n" : : "r" (irq)
	);
}
     802:	4770      	bx	lr

00000804 <LoadFiqRegs>:
/* Load shadow regs R8-R12 from memory */
void LoadFiqRegs (
	long *regs
)
{
	asm (
     804:	df05      	svc	5
	"@ MOV R0, %0\n"
	"swi 5\n" : : "r" (regs)
	);
}
     806:	4770      	bx	lr

00000808 <StoreFiqRegs>:
/* Store shadow regs R8-R12 to memory */
void StoreFiqRegs (
	long *regs
)
{
	asm (
     808:	df06      	svc	6
	"@ MOV R0, %0\n"
	"swi 6\n" : : "r" (regs)
	);
}
     80a:	4770      	bx	lr

0000080c <Isr_UART0>:
	uint16_t	ri, wi, ct;
	uint8_t		buff[UART0_RXB];
} RxBuff0;

void Isr_UART0 (void)
{
     80c:	b538      	push	{r3, r4, r5, lr}

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
     80e:	4b14      	ldr	r3, [pc, #80]	; (860 <Isr_UART0+0x54>)
     810:	681a      	ldr	r2, [r3, #0]
     812:	4b14      	ldr	r3, [pc, #80]	; (864 <Isr_UART0+0x58>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     814:	681b      	ldr	r3, [r3, #0]
     816:	061b      	lsls	r3, r3, #24
     818:	0e1b      	lsrs	r3, r3, #24

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
     81a:	07d2      	lsls	r2, r2, #31
     81c:	d510      	bpl.n	840 <Isr_UART0+0x34>
     81e:	4c12      	ldr	r4, [pc, #72]	; (868 <Isr_UART0+0x5c>)
     820:	4812      	ldr	r0, [pc, #72]	; (86c <Isr_UART0+0x60>)
	{	
		d = U0RBR;
		if (d == '\n')
     822:	2b0a      	cmp	r3, #10
     824:	d108      	bne.n	838 <Isr_UART0+0x2c>
		{
			resiever[rec_len++] = 0;	/* Make null-terminated string */
     826:	2500      	movs	r5, #0
     828:	7823      	ldrb	r3, [r4, #0]
     82a:	1c5a      	adds	r2, r3, #1
     82c:	7022      	strb	r2, [r4, #0]
     82e:	54c5      	strb	r5, [r0, r3]
			process_command(resiever);
     830:	f000 f904 	bl	a3c <process_command>
			rec_len = 0;
     834:	7025      	strb	r5, [r4, #0]
     836:	e00d      	b.n	854 <Isr_UART0+0x48>
		}else{
			resiever[rec_len++] = d;
     838:	7822      	ldrb	r2, [r4, #0]
     83a:	1c51      	adds	r1, r2, #1
     83c:	7021      	strb	r1, [r4, #0]
     83e:	5483      	strb	r3, [r0, r2]
		}
	}else{
		d = U0RBR;
	}
	if (d == 'L')
     840:	2b4c      	cmp	r3, #76	; 0x4c
     842:	d102      	bne.n	84a <Isr_UART0+0x3e>
	{
		FIO2SET = (1 << LED1) | (1 << LED2);
     844:	2203      	movs	r2, #3
     846:	4b0a      	ldr	r3, [pc, #40]	; (870 <Isr_UART0+0x64>)
     848:	e003      	b.n	852 <Isr_UART0+0x46>
	}else if (d == 'O')
     84a:	2b4f      	cmp	r3, #79	; 0x4f
     84c:	d102      	bne.n	854 <Isr_UART0+0x48>
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);
     84e:	2203      	movs	r2, #3
     850:	4b08      	ldr	r3, [pc, #32]	; (874 <Isr_UART0+0x68>)
     852:	601a      	str	r2, [r3, #0]

	}
	VICVectAddr = 0;
     854:	2200      	movs	r2, #0
     856:	4b08      	ldr	r3, [pc, #32]	; (878 <Isr_UART0+0x6c>)
     858:	601a      	str	r2, [r3, #0]

}
     85a:	bc38      	pop	{r3, r4, r5}
     85c:	bc01      	pop	{r0}
     85e:	4700      	bx	r0
     860:	e000c014 	.word	0xe000c014
     864:	e000c000 	.word	0xe000c000
     868:	40000434 	.word	0x40000434
     86c:	40000544 	.word	0x40000544
     870:	3fffc058 	.word	0x3fffc058
     874:	3fffc05c 	.word	0x3fffc05c
     878:	ffffff00 	.word	0xffffff00

0000087c <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
     87c:	4b01      	ldr	r3, [pc, #4]	; (884 <uart0_test+0x8>)
     87e:	88d8      	ldrh	r0, [r3, #6]
}
     880:	4770      	bx	lr
     882:	46c0      	nop			; (mov r8, r8)
     884:	40000434 	.word	0x40000434

00000888 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
     888:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <uart0_getc+0x30>)
     88a:	88da      	ldrh	r2, [r3, #6]
     88c:	3302      	adds	r3, #2
     88e:	2a00      	cmp	r2, #0
     890:	d0fa      	beq.n	888 <uart0_getc>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
     892:	881a      	ldrh	r2, [r3, #0]
	d = RxBuff0.buff[i++];
     894:	1899      	adds	r1, r3, r2
     896:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
     898:	217f      	movs	r1, #127	; 0x7f

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
	d = RxBuff0.buff[i++];
     89a:	3201      	adds	r2, #1
	RxBuff0.ri = i % UART0_RXB;
     89c:	400a      	ands	r2, r1
     89e:	801a      	strh	r2, [r3, #0]
	U0IER = 0;		/* Disable interrupts */
     8a0:	2200      	movs	r2, #0
     8a2:	4906      	ldr	r1, [pc, #24]	; (8bc <uart0_getc+0x34>)
     8a4:	600a      	str	r2, [r1, #0]
	RxBuff0.ct--;
     8a6:	889a      	ldrh	r2, [r3, #4]
     8a8:	3a01      	subs	r2, #1
     8aa:	0412      	lsls	r2, r2, #16
     8ac:	0c12      	lsrs	r2, r2, #16
     8ae:	809a      	strh	r2, [r3, #4]
	U0IER = 0x07;	/* Reenable interrupt */
     8b0:	2307      	movs	r3, #7
     8b2:	600b      	str	r3, [r1, #0]

	return d;
}
     8b4:	4770      	bx	lr
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	40000434 	.word	0x40000434
     8bc:	e000c004 	.word	0xe000c004

000008c0 <uart0_putc>:


void uart0_putc (uint8_t d)
{
     8c0:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
     8c2:	4b10      	ldr	r3, [pc, #64]	; (904 <uart0_putc+0x44>)
     8c4:	899a      	ldrh	r2, [r3, #12]
     8c6:	2a7f      	cmp	r2, #127	; 0x7f
     8c8:	d8fb      	bhi.n	8c2 <uart0_putc+0x2>

	U0IER = 0x05;		/* Disable Tx Interrupt */
     8ca:	2205      	movs	r2, #5
     8cc:	490e      	ldr	r1, [pc, #56]	; (908 <uart0_putc+0x48>)
     8ce:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
     8d0:	89da      	ldrh	r2, [r3, #14]
     8d2:	2a00      	cmp	r2, #0
     8d4:	d00c      	beq.n	8f0 <uart0_putc+0x30>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
     8d6:	895a      	ldrh	r2, [r3, #10]
		TxBuff0.buff[i++] = d;
     8d8:	189c      	adds	r4, r3, r2
     8da:	7420      	strb	r0, [r4, #16]
		TxBuff0.wi = i % UART0_TXB;
     8dc:	207f      	movs	r0, #127	; 0x7f
	while (TxBuff0.ct >= UART0_TXB) ;

	U0IER = 0x05;		/* Disable Tx Interrupt */
	if (TxBuff0.act) {
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
		TxBuff0.buff[i++] = d;
     8de:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
     8e0:	4002      	ands	r2, r0
     8e2:	815a      	strh	r2, [r3, #10]
		TxBuff0.ct++;
     8e4:	899a      	ldrh	r2, [r3, #12]
     8e6:	3201      	adds	r2, #1
     8e8:	0412      	lsls	r2, r2, #16
     8ea:	0c12      	lsrs	r2, r2, #16
     8ec:	819a      	strh	r2, [r3, #12]
     8ee:	e003      	b.n	8f8 <uart0_putc+0x38>
	} else {
		U0THR = d;		/* Trigger Tx sequense */
     8f0:	4a06      	ldr	r2, [pc, #24]	; (90c <uart0_putc+0x4c>)
     8f2:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
     8f4:	2201      	movs	r2, #1
     8f6:	81da      	strh	r2, [r3, #14]
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
     8f8:	2307      	movs	r3, #7
     8fa:	600b      	str	r3, [r1, #0]
}
     8fc:	bc10      	pop	{r4}
     8fe:	bc01      	pop	{r0}
     900:	4700      	bx	r0
     902:	46c0      	nop			; (mov r8, r8)
     904:	400004b4 	.word	0x400004b4
     908:	e000c004 	.word	0xe000c004
     90c:	e000c000 	.word	0xe000c000

00000910 <uart0_init>:


void uart0_init (void)
{
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     910:	2108      	movs	r1, #8
     912:	4a16      	ldr	r2, [pc, #88]	; (96c <uart0_init+0x5c>)
	U0IER = 0x07;		/* Reenable Tx Interrupt */
}


void uart0_init (void)
{
     914:	b508      	push	{r3, lr}
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     916:	6813      	ldr	r3, [r2, #0]
     918:	430b      	orrs	r3, r1
     91a:	6013      	str	r3, [r2, #0]
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     91c:	4b14      	ldr	r3, [pc, #80]	; (970 <uart0_init+0x60>)
     91e:	681a      	ldr	r2, [r3, #0]
     920:	317b      	adds	r1, #123	; 0x7b
     922:	430a      	orrs	r2, r1
     924:	601a      	str	r2, [r3, #0]
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     926:	4a13      	ldr	r2, [pc, #76]	; (974 <uart0_init+0x64>)
     928:	313e      	adds	r1, #62	; 0x3e
     92a:	6011      	str	r1, [r2, #0]
	U0DLL = 0x09;
     92c:	4a12      	ldr	r2, [pc, #72]	; (978 <uart0_init+0x68>)
     92e:	39b8      	subs	r1, #184	; 0xb8
     930:	6011      	str	r1, [r2, #0]
	U0DLM = 0x00;
     932:	2100      	movs	r1, #0
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     934:	2080      	movs	r0, #128	; 0x80
	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
	U0DLL = 0x09;
	U0DLM = 0x00;
     936:	4a11      	ldr	r2, [pc, #68]	; (97c <uart0_init+0x6c>)
     938:	6011      	str	r1, [r2, #0]
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     93a:	6819      	ldr	r1, [r3, #0]
     93c:	4381      	bics	r1, r0
     93e:	6019      	str	r1, [r3, #0]

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     940:	490f      	ldr	r1, [pc, #60]	; (980 <uart0_init+0x70>)
     942:	680b      	ldr	r3, [r1, #0]
     944:	3879      	subs	r0, #121	; 0x79
     946:	4303      	orrs	r3, r0
     948:	600b      	str	r3, [r1, #0]

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     94a:	490e      	ldr	r1, [pc, #56]	; (984 <uart0_init+0x74>)
     94c:	680b      	ldr	r3, [r1, #0]
     94e:	3049      	adds	r0, #73	; 0x49
     950:	4303      	orrs	r3, r0
     952:	600b      	str	r3, [r1, #0]

	//Interrupts
	/* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
	/* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
	U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
     954:	2101      	movs	r1, #1
     956:	6813      	ldr	r3, [r2, #0]
     958:	430b      	orrs	r3, r1
     95a:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
     95c:	384a      	subs	r0, #74	; 0x4a
     95e:	490a      	ldr	r1, [pc, #40]	; (988 <uart0_init+0x78>)
     960:	220f      	movs	r2, #15
     962:	f7ff ff4b 	bl	7fc <RegisterIrq>

}
     966:	bc08      	pop	{r3}
     968:	bc01      	pop	{r0}
     96a:	4700      	bx	r0
     96c:	e01fc0c4 	.word	0xe01fc0c4
     970:	e000c00c 	.word	0xe000c00c
     974:	e000c028 	.word	0xe000c028
     978:	e000c000 	.word	0xe000c000
     97c:	e000c004 	.word	0xe000c004
     980:	e000c008 	.word	0xe000c008
     984:	e002c000 	.word	0xe002c000
     988:	0000080d 	.word	0x0000080d

0000098c <hex_to_int>:


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     98c:	220a      	movs	r2, #10
unsigned char RxCount,Index;
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
     98e:	0903      	lsrs	r3, r0, #4
     990:	3b03      	subs	r3, #3
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     992:	4353      	muls	r3, r2
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
     994:	3205      	adds	r2, #5
     996:	4010      	ands	r0, r2
	uint16_t result = first*10 + second;
     998:	18c0      	adds	r0, r0, r3
     99a:	0400      	lsls	r0, r0, #16
     99c:	0c00      	lsrs	r0, r0, #16
	if(result > 9) result--;
     99e:	2809      	cmp	r0, #9
     9a0:	d902      	bls.n	9a8 <hex_to_int+0x1c>
     9a2:	3801      	subs	r0, #1
     9a4:	0400      	lsls	r0, r0, #16
     9a6:	0c00      	lsrs	r0, r0, #16
	return result;
}
     9a8:	4770      	bx	lr

000009aa <hex_to_ascii>:

uint16_t hex_to_ascii(uint16_t c){
     9aa:	b538      	push	{r3, r4, r5, lr}
     9ac:	1c05      	adds	r5, r0, #0
	uint16_t high = hex_to_int(c >> 8) * 16;
     9ae:	0a00      	lsrs	r0, r0, #8
     9b0:	f7ff ffec 	bl	98c <hex_to_int>
     9b4:	1c04      	adds	r4, r0, #0
	uint16_t low = hex_to_int(c & 0xFF);
     9b6:	0628      	lsls	r0, r5, #24
     9b8:	0e00      	lsrs	r0, r0, #24
     9ba:	f7ff ffe7 	bl	98c <hex_to_int>
	if(result > 9) result--;
	return result;
}

uint16_t hex_to_ascii(uint16_t c){
	uint16_t high = hex_to_int(c >> 8) * 16;
     9be:	0124      	lsls	r4, r4, #4
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
     9c0:	1900      	adds	r0, r0, r4
     9c2:	0400      	lsls	r0, r0, #16
     9c4:	0c00      	lsrs	r0, r0, #16
}
     9c6:	bc38      	pop	{r3, r4, r5}
     9c8:	bc02      	pop	{r1}
     9ca:	4708      	bx	r1

000009cc <UART0_send_byte>:
#endif
}
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9cc:	2101      	movs	r1, #1
     9ce:	4b07      	ldr	r3, [pc, #28]	; (9ec <UART0_send_byte+0x20>)
     9d0:	681a      	ldr	r2, [r3, #0]
     9d2:	438a      	bics	r2, r1
     9d4:	601a      	str	r2, [r3, #0]
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9d6:	4a06      	ldr	r2, [pc, #24]	; (9f0 <UART0_send_byte+0x24>)
     9d8:	6812      	ldr	r2, [r2, #0]
     9da:	0692      	lsls	r2, r2, #26
     9dc:	d5fb      	bpl.n	9d6 <UART0_send_byte+0xa>
	U0THR = byte;
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9de:	2101      	movs	r1, #1
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
	U0THR = byte;
     9e0:	4a04      	ldr	r2, [pc, #16]	; (9f4 <UART0_send_byte+0x28>)
     9e2:	6010      	str	r0, [r2, #0]
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9e4:	681a      	ldr	r2, [r3, #0]
     9e6:	430a      	orrs	r2, r1
     9e8:	601a      	str	r2, [r3, #0]
}
     9ea:	4770      	bx	lr
     9ec:	e000c004 	.word	0xe000c004
     9f0:	e000c014 	.word	0xe000c014
     9f4:	e000c000 	.word	0xe000c000

000009f8 <UART0_send>:
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
     9f8:	b510      	push	{r4, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9fa:	2401      	movs	r4, #1
     9fc:	4b0c      	ldr	r3, [pc, #48]	; (a30 <Stack_Size+0x20>)
     9fe:	681a      	ldr	r2, [r3, #0]
     a00:	43a2      	bics	r2, r4
     a02:	1c1c      	adds	r4, r3, #0
     a04:	601a      	str	r2, [r3, #0]

	while ( Length != 0 )
     a06:	2900      	cmp	r1, #0
     a08:	d00b      	beq.n	a22 <Stack_Size+0x12>
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a0a:	4b0a      	ldr	r3, [pc, #40]	; (a34 <Stack_Size+0x24>)
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	069b      	lsls	r3, r3, #26
     a10:	d5fb      	bpl.n	a0a <UART0_send+0x12>
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a12:	7802      	ldrb	r2, [r0, #0]
     a14:	4b08      	ldr	r3, [pc, #32]	; (a38 <Stack_Size+0x28>)
		BufferPtr++;
		Length--;
     a16:	3901      	subs	r1, #1
     a18:	0409      	lsls	r1, r1, #16

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a1a:	601a      	str	r2, [r3, #0]
		BufferPtr++;
     a1c:	3001      	adds	r0, #1
		Length--;
     a1e:	0c09      	lsrs	r1, r1, #16
     a20:	e7f1      	b.n	a06 <UART0_send+0xe>
	}
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a22:	2201      	movs	r2, #1
     a24:	6823      	ldr	r3, [r4, #0]
     a26:	4313      	orrs	r3, r2
     a28:	6023      	str	r3, [r4, #0]

	return;
}
     a2a:	bc10      	pop	{r4}
     a2c:	bc01      	pop	{r0}
     a2e:	4700      	bx	r0
     a30:	e000c004 	.word	0xe000c004
     a34:	e000c014 	.word	0xe000c014
     a38:	e000c000 	.word	0xe000c000

00000a3c <process_command>:
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     a3c:	b538      	push	{r3, r4, r5, lr}
	uint16_t num;
	uint8_t lenth;
#ifdef GUI
#else
	if(strncmp(cmd, "start", 5) == 0)
     a3e:	4924      	ldr	r1, [pc, #144]	; (ad0 <process_command+0x94>)
     a40:	2205      	movs	r2, #5
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     a42:	1c04      	adds	r4, r0, #0
	uint16_t num;
	uint8_t lenth;
#ifdef GUI
#else
	if(strncmp(cmd, "start", 5) == 0)
     a44:	f000 faba 	bl	fbc <strncmp>
     a48:	2800      	cmp	r0, #0
     a4a:	d10c      	bne.n	a66 <process_command+0x2a>
	{
		UART0_send("\nStarted\n", 9);
     a4c:	4821      	ldr	r0, [pc, #132]	; (ad4 <process_command+0x98>)
     a4e:	2109      	movs	r1, #9
     a50:	f7ff ffd2 	bl	9f8 <UART0_send>
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     a54:	210d      	movs	r1, #13
     a56:	2002      	movs	r0, #2
     a58:	f7ff fe24 	bl	6a4 <gpio_set>
		led_set(LED2);
     a5c:	2001      	movs	r0, #1
     a5e:	f7ff fe0d 	bl	67c <led_set>
	/* FIO1SET |= 1 << ADC; */
	/* FIO1CLR |= 1 << ADC; */
	/* SPI0_send_1_byte(WRITE_MODE_REG, ADC); */
	/* SPI0_send_2_byte(MODE_REG_VAL, ADC); */
	/* FIO1SET |= 1 << ADC; */
		timer0_start();
     a62:	f000 fa63 	bl	f2c <timer0_start>
	}    

	/* Turn off amplifier */
	if(strncmp(cmd, "stop", 4) == 0)
     a66:	1c20      	adds	r0, r4, #0
     a68:	491b      	ldr	r1, [pc, #108]	; (ad8 <process_command+0x9c>)
     a6a:	2204      	movs	r2, #4
     a6c:	f000 faa6 	bl	fbc <strncmp>
     a70:	2800      	cmp	r0, #0
     a72:	d10c      	bne.n	a8e <process_command+0x52>
	{
		UART0_send("\nStopped\n", 9);
     a74:	4819      	ldr	r0, [pc, #100]	; (adc <process_command+0xa0>)
     a76:	2109      	movs	r1, #9
     a78:	f7ff ffbe 	bl	9f8 <UART0_send>
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     a7c:	210d      	movs	r1, #13
     a7e:	2002      	movs	r0, #2
     a80:	f7ff fe32 	bl	6e8 <gpio_clear>
		led_clear(LED2);
     a84:	2001      	movs	r0, #1
     a86:	f7ff fe03 	bl	690 <led_clear>
		timer0_stop();
     a8a:	f000 fa5f 	bl	f4c <timer0_stop>
	}
	/* Voltage setup  */
	if(strncmp(cmd, "set", 3) == 0)
     a8e:	1c20      	adds	r0, r4, #0
     a90:	4913      	ldr	r1, [pc, #76]	; (ae0 <process_command+0xa4>)
     a92:	2203      	movs	r2, #3
     a94:	f000 fa92 	bl	fbc <strncmp>
     a98:	2800      	cmp	r0, #0
     a9a:	d10b      	bne.n	ab4 <process_command+0x78>
	{
	
		lenth = strlen(cmd+4)-1;
		num = atoi(cmd + 4);
     a9c:	1d20      	adds	r0, r4, #4
     a9e:	f000 fa65 	bl	f6c <atoi>
     aa2:	1c05      	adds	r5, r0, #0
		UART0_send("\nOK\n", 4);
     aa4:	2104      	movs	r1, #4
     aa6:	480f      	ldr	r0, [pc, #60]	; (ae4 <process_command+0xa8>)
     aa8:	f7ff ffa6 	bl	9f8 <UART0_send>
		/* UART0_send_byte(num >> 8); */
		/* UART0_send_byte(num); */
		dac_set_voltage(num);
     aac:	0428      	lsls	r0, r5, #16
     aae:	0c00      	lsrs	r0, r0, #16
     ab0:	f000 f95a 	bl	d68 <dac_set_voltage>
	}

	/* Manual  */
	if(strncmp(cmd, "help", 4) == 0)
     ab4:	1c20      	adds	r0, r4, #0
     ab6:	490c      	ldr	r1, [pc, #48]	; (ae8 <process_command+0xac>)
     ab8:	2204      	movs	r2, #4
     aba:	f000 fa7f 	bl	fbc <strncmp>
     abe:	2800      	cmp	r0, #0
     ac0:	d103      	bne.n	aca <process_command+0x8e>
	{
		UART0_send(help_msg, sizeof(help_msg)-1);
     ac2:	480a      	ldr	r0, [pc, #40]	; (aec <process_command+0xb0>)
     ac4:	2186      	movs	r1, #134	; 0x86
     ac6:	f7ff ff97 	bl	9f8 <UART0_send>
	}
#endif
}
     aca:	bc38      	pop	{r3, r4, r5}
     acc:	bc01      	pop	{r0}
     ace:	4700      	bx	r0
     ad0:	00001459 	.word	0x00001459
     ad4:	0000145f 	.word	0x0000145f
     ad8:	00001469 	.word	0x00001469
     adc:	0000146e 	.word	0x0000146e
     ae0:	00001478 	.word	0x00001478
     ae4:	0000147c 	.word	0x0000147c
     ae8:	00001481 	.word	0x00001481
     aec:	000013c0 	.word	0x000013c0

00000af0 <SPI_ADC_data_transfers_16bit>:
	}
	return dat;
}

uint16_t SPI_ADC_data_transfers_16bit (uint16_t data)
{
     af0:	b530      	push	{r4, r5, lr}
     af2:	210f      	movs	r1, #15
     af4:	1c04      	adds	r4, r0, #0
	uint16_t dat = 0;
     af6:	2000      	movs	r0, #0
	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     af8:	4b12      	ldr	r3, [pc, #72]	; (b44 <SPI_ADC_data_transfers_16bit+0x54>)
     afa:	4a13      	ldr	r2, [pc, #76]	; (b48 <SPI_ADC_data_transfers_16bit+0x58>)
     afc:	681d      	ldr	r5, [r3, #0]
     afe:	402a      	ands	r2, r5
     b00:	601a      	str	r2, [r3, #0]
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
     b02:	1c22      	adds	r2, r4, #0
     b04:	410a      	asrs	r2, r1
     b06:	07d2      	lsls	r2, r2, #31
     b08:	d504      	bpl.n	b14 <SPI_ADC_data_transfers_16bit+0x24>
			FIO1PIN |= 1 << ADC_DIN;
     b0a:	2580      	movs	r5, #128	; 0x80
     b0c:	681a      	ldr	r2, [r3, #0]
     b0e:	046d      	lsls	r5, r5, #17
     b10:	432a      	orrs	r2, r5
     b12:	e002      	b.n	b1a <SPI_ADC_data_transfers_16bit+0x2a>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b14:	681d      	ldr	r5, [r3, #0]
     b16:	4a0d      	ldr	r2, [pc, #52]	; (b4c <SPI_ADC_data_transfers_16bit+0x5c>)
     b18:	402a      	ands	r2, r5

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     b1a:	2580      	movs	r5, #128	; 0x80
		FIO1PIN &= ~(1 << ADC_SCLK);
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b1c:	601a      	str	r2, [r3, #0]

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     b1e:	681a      	ldr	r2, [r3, #0]
     b20:	036d      	lsls	r5, r5, #13
     b22:	432a      	orrs	r2, r5
     b24:	601a      	str	r2, [r3, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b26:	681a      	ldr	r2, [r3, #0]
     b28:	2301      	movs	r3, #1
			dat |= 1 << (i - 1);
     b2a:	408b      	lsls	r3, r1
		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b2c:	0212      	lsls	r2, r2, #8
     b2e:	d503      	bpl.n	b38 <SPI_ADC_data_transfers_16bit+0x48>
			dat |= 1 << (i - 1);
     b30:	4303      	orrs	r3, r0
     b32:	0418      	lsls	r0, r3, #16
     b34:	0c00      	lsrs	r0, r0, #16
     b36:	e000      	b.n	b3a <SPI_ADC_data_transfers_16bit+0x4a>
		else
			dat &= ~(1 << (i - 1));
     b38:	4398      	bics	r0, r3
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
     b3a:	3901      	subs	r1, #1
     b3c:	d2dc      	bcs.n	af8 <SPI_ADC_data_transfers_16bit+0x8>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     b3e:	bc30      	pop	{r4, r5}
     b40:	bc02      	pop	{r1}
     b42:	4708      	bx	r1
     b44:	3fffc034 	.word	0x3fffc034
     b48:	ffefffff 	.word	0xffefffff
     b4c:	feffffff 	.word	0xfeffffff

00000b50 <SPI_ADC_data_transfers_8bit>:

unsigned char SPI_ADC_data_transfers_8bit (unsigned char data)
{
     b50:	b530      	push	{r4, r5, lr}
     b52:	2107      	movs	r1, #7
     b54:	1c04      	adds	r4, r0, #0
	unsigned char dat = 0;
     b56:	2000      	movs	r0, #0
	uint16_t mask = 0x8000;
	//Write
	for(i = 8;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     b58:	4b12      	ldr	r3, [pc, #72]	; (ba4 <SPI_ADC_data_transfers_8bit+0x54>)
     b5a:	4a13      	ldr	r2, [pc, #76]	; (ba8 <SPI_ADC_data_transfers_8bit+0x58>)
     b5c:	681d      	ldr	r5, [r3, #0]
     b5e:	402a      	ands	r2, r5
     b60:	601a      	str	r2, [r3, #0]
		if(data & (1 << (i - 1)))
     b62:	1c22      	adds	r2, r4, #0
     b64:	410a      	asrs	r2, r1
     b66:	07d2      	lsls	r2, r2, #31
     b68:	d504      	bpl.n	b74 <SPI_ADC_data_transfers_8bit+0x24>
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
     b6a:	2580      	movs	r5, #128	; 0x80
     b6c:	681a      	ldr	r2, [r3, #0]
     b6e:	046d      	lsls	r5, r5, #17
     b70:	432a      	orrs	r2, r5
     b72:	e002      	b.n	b7a <SPI_ADC_data_transfers_8bit+0x2a>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b74:	681d      	ldr	r5, [r3, #0]
     b76:	4a0d      	ldr	r2, [pc, #52]	; (bac <SPI_ADC_data_transfers_8bit+0x5c>)
     b78:	402a      	ands	r2, r5

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     b7a:	2580      	movs	r5, #128	; 0x80
		FIO1PIN &= ~(1 << ADC_SCLK);
		if(data & (1 << (i - 1)))
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b7c:	601a      	str	r2, [r3, #0]

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     b7e:	681a      	ldr	r2, [r3, #0]
     b80:	036d      	lsls	r5, r5, #13
     b82:	432a      	orrs	r2, r5
     b84:	601a      	str	r2, [r3, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b86:	681a      	ldr	r2, [r3, #0]
     b88:	2301      	movs	r3, #1
			dat |= 1 << (i - 1);
     b8a:	408b      	lsls	r3, r1
		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b8c:	0212      	lsls	r2, r2, #8
     b8e:	d503      	bpl.n	b98 <SPI_ADC_data_transfers_8bit+0x48>
			dat |= 1 << (i - 1);
     b90:	4303      	orrs	r3, r0
     b92:	0618      	lsls	r0, r3, #24
     b94:	0e00      	lsrs	r0, r0, #24
     b96:	e000      	b.n	b9a <SPI_ADC_data_transfers_8bit+0x4a>
		else
			dat &= ~(1 << (i - 1));
     b98:	4398      	bics	r0, r3
	unsigned char dat = 0;
	char i, j;

	uint16_t mask = 0x8000;
	//Write
	for(i = 8;  i > 0 ; i--)
     b9a:	3901      	subs	r1, #1
     b9c:	d2dc      	bcs.n	b58 <SPI_ADC_data_transfers_8bit+0x8>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     b9e:	bc30      	pop	{r4, r5}
     ba0:	bc02      	pop	{r1}
     ba2:	4708      	bx	r1
     ba4:	3fffc034 	.word	0x3fffc034
     ba8:	ffefffff 	.word	0xffefffff
     bac:	feffffff 	.word	0xfeffffff

00000bb0 <SPI_DAC_data_transfers_16bit>:
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     bb0:	b570      	push	{r4, r5, r6, lr}
	uint16_t dat = 0;
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
     bb2:	2480      	movs	r4, #128	; 0x80

	}  
	return dat;
}
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     bb4:	1c05      	adds	r5, r0, #0
     bb6:	210f      	movs	r1, #15
	uint16_t dat = 0;
     bb8:	2000      	movs	r0, #0
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
     bba:	0224      	lsls	r4, r4, #8
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
     bbc:	2680      	movs	r6, #128	; 0x80
     bbe:	4b12      	ldr	r3, [pc, #72]	; (c08 <SPI_DAC_data_transfers_16bit+0x58>)
     bc0:	681a      	ldr	r2, [r3, #0]
     bc2:	0376      	lsls	r6, r6, #13
     bc4:	4332      	orrs	r2, r6
     bc6:	601a      	str	r2, [r3, #0]
		if(data & mask)
     bc8:	4225      	tst	r5, r4
     bca:	d004      	beq.n	bd6 <SPI_DAC_data_transfers_16bit+0x26>
			FIO1PIN |= 1 << ADC_DIN;
     bcc:	2680      	movs	r6, #128	; 0x80
     bce:	681a      	ldr	r2, [r3, #0]
     bd0:	0476      	lsls	r6, r6, #17
     bd2:	4332      	orrs	r2, r6
     bd4:	e002      	b.n	bdc <SPI_DAC_data_transfers_16bit+0x2c>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     bd6:	681e      	ldr	r6, [r3, #0]
     bd8:	4a0c      	ldr	r2, [pc, #48]	; (c0c <SPI_DAC_data_transfers_16bit+0x5c>)
     bda:	4032      	ands	r2, r6
     bdc:	601a      	str	r2, [r3, #0]

		//SCLK
		mask = mask >> 1;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     bde:	4a0c      	ldr	r2, [pc, #48]	; (c10 <SPI_DAC_data_transfers_16bit+0x60>)
     be0:	681e      	ldr	r6, [r3, #0]
     be2:	4032      	ands	r2, r6
     be4:	601a      	str	r2, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     be6:	681a      	ldr	r2, [r3, #0]
     be8:	2301      	movs	r3, #1
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);

		//SCLK
		mask = mask >> 1;
     bea:	0864      	lsrs	r4, r4, #1
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
			dat |= 1 << (i - 1);
     bec:	408b      	lsls	r3, r1
		mask = mask >> 1;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     bee:	0212      	lsls	r2, r2, #8
     bf0:	d503      	bpl.n	bfa <SPI_DAC_data_transfers_16bit+0x4a>
			dat |= 1 << (i - 1);
     bf2:	4303      	orrs	r3, r0
     bf4:	0418      	lsls	r0, r3, #16
     bf6:	0c00      	lsrs	r0, r0, #16
     bf8:	e000      	b.n	bfc <SPI_DAC_data_transfers_16bit+0x4c>
		else
			dat &= ~(1 << (i - 1));
     bfa:	4398      	bics	r0, r3
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
     bfc:	3901      	subs	r1, #1
     bfe:	d2dd      	bcs.n	bbc <SPI_DAC_data_transfers_16bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     c00:	bc70      	pop	{r4, r5, r6}
     c02:	bc02      	pop	{r1}
     c04:	4708      	bx	r1
     c06:	46c0      	nop			; (mov r8, r8)
     c08:	3fffc034 	.word	0x3fffc034
     c0c:	feffffff 	.word	0xfeffffff
     c10:	ffefffff 	.word	0xffefffff

00000c14 <SPI0_send_2_byte>:
	}
	return dat;
}

uint16_t SPI0_send_2_byte(uint16_t data, uint8_t slave)
{
     c14:	b508      	push	{r3, lr}
	uint16_t dat;
	if (slave == ADC )
     c16:	2912      	cmp	r1, #18
     c18:	d102      	bne.n	c20 <SPI0_send_2_byte+0xc>
	{
	dat = SPI_ADC_data_transfers_16bit(data);
     c1a:	f7ff ff69 	bl	af0 <SPI_ADC_data_transfers_16bit>
     c1e:	e003      	b.n	c28 <SPI0_send_2_byte+0x14>
	}else if (slave == DAC)
     c20:	291d      	cmp	r1, #29
     c22:	d102      	bne.n	c2a <SPI0_send_2_byte+0x16>
	{
	dat = SPI_DAC_data_transfers_16bit(data);
     c24:	f7ff ffc4 	bl	bb0 <SPI_DAC_data_transfers_16bit>
     c28:	1c03      	adds	r3, r0, #0
	}
	return dat;
}
     c2a:	1c18      	adds	r0, r3, #0
     c2c:	bc08      	pop	{r3}
     c2e:	bc02      	pop	{r1}
     c30:	4708      	bx	r1

00000c32 <SPI_DAC_data_transfers_8bit>:
	}  
	return dat;
}

unsigned char SPI_DAC_data_transfers_8bit (unsigned char data)
{
     c32:	b530      	push	{r4, r5, lr}
     c34:	2107      	movs	r1, #7
     c36:	1c04      	adds	r4, r0, #0
	unsigned char dat = 0;
     c38:	2000      	movs	r0, #0
	char i, j;

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
     c3a:	1c22      	adds	r2, r4, #0
     c3c:	410a      	asrs	r2, r1
     c3e:	4b12      	ldr	r3, [pc, #72]	; (c88 <SPI_DAC_data_transfers_8bit+0x56>)
     c40:	07d2      	lsls	r2, r2, #31
     c42:	d504      	bpl.n	c4e <SPI_DAC_data_transfers_8bit+0x1c>
			FIO1PIN |= 1 << ADC_DIN;
     c44:	2580      	movs	r5, #128	; 0x80
     c46:	681a      	ldr	r2, [r3, #0]
     c48:	046d      	lsls	r5, r5, #17
     c4a:	432a      	orrs	r2, r5
     c4c:	e002      	b.n	c54 <SPI_DAC_data_transfers_8bit+0x22>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     c4e:	681d      	ldr	r5, [r3, #0]
     c50:	4a0e      	ldr	r2, [pc, #56]	; (c8c <SPI_DAC_data_transfers_8bit+0x5a>)
     c52:	402a      	ands	r2, r5

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     c54:	2580      	movs	r5, #128	; 0x80
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     c56:	601a      	str	r2, [r3, #0]

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     c58:	681a      	ldr	r2, [r3, #0]
     c5a:	036d      	lsls	r5, r5, #13
     c5c:	432a      	orrs	r2, r5
     c5e:	601a      	str	r2, [r3, #0]
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     c60:	4a0b      	ldr	r2, [pc, #44]	; (c90 <SPI_DAC_data_transfers_8bit+0x5e>)
     c62:	681d      	ldr	r5, [r3, #0]
     c64:	402a      	ands	r2, r5
     c66:	601a      	str	r2, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     c68:	681a      	ldr	r2, [r3, #0]
     c6a:	2301      	movs	r3, #1
			dat |= 1 << (i - 1);
     c6c:	408b      	lsls	r3, r1
		FIO1PIN |= 1 << ADC_SCLK;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     c6e:	0212      	lsls	r2, r2, #8
     c70:	d503      	bpl.n	c7a <SPI_DAC_data_transfers_8bit+0x48>
			dat |= 1 << (i - 1);
     c72:	4303      	orrs	r3, r0
     c74:	0618      	lsls	r0, r3, #24
     c76:	0e00      	lsrs	r0, r0, #24
     c78:	e000      	b.n	c7c <SPI_DAC_data_transfers_8bit+0x4a>
		else
			dat &= ~(1 << (i - 1));
     c7a:	4398      	bics	r0, r3
{
	unsigned char dat = 0;
	char i, j;

	//Write
	for(i = 8;  i > 0 ; i--)
     c7c:	3901      	subs	r1, #1
     c7e:	d2dc      	bcs.n	c3a <SPI_DAC_data_transfers_8bit+0x8>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     c80:	bc30      	pop	{r4, r5}
     c82:	bc02      	pop	{r1}
     c84:	4708      	bx	r1
     c86:	46c0      	nop			; (mov r8, r8)
     c88:	3fffc034 	.word	0x3fffc034
     c8c:	feffffff 	.word	0xfeffffff
     c90:	ffefffff 	.word	0xffefffff

00000c94 <SPI0_send_1_byte>:
#include "spi.h"
/* #define DEBUG_SPI */


uint8_t SPI0_send_1_byte(uint8_t data, uint8_t slave)
{
     c94:	b508      	push	{r3, lr}
	uint8_t dat = 0;
	if (slave == ADC )
     c96:	2912      	cmp	r1, #18
     c98:	d102      	bne.n	ca0 <SPI0_send_1_byte+0xc>
	{
	dat = SPI_ADC_data_transfers_8bit(data);
     c9a:	f7ff ff59 	bl	b50 <SPI_ADC_data_transfers_8bit>
     c9e:	e004      	b.n	caa <SPI0_send_1_byte+0x16>
/* #define DEBUG_SPI */


uint8_t SPI0_send_1_byte(uint8_t data, uint8_t slave)
{
	uint8_t dat = 0;
     ca0:	2300      	movs	r3, #0
	if (slave == ADC )
	{
	dat = SPI_ADC_data_transfers_8bit(data);
	}else if (slave == DAC)
     ca2:	291d      	cmp	r1, #29
     ca4:	d102      	bne.n	cac <SPI0_send_1_byte+0x18>
	{
	dat = SPI_DAC_data_transfers_8bit(data);
     ca6:	f7ff ffc4 	bl	c32 <SPI_DAC_data_transfers_8bit>
     caa:	1c03      	adds	r3, r0, #0
	}
	return dat;
}
     cac:	1c18      	adds	r0, r3, #0
     cae:	bc08      	pop	{r3}
     cb0:	bc02      	pop	{r1}
     cb2:	4708      	bx	r1

00000cb4 <Delay>:
{
	int i, j;
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
     cb4:	4770      	bx	lr

00000cb6 <adc_init>:
void adc_init(void)
{
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
     cb6:	2180      	movs	r1, #128	; 0x80
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
void adc_init(void)
{
     cb8:	b570      	push	{r4, r5, r6, lr}
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
     cba:	2680      	movs	r6, #128	; 0x80
}
void adc_init(void)
{
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
     cbc:	4a26      	ldr	r2, [pc, #152]	; (d58 <adc_init+0xa2>)
     cbe:	6813      	ldr	r3, [r2, #0]
     cc0:	0349      	lsls	r1, r1, #13
     cc2:	430b      	orrs	r3, r1
     cc4:	6013      	str	r3, [r2, #0]
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
     cc6:	4d25      	ldr	r5, [pc, #148]	; (d5c <adc_init+0xa6>)
     cc8:	682b      	ldr	r3, [r5, #0]
     cca:	02f6      	lsls	r6, r6, #11
     ccc:	4333      	orrs	r3, r6
     cce:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(0xFF, ADC);
     cd0:	2112      	movs	r1, #18
     cd2:	20ff      	movs	r0, #255	; 0xff
     cd4:	f7ff ffde 	bl	c94 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     cd8:	2112      	movs	r1, #18
     cda:	20ff      	movs	r0, #255	; 0xff
	SPI0_send_1_byte(0xFF, ADC);
	SPI0_send_1_byte(0xFF, ADC);
	FIO1SET |= 1 << ADC;
     cdc:	4c20      	ldr	r4, [pc, #128]	; (d60 <adc_init+0xaa>)
	FIO1PIN |= (1 << ADC_SCLK);
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(0xFF, ADC);
	SPI0_send_1_byte(0xFF, ADC);
     cde:	f7ff ffd9 	bl	c94 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     ce2:	2112      	movs	r1, #18
     ce4:	20ff      	movs	r0, #255	; 0xff
     ce6:	f7ff ffd5 	bl	c94 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     cea:	2112      	movs	r1, #18
     cec:	20ff      	movs	r0, #255	; 0xff
     cee:	f7ff ffd1 	bl	c94 <SPI0_send_1_byte>
	FIO1SET |= 1 << ADC;
     cf2:	6823      	ldr	r3, [r4, #0]
     cf4:	4333      	orrs	r3, r6
     cf6:	6023      	str	r3, [r4, #0]

	/* Delay because adc needs 500us after reset sequence */
	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     cf8:	682b      	ldr	r3, [r5, #0]
     cfa:	4333      	orrs	r3, r6
     cfc:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     cfe:	2112      	movs	r1, #18
     d00:	2010      	movs	r0, #16
     d02:	f7ff ffc7 	bl	c94 <SPI0_send_1_byte>
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
     d06:	2080      	movs	r0, #128	; 0x80
     d08:	2112      	movs	r1, #18
     d0a:	0140      	lsls	r0, r0, #5
     d0c:	f7ff ff82 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     d10:	6823      	ldr	r3, [r4, #0]
     d12:	4333      	orrs	r3, r6
     d14:	6023      	str	r3, [r4, #0]

	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     d16:	682b      	ldr	r3, [r5, #0]
     d18:	4333      	orrs	r3, r6
     d1a:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     d1c:	2112      	movs	r1, #18
     d1e:	2008      	movs	r0, #8
     d20:	f7ff ffb8 	bl	c94 <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
     d24:	2112      	movs	r1, #18
     d26:	2001      	movs	r0, #1
     d28:	f7ff ff74 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     d2c:	6823      	ldr	r3, [r4, #0]
     d2e:	431e      	orrs	r6, r3
     d30:	6026      	str	r6, [r4, #0]

	FIO1CLR |= 1 << DAC;
     d32:	2680      	movs	r6, #128	; 0x80
     d34:	682b      	ldr	r3, [r5, #0]
     d36:	05b6      	lsls	r6, r6, #22
     d38:	4333      	orrs	r3, r6
     d3a:	602b      	str	r3, [r5, #0]
	SPI0_send_2_byte((0x1000 | 578), DAC);
     d3c:	211d      	movs	r1, #29
     d3e:	4809      	ldr	r0, [pc, #36]	; (d64 <adc_init+0xae>)
     d40:	f7ff ff68 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     d44:	6823      	ldr	r3, [r4, #0]
     d46:	4333      	orrs	r3, r6
     d48:	6023      	str	r3, [r4, #0]

	/* Switch on green led to indicate successful  initialization */
	led_set(LED1);
     d4a:	2000      	movs	r0, #0
     d4c:	f7ff fc96 	bl	67c <led_set>

}
     d50:	bc70      	pop	{r4, r5, r6}
     d52:	bc01      	pop	{r0}
     d54:	4700      	bx	r0
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	3fffc034 	.word	0x3fffc034
     d5c:	3fffc03c 	.word	0x3fffc03c
     d60:	3fffc038 	.word	0x3fffc038
     d64:	00001242 	.word	0x00001242

00000d68 <dac_set_voltage>:

void dac_set_voltage(uint16_t voltage)
{
     d68:	b510      	push	{r4, lr}
	/* SPI0_send_2_byte((voltage | DAC_LOAD_CMD)); */
	FIO1CLR |= 1 << DAC;
     d6a:	2480      	movs	r4, #128	; 0x80
     d6c:	4a08      	ldr	r2, [pc, #32]	; (d90 <dac_set_voltage+0x28>)
     d6e:	6813      	ldr	r3, [r2, #0]
     d70:	05a4      	lsls	r4, r4, #22
     d72:	4323      	orrs	r3, r4
     d74:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((0x1000 | voltage), DAC);
     d76:	2380      	movs	r3, #128	; 0x80
     d78:	015b      	lsls	r3, r3, #5
     d7a:	4318      	orrs	r0, r3
     d7c:	211d      	movs	r1, #29
     d7e:	f7ff ff49 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     d82:	4a04      	ldr	r2, [pc, #16]	; (d94 <dac_set_voltage+0x2c>)
     d84:	6813      	ldr	r3, [r2, #0]
     d86:	4323      	orrs	r3, r4
     d88:	6013      	str	r3, [r2, #0]
}
     d8a:	bc10      	pop	{r4}
     d8c:	bc01      	pop	{r0}
     d8e:	4700      	bx	r0
     d90:	3fffc03c 	.word	0x3fffc03c
     d94:	3fffc038 	.word	0x3fffc038

00000d98 <adc_read_current>:

uint16_t adc_read_current(void)
{
     d98:	b570      	push	{r4, r5, r6, lr}
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
     d9a:	2580      	movs	r5, #128	; 0x80
     d9c:	4e11      	ldr	r6, [pc, #68]	; (de4 <adc_read_current+0x4c>)
     d9e:	6833      	ldr	r3, [r6, #0]
     da0:	02ed      	lsls	r5, r5, #11
     da2:	432b      	orrs	r3, r5
     da4:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     da6:	2112      	movs	r1, #18
     da8:	2010      	movs	r0, #16
     daa:	f7ff ff73 	bl	c94 <SPI0_send_1_byte>
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
     dae:	2080      	movs	r0, #128	; 0x80
	FIO1SET |= 1 << ADC;
     db0:	4c0d      	ldr	r4, [pc, #52]	; (de8 <adc_read_current+0x50>)
{
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
     db2:	2112      	movs	r1, #18
     db4:	0140      	lsls	r0, r0, #5
     db6:	f7ff ff2d 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     dba:	6823      	ldr	r3, [r4, #0]
     dbc:	432b      	orrs	r3, r5
     dbe:	6023      	str	r3, [r4, #0]

	for (current = 0; current < 200; current++);
	FIO1CLR |= 1 << ADC;
     dc0:	6833      	ldr	r3, [r6, #0]
     dc2:	432b      	orrs	r3, r5
     dc4:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
     dc6:	2112      	movs	r1, #18
     dc8:	2058      	movs	r0, #88	; 0x58
     dca:	f7ff ff63 	bl	c94 <SPI0_send_1_byte>
	current = SPI0_send_2_byte(0xFFFF, ADC);
     dce:	2112      	movs	r1, #18
     dd0:	4806      	ldr	r0, [pc, #24]	; (dec <adc_read_current+0x54>)
     dd2:	f7ff ff1f 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     dd6:	6823      	ldr	r3, [r4, #0]
     dd8:	431d      	orrs	r5, r3
     dda:	6025      	str	r5, [r4, #0]

	return current;
}
     ddc:	bc70      	pop	{r4, r5, r6}
     dde:	bc02      	pop	{r1}
     de0:	4708      	bx	r1
     de2:	46c0      	nop			; (mov r8, r8)
     de4:	3fffc03c 	.word	0x3fffc03c
     de8:	3fffc038 	.word	0x3fffc038
     dec:	0000ffff 	.word	0x0000ffff

00000df0 <adc_read_voltage>:

uint16_t adc_read_voltage(void)
{
     df0:	b570      	push	{r4, r5, r6, lr}
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
     df2:	2580      	movs	r5, #128	; 0x80
     df4:	4e10      	ldr	r6, [pc, #64]	; (e38 <adc_read_voltage+0x48>)
     df6:	6833      	ldr	r3, [r6, #0]
     df8:	02ed      	lsls	r5, r5, #11
     dfa:	432b      	orrs	r3, r5
     dfc:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
	FIO1SET |= 1 << ADC;
     dfe:	4c0f      	ldr	r4, [pc, #60]	; (e3c <adc_read_voltage+0x4c>)
uint16_t adc_read_voltage(void)
{
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     e00:	2112      	movs	r1, #18
     e02:	2010      	movs	r0, #16
     e04:	f7ff ff46 	bl	c94 <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
     e08:	2112      	movs	r1, #18
     e0a:	480d      	ldr	r0, [pc, #52]	; (e40 <adc_read_voltage+0x50>)
     e0c:	f7ff ff02 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     e10:	6823      	ldr	r3, [r4, #0]
     e12:	432b      	orrs	r3, r5
     e14:	6023      	str	r3, [r4, #0]
	for (voltage = 0; voltage < 200; voltage ++);

	FIO1CLR |= 1 << ADC;
     e16:	6833      	ldr	r3, [r6, #0]
     e18:	432b      	orrs	r3, r5
     e1a:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
     e1c:	2112      	movs	r1, #18
     e1e:	2058      	movs	r0, #88	; 0x58
     e20:	f7ff ff38 	bl	c94 <SPI0_send_1_byte>
	voltage = SPI0_send_2_byte(0xFFFF, ADC);
     e24:	2112      	movs	r1, #18
     e26:	4807      	ldr	r0, [pc, #28]	; (e44 <adc_read_voltage+0x54>)
     e28:	f7ff fef4 	bl	c14 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     e2c:	6823      	ldr	r3, [r4, #0]
     e2e:	431d      	orrs	r5, r3
     e30:	6025      	str	r5, [r4, #0]

	return voltage;

}
     e32:	bc70      	pop	{r4, r5, r6}
     e34:	bc02      	pop	{r1}
     e36:	4708      	bx	r1
     e38:	3fffc03c 	.word	0x3fffc03c
     e3c:	3fffc038 	.word	0x3fffc038
     e40:	00001001 	.word	0x00001001
     e44:	0000ffff 	.word	0x0000ffff

00000e48 <Isr_TIM0>:
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
	uint16_t dat;
	T0IR = 0x3F;
     e48:	223f      	movs	r2, #63	; 0x3f
	uint16_t volts, curr;
	uint8_t data;
	uint8_t num = 5;
	char *volt_ascii[5];
	FIO1PIN |= (1 << ADC_SCLK);
     e4a:	2180      	movs	r1, #128	; 0x80
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
	uint16_t dat;
	T0IR = 0x3F;
     e4c:	4b18      	ldr	r3, [pc, #96]	; (eb0 <Isr_TIM0+0x68>)
#include "usart_console.h"
#include <stdlib.h>
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
     e4e:	b530      	push	{r4, r5, lr}
	uint16_t dat;
	T0IR = 0x3F;
     e50:	601a      	str	r2, [r3, #0]
	uint16_t volts, curr;
	uint8_t data;
	uint8_t num = 5;
	char *volt_ascii[5];
	FIO1PIN |= (1 << ADC_SCLK);
     e52:	4a18      	ldr	r2, [pc, #96]	; (eb4 <Isr_TIM0+0x6c>)
     e54:	6813      	ldr	r3, [r2, #0]
     e56:	0349      	lsls	r1, r1, #13
     e58:	430b      	orrs	r3, r1
     e5a:	6013      	str	r3, [r2, #0]
#include "usart_console.h"
#include <stdlib.h>
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
     e5c:	b087      	sub	sp, #28
	char *volt_ascii[5];
	FIO1PIN |= (1 << ADC_SCLK);

	/* curr = adc_read_current(); */
        dat = 40 * 5;
	volts = adc_read_voltage();
     e5e:	f7ff ffc7 	bl	df0 <adc_read_voltage>
	/* FIO1SET |= 1 << ADC; */

	/* UART0_send("\nSPI_recieved: ", 15); */
	/* UART0_send_byte(dat >> 8); */
        /* UART0_send_byte(dat);  */
	UART0_send("\nOutput voltage: ",17 );
     e62:	2111      	movs	r1, #17
	char *volt_ascii[5];
	FIO1PIN |= (1 << ADC_SCLK);

	/* curr = adc_read_current(); */
        dat = 40 * 5;
	volts = adc_read_voltage();
     e64:	1c05      	adds	r5, r0, #0
	/* FIO1SET |= 1 << ADC; */

	/* UART0_send("\nSPI_recieved: ", 15); */
	/* UART0_send_byte(dat >> 8); */
        /* UART0_send_byte(dat);  */
	UART0_send("\nOutput voltage: ",17 );
     e66:	4814      	ldr	r0, [pc, #80]	; (eb8 <Isr_TIM0+0x70>)
     e68:	f7ff fdc6 	bl	9f8 <UART0_send>

	if (volts < 10000)
     e6c:	4b13      	ldr	r3, [pc, #76]	; (ebc <Isr_TIM0+0x74>)
{
	uint16_t dat;
	T0IR = 0x3F;
	uint16_t volts, curr;
	uint8_t data;
	uint8_t num = 5;
     e6e:	2405      	movs	r4, #5
	/* UART0_send("\nSPI_recieved: ", 15); */
	/* UART0_send_byte(dat >> 8); */
        /* UART0_send_byte(dat);  */
	UART0_send("\nOutput voltage: ",17 );

	if (volts < 10000)
     e70:	429d      	cmp	r5, r3
     e72:	d80c      	bhi.n	e8e <Isr_TIM0+0x46>
		num = 4;
	if (volts < 1000)
     e74:	4b12      	ldr	r3, [pc, #72]	; (ec0 <Isr_TIM0+0x78>)
	/* UART0_send_byte(dat >> 8); */
        /* UART0_send_byte(dat);  */
	UART0_send("\nOutput voltage: ",17 );

	if (volts < 10000)
		num = 4;
     e76:	3c01      	subs	r4, #1
	if (volts < 1000)
     e78:	429d      	cmp	r5, r3
     e7a:	d808      	bhi.n	e8e <Isr_TIM0+0x46>
		num = 3;
     e7c:	3c01      	subs	r4, #1
	if (volts < 100)
     e7e:	2d63      	cmp	r5, #99	; 0x63
     e80:	d805      	bhi.n	e8e <Isr_TIM0+0x46>
		num = 2;
     e82:	2400      	movs	r4, #0
     e84:	2309      	movs	r3, #9
     e86:	2102      	movs	r1, #2
     e88:	42ab      	cmp	r3, r5
     e8a:	4164      	adcs	r4, r4
     e8c:	1b0c      	subs	r4, r1, r4
	if (volts < 10)
		num = 1;
	UART0_send(itoa(volts, volt_ascii,10), num);
     e8e:	a901      	add	r1, sp, #4
     e90:	220a      	movs	r2, #10
     e92:	1c28      	adds	r0, r5, #0
     e94:	f000 f88c 	bl	fb0 <itoa>
     e98:	0421      	lsls	r1, r4, #16
     e9a:	0c09      	lsrs	r1, r1, #16
     e9c:	f7ff fdac 	bl	9f8 <UART0_send>
 * 
 *         FIO1SET |= 1 << ADC;
 * 
 *         UART0_send("\nSPI_recieved: ", 15);
 *         UART0_send_byte(dat); */
	VICVectAddr = 0;
     ea0:	2200      	movs	r2, #0
     ea2:	4b08      	ldr	r3, [pc, #32]	; (ec4 <Isr_TIM0+0x7c>)
     ea4:	601a      	str	r2, [r3, #0]
}
     ea6:	b007      	add	sp, #28
     ea8:	bc30      	pop	{r4, r5}
     eaa:	bc01      	pop	{r0}
     eac:	4700      	bx	r0
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	e0004000 	.word	0xe0004000
     eb4:	3fffc034 	.word	0x3fffc034
     eb8:	00001486 	.word	0x00001486
     ebc:	0000270f 	.word	0x0000270f
     ec0:	000003e7 	.word	0x000003e7
     ec4:	ffffff00 	.word	0xffffff00

00000ec8 <timer0_init>:
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
     ec8:	2102      	movs	r1, #2
     eca:	4a0f      	ldr	r2, [pc, #60]	; (f08 <VIC_VectAddr+0x8>)
 *         UART0_send("\nSPI_recieved: ", 15);
 *         UART0_send_byte(dat); */
	VICVectAddr = 0;
}
void timer0_init(void)
{
     ecc:	b508      	push	{r3, lr}
	PCONP |= (1 << 1);	/* Power on tim0 */
     ece:	6813      	ldr	r3, [r2, #0]
     ed0:	430b      	orrs	r3, r1
     ed2:	6013      	str	r3, [r2, #0]
	T0TCR = 0;	/* Disable tim0 */
     ed4:	2300      	movs	r3, #0
     ed6:	4a0d      	ldr	r2, [pc, #52]	; (f0c <VIC_VectAddr+0xc>)
     ed8:	6013      	str	r3, [r2, #0]

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
     eda:	4a0d      	ldr	r2, [pc, #52]	; (f10 <VIC_VectAddr+0x10>)
     edc:	3901      	subs	r1, #1
     ede:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
     ee0:	4a0c      	ldr	r2, [pc, #48]	; (f14 <VIC_VectAddr+0x14>)
     ee2:	3102      	adds	r1, #2
     ee4:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
     ee6:	4a0c      	ldr	r2, [pc, #48]	; (f18 <VIC_VectAddr+0x18>)
     ee8:	6013      	str	r3, [r2, #0]
	T0PR = 200;	/* Prescaler */
     eea:	22c8      	movs	r2, #200	; 0xc8
     eec:	4b0b      	ldr	r3, [pc, #44]	; (f1c <VIC_VectAddr+0x1c>)
     eee:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
     ef0:	4a0b      	ldr	r2, [pc, #44]	; (f20 <VIC_VectAddr+0x20>)
     ef2:	4b0c      	ldr	r3, [pc, #48]	; (f24 <VIC_VectAddr+0x24>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
     ef4:	2004      	movs	r0, #4

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
	T0MCR = 3;
	T0CTCR = 0;
	T0PR = 200;	/* Prescaler */
	T0MR0 = 72000;	/* Top value (5 Hz) */
     ef6:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
     ef8:	490b      	ldr	r1, [pc, #44]	; (f28 <VIC_VectAddr+0x28>)
     efa:	220f      	movs	r2, #15
     efc:	f7ff fc7e 	bl	7fc <RegisterIrq>
}
     f00:	bc08      	pop	{r3}
     f02:	bc01      	pop	{r0}
     f04:	4700      	bx	r0
     f06:	46c0      	nop			; (mov r8, r8)
     f08:	e01fc0c4 	.word	0xe01fc0c4
     f0c:	e0004004 	.word	0xe0004004
     f10:	e0004000 	.word	0xe0004000
     f14:	e0004014 	.word	0xe0004014
     f18:	e0004070 	.word	0xe0004070
     f1c:	e000400c 	.word	0xe000400c
     f20:	00011940 	.word	0x00011940
     f24:	e0004018 	.word	0xe0004018
     f28:	00000e49 	.word	0x00000e49

00000f2c <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
     f2c:	2101      	movs	r1, #1
     f2e:	4a06      	ldr	r2, [pc, #24]	; (f48 <timer0_start+0x1c>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
}

void timer0_start(void)
{
     f30:	b508      	push	{r3, lr}
	T0TCR |= 1;
     f32:	6813      	ldr	r3, [r2, #0]
     f34:	430b      	orrs	r3, r1
     f36:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     f38:	2002      	movs	r0, #2
     f3a:	310c      	adds	r1, #12
     f3c:	f7ff fbb2 	bl	6a4 <gpio_set>
}
     f40:	bc08      	pop	{r3}
     f42:	bc01      	pop	{r0}
     f44:	4700      	bx	r0
     f46:	46c0      	nop			; (mov r8, r8)
     f48:	e0004004 	.word	0xe0004004

00000f4c <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
     f4c:	2101      	movs	r1, #1
     f4e:	4a06      	ldr	r2, [pc, #24]	; (f68 <timer0_stop+0x1c>)
	T0TCR |= 1;
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
}

void timer0_stop(void)
{
     f50:	b508      	push	{r3, lr}
	T0TCR &= ~1;
     f52:	6813      	ldr	r3, [r2, #0]
     f54:	438b      	bics	r3, r1
     f56:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     f58:	2002      	movs	r0, #2
     f5a:	310c      	adds	r1, #12
     f5c:	f7ff fbc4 	bl	6e8 <gpio_clear>
}
     f60:	bc08      	pop	{r3}
     f62:	bc01      	pop	{r0}
     f64:	4700      	bx	r0
     f66:	46c0      	nop			; (mov r8, r8)
     f68:	e0004004 	.word	0xe0004004

00000f6c <atoi>:
     f6c:	b508      	push	{r3, lr}
     f6e:	2100      	movs	r1, #0
     f70:	220a      	movs	r2, #10
     f72:	f000 f92b 	bl	11cc <strtol>
     f76:	bc08      	pop	{r3}
     f78:	bc02      	pop	{r1}
     f7a:	4708      	bx	r1

00000f7c <__itoa>:
     f7c:	1e93      	subs	r3, r2, #2
     f7e:	b510      	push	{r4, lr}
     f80:	2b22      	cmp	r3, #34	; 0x22
     f82:	d811      	bhi.n	fa8 <__itoa+0x2c>
     f84:	2a0a      	cmp	r2, #10
     f86:	d10d      	bne.n	fa4 <__itoa+0x28>
     f88:	2800      	cmp	r0, #0
     f8a:	da0b      	bge.n	fa4 <__itoa+0x28>
     f8c:	232d      	movs	r3, #45	; 0x2d
     f8e:	4240      	negs	r0, r0
     f90:	700b      	strb	r3, [r1, #0]
     f92:	3b2c      	subs	r3, #44	; 0x2c
     f94:	1c0c      	adds	r4, r1, #0
     f96:	18c9      	adds	r1, r1, r3
     f98:	f000 f928 	bl	11ec <__utoa>
     f9c:	1c20      	adds	r0, r4, #0
     f9e:	bc10      	pop	{r4}
     fa0:	bc02      	pop	{r1}
     fa2:	4708      	bx	r1
     fa4:	2300      	movs	r3, #0
     fa6:	e7f5      	b.n	f94 <__itoa+0x18>
     fa8:	2300      	movs	r3, #0
     faa:	2000      	movs	r0, #0
     fac:	700b      	strb	r3, [r1, #0]
     fae:	e7f6      	b.n	f9e <__itoa+0x22>

00000fb0 <itoa>:
     fb0:	b508      	push	{r3, lr}
     fb2:	f7ff ffe3 	bl	f7c <__itoa>
     fb6:	bc08      	pop	{r3}
     fb8:	bc02      	pop	{r1}
     fba:	4708      	bx	r1

00000fbc <strncmp>:
     fbc:	1c03      	adds	r3, r0, #0
     fbe:	b530      	push	{r4, r5, lr}
     fc0:	2000      	movs	r0, #0
     fc2:	2a00      	cmp	r2, #0
     fc4:	d03a      	beq.n	103c <strncmp+0x80>
     fc6:	1c1c      	adds	r4, r3, #0
     fc8:	430c      	orrs	r4, r1
     fca:	07a4      	lsls	r4, r4, #30
     fcc:	d120      	bne.n	1010 <strncmp+0x54>
     fce:	2a03      	cmp	r2, #3
     fd0:	d91e      	bls.n	1010 <strncmp+0x54>
     fd2:	681c      	ldr	r4, [r3, #0]
     fd4:	680d      	ldr	r5, [r1, #0]
     fd6:	42ac      	cmp	r4, r5
     fd8:	d11a      	bne.n	1010 <strncmp+0x54>
     fda:	3a04      	subs	r2, #4
     fdc:	2a00      	cmp	r2, #0
     fde:	d02d      	beq.n	103c <strncmp+0x80>
     fe0:	4d1a      	ldr	r5, [pc, #104]	; (104c <strncmp+0x90>)
     fe2:	1965      	adds	r5, r4, r5
     fe4:	43a5      	bics	r5, r4
     fe6:	1c2c      	adds	r4, r5, #0
     fe8:	4d19      	ldr	r5, [pc, #100]	; (1050 <strncmp+0x94>)
     fea:	422c      	tst	r4, r5
     fec:	d00c      	beq.n	1008 <strncmp+0x4c>
     fee:	e025      	b.n	103c <strncmp+0x80>
     ff0:	6818      	ldr	r0, [r3, #0]
     ff2:	680c      	ldr	r4, [r1, #0]
     ff4:	42a0      	cmp	r0, r4
     ff6:	d10b      	bne.n	1010 <strncmp+0x54>
     ff8:	3a04      	subs	r2, #4
     ffa:	2a00      	cmp	r2, #0
     ffc:	d021      	beq.n	1042 <strncmp+0x86>
     ffe:	4c13      	ldr	r4, [pc, #76]	; (104c <strncmp+0x90>)
    1000:	1904      	adds	r4, r0, r4
    1002:	4384      	bics	r4, r0
    1004:	422c      	tst	r4, r5
    1006:	d11c      	bne.n	1042 <strncmp+0x86>
    1008:	3304      	adds	r3, #4
    100a:	3104      	adds	r1, #4
    100c:	2a03      	cmp	r2, #3
    100e:	d8ef      	bhi.n	ff0 <strncmp+0x34>
    1010:	781d      	ldrb	r5, [r3, #0]
    1012:	7808      	ldrb	r0, [r1, #0]
    1014:	3a01      	subs	r2, #1
    1016:	4285      	cmp	r5, r0
    1018:	d115      	bne.n	1046 <strncmp+0x8a>
    101a:	2a00      	cmp	r2, #0
    101c:	d011      	beq.n	1042 <strncmp+0x86>
    101e:	2d00      	cmp	r5, #0
    1020:	d104      	bne.n	102c <strncmp+0x70>
    1022:	e00e      	b.n	1042 <strncmp+0x86>
    1024:	2c00      	cmp	r4, #0
    1026:	d00c      	beq.n	1042 <strncmp+0x86>
    1028:	2a00      	cmp	r2, #0
    102a:	d00a      	beq.n	1042 <strncmp+0x86>
    102c:	3301      	adds	r3, #1
    102e:	3101      	adds	r1, #1
    1030:	781c      	ldrb	r4, [r3, #0]
    1032:	7808      	ldrb	r0, [r1, #0]
    1034:	3a01      	subs	r2, #1
    1036:	4284      	cmp	r4, r0
    1038:	d0f4      	beq.n	1024 <strncmp+0x68>
    103a:	1a20      	subs	r0, r4, r0
    103c:	bc30      	pop	{r4, r5}
    103e:	bc02      	pop	{r1}
    1040:	4708      	bx	r1
    1042:	2000      	movs	r0, #0
    1044:	e7fa      	b.n	103c <strncmp+0x80>
    1046:	1c2c      	adds	r4, r5, #0
    1048:	1a20      	subs	r0, r4, r0
    104a:	e7f7      	b.n	103c <strncmp+0x80>
    104c:	fefefeff 	.word	0xfefefeff
    1050:	80808080 	.word	0x80808080

00001054 <_strtol_r>:
    1054:	b5f0      	push	{r4, r5, r6, r7, lr}
    1056:	464d      	mov	r5, r9
    1058:	4656      	mov	r6, sl
    105a:	465f      	mov	r7, fp
    105c:	4644      	mov	r4, r8
    105e:	b4f0      	push	{r4, r5, r6, r7}
    1060:	1c1e      	adds	r6, r3, #0
    1062:	4b58      	ldr	r3, [pc, #352]	; (11c4 <_strtol_r+0x170>)
    1064:	b085      	sub	sp, #20
    1066:	9102      	str	r1, [sp, #8]
    1068:	681d      	ldr	r5, [r3, #0]
    106a:	9003      	str	r0, [sp, #12]
    106c:	1c0b      	adds	r3, r1, #0
    106e:	4691      	mov	r9, r2
    1070:	2108      	movs	r1, #8
    1072:	e000      	b.n	1076 <_strtol_r+0x22>
    1074:	1c3b      	adds	r3, r7, #0
    1076:	781c      	ldrb	r4, [r3, #0]
    1078:	192a      	adds	r2, r5, r4
    107a:	7852      	ldrb	r2, [r2, #1]
    107c:	1c5f      	adds	r7, r3, #1
    107e:	4211      	tst	r1, r2
    1080:	d1f8      	bne.n	1074 <_strtol_r+0x20>
    1082:	2c2d      	cmp	r4, #45	; 0x2d
    1084:	d100      	bne.n	1088 <_strtol_r+0x34>
    1086:	e072      	b.n	116e <_strtol_r+0x11a>
    1088:	2200      	movs	r2, #0
    108a:	9201      	str	r2, [sp, #4]
    108c:	2c2b      	cmp	r4, #43	; 0x2b
    108e:	d100      	bne.n	1092 <_strtol_r+0x3e>
    1090:	e07f      	b.n	1192 <_strtol_r+0x13e>
    1092:	2310      	movs	r3, #16
    1094:	1c32      	adds	r2, r6, #0
    1096:	46b0      	mov	r8, r6
    1098:	439a      	bics	r2, r3
    109a:	d10a      	bne.n	10b2 <_strtol_r+0x5e>
    109c:	4273      	negs	r3, r6
    109e:	4173      	adcs	r3, r6
    10a0:	2c30      	cmp	r4, #48	; 0x30
    10a2:	d100      	bne.n	10a6 <_strtol_r+0x52>
    10a4:	e078      	b.n	1198 <_strtol_r+0x144>
    10a6:	2b00      	cmp	r3, #0
    10a8:	d100      	bne.n	10ac <_strtol_r+0x58>
    10aa:	e088      	b.n	11be <_strtol_r+0x16a>
    10ac:	230a      	movs	r3, #10
    10ae:	260a      	movs	r6, #10
    10b0:	4698      	mov	r8, r3
    10b2:	4a45      	ldr	r2, [pc, #276]	; (11c8 <_strtol_r+0x174>)
    10b4:	4694      	mov	ip, r2
    10b6:	9b01      	ldr	r3, [sp, #4]
    10b8:	4463      	add	r3, ip
    10ba:	1c18      	adds	r0, r3, #0
    10bc:	4641      	mov	r1, r8
    10be:	469a      	mov	sl, r3
    10c0:	f000 f96e 	bl	13a0 <____aeabi_uidivmod_from_thumb>
    10c4:	4650      	mov	r0, sl
    10c6:	468b      	mov	fp, r1
    10c8:	4641      	mov	r1, r8
    10ca:	f000 f973 	bl	13b4 <____aeabi_uidiv_from_thumb>
    10ce:	2204      	movs	r2, #4
    10d0:	4684      	mov	ip, r0
    10d2:	4692      	mov	sl, r2
    10d4:	1c32      	adds	r2, r6, #0
    10d6:	1c3b      	adds	r3, r7, #0
    10d8:	1c2e      	adds	r6, r5, #0
    10da:	2000      	movs	r0, #0
    10dc:	4665      	mov	r5, ip
    10de:	2100      	movs	r1, #0
    10e0:	4694      	mov	ip, r2
    10e2:	e012      	b.n	110a <_strtol_r+0xb6>
    10e4:	3c30      	subs	r4, #48	; 0x30
    10e6:	45a4      	cmp	ip, r4
    10e8:	dd1d      	ble.n	1126 <_strtol_r+0xd2>
    10ea:	2800      	cmp	r0, #0
    10ec:	db09      	blt.n	1102 <_strtol_r+0xae>
    10ee:	428d      	cmp	r5, r1
    10f0:	d307      	bcc.n	1102 <_strtol_r+0xae>
    10f2:	2201      	movs	r2, #1
    10f4:	455c      	cmp	r4, fp
    10f6:	dc00      	bgt.n	10fa <_strtol_r+0xa6>
    10f8:	2200      	movs	r2, #0
    10fa:	0612      	lsls	r2, r2, #24
    10fc:	d02c      	beq.n	1158 <_strtol_r+0x104>
    10fe:	42a9      	cmp	r1, r5
    1100:	d12a      	bne.n	1158 <_strtol_r+0x104>
    1102:	2001      	movs	r0, #1
    1104:	4240      	negs	r0, r0
    1106:	781c      	ldrb	r4, [r3, #0]
    1108:	3301      	adds	r3, #1
    110a:	4657      	mov	r7, sl
    110c:	1932      	adds	r2, r6, r4
    110e:	7852      	ldrb	r2, [r2, #1]
    1110:	4217      	tst	r7, r2
    1112:	d1e7      	bne.n	10e4 <_strtol_r+0x90>
    1114:	2703      	movs	r7, #3
    1116:	403a      	ands	r2, r7
    1118:	d005      	beq.n	1126 <_strtol_r+0xd2>
    111a:	2a01      	cmp	r2, #1
    111c:	d021      	beq.n	1162 <_strtol_r+0x10e>
    111e:	2257      	movs	r2, #87	; 0x57
    1120:	1aa4      	subs	r4, r4, r2
    1122:	45a4      	cmp	ip, r4
    1124:	dce1      	bgt.n	10ea <_strtol_r+0x96>
    1126:	1c42      	adds	r2, r0, #1
    1128:	d026      	beq.n	1178 <_strtol_r+0x124>
    112a:	9c01      	ldr	r4, [sp, #4]
    112c:	4262      	negs	r2, r4
    112e:	4051      	eors	r1, r2
    1130:	46a4      	mov	ip, r4
    1132:	464a      	mov	r2, r9
    1134:	4461      	add	r1, ip
    1136:	2a00      	cmp	r2, #0
    1138:	d039      	beq.n	11ae <_strtol_r+0x15a>
    113a:	2800      	cmp	r0, #0
    113c:	d114      	bne.n	1168 <_strtol_r+0x114>
    113e:	1c08      	adds	r0, r1, #0
    1140:	9b02      	ldr	r3, [sp, #8]
    1142:	464a      	mov	r2, r9
    1144:	6013      	str	r3, [r2, #0]
    1146:	b005      	add	sp, #20
    1148:	bc3c      	pop	{r2, r3, r4, r5}
    114a:	4690      	mov	r8, r2
    114c:	4699      	mov	r9, r3
    114e:	46a2      	mov	sl, r4
    1150:	46ab      	mov	fp, r5
    1152:	bcf0      	pop	{r4, r5, r6, r7}
    1154:	bc02      	pop	{r1}
    1156:	4708      	bx	r1
    1158:	4642      	mov	r2, r8
    115a:	434a      	muls	r2, r1
    115c:	2001      	movs	r0, #1
    115e:	18a1      	adds	r1, r4, r2
    1160:	e7d1      	b.n	1106 <_strtol_r+0xb2>
    1162:	2237      	movs	r2, #55	; 0x37
    1164:	1aa4      	subs	r4, r4, r2
    1166:	e7dc      	b.n	1122 <_strtol_r+0xce>
    1168:	1c08      	adds	r0, r1, #0
    116a:	3b01      	subs	r3, #1
    116c:	e7e9      	b.n	1142 <_strtol_r+0xee>
    116e:	1c9f      	adds	r7, r3, #2
    1170:	785c      	ldrb	r4, [r3, #1]
    1172:	2301      	movs	r3, #1
    1174:	9301      	str	r3, [sp, #4]
    1176:	e78c      	b.n	1092 <_strtol_r+0x3e>
    1178:	4913      	ldr	r1, [pc, #76]	; (11c8 <_strtol_r+0x174>)
    117a:	468c      	mov	ip, r1
    117c:	9a01      	ldr	r2, [sp, #4]
    117e:	4462      	add	r2, ip
    1180:	1c10      	adds	r0, r2, #0
    1182:	2222      	movs	r2, #34	; 0x22
    1184:	9903      	ldr	r1, [sp, #12]
    1186:	600a      	str	r2, [r1, #0]
    1188:	464a      	mov	r2, r9
    118a:	2a00      	cmp	r2, #0
    118c:	d0db      	beq.n	1146 <_strtol_r+0xf2>
    118e:	3b01      	subs	r3, #1
    1190:	e7d7      	b.n	1142 <_strtol_r+0xee>
    1192:	1c9f      	adds	r7, r3, #2
    1194:	785c      	ldrb	r4, [r3, #1]
    1196:	e77c      	b.n	1092 <_strtol_r+0x3e>
    1198:	2120      	movs	r1, #32
    119a:	783a      	ldrb	r2, [r7, #0]
    119c:	438a      	bics	r2, r1
    119e:	2a58      	cmp	r2, #88	; 0x58
    11a0:	d107      	bne.n	11b2 <_strtol_r+0x15e>
    11a2:	2310      	movs	r3, #16
    11a4:	787c      	ldrb	r4, [r7, #1]
    11a6:	4698      	mov	r8, r3
    11a8:	3702      	adds	r7, #2
    11aa:	2610      	movs	r6, #16
    11ac:	e781      	b.n	10b2 <_strtol_r+0x5e>
    11ae:	1c08      	adds	r0, r1, #0
    11b0:	e7c9      	b.n	1146 <_strtol_r+0xf2>
    11b2:	2b00      	cmp	r3, #0
    11b4:	d003      	beq.n	11be <_strtol_r+0x16a>
    11b6:	2308      	movs	r3, #8
    11b8:	2608      	movs	r6, #8
    11ba:	4698      	mov	r8, r3
    11bc:	e779      	b.n	10b2 <_strtol_r+0x5e>
    11be:	46b0      	mov	r8, r6
    11c0:	e777      	b.n	10b2 <_strtol_r+0x5e>
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	40000000 	.word	0x40000000
    11c8:	7fffffff 	.word	0x7fffffff

000011cc <strtol>:
    11cc:	b538      	push	{r3, r4, r5, lr}
    11ce:	1c05      	adds	r5, r0, #0
    11d0:	1c0c      	adds	r4, r1, #0
    11d2:	1c13      	adds	r3, r2, #0
    11d4:	4a04      	ldr	r2, [pc, #16]	; (11e8 <strtol+0x1c>)
    11d6:	1c29      	adds	r1, r5, #0
    11d8:	6810      	ldr	r0, [r2, #0]
    11da:	1c22      	adds	r2, r4, #0
    11dc:	f7ff ff3a 	bl	1054 <_strtol_r>
    11e0:	bc38      	pop	{r3, r4, r5}
    11e2:	bc02      	pop	{r1}
    11e4:	4708      	bx	r1
    11e6:	46c0      	nop			; (mov r8, r8)
    11e8:	40000430 	.word	0x40000430

000011ec <__utoa>:
    11ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    11ee:	4657      	mov	r7, sl
    11f0:	4645      	mov	r5, r8
    11f2:	464e      	mov	r6, r9
    11f4:	b4e0      	push	{r5, r6, r7}
    11f6:	b08a      	sub	sp, #40	; 0x28
    11f8:	4690      	mov	r8, r2
    11fa:	466a      	mov	r2, sp
    11fc:	4b1e      	ldr	r3, [pc, #120]	; (1278 <__utoa+0x8c>)
    11fe:	1c0d      	adds	r5, r1, #0
    1200:	1c06      	adds	r6, r0, #0
    1202:	cb13      	ldmia	r3!, {r0, r1, r4}
    1204:	c213      	stmia	r2!, {r0, r1, r4}
    1206:	cb13      	ldmia	r3!, {r0, r1, r4}
    1208:	c213      	stmia	r2!, {r0, r1, r4}
    120a:	cb13      	ldmia	r3!, {r0, r1, r4}
    120c:	c213      	stmia	r2!, {r0, r1, r4}
    120e:	781b      	ldrb	r3, [r3, #0]
    1210:	7013      	strb	r3, [r2, #0]
    1212:	4643      	mov	r3, r8
    1214:	3b02      	subs	r3, #2
    1216:	46ea      	mov	sl, sp
    1218:	1c2f      	adds	r7, r5, #0
    121a:	2400      	movs	r4, #0
    121c:	2b22      	cmp	r3, #34	; 0x22
    121e:	d901      	bls.n	1224 <__utoa+0x38>
    1220:	e026      	b.n	1270 <__utoa+0x84>
    1222:	464c      	mov	r4, r9
    1224:	1c63      	adds	r3, r4, #1
    1226:	1c30      	adds	r0, r6, #0
    1228:	4641      	mov	r1, r8
    122a:	4699      	mov	r9, r3
    122c:	f000 f8b8 	bl	13a0 <____aeabi_uidivmod_from_thumb>
    1230:	4653      	mov	r3, sl
    1232:	5c5b      	ldrb	r3, [r3, r1]
    1234:	1c30      	adds	r0, r6, #0
    1236:	703b      	strb	r3, [r7, #0]
    1238:	4641      	mov	r1, r8
    123a:	f000 f8bb 	bl	13b4 <____aeabi_uidiv_from_thumb>
    123e:	3701      	adds	r7, #1
    1240:	1e06      	subs	r6, r0, #0
    1242:	d1ee      	bne.n	1222 <__utoa+0x36>
    1244:	464b      	mov	r3, r9
    1246:	54e8      	strb	r0, [r5, r3]
    1248:	2300      	movs	r3, #0
    124a:	2c00      	cmp	r4, #0
    124c:	d007      	beq.n	125e <__utoa+0x72>
    124e:	5cea      	ldrb	r2, [r5, r3]
    1250:	5d29      	ldrb	r1, [r5, r4]
    1252:	54e9      	strb	r1, [r5, r3]
    1254:	552a      	strb	r2, [r5, r4]
    1256:	3301      	adds	r3, #1
    1258:	3c01      	subs	r4, #1
    125a:	42a3      	cmp	r3, r4
    125c:	dbf7      	blt.n	124e <__utoa+0x62>
    125e:	1c28      	adds	r0, r5, #0
    1260:	b00a      	add	sp, #40	; 0x28
    1262:	bc1c      	pop	{r2, r3, r4}
    1264:	4690      	mov	r8, r2
    1266:	4699      	mov	r9, r3
    1268:	46a2      	mov	sl, r4
    126a:	bcf0      	pop	{r4, r5, r6, r7}
    126c:	bc02      	pop	{r1}
    126e:	4708      	bx	r1
    1270:	702c      	strb	r4, [r5, #0]
    1272:	2000      	movs	r0, #0
    1274:	e7f4      	b.n	1260 <__utoa+0x74>
    1276:	46c0      	nop			; (mov r8, r8)
    1278:	00001498 	.word	0x00001498

0000127c <__aeabi_uidiv>:
    127c:	e2512001 	subs	r2, r1, #1
    1280:	012fff1e 	bxeq	lr
    1284:	3a000036 	bcc	1364 <__aeabi_uidiv+0xe8>
    1288:	e1500001 	cmp	r0, r1
    128c:	9a000022 	bls	131c <__aeabi_uidiv+0xa0>
    1290:	e1110002 	tst	r1, r2
    1294:	0a000023 	beq	1328 <__aeabi_uidiv+0xac>
    1298:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    129c:	01a01181 	lsleq	r1, r1, #3
    12a0:	03a03008 	moveq	r3, #8
    12a4:	13a03001 	movne	r3, #1
    12a8:	e3510201 	cmp	r1, #268435456	; 0x10000000
    12ac:	31510000 	cmpcc	r1, r0
    12b0:	31a01201 	lslcc	r1, r1, #4
    12b4:	31a03203 	lslcc	r3, r3, #4
    12b8:	3afffffa 	bcc	12a8 <__aeabi_uidiv+0x2c>
    12bc:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    12c0:	31510000 	cmpcc	r1, r0
    12c4:	31a01081 	lslcc	r1, r1, #1
    12c8:	31a03083 	lslcc	r3, r3, #1
    12cc:	3afffffa 	bcc	12bc <__aeabi_uidiv+0x40>
    12d0:	e3a02000 	mov	r2, #0
    12d4:	e1500001 	cmp	r0, r1
    12d8:	20400001 	subcs	r0, r0, r1
    12dc:	21822003 	orrcs	r2, r2, r3
    12e0:	e15000a1 	cmp	r0, r1, lsr #1
    12e4:	204000a1 	subcs	r0, r0, r1, lsr #1
    12e8:	218220a3 	orrcs	r2, r2, r3, lsr #1
    12ec:	e1500121 	cmp	r0, r1, lsr #2
    12f0:	20400121 	subcs	r0, r0, r1, lsr #2
    12f4:	21822123 	orrcs	r2, r2, r3, lsr #2
    12f8:	e15001a1 	cmp	r0, r1, lsr #3
    12fc:	204001a1 	subcs	r0, r0, r1, lsr #3
    1300:	218221a3 	orrcs	r2, r2, r3, lsr #3
    1304:	e3500000 	cmp	r0, #0
    1308:	11b03223 	lsrsne	r3, r3, #4
    130c:	11a01221 	lsrne	r1, r1, #4
    1310:	1affffef 	bne	12d4 <__aeabi_uidiv+0x58>
    1314:	e1a00002 	mov	r0, r2
    1318:	e12fff1e 	bx	lr
    131c:	03a00001 	moveq	r0, #1
    1320:	13a00000 	movne	r0, #0
    1324:	e12fff1e 	bx	lr
    1328:	e3510801 	cmp	r1, #65536	; 0x10000
    132c:	21a01821 	lsrcs	r1, r1, #16
    1330:	23a02010 	movcs	r2, #16
    1334:	33a02000 	movcc	r2, #0
    1338:	e3510c01 	cmp	r1, #256	; 0x100
    133c:	21a01421 	lsrcs	r1, r1, #8
    1340:	22822008 	addcs	r2, r2, #8
    1344:	e3510010 	cmp	r1, #16
    1348:	21a01221 	lsrcs	r1, r1, #4
    134c:	22822004 	addcs	r2, r2, #4
    1350:	e3510004 	cmp	r1, #4
    1354:	82822003 	addhi	r2, r2, #3
    1358:	908220a1 	addls	r2, r2, r1, lsr #1
    135c:	e1a00230 	lsr	r0, r0, r2
    1360:	e12fff1e 	bx	lr
    1364:	e12fff1f 	bx	pc
    1368:	e1a00000 	nop			; (mov r0, r0)
    136c:	e3500000 	cmp	r0, #0
    1370:	13e00000 	mvnne	r0, #0
    1374:	ea00000b 	b	13a8 <____aeabi_idiv0_from_arm>

00001378 <__aeabi_uidivmod>:
    1378:	e3510000 	cmp	r1, #0
    137c:	0afffff8 	beq	1364 <__aeabi_uidiv+0xe8>
    1380:	e92d4003 	push	{r0, r1, lr}
    1384:	ebffffbc 	bl	127c <__aeabi_uidiv>
    1388:	e8bd4006 	pop	{r1, r2, lr}
    138c:	e0030092 	mul	r3, r2, r0
    1390:	e0411003 	sub	r1, r1, r3
    1394:	e12fff1e 	bx	lr

00001398 <__aeabi_idiv0>:
    1398:	4770      	bx	lr
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	0000      	movs	r0, r0
	...

000013a0 <____aeabi_uidivmod_from_thumb>:
    13a0:	4778      	bx	pc
    13a2:	46c0      	nop			; (mov r8, r8)
    13a4:	eafffff3 	b	1378 <__aeabi_uidivmod>

000013a8 <____aeabi_idiv0_from_arm>:
    13a8:	e59fc000 	ldr	ip, [pc]	; 13b0 <____aeabi_idiv0_from_arm+0x8>
    13ac:	e12fff1c 	bx	ip
    13b0:	00001399 	.word	0x00001399

000013b4 <____aeabi_uidiv_from_thumb>:
    13b4:	4778      	bx	pc
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	eaffffaf 	b	127c <__aeabi_uidiv>
    13bc:	00000000 	andeq	r0, r0, r0

000013c0 <help_msg>:
    13c0:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
    13d0:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
    13e0:	20202020 72617473 202d2074 72617473         start - star
    13f0:	656d2074 72757361 6e656d65 200a7374     t measurements. 
    1400:	73202020 20706f74 6966202d 6873696e        stop - finish
    1410:	61656d20 65727573 746e656d 20200a73      measurements.  
    1420:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
    1430:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
    1440:	75746573 0a000a70 2043504c 74696e69     setup...LPC init
    1450:	696c6169 0a64657a 61747300 0a007472     ialized..start..
    1460:	72617453 0a646574 6f747300 530a0070     Started..stop..S
    1470:	70706f74 000a6465 00746573 0a4b4f0a     topped..set..OK.
    1480:	6c656800 4f0a0070 75707475 6f762074     .help..Output vo
    1490:	6761746c 00203a65 33323130 37363534     ltage: .01234567
    14a0:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
    14b0:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....

000014c0 <_ctype_>:
    14c0:	20202000 20202020 28282020 20282828     .         ((((( 
    14d0:	20202020 20202020 20202020 20202020                     
    14e0:	10108820 10101010 10101010 10101010      ...............
    14f0:	04040410 04040404 10040404 10101010     ................
    1500:	41411010 41414141 01010101 01010101     ..AAAAAA........
    1510:	01010101 01010101 01010101 10101010     ................
    1520:	42421010 42424242 02020202 02020202     ..BBBBBB........
    1530:	02020202 02020202 02020202 10101010     ................
    1540:	00000020 00000000 00000000 00000000      ...............
	...
    15c4:	00000043                                C...
