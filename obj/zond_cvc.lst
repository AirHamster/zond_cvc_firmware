
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001520  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000434  40000000  00001520  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  40000434  00001954  00020434  2**1
                  ALLOC
  3 .stack        00000a10  40000578  40000578  00020434  2**2
                  CONTENTS
  4 .usbram       00000000  7fd00000  7fd00000  00020e44  2**0
                  CONTENTS
  5 .etherram     00000000  7fe00000  7fe00000  00020e44  2**0
                  CONTENTS
  6 .batteryram   00000000  e0084000  e0084000  00020e44  2**0
                  CONTENTS
  7 .comment      00000070  00000000  00000000  00020e44  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 0000002e  00000000  00000000  00020eb4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000001f0  00000000  00000000  00020ee8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000034a3  00000000  00000000  000210d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ea2  00000000  00000000  0002457b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000ea7  00000000  00000000  0002541d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000004d8  00000000  00000000  000262c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000b18  00000000  00000000  0002679c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000108d  00000000  00000000  000272b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000078  00000000  00000000  00028348  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, =trap		@ Undef entry
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =swi_handler	@ SWI entry
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, =trap		@ PAbt entry
       c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =trap		@ DAbt entry
      10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
      14:	00000000 	.word	0x00000000
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
	LDR     PC, =fiq_handler	@ FIQ entry
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
      20:	00000300 	.word	0x00000300
	LDR	PC, =trap		@ Undef entry
      24:	0000038c 	.word	0x0000038c
	LDR	PC, =swi_handler	@ SWI entry
      28:	000003fc 	.word	0x000003fc
	LDR	PC, =trap		@ PAbt entry
	LDR	PC, =trap		@ DAbt entry
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      2c:	000003ac 	.word	0x000003ac
	LDR     PC, =fiq_handler	@ FIQ entry
      30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
     304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
     308:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
     30c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
     310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
     314:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
     318:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
     31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
     320:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
     324:	e2400010 	sub	r0, r0, #16

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
     328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
     32c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
     330:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
     334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
     338:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
     33c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
     340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
     344:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
     348:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
	LDR	R2, =_sdata
     350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
	LDR	R3, =_edata
     354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
1:	CMP	R2, R3
     358:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
     35c:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
     360:	34820004 	strcc	r0, [r2], #4
	BLO	1b
     364:	3afffffb 	bcc	358 <reset_handler+0x58>

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
     368:	e3a00000 	mov	r0, #0
	LDR	R1, =_sbss
     36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
	LDR	R2, =_ebss
     370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
3:	CMP	R1, R2
     374:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
     378:	34810004 	strcc	r0, [r1], #4
	BLO	3b
     37c:	3afffffc 	bcc	374 <reset_handler+0x74>

@ Start main()
.extern main
	LDR	R0, =main
     380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
	MOV	LR, PC
     384:	e1a0e00f 	mov	lr, pc
	BX	R0
     388:	e12fff10 	bx	r0

0000038c <trap>:

@ Trap (infinite loop)
trap:
	B	trap
     38c:	eafffffe 	b	38c <trap>
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     390:	40000f88 	.word	0x40000f88
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
	MOV	SP, R0
	SUB	SL, SP, #USR_Stack_Size

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     394:	00001520 	.word	0x00001520
	LDR	R2, =_sdata
     398:	40000000 	.word	0x40000000
	LDR	R3, =_edata
     39c:	40000434 	.word	0x40000434
	STRLO	R0, [R2], #4
	BLO	1b

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
	LDR	R1, =_sbss
     3a0:	40000434 	.word	0x40000434
	LDR	R2, =_ebss
     3a4:	40000578 	.word	0x40000578
	STRLO	R0, [R1], #4
	BLO	3b

@ Start main()
.extern main
	LDR	R0, =main
     3a8:	000007cd 	.word	0x000007cd

000003ac <irq_handler>:
.equ VIC_VectAddr0,	0x100
.equ VIC_VectPriority0,	0x200
.equ VIC_VectAddr,	0xF00

irq_handler:
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
     3ac:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
     3b0:	e92d4000 	stmfd	sp!, {lr}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
     3b4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
	LDR	R0, [R0, #VIC_VectAddr]
     3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
	MSR	CPSR_c, #M_SVC		@ Enter SVC mode and enable Irq and Fiq
     3c4:	e321f013 	msr	CPSR_c, #19

	STMFD	SP!, {LR}		@ Call the ISR
     3c8:	e92d4000 	stmfd	sp!, {lr}
	MOV	LR, PC
     3cc:	e1a0e00f 	mov	lr, pc
	BX	R0
     3d0:	e12fff10 	bx	r0
	LDMIA	SP!, {LR}
     3d4:	e8bd4000 	ldmfd	sp!, {lr}

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
     3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMIA	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
     3e0:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
	STR	LR, [LR, #VIC_VectAddr]
     3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMIA	SP!, {PC}^		@ Reruen from the IRQ handler
     3ec:	e8fd8000 	ldm	sp!, {pc}^
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
	STMFD	SP!, {LR}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
@ FIQ Handler
@ FIQ routine is typically written in assembler
@-----------------------------------------------------------@

fiq_handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq
     3f4:	e24ee004 	sub	lr, lr, #4

	@ Put the FIQ service here

	MOVS	PC, LR			@ Return from FIQ
     3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
@-----------------------------------------------------------@
@ SWI Service (declared in interrupt.h)
@-----------------------------------------------------------@

swi_handler:
	MRS	IP, SPSR
     3fc:	e14fc000 	mrs	ip, SPSR
	TST	IP, #B_Thumb		@ Check caller's state, ARM or Thumb
     400:	e31c0020 	tst	ip, #32
	LDRNEH	IP, [LR, #-2]		@ Get swi instruction code (on Thumb state)
     404:	115ec0b2 	ldrhne	ip, [lr, #-2]
	LDREQ	IP, [LR, #-4]		@ Get swi instruction code (on ARM state)
     408:	051ec004 	ldreq	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
     40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #7			@ Check range
     410:	e35c0007 	cmp	ip, #7
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump to each service function when code is valid
     414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
     418:	e1b0f00e 	movs	pc, lr
     41c:	00000438 	.word	0x00000438
     420:	00000448 	.word	0x00000448
     424:	00000458 	.word	0x00000458
     428:	0000047c 	.word	0x0000047c
     42c:	000004b4 	.word	0x000004b4
     430:	000004d4 	.word	0x000004d4
     434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
	.word	sel_fiq		@ 4 Select FIQ interrupt
	.word	load_fiq	@ 5 Load FIQ shadow regs from memory
	.word	store_fiq	@ 6 Store FIQ shadow regs to memory

irq_disable:
	MRS	R0, SPSR
     438:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq | B_Fiq
     43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     440:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:

irq_enable:
	MRS	R0, SPSR
     448:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq | B_Fiq
     44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     450:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
	MVN	R0, #0				@ Disable all interrupts
     45c:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
     460:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
     464:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
     468:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
     46c:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
     470:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_VectAddr]		@ Issule EOI command
     474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
     478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:

reg_irq:
	CMP	R0, #32				@ Range check
     47c:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     480:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
     488:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
     490:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
     494:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     498:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
     49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
	LDR	R2, [IP, #VIC_IntSelect]	@ Clear corresponding bit in the VICIntSelect
     4a0:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
     4a4:	e1c22001 	bic	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
     4a8:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4ac:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:

sel_fiq:
	CMP	R0, #32				@ Range check
     4b4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     4b8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =LPC_BASE_VIC
     4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
	MOV	R1, #1				@ Set corresponding bit in the VICIntSelect
     4c0:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     4c4:	e1a01011 	lsl	r1, r1, r0
	STR	R1, [IP, #VIC_IntSelect]
     4c8:	e58c100c 	str	r1, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4cc:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:

load_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMIA	R0!, {R8-R12}			@ Load the memory to five shadow registers
     4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4dc:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:

store_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
	STMIA	R0!, {R8-R12}			@ Store five shadow registers to the memory
     4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4ec:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4f0:	e1b0f00e 	movs	pc, lr
	BIC	R0, R0, #B_Irq | B_Fiq
	MSR	SPSR_c, R0
	MOVS	PC, LR

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     4f4:	fffff000 	.word	0xfffff000
	MOVS	PC, LR

reg_irq:
	CMP	R0, #32				@ Range check
	MOVCSS	PC, LR
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     4f8:	fffff100 	.word	0xfffff100
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
@ void Copy_un2al (DWORD *dst, const BYTE *src, int count);
.global Copy_un2al
.type Copy_un2al, %function
.func Copy_un2al
Copy_un2al:
	STMFD	SP!, {R4-R8}
     500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
     504:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
     508:	0a000012 	beq	558 <lb_align>

	BIC	R1, #3
     50c:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
     510:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     514:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
     518:	e8b10080 	ldm	r1!, {r7}
1:	MOV	R3, R7
     51c:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
     524:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
     528:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
     52c:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
     530:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
     534:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
     538:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
     53c:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
     540:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
     544:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	1b
     54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
	LDMFD	SP!, {R4-R8}
     550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     554:	e12fff1e 	bx	lr

00000558 <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
     558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
     55c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
     564:	1afffffb 	bne	558 <lb_align>
	LDMFD	SP!, {R4-R8}
     568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
@ void Copy_al2un (BYTE *dst, const DWORD *src, int count);
.global Copy_al2un
.type Copy_al2un, %function
.func Copy_al2un
Copy_al2un:
	STMFD	SP!, {R4-R8}
     570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
     574:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
     578:	0a000021 	beq	604 <sb_align>

	MOV	IP, IP, LSL #3
     57c:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     580:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
     584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
1:	STRB	R4, [R0], #1
     588:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
     58c:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
     590:	e3100003 	tst	r0, #3
	BNE	1b
     594:	1afffffb 	bne	588 <Copy_al2un+0x18>
	ORR	R4, R4, R5, LSL IP
     598:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     59c:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5a4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5ac:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
     5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}

2:	MOV	R3, R7
     5b4:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
     5bc:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
     5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
     5c4:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
     5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     5cc:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5d4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5dc:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	2b
     5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>

	MOV	R7, R7, LSR R8
     5e8:	e1a07837 	lsr	r7, r7, r8
3:	SUBS	IP, IP, #8
     5ec:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
     5f0:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
     5f4:	e1a07427 	lsr	r7, r7, #8
	BNE	3b
     5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>

	LDMFD	SP!, {R4-R8}
     5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     600:	e12fff1e 	bx	lr

00000604 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
     604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
     608:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
     610:	1afffffb 	bne	604 <sb_align>
	LDMFD	SP!, {R4-R8}
     614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     618:	e12fff1e 	bx	lr

0000061c <gpio_init>:
#include "timers.h"
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
     61c:	2101      	movs	r1, #1
     61e:	4a0e      	ldr	r2, [pc, #56]	; (658 <gpio_init+0x3c>)
     620:	6813      	ldr	r3, [r2, #0]
     622:	430b      	orrs	r3, r1
     624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
     626:	2200      	movs	r2, #0
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     628:	2003      	movs	r0, #3
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62a:	4b0c      	ldr	r3, [pc, #48]	; (65c <gpio_init+0x40>)
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     62c:	490c      	ldr	r1, [pc, #48]	; (660 <gpio_init+0x44>)
#include "adc_dac.h"

void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62e:	601a      	str	r2, [r3, #0]
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     630:	680b      	ldr	r3, [r1, #0]
     632:	4303      	orrs	r3, r0
     634:	600b      	str	r3, [r1, #0]

	/* FIO1MASK = 0xFFFFFFFF & (0 << DAC) | (0 << ADC); */
	FIO1MASK = 0;
     636:	4b0b      	ldr	r3, [pc, #44]	; (664 <gpio_init+0x48>)
     638:	601a      	str	r2, [r3, #0]
	FIO1DIR |=  (1 << DAC) | (1 << ADC) | (1 << ADC_DIN) | (1 << ADC_SCLK);	/*  Slave select pins  */
     63a:	4b0b      	ldr	r3, [pc, #44]	; (668 <gpio_init+0x4c>)
     63c:	490b      	ldr	r1, [pc, #44]	; (66c <gpio_init+0x50>)
     63e:	681a      	ldr	r2, [r3, #0]
     640:	430a      	orrs	r2, r1
     642:	601a      	str	r2, [r3, #0]
	FIO1DIR &= ~(1 << ADC_DOUT);
     644:	4a0a      	ldr	r2, [pc, #40]	; (670 <gpio_init+0x54>)
     646:	6819      	ldr	r1, [r3, #0]
     648:	400a      	ands	r2, r1
     64a:	601a      	str	r2, [r3, #0]
	/* FIO1DIR |=  (1 << DAC) | (1 << ADC);[> 	Slave select pins  <] */
	FIO1SET |= (1 << ADC) | (1 << DAC) | (1 << ADC_SCLK);	 /*  Set hight level  */
     64c:	4a09      	ldr	r2, [pc, #36]	; (674 <gpio_init+0x58>)
     64e:	490a      	ldr	r1, [pc, #40]	; (678 <gpio_init+0x5c>)
     650:	6813      	ldr	r3, [r2, #0]
     652:	430b      	orrs	r3, r1
     654:	6013      	str	r3, [r2, #0]
}
     656:	4770      	bx	lr
     658:	e01fc1a0 	.word	0xe01fc1a0
     65c:	3fffc050 	.word	0x3fffc050
     660:	3fffc040 	.word	0x3fffc040
     664:	3fffc030 	.word	0x3fffc030
     668:	3fffc020 	.word	0x3fffc020
     66c:	21140000 	.word	0x21140000
     670:	ff7fffff 	.word	0xff7fffff
     674:	3fffc038 	.word	0x3fffc038
     678:	20140000 	.word	0x20140000

0000067c <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
     67c:	2201      	movs	r2, #1
     67e:	4082      	lsls	r2, r0
     680:	1c10      	adds	r0, r2, #0
     682:	4902      	ldr	r1, [pc, #8]	; (68c <led_set+0x10>)
     684:	680b      	ldr	r3, [r1, #0]
     686:	4318      	orrs	r0, r3
     688:	6008      	str	r0, [r1, #0]
}
     68a:	4770      	bx	lr
     68c:	3fffc058 	.word	0x3fffc058

00000690 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
     690:	2201      	movs	r2, #1
     692:	4082      	lsls	r2, r0
     694:	1c10      	adds	r0, r2, #0
     696:	4902      	ldr	r1, [pc, #8]	; (6a0 <led_clear+0x10>)
     698:	680b      	ldr	r3, [r1, #0]
     69a:	4318      	orrs	r0, r3
     69c:	6008      	str	r0, [r1, #0]
}
     69e:	4770      	bx	lr
     6a0:	3fffc05c 	.word	0x3fffc05c

000006a4 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
     6a4:	b510      	push	{r4, lr}
	switch (port)
     6a6:	2801      	cmp	r0, #1
     6a8:	d00f      	beq.n	6ca <gpio_set+0x26>
     6aa:	2800      	cmp	r0, #0
     6ac:	d009      	beq.n	6c2 <gpio_set+0x1e>
     6ae:	2802      	cmp	r0, #2
     6b0:	d110      	bne.n	6d4 <gpio_set+0x30>
			break;
		case 1:
			FIO1SET |= (1 << pin);
			break;
		case 2:
			FIO2SET |= (1 << pin);
     6b2:	2201      	movs	r2, #1
     6b4:	408a      	lsls	r2, r1
     6b6:	1c10      	adds	r0, r2, #0
     6b8:	4c08      	ldr	r4, [pc, #32]	; (6dc <gpio_set+0x38>)
     6ba:	6823      	ldr	r3, [r4, #0]
     6bc:	4318      	orrs	r0, r3
     6be:	6020      	str	r0, [r4, #0]
			break;
     6c0:	e008      	b.n	6d4 <gpio_set+0x30>
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0SET |= (1 << pin);
     6c2:	4a07      	ldr	r2, [pc, #28]	; (6e0 <gpio_set+0x3c>)
     6c4:	2001      	movs	r0, #1
     6c6:	6813      	ldr	r3, [r2, #0]
     6c8:	e001      	b.n	6ce <gpio_set+0x2a>
			break;
		case 1:
			FIO1SET |= (1 << pin);
     6ca:	4a06      	ldr	r2, [pc, #24]	; (6e4 <gpio_set+0x40>)
     6cc:	6813      	ldr	r3, [r2, #0]
     6ce:	4088      	lsls	r0, r1
     6d0:	4318      	orrs	r0, r3
     6d2:	6010      	str	r0, [r2, #0]
			FIO2SET |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6d4:	bc10      	pop	{r4}
     6d6:	bc01      	pop	{r0}
     6d8:	4700      	bx	r0
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	3fffc058 	.word	0x3fffc058
     6e0:	3fffc018 	.word	0x3fffc018
     6e4:	3fffc038 	.word	0x3fffc038

000006e8 <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
     6e8:	b510      	push	{r4, lr}
	switch (port)
     6ea:	2801      	cmp	r0, #1
     6ec:	d00f      	beq.n	70e <gpio_clear+0x26>
     6ee:	2800      	cmp	r0, #0
     6f0:	d009      	beq.n	706 <gpio_clear+0x1e>
     6f2:	2802      	cmp	r0, #2
     6f4:	d110      	bne.n	718 <gpio_clear+0x30>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
			break;
		case 2:
			FIO2CLR |= (1 << pin);
     6f6:	2201      	movs	r2, #1
     6f8:	408a      	lsls	r2, r1
     6fa:	1c10      	adds	r0, r2, #0
     6fc:	4c08      	ldr	r4, [pc, #32]	; (720 <gpio_clear+0x38>)
     6fe:	6823      	ldr	r3, [r4, #0]
     700:	4318      	orrs	r0, r3
     702:	6020      	str	r0, [r4, #0]
			break;
     704:	e008      	b.n	718 <gpio_clear+0x30>
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0CLR |= (1 << pin);
     706:	4a07      	ldr	r2, [pc, #28]	; (724 <gpio_clear+0x3c>)
     708:	2001      	movs	r0, #1
     70a:	6813      	ldr	r3, [r2, #0]
     70c:	e001      	b.n	712 <gpio_clear+0x2a>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
     70e:	4a06      	ldr	r2, [pc, #24]	; (728 <gpio_clear+0x40>)
     710:	6813      	ldr	r3, [r2, #0]
     712:	4088      	lsls	r0, r1
     714:	4318      	orrs	r0, r3
     716:	6010      	str	r0, [r2, #0]
			FIO2CLR |= (1 << pin);
			break;
		default:
			break;	
	}
}
     718:	bc10      	pop	{r4}
     71a:	bc01      	pop	{r0}
     71c:	4700      	bx	r0
     71e:	46c0      	nop			; (mov r8, r8)
     720:	3fffc05c 	.word	0x3fffc05c
     724:	3fffc01c 	.word	0x3fffc01c
     728:	3fffc03c 	.word	0x3fffc03c

0000072c <pll_init>:
void pll_init(void)
{
	// 1. Init OSC
	SCS = (1 << 5);
     72c:	2220      	movs	r2, #32
     72e:	4b1d      	ldr	r3, [pc, #116]	; (7a4 <pll_init+0x78>)
		default:
			break;	
	}
}
void pll_init(void)
{
     730:	b570      	push	{r4, r5, r6, lr}
	// 1. Init OSC
	SCS = (1 << 5);
     732:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
     734:	681a      	ldr	r2, [r3, #0]
     736:	0652      	lsls	r2, r2, #25
     738:	d5fc      	bpl.n	734 <pll_init+0x8>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     73a:	20aa      	movs	r0, #170	; 0xaa
	PLLFEED = 0x55;
     73c:	2155      	movs	r1, #85	; 0x55
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     73e:	2501      	movs	r5, #1
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
     740:	2400      	movs	r4, #0
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     742:	4b19      	ldr	r3, [pc, #100]	; (7a8 <pll_init+0x7c>)
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     744:	4a19      	ldr	r2, [pc, #100]	; (7ac <pll_init+0x80>)
     746:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
     748:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     74a:	6019      	str	r1, [r3, #0]
	// 4. Disable PLL
	PLLCON = 0;
     74c:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     74e:	4c18      	ldr	r4, [pc, #96]	; (7b0 <pll_init+0x84>)
	PLLCON = 1; 
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
     750:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     752:	4e18      	ldr	r6, [pc, #96]	; (7b4 <pll_init+0x88>)
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
     754:	6019      	str	r1, [r3, #0]
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     756:	6025      	str	r5, [r4, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     758:	4c17      	ldr	r4, [pc, #92]	; (7b8 <pll_init+0x8c>)
     75a:	6026      	str	r6, [r4, #0]
	PLLFEED = 0xAA;
     75c:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     75e:	6019      	str	r1, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
     760:	6814      	ldr	r4, [r2, #0]
     762:	432c      	orrs	r4, r5
     764:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
     766:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     768:	6019      	str	r1, [r3, #0]
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     76a:	4914      	ldr	r1, [pc, #80]	; (7bc <pll_init+0x90>)
     76c:	6809      	ldr	r1, [r1, #0]
     76e:	0149      	lsls	r1, r1, #5
     770:	d5fb      	bpl.n	76a <pll_init+0x3e>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
     772:	2003      	movs	r0, #3
     774:	4912      	ldr	r1, [pc, #72]	; (7c0 <pll_init+0x94>)
     776:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
     778:	2000      	movs	r0, #0
     77a:	4912      	ldr	r1, [pc, #72]	; (7c4 <pll_init+0x98>)
     77c:	4c12      	ldr	r4, [pc, #72]	; (7c8 <pll_init+0x9c>)
     77e:	6008      	str	r0, [r1, #0]
     780:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
     782:	3004      	adds	r0, #4
     784:	6008      	str	r0, [r1, #0]

	// 10. Connect the PLL
	PLLCON |= 1 << 1;
     786:	6811      	ldr	r1, [r2, #0]
     788:	3802      	subs	r0, #2
     78a:	4301      	orrs	r1, r0
     78c:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     78e:	22aa      	movs	r2, #170	; 0xaa
     790:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
     792:	3a55      	subs	r2, #85	; 0x55
     794:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
     796:	f000 f82f 	bl	7f8 <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
     79a:	f000 f82b 	bl	7f4 <IrqEnable>

}
     79e:	bc70      	pop	{r4, r5, r6}
     7a0:	bc01      	pop	{r0}
     7a2:	4700      	bx	r0
     7a4:	e01fc1a0 	.word	0xe01fc1a0
     7a8:	e01fc08c 	.word	0xe01fc08c
     7ac:	e01fc080 	.word	0xe01fc080
     7b0:	e01fc10c 	.word	0xe01fc10c
     7b4:	00010017 	.word	0x00010017
     7b8:	e01fc084 	.word	0xe01fc084
     7bc:	e01fc088 	.word	0xe01fc088
     7c0:	e01fc104 	.word	0xe01fc104
     7c4:	e01fc1ac 	.word	0xe01fc1ac
     7c8:	e01fc1a8 	.word	0xe01fc1a8

000007cc <main>:


int main (void)
{
     7cc:	b508      	push	{r3, lr}
	uint16_t i, j, rise; 
	pll_init();
     7ce:	f7ff ffad 	bl	72c <pll_init>
	uart0_init();	
     7d2:	f000 f89d 	bl	910 <uart0_init>
	/* SPI0_init(); */
	timer0_init();
     7d6:	f000 fb9f 	bl	f18 <timer0_init>
	gpio_init();
     7da:	f7ff ff1f 	bl	61c <gpio_init>
	adc_init();
     7de:	f000 faa6 	bl	d2e <adc_init>
	UART0_send("\nLPC initialized\n", 17);
     7e2:	4802      	ldr	r0, [pc, #8]	; (7ec <main+0x20>)
     7e4:	2111      	movs	r1, #17
     7e6:	f000 f907 	bl	9f8 <UART0_send>
		/* led_set(LED2); */
		/* for (i = 0; i < 200; i++); */
		/* led_clear(LED2); */
		/* for (i = 0; i < 200; i++); */
		/* dac_set_voltage(0x0BE1); */
	}
     7ea:	e7fe      	b.n	7ea <main+0x1e>
     7ec:	000013c7 	.word	0x000013c7

000007f0 <IrqDisable>:


/* Disable/Enable Irq */
void IrqDisable (void)
{
	asm ("swi 0\n");
     7f0:	df00      	svc	0
}
     7f2:	4770      	bx	lr

000007f4 <IrqEnable>:

void IrqEnable (void)
{
	asm ("swi 1\n");
     7f4:	df01      	svc	1
}
     7f6:	4770      	bx	lr

000007f8 <ClearVector>:


/* Unregister all ISRs */
void ClearVector (void)
{
	asm ("swi 2\n");
     7f8:	df02      	svc	2
}
     7fa:	4770      	bx	lr

000007fc <RegisterIrq>:
	int irq,
	void(*isr)(void),
	int pri
)
{
	asm (
     7fc:	df03      	svc	3
	"@ MOV R0, %0\n"
	"@ MOV R1, %1\n"
	"@ MOV R2, %2\n"
	"swi 3\n" : : "r" (irq), "r" (isr), "r" (pri)
	);
}
     7fe:	4770      	bx	lr

00000800 <SelectFiq>:
/* Switch an interrtupt source as FIQ */
void SelectFiq (
	int irq
)
{
	asm (
     800:	df04      	svc	4
	"@ MOV R0, %0\n"
	"swi 4\n" : : "r" (irq)
	);
}
     802:	4770      	bx	lr

00000804 <LoadFiqRegs>:
/* Load shadow regs R8-R12 from memory */
void LoadFiqRegs (
	long *regs
)
{
	asm (
     804:	df05      	svc	5
	"@ MOV R0, %0\n"
	"swi 5\n" : : "r" (regs)
	);
}
     806:	4770      	bx	lr

00000808 <StoreFiqRegs>:
/* Store shadow regs R8-R12 to memory */
void StoreFiqRegs (
	long *regs
)
{
	asm (
     808:	df06      	svc	6
	"@ MOV R0, %0\n"
	"swi 6\n" : : "r" (regs)
	);
}
     80a:	4770      	bx	lr

0000080c <Isr_UART0>:
	uint16_t	ri, wi, ct;
	uint8_t		buff[UART0_RXB];
} RxBuff0;

void Isr_UART0 (void)
{
     80c:	b538      	push	{r3, r4, r5, lr}

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
     80e:	4b14      	ldr	r3, [pc, #80]	; (860 <Isr_UART0+0x54>)
     810:	681a      	ldr	r2, [r3, #0]
     812:	4b14      	ldr	r3, [pc, #80]	; (864 <Isr_UART0+0x58>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     814:	681b      	ldr	r3, [r3, #0]
     816:	061b      	lsls	r3, r3, #24
     818:	0e1b      	lsrs	r3, r3, #24

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
     81a:	07d2      	lsls	r2, r2, #31
     81c:	d510      	bpl.n	840 <Isr_UART0+0x34>
     81e:	4c12      	ldr	r4, [pc, #72]	; (868 <Isr_UART0+0x5c>)
     820:	4812      	ldr	r0, [pc, #72]	; (86c <Isr_UART0+0x60>)
	{	
		d = U0RBR;
		if (d == '\n')
     822:	2b0a      	cmp	r3, #10
     824:	d108      	bne.n	838 <Isr_UART0+0x2c>
		{
			resiever[rec_len++] = 0;	/* Make null-terminated string */
     826:	2500      	movs	r5, #0
     828:	7823      	ldrb	r3, [r4, #0]
     82a:	1c5a      	adds	r2, r3, #1
     82c:	7022      	strb	r2, [r4, #0]
     82e:	54c5      	strb	r5, [r0, r3]
			process_command(resiever);
     830:	f000 f904 	bl	a3c <process_command>
			rec_len = 0;
     834:	7025      	strb	r5, [r4, #0]
     836:	e00d      	b.n	854 <Isr_UART0+0x48>
		}else{
			resiever[rec_len++] = d;
     838:	7822      	ldrb	r2, [r4, #0]
     83a:	1c51      	adds	r1, r2, #1
     83c:	7021      	strb	r1, [r4, #0]
     83e:	5483      	strb	r3, [r0, r2]
		}
	}else{
		d = U0RBR;
	}
	if (d == 'L')
     840:	2b4c      	cmp	r3, #76	; 0x4c
     842:	d102      	bne.n	84a <Isr_UART0+0x3e>
	{
		FIO2SET = (1 << LED1) | (1 << LED2);
     844:	2203      	movs	r2, #3
     846:	4b0a      	ldr	r3, [pc, #40]	; (870 <Isr_UART0+0x64>)
     848:	e003      	b.n	852 <Isr_UART0+0x46>
	}else if (d == 'O')
     84a:	2b4f      	cmp	r3, #79	; 0x4f
     84c:	d102      	bne.n	854 <Isr_UART0+0x48>
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);
     84e:	2203      	movs	r2, #3
     850:	4b08      	ldr	r3, [pc, #32]	; (874 <Isr_UART0+0x68>)
     852:	601a      	str	r2, [r3, #0]

	}
	VICVectAddr = 0;
     854:	2200      	movs	r2, #0
     856:	4b08      	ldr	r3, [pc, #32]	; (878 <Isr_UART0+0x6c>)
     858:	601a      	str	r2, [r3, #0]

}
     85a:	bc38      	pop	{r3, r4, r5}
     85c:	bc01      	pop	{r0}
     85e:	4700      	bx	r0
     860:	e000c014 	.word	0xe000c014
     864:	e000c000 	.word	0xe000c000
     868:	40000434 	.word	0x40000434
     86c:	40000544 	.word	0x40000544
     870:	3fffc058 	.word	0x3fffc058
     874:	3fffc05c 	.word	0x3fffc05c
     878:	ffffff00 	.word	0xffffff00

0000087c <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
     87c:	4b01      	ldr	r3, [pc, #4]	; (884 <uart0_test+0x8>)
     87e:	88d8      	ldrh	r0, [r3, #6]
}
     880:	4770      	bx	lr
     882:	46c0      	nop			; (mov r8, r8)
     884:	40000434 	.word	0x40000434

00000888 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
     888:	4b0b      	ldr	r3, [pc, #44]	; (8b8 <uart0_getc+0x30>)
     88a:	88da      	ldrh	r2, [r3, #6]
     88c:	3302      	adds	r3, #2
     88e:	2a00      	cmp	r2, #0
     890:	d0fa      	beq.n	888 <uart0_getc>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
     892:	881a      	ldrh	r2, [r3, #0]
	d = RxBuff0.buff[i++];
     894:	1899      	adds	r1, r3, r2
     896:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
     898:	217f      	movs	r1, #127	; 0x7f

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
	d = RxBuff0.buff[i++];
     89a:	3201      	adds	r2, #1
	RxBuff0.ri = i % UART0_RXB;
     89c:	400a      	ands	r2, r1
     89e:	801a      	strh	r2, [r3, #0]
	U0IER = 0;		/* Disable interrupts */
     8a0:	2200      	movs	r2, #0
     8a2:	4906      	ldr	r1, [pc, #24]	; (8bc <uart0_getc+0x34>)
     8a4:	600a      	str	r2, [r1, #0]
	RxBuff0.ct--;
     8a6:	889a      	ldrh	r2, [r3, #4]
     8a8:	3a01      	subs	r2, #1
     8aa:	0412      	lsls	r2, r2, #16
     8ac:	0c12      	lsrs	r2, r2, #16
     8ae:	809a      	strh	r2, [r3, #4]
	U0IER = 0x07;	/* Reenable interrupt */
     8b0:	2307      	movs	r3, #7
     8b2:	600b      	str	r3, [r1, #0]

	return d;
}
     8b4:	4770      	bx	lr
     8b6:	46c0      	nop			; (mov r8, r8)
     8b8:	40000434 	.word	0x40000434
     8bc:	e000c004 	.word	0xe000c004

000008c0 <uart0_putc>:


void uart0_putc (uint8_t d)
{
     8c0:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
     8c2:	4b10      	ldr	r3, [pc, #64]	; (904 <uart0_putc+0x44>)
     8c4:	899a      	ldrh	r2, [r3, #12]
     8c6:	2a7f      	cmp	r2, #127	; 0x7f
     8c8:	d8fb      	bhi.n	8c2 <uart0_putc+0x2>

	U0IER = 0x05;		/* Disable Tx Interrupt */
     8ca:	2205      	movs	r2, #5
     8cc:	490e      	ldr	r1, [pc, #56]	; (908 <uart0_putc+0x48>)
     8ce:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
     8d0:	89da      	ldrh	r2, [r3, #14]
     8d2:	2a00      	cmp	r2, #0
     8d4:	d00c      	beq.n	8f0 <uart0_putc+0x30>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
     8d6:	895a      	ldrh	r2, [r3, #10]
		TxBuff0.buff[i++] = d;
     8d8:	189c      	adds	r4, r3, r2
     8da:	7420      	strb	r0, [r4, #16]
		TxBuff0.wi = i % UART0_TXB;
     8dc:	207f      	movs	r0, #127	; 0x7f
	while (TxBuff0.ct >= UART0_TXB) ;

	U0IER = 0x05;		/* Disable Tx Interrupt */
	if (TxBuff0.act) {
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
		TxBuff0.buff[i++] = d;
     8de:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
     8e0:	4002      	ands	r2, r0
     8e2:	815a      	strh	r2, [r3, #10]
		TxBuff0.ct++;
     8e4:	899a      	ldrh	r2, [r3, #12]
     8e6:	3201      	adds	r2, #1
     8e8:	0412      	lsls	r2, r2, #16
     8ea:	0c12      	lsrs	r2, r2, #16
     8ec:	819a      	strh	r2, [r3, #12]
     8ee:	e003      	b.n	8f8 <uart0_putc+0x38>
	} else {
		U0THR = d;		/* Trigger Tx sequense */
     8f0:	4a06      	ldr	r2, [pc, #24]	; (90c <uart0_putc+0x4c>)
     8f2:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
     8f4:	2201      	movs	r2, #1
     8f6:	81da      	strh	r2, [r3, #14]
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
     8f8:	2307      	movs	r3, #7
     8fa:	600b      	str	r3, [r1, #0]
}
     8fc:	bc10      	pop	{r4}
     8fe:	bc01      	pop	{r0}
     900:	4700      	bx	r0
     902:	46c0      	nop			; (mov r8, r8)
     904:	400004b4 	.word	0x400004b4
     908:	e000c004 	.word	0xe000c004
     90c:	e000c000 	.word	0xe000c000

00000910 <uart0_init>:


void uart0_init (void)
{
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     910:	2108      	movs	r1, #8
     912:	4a16      	ldr	r2, [pc, #88]	; (96c <uart0_init+0x5c>)
	U0IER = 0x07;		/* Reenable Tx Interrupt */
}


void uart0_init (void)
{
     914:	b508      	push	{r3, lr}
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     916:	6813      	ldr	r3, [r2, #0]
     918:	430b      	orrs	r3, r1
     91a:	6013      	str	r3, [r2, #0]
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     91c:	4b14      	ldr	r3, [pc, #80]	; (970 <uart0_init+0x60>)
     91e:	681a      	ldr	r2, [r3, #0]
     920:	317b      	adds	r1, #123	; 0x7b
     922:	430a      	orrs	r2, r1
     924:	601a      	str	r2, [r3, #0]
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     926:	4a13      	ldr	r2, [pc, #76]	; (974 <uart0_init+0x64>)
     928:	313e      	adds	r1, #62	; 0x3e
     92a:	6011      	str	r1, [r2, #0]
	U0DLL = 0x09;
     92c:	4a12      	ldr	r2, [pc, #72]	; (978 <uart0_init+0x68>)
     92e:	39b8      	subs	r1, #184	; 0xb8
     930:	6011      	str	r1, [r2, #0]
	U0DLM = 0x00;
     932:	2100      	movs	r1, #0
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     934:	2080      	movs	r0, #128	; 0x80
	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
	U0DLL = 0x09;
	U0DLM = 0x00;
     936:	4a11      	ldr	r2, [pc, #68]	; (97c <uart0_init+0x6c>)
     938:	6011      	str	r1, [r2, #0]
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     93a:	6819      	ldr	r1, [r3, #0]
     93c:	4381      	bics	r1, r0
     93e:	6019      	str	r1, [r3, #0]

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     940:	490f      	ldr	r1, [pc, #60]	; (980 <uart0_init+0x70>)
     942:	680b      	ldr	r3, [r1, #0]
     944:	3879      	subs	r0, #121	; 0x79
     946:	4303      	orrs	r3, r0
     948:	600b      	str	r3, [r1, #0]

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     94a:	490e      	ldr	r1, [pc, #56]	; (984 <uart0_init+0x74>)
     94c:	680b      	ldr	r3, [r1, #0]
     94e:	3049      	adds	r0, #73	; 0x49
     950:	4303      	orrs	r3, r0
     952:	600b      	str	r3, [r1, #0]

	//Interrupts
	/* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
	/* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
	U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
     954:	2101      	movs	r1, #1
     956:	6813      	ldr	r3, [r2, #0]
     958:	430b      	orrs	r3, r1
     95a:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
     95c:	384a      	subs	r0, #74	; 0x4a
     95e:	490a      	ldr	r1, [pc, #40]	; (988 <uart0_init+0x78>)
     960:	220f      	movs	r2, #15
     962:	f7ff ff4b 	bl	7fc <RegisterIrq>

}
     966:	bc08      	pop	{r3}
     968:	bc01      	pop	{r0}
     96a:	4700      	bx	r0
     96c:	e01fc0c4 	.word	0xe01fc0c4
     970:	e000c00c 	.word	0xe000c00c
     974:	e000c028 	.word	0xe000c028
     978:	e000c000 	.word	0xe000c000
     97c:	e000c004 	.word	0xe000c004
     980:	e000c008 	.word	0xe000c008
     984:	e002c000 	.word	0xe002c000
     988:	0000080d 	.word	0x0000080d

0000098c <hex_to_int>:


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     98c:	220a      	movs	r2, #10
unsigned char RxCount,Index;
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
     98e:	0903      	lsrs	r3, r0, #4
     990:	3b03      	subs	r3, #3
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     992:	4353      	muls	r3, r2
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
     994:	3205      	adds	r2, #5
     996:	4010      	ands	r0, r2
	uint16_t result = first*10 + second;
     998:	18c0      	adds	r0, r0, r3
     99a:	0400      	lsls	r0, r0, #16
     99c:	0c00      	lsrs	r0, r0, #16
	if(result > 9) result--;
     99e:	2809      	cmp	r0, #9
     9a0:	d902      	bls.n	9a8 <hex_to_int+0x1c>
     9a2:	3801      	subs	r0, #1
     9a4:	0400      	lsls	r0, r0, #16
     9a6:	0c00      	lsrs	r0, r0, #16
	return result;
}
     9a8:	4770      	bx	lr

000009aa <hex_to_ascii>:

uint16_t hex_to_ascii(uint16_t c){
     9aa:	b538      	push	{r3, r4, r5, lr}
     9ac:	1c05      	adds	r5, r0, #0
	uint16_t high = hex_to_int(c >> 8) * 16;
     9ae:	0a00      	lsrs	r0, r0, #8
     9b0:	f7ff ffec 	bl	98c <hex_to_int>
     9b4:	1c04      	adds	r4, r0, #0
	uint16_t low = hex_to_int(c & 0xFF);
     9b6:	0628      	lsls	r0, r5, #24
     9b8:	0e00      	lsrs	r0, r0, #24
     9ba:	f7ff ffe7 	bl	98c <hex_to_int>
	if(result > 9) result--;
	return result;
}

uint16_t hex_to_ascii(uint16_t c){
	uint16_t high = hex_to_int(c >> 8) * 16;
     9be:	0124      	lsls	r4, r4, #4
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
     9c0:	1900      	adds	r0, r0, r4
     9c2:	0400      	lsls	r0, r0, #16
     9c4:	0c00      	lsrs	r0, r0, #16
}
     9c6:	bc38      	pop	{r3, r4, r5}
     9c8:	bc02      	pop	{r1}
     9ca:	4708      	bx	r1

000009cc <UART0_send_byte>:
#endif
}
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9cc:	2101      	movs	r1, #1
     9ce:	4b07      	ldr	r3, [pc, #28]	; (9ec <UART0_send_byte+0x20>)
     9d0:	681a      	ldr	r2, [r3, #0]
     9d2:	438a      	bics	r2, r1
     9d4:	601a      	str	r2, [r3, #0]
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9d6:	4a06      	ldr	r2, [pc, #24]	; (9f0 <UART0_send_byte+0x24>)
     9d8:	6812      	ldr	r2, [r2, #0]
     9da:	0692      	lsls	r2, r2, #26
     9dc:	d5fb      	bpl.n	9d6 <UART0_send_byte+0xa>
	U0THR = byte;
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9de:	2101      	movs	r1, #1
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
	U0THR = byte;
     9e0:	4a04      	ldr	r2, [pc, #16]	; (9f4 <UART0_send_byte+0x28>)
     9e2:	6010      	str	r0, [r2, #0]
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9e4:	681a      	ldr	r2, [r3, #0]
     9e6:	430a      	orrs	r2, r1
     9e8:	601a      	str	r2, [r3, #0]
}
     9ea:	4770      	bx	lr
     9ec:	e000c004 	.word	0xe000c004
     9f0:	e000c014 	.word	0xe000c014
     9f4:	e000c000 	.word	0xe000c000

000009f8 <UART0_send>:
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
     9f8:	b510      	push	{r4, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9fa:	2401      	movs	r4, #1
     9fc:	4b0c      	ldr	r3, [pc, #48]	; (a30 <Stack_Size+0x20>)
     9fe:	681a      	ldr	r2, [r3, #0]
     a00:	43a2      	bics	r2, r4
     a02:	1c1c      	adds	r4, r3, #0
     a04:	601a      	str	r2, [r3, #0]

	while ( Length != 0 )
     a06:	2900      	cmp	r1, #0
     a08:	d00b      	beq.n	a22 <Stack_Size+0x12>
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a0a:	4b0a      	ldr	r3, [pc, #40]	; (a34 <Stack_Size+0x24>)
     a0c:	681b      	ldr	r3, [r3, #0]
     a0e:	069b      	lsls	r3, r3, #26
     a10:	d5fb      	bpl.n	a0a <UART0_send+0x12>
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a12:	7802      	ldrb	r2, [r0, #0]
     a14:	4b08      	ldr	r3, [pc, #32]	; (a38 <Stack_Size+0x28>)
		BufferPtr++;
		Length--;
     a16:	3901      	subs	r1, #1
     a18:	0409      	lsls	r1, r1, #16

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a1a:	601a      	str	r2, [r3, #0]
		BufferPtr++;
     a1c:	3001      	adds	r0, #1
		Length--;
     a1e:	0c09      	lsrs	r1, r1, #16
     a20:	e7f1      	b.n	a06 <UART0_send+0xe>
	}
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a22:	2201      	movs	r2, #1
     a24:	6823      	ldr	r3, [r4, #0]
     a26:	4313      	orrs	r3, r2
     a28:	6023      	str	r3, [r4, #0]

	return;
}
     a2a:	bc10      	pop	{r4}
     a2c:	bc01      	pop	{r0}
     a2e:	4700      	bx	r0
     a30:	e000c004 	.word	0xe000c004
     a34:	e000c014 	.word	0xe000c014
     a38:	e000c000 	.word	0xe000c000

00000a3c <process_command>:
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     a3c:	b570      	push	{r4, r5, r6, lr}
	uint16_t num;
	uint8_t lenth;
#ifdef GUI
#else
	if(strncmp(cmd, "start", 5) == 0)
     a3e:	4928      	ldr	r1, [pc, #160]	; (ae0 <process_command+0xa4>)
     a40:	2205      	movs	r2, #5
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     a42:	1c05      	adds	r5, r0, #0
	uint16_t num;
	uint8_t lenth;
#ifdef GUI
#else
	if(strncmp(cmd, "start", 5) == 0)
     a44:	f000 fac2 	bl	fcc <strncmp>
     a48:	2800      	cmp	r0, #0
     a4a:	d10c      	bne.n	a66 <process_command+0x2a>
	{
		UART0_send("\nStarted\n", 9);
     a4c:	4825      	ldr	r0, [pc, #148]	; (ae4 <process_command+0xa8>)
     a4e:	2109      	movs	r1, #9
     a50:	f7ff ffd2 	bl	9f8 <UART0_send>
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     a54:	210d      	movs	r1, #13
     a56:	2002      	movs	r0, #2
     a58:	f7ff fe24 	bl	6a4 <gpio_set>
		led_set(LED2);
     a5c:	2001      	movs	r0, #1
     a5e:	f7ff fe0d 	bl	67c <led_set>
		timer0_start();
     a62:	f000 fa8b 	bl	f7c <timer0_start>
	}    

	/* Turn off amplifier */
	if(strncmp(cmd, "stop", 4) == 0)
     a66:	1c28      	adds	r0, r5, #0
     a68:	491f      	ldr	r1, [pc, #124]	; (ae8 <process_command+0xac>)
     a6a:	2204      	movs	r2, #4
     a6c:	f000 faae 	bl	fcc <strncmp>
     a70:	2800      	cmp	r0, #0
     a72:	d10c      	bne.n	a8e <process_command+0x52>
	{
		UART0_send("\nStopped\n", 9);
     a74:	481d      	ldr	r0, [pc, #116]	; (aec <process_command+0xb0>)
     a76:	2109      	movs	r1, #9
     a78:	f7ff ffbe 	bl	9f8 <UART0_send>
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     a7c:	210d      	movs	r1, #13
     a7e:	2002      	movs	r0, #2
     a80:	f7ff fe32 	bl	6e8 <gpio_clear>
		led_clear(LED2);
     a84:	2001      	movs	r0, #1
     a86:	f7ff fe03 	bl	690 <led_clear>
		timer0_stop();
     a8a:	f000 fa87 	bl	f9c <timer0_stop>
	}
	/* Voltage setup  */
	if(strncmp(cmd, "set", 3) == 0)
     a8e:	1c28      	adds	r0, r5, #0
     a90:	4917      	ldr	r1, [pc, #92]	; (af0 <process_command+0xb4>)
     a92:	2203      	movs	r2, #3
     a94:	f000 fa9a 	bl	fcc <strncmp>
     a98:	2800      	cmp	r0, #0
     a9a:	d113      	bne.n	ac4 <process_command+0x88>
	{
	
		lenth = strlen(cmd+4)-1;
		num = atoi(cmd + 4);
     a9c:	1d28      	adds	r0, r5, #4
     a9e:	f000 fa8d 	bl	fbc <atoi>
     aa2:	1c04      	adds	r4, r0, #0
		UART0_send("OK\n", 3);
     aa4:	2103      	movs	r1, #3
     aa6:	4813      	ldr	r0, [pc, #76]	; (af4 <process_command+0xb8>)
     aa8:	f7ff ffa6 	bl	9f8 <UART0_send>
		UART0_send_byte(num >> 8);
     aac:	0420      	lsls	r0, r4, #16
     aae:	0c06      	lsrs	r6, r0, #16
     ab0:	0e00      	lsrs	r0, r0, #24
     ab2:	f7ff ff8b 	bl	9cc <UART0_send_byte>
		UART0_send_byte(num);
     ab6:	0620      	lsls	r0, r4, #24
     ab8:	0e00      	lsrs	r0, r0, #24
     aba:	f7ff ff87 	bl	9cc <UART0_send_byte>
		dac_set_voltage(num);
     abe:	1c30      	adds	r0, r6, #0
     ac0:	f000 f988 	bl	dd4 <dac_set_voltage>
	}

	/* Manual  */
	if(strncmp(cmd, "help", 4) == 0)
     ac4:	1c28      	adds	r0, r5, #0
     ac6:	490c      	ldr	r1, [pc, #48]	; (af8 <process_command+0xbc>)
     ac8:	2204      	movs	r2, #4
     aca:	f000 fa7f 	bl	fcc <strncmp>
     ace:	2800      	cmp	r0, #0
     ad0:	d103      	bne.n	ada <process_command+0x9e>
	{
		UART0_send(help_msg, sizeof(help_msg)-1);
     ad2:	480a      	ldr	r0, [pc, #40]	; (afc <process_command+0xc0>)
     ad4:	2186      	movs	r1, #134	; 0x86
     ad6:	f7ff ff8f 	bl	9f8 <UART0_send>
	}
#endif
}
     ada:	bc70      	pop	{r4, r5, r6}
     adc:	bc01      	pop	{r0}
     ade:	4700      	bx	r0
     ae0:	000013d9 	.word	0x000013d9
     ae4:	000013df 	.word	0x000013df
     ae8:	000013e9 	.word	0x000013e9
     aec:	000013ee 	.word	0x000013ee
     af0:	000013f8 	.word	0x000013f8
     af4:	000013fc 	.word	0x000013fc
     af8:	00001400 	.word	0x00001400
     afc:	00001340 	.word	0x00001340

00000b00 <SPI0_init>:
	return dat;
}

void SPI0_init(void)
{
	PCONP |= (1 << 8);
     b00:	2180      	movs	r1, #128	; 0x80
     b02:	4a0c      	ldr	r2, [pc, #48]	; (b34 <SPI0_init+0x34>)
     b04:	6813      	ldr	r3, [r2, #0]
     b06:	0049      	lsls	r1, r1, #1
     b08:	430b      	orrs	r3, r1
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
     b0a:	21c0      	movs	r1, #192	; 0xc0
	return dat;
}

void SPI0_init(void)
{
	PCONP |= (1 << 8);
     b0c:	6013      	str	r3, [r2, #0]
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
     b0e:	4a0a      	ldr	r2, [pc, #40]	; (b38 <SPI0_init+0x38>)
     b10:	6813      	ldr	r3, [r2, #0]
     b12:	0289      	lsls	r1, r1, #10
     b14:	430b      	orrs	r3, r1
	S0SPCR |= (1 << 5);	/*   Master mode*/
     b16:	2120      	movs	r1, #32
}

void SPI0_init(void)
{
	PCONP |= (1 << 8);
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
     b18:	6013      	str	r3, [r2, #0]
	S0SPCR |= (1 << 5);	/*   Master mode*/
     b1a:	4a08      	ldr	r2, [pc, #32]	; (b3c <SPI0_init+0x3c>)
     b1c:	6813      	ldr	r3, [r2, #0]
     b1e:	430b      	orrs	r3, r1
     b20:	6013      	str	r3, [r2, #0]
	S0SPCCR = 0x12; 	/* SPI0 perif clock divided by 18 to reach 500kHz */
     b22:	2212      	movs	r2, #18
     b24:	4b06      	ldr	r3, [pc, #24]	; (b40 <SPI0_init+0x40>)
     b26:	601a      	str	r2, [r3, #0]
	PINSEL3 |= ((1 << 9) | (1 << 8) | (1 << 14) | (1 << 15) | (1 << 16) | (1 << 17));/* 	[>MISO0, MOSI0, CLK0 as SPI pins<] */
     b28:	4a06      	ldr	r2, [pc, #24]	; (b44 <SPI0_init+0x44>)
     b2a:	4907      	ldr	r1, [pc, #28]	; (b48 <SPI0_init+0x48>)
     b2c:	6813      	ldr	r3, [r2, #0]
     b2e:	430b      	orrs	r3, r1
     b30:	6013      	str	r3, [r2, #0]
	/* PINMODE3 |= (1 << 15) | (1 << 7); */
}
     b32:	4770      	bx	lr
     b34:	e01fc0c4 	.word	0xe01fc0c4
     b38:	e01fc1a8 	.word	0xe01fc1a8
     b3c:	e0020000 	.word	0xe0020000
     b40:	e002000c 	.word	0xe002000c
     b44:	e002c00c 	.word	0xe002c00c
     b48:	0003c300 	.word	0x0003c300

00000b4c <SPI_ADC_data_transfers_16bit>:

uint16_t SPI_ADC_data_transfers_16bit (uint16_t data)
{
     b4c:	b570      	push	{r4, r5, r6, lr}
	uint16_t dat = 0;
	uint16_t mask;
	char i;

	//Write
	mask = 0x8000;
     b4e:	2580      	movs	r5, #128	; 0x80
	PINSEL3 |= ((1 << 9) | (1 << 8) | (1 << 14) | (1 << 15) | (1 << 16) | (1 << 17));/* 	[>MISO0, MOSI0, CLK0 as SPI pins<] */
	/* PINMODE3 |= (1 << 15) | (1 << 7); */
}

uint16_t SPI_ADC_data_transfers_16bit (uint16_t data)
{
     b50:	1c06      	adds	r6, r0, #0
     b52:	240f      	movs	r4, #15
	uint16_t dat = 0;
     b54:	2000      	movs	r0, #0
	uint16_t mask;
	char i;

	//Write
	mask = 0x8000;
     b56:	022d      	lsls	r5, r5, #8
	for(i = 16;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     b58:	4b12      	ldr	r3, [pc, #72]	; (ba4 <SPI_ADC_data_transfers_16bit+0x58>)
     b5a:	4a13      	ldr	r2, [pc, #76]	; (ba8 <SPI_ADC_data_transfers_16bit+0x5c>)
     b5c:	6819      	ldr	r1, [r3, #0]
     b5e:	400a      	ands	r2, r1
     b60:	601a      	str	r2, [r3, #0]
		if(data & mask)
     b62:	422e      	tst	r6, r5
     b64:	d004      	beq.n	b70 <SPI_ADC_data_transfers_16bit+0x24>
			FIO1PIN |= 1 << ADC_DIN;
     b66:	2180      	movs	r1, #128	; 0x80
     b68:	681a      	ldr	r2, [r3, #0]
     b6a:	0449      	lsls	r1, r1, #17
     b6c:	430a      	orrs	r2, r1
     b6e:	e002      	b.n	b76 <SPI_ADC_data_transfers_16bit+0x2a>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     b70:	6819      	ldr	r1, [r3, #0]
     b72:	4a0e      	ldr	r2, [pc, #56]	; (bac <SPI_ADC_data_transfers_16bit+0x60>)
     b74:	400a      	ands	r2, r1
     b76:	601a      	str	r2, [r3, #0]
     b78:	2201      	movs	r2, #1

		mask = mask >> 1;

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b7a:	6819      	ldr	r1, [r3, #0]
		if(data & mask)
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;
     b7c:	086d      	lsrs	r5, r5, #1

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
			dat |= 1 << (i - 1);
     b7e:	40a2      	lsls	r2, r4
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     b80:	0209      	lsls	r1, r1, #8
     b82:	d503      	bpl.n	b8c <SPI_ADC_data_transfers_16bit+0x40>
			dat |= 1 << (i - 1);
     b84:	4302      	orrs	r2, r0
     b86:	0410      	lsls	r0, r2, #16
     b88:	0c00      	lsrs	r0, r0, #16
     b8a:	e000      	b.n	b8e <SPI_ADC_data_transfers_16bit+0x42>
		else
			dat &= ~(1 << (i - 1));
     b8c:	4390      	bics	r0, r2
		FIO1PIN |= 1 << ADC_SCLK;
     b8e:	2180      	movs	r1, #128	; 0x80
     b90:	681a      	ldr	r2, [r3, #0]
     b92:	0349      	lsls	r1, r1, #13
     b94:	430a      	orrs	r2, r1
     b96:	601a      	str	r2, [r3, #0]
	uint16_t mask;
	char i;

	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
     b98:	3c01      	subs	r4, #1
     b9a:	d2dd      	bcs.n	b58 <SPI_ADC_data_transfers_16bit+0xc>
			dat &= ~(1 << (i - 1));
		FIO1PIN |= 1 << ADC_SCLK;

	}  
	return dat;
}
     b9c:	bc70      	pop	{r4, r5, r6}
     b9e:	bc02      	pop	{r1}
     ba0:	4708      	bx	r1
     ba2:	46c0      	nop			; (mov r8, r8)
     ba4:	3fffc034 	.word	0x3fffc034
     ba8:	ffefffff 	.word	0xffefffff
     bac:	feffffff 	.word	0xfeffffff

00000bb0 <SPI_ADC_data_transfers_8bit>:

unsigned char SPI_ADC_data_transfers_8bit (unsigned char data)
{
     bb0:	b530      	push	{r4, r5, lr}
     bb2:	1c05      	adds	r5, r0, #0
     bb4:	2407      	movs	r4, #7
	unsigned char dat = 0;
     bb6:	2000      	movs	r0, #0
	uint16_t mask = 0x8000;
	//Write
	for(i = 8;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     bb8:	4b12      	ldr	r3, [pc, #72]	; (c04 <SPI_ADC_data_transfers_8bit+0x54>)
     bba:	4a13      	ldr	r2, [pc, #76]	; (c08 <SPI_ADC_data_transfers_8bit+0x58>)
     bbc:	6819      	ldr	r1, [r3, #0]
     bbe:	400a      	ands	r2, r1
     bc0:	601a      	str	r2, [r3, #0]
		if(data & (1 << (i - 1)))
     bc2:	1c2a      	adds	r2, r5, #0
     bc4:	4122      	asrs	r2, r4
     bc6:	07d2      	lsls	r2, r2, #31
     bc8:	d504      	bpl.n	bd4 <SPI_ADC_data_transfers_8bit+0x24>
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
     bca:	2180      	movs	r1, #128	; 0x80
     bcc:	681a      	ldr	r2, [r3, #0]
     bce:	0449      	lsls	r1, r1, #17
     bd0:	430a      	orrs	r2, r1
     bd2:	e002      	b.n	bda <SPI_ADC_data_transfers_8bit+0x2a>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     bd4:	6819      	ldr	r1, [r3, #0]
     bd6:	4a0d      	ldr	r2, [pc, #52]	; (c0c <SPI_ADC_data_transfers_8bit+0x5c>)
     bd8:	400a      	ands	r2, r1
     bda:	601a      	str	r2, [r3, #0]
     bdc:	2201      	movs	r2, #1

		mask = mask >> 1;

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     bde:	6819      	ldr	r1, [r3, #0]
			dat |= 1 << (i - 1);
     be0:	40a2      	lsls	r2, r4
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     be2:	0209      	lsls	r1, r1, #8
     be4:	d503      	bpl.n	bee <SPI_ADC_data_transfers_8bit+0x3e>
			dat |= 1 << (i - 1);
     be6:	4302      	orrs	r2, r0
     be8:	0610      	lsls	r0, r2, #24
     bea:	0e00      	lsrs	r0, r0, #24
     bec:	e000      	b.n	bf0 <SPI_ADC_data_transfers_8bit+0x40>
		else
			dat &= ~(1 << (i - 1));
     bee:	4390      	bics	r0, r2

		FIO1PIN |= 1 << ADC_SCLK;
     bf0:	2180      	movs	r1, #128	; 0x80
     bf2:	681a      	ldr	r2, [r3, #0]
     bf4:	0349      	lsls	r1, r1, #13
     bf6:	430a      	orrs	r2, r1
     bf8:	601a      	str	r2, [r3, #0]
	unsigned char dat = 0;
	char i;

	uint16_t mask = 0x8000;
	//Write
	for(i = 8;  i > 0 ; i--)
     bfa:	3c01      	subs	r4, #1
     bfc:	d2dc      	bcs.n	bb8 <SPI_ADC_data_transfers_8bit+0x8>
			dat &= ~(1 << (i - 1));

		FIO1PIN |= 1 << ADC_SCLK;
	}  
	return dat;
}
     bfe:	bc30      	pop	{r4, r5}
     c00:	bc02      	pop	{r1}
     c02:	4708      	bx	r1
     c04:	3fffc034 	.word	0x3fffc034
     c08:	ffefffff 	.word	0xffefffff
     c0c:	feffffff 	.word	0xfeffffff

00000c10 <spi_readStatus>:
uint8_t spi_readStatus (void) {

	uint8_t SPIStatus;
	uint8_t abrt, modf, rovr, wcol, spif;

	SPIStatus = S0SPSR;
     c10:	4b03      	ldr	r3, [pc, #12]	; (c20 <spi_readStatus+0x10>)
     c12:	6818      	ldr	r0, [r3, #0]
	if(spif==1) { 
		UART0_send("\nSPIF is 1 - clearing\n", sizeof("\nSPIF is 1 - clearing\n")-1);
	}
#endif

	S0SPCR = S0SPCR; // write cr register to clear status bit
     c14:	4b03      	ldr	r3, [pc, #12]	; (c24 <spi_readStatus+0x14>)
     c16:	681a      	ldr	r2, [r3, #0]
	SPIStatus = S0SPSR;
	abrt = (SPIStatus & 0x8 ) >> 3;
	modf = (SPIStatus & 0x10) >> 4;
	rovr = (SPIStatus & 0x20) >> 5;
	wcol = (SPIStatus & 0x40) >> 6;
	spif = (SPIStatus & 0x80) >> 7;
     c18:	0600      	lsls	r0, r0, #24
		UART0_send("\nSPIF is 1 - clearing\n", sizeof("\nSPIF is 1 - clearing\n")-1);
	}
#endif

	S0SPCR = S0SPCR; // write cr register to clear status bit
	return(spif);
     c1a:	0fc0      	lsrs	r0, r0, #31
	if(spif==1) { 
		UART0_send("\nSPIF is 1 - clearing\n", sizeof("\nSPIF is 1 - clearing\n")-1);
	}
#endif

	S0SPCR = S0SPCR; // write cr register to clear status bit
     c1c:	601a      	str	r2, [r3, #0]
	return(spif);
}
     c1e:	4770      	bx	lr
     c20:	e0020004 	.word	0xe0020004
     c24:	e0020000 	.word	0xe0020000

00000c28 <SPI_DAC_data_transfers_16bit>:
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     c28:	b570      	push	{r4, r5, r6, lr}
	uint16_t dat = 0;
	uint16_t mask;
	char i;

	//Write
	mask = 0x8000;
     c2a:	2480      	movs	r4, #128	; 0x80

	S0SPCR = S0SPCR; // write cr register to clear status bit
	return(spif);
}
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     c2c:	1c05      	adds	r5, r0, #0
     c2e:	210f      	movs	r1, #15
	uint16_t dat = 0;
     c30:	2000      	movs	r0, #0
	uint16_t mask;
	char i;

	//Write
	mask = 0x8000;
     c32:	0224      	lsls	r4, r4, #8
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
     c34:	2680      	movs	r6, #128	; 0x80
     c36:	4b12      	ldr	r3, [pc, #72]	; (c80 <SPI_DAC_data_transfers_16bit+0x58>)
     c38:	681a      	ldr	r2, [r3, #0]
     c3a:	0376      	lsls	r6, r6, #13
     c3c:	4332      	orrs	r2, r6
     c3e:	601a      	str	r2, [r3, #0]
		if(data & mask)
     c40:	4225      	tst	r5, r4
     c42:	d004      	beq.n	c4e <SPI_DAC_data_transfers_16bit+0x26>
			FIO1PIN |= 1 << ADC_DIN;
     c44:	2680      	movs	r6, #128	; 0x80
     c46:	681a      	ldr	r2, [r3, #0]
     c48:	0476      	lsls	r6, r6, #17
     c4a:	4332      	orrs	r2, r6
     c4c:	e002      	b.n	c54 <SPI_DAC_data_transfers_16bit+0x2c>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     c4e:	681e      	ldr	r6, [r3, #0]
     c50:	4a0c      	ldr	r2, [pc, #48]	; (c84 <SPI_DAC_data_transfers_16bit+0x5c>)
     c52:	4032      	ands	r2, r6
     c54:	601a      	str	r2, [r3, #0]

		//SCLK
		mask = mask >> 1;
		FIO1PIN &= ~(1 << ADC_SCLK);
     c56:	4a0c      	ldr	r2, [pc, #48]	; (c88 <SPI_DAC_data_transfers_16bit+0x60>)
     c58:	681e      	ldr	r6, [r3, #0]
     c5a:	4032      	ands	r2, r6
     c5c:	601a      	str	r2, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     c5e:	681a      	ldr	r2, [r3, #0]
     c60:	2301      	movs	r3, #1
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);

		//SCLK
		mask = mask >> 1;
     c62:	0864      	lsrs	r4, r4, #1
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
			dat |= 1 << (i - 1);
     c64:	408b      	lsls	r3, r1
		//SCLK
		mask = mask >> 1;
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     c66:	0212      	lsls	r2, r2, #8
     c68:	d503      	bpl.n	c72 <SPI_DAC_data_transfers_16bit+0x4a>
			dat |= 1 << (i - 1);
     c6a:	4303      	orrs	r3, r0
     c6c:	0418      	lsls	r0, r3, #16
     c6e:	0c00      	lsrs	r0, r0, #16
     c70:	e000      	b.n	c74 <SPI_DAC_data_transfers_16bit+0x4c>
		else
			dat &= ~(1 << (i - 1));
     c72:	4398      	bics	r0, r3
	uint16_t mask;
	char i;

	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
     c74:	3901      	subs	r1, #1
     c76:	d2dd      	bcs.n	c34 <SPI_DAC_data_transfers_16bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     c78:	bc70      	pop	{r4, r5, r6}
     c7a:	bc02      	pop	{r1}
     c7c:	4708      	bx	r1
     c7e:	46c0      	nop			; (mov r8, r8)
     c80:	3fffc034 	.word	0x3fffc034
     c84:	feffffff 	.word	0xfeffffff
     c88:	ffefffff 	.word	0xffefffff

00000c8c <SPI0_send_2_byte>:
	}
	return dat;
}

uint16_t SPI0_send_2_byte(uint16_t data, uint8_t slave)
{
     c8c:	b508      	push	{r3, lr}
	/* S0SPDR = (data >> 8) & 0xFF; */
	/* while (spi_readStatus() == 0);  */
	/* dat = S0SPDR << 8; */
	/* S0SPDR = data & 0xFF; */
	/* while (spi_readStatus() == 0);  */
	if (slave == ADC )
     c8e:	2912      	cmp	r1, #18
     c90:	d102      	bne.n	c98 <SPI0_send_2_byte+0xc>
	{
	dat = SPI_ADC_data_transfers_16bit(data);
     c92:	f7ff ff5b 	bl	b4c <SPI_ADC_data_transfers_16bit>
     c96:	e003      	b.n	ca0 <SPI0_send_2_byte+0x14>
	}else if (slave == DAC)
     c98:	291d      	cmp	r1, #29
     c9a:	d102      	bne.n	ca2 <SPI0_send_2_byte+0x16>
	{
	dat = SPI_DAC_data_transfers_16bit(data);
     c9c:	f7ff ffc4 	bl	c28 <SPI_DAC_data_transfers_16bit>
     ca0:	1c03      	adds	r3, r0, #0
	}
	return dat;
}
     ca2:	1c18      	adds	r0, r3, #0
     ca4:	bc08      	pop	{r3}
     ca6:	bc02      	pop	{r1}
     ca8:	4708      	bx	r1

00000caa <SPI_DAC_data_transfers_8bit>:
	}  
	return dat;
}

unsigned char SPI_DAC_data_transfers_8bit (unsigned char data)
{
     caa:	b530      	push	{r4, r5, lr}
     cac:	2107      	movs	r1, #7
     cae:	1c04      	adds	r4, r0, #0
	unsigned char dat = 0;
     cb0:	2000      	movs	r0, #0
	char i;

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
     cb2:	1c22      	adds	r2, r4, #0
     cb4:	410a      	asrs	r2, r1
     cb6:	4b12      	ldr	r3, [pc, #72]	; (d00 <SPI_DAC_data_transfers_8bit+0x56>)
     cb8:	07d2      	lsls	r2, r2, #31
     cba:	d504      	bpl.n	cc6 <SPI_DAC_data_transfers_8bit+0x1c>
			FIO1PIN |= 1 << ADC_DIN;
     cbc:	2580      	movs	r5, #128	; 0x80
     cbe:	681a      	ldr	r2, [r3, #0]
     cc0:	046d      	lsls	r5, r5, #17
     cc2:	432a      	orrs	r2, r5
     cc4:	e002      	b.n	ccc <SPI_DAC_data_transfers_8bit+0x22>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     cc6:	681d      	ldr	r5, [r3, #0]
     cc8:	4a0e      	ldr	r2, [pc, #56]	; (d04 <SPI_DAC_data_transfers_8bit+0x5a>)
     cca:	402a      	ands	r2, r5

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     ccc:	2580      	movs	r5, #128	; 0x80
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     cce:	601a      	str	r2, [r3, #0]

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     cd0:	681a      	ldr	r2, [r3, #0]
     cd2:	036d      	lsls	r5, r5, #13
     cd4:	432a      	orrs	r2, r5
     cd6:	601a      	str	r2, [r3, #0]
		FIO1PIN &= ~(1 << ADC_SCLK);
     cd8:	4a0b      	ldr	r2, [pc, #44]	; (d08 <SPI_DAC_data_transfers_8bit+0x5e>)
     cda:	681d      	ldr	r5, [r3, #0]
     cdc:	402a      	ands	r2, r5
     cde:	601a      	str	r2, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     ce0:	681a      	ldr	r2, [r3, #0]
     ce2:	2301      	movs	r3, #1
			dat |= 1 << (i - 1);
     ce4:	408b      	lsls	r3, r1
		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     ce6:	0212      	lsls	r2, r2, #8
     ce8:	d503      	bpl.n	cf2 <SPI_DAC_data_transfers_8bit+0x48>
			dat |= 1 << (i - 1);
     cea:	4303      	orrs	r3, r0
     cec:	0618      	lsls	r0, r3, #24
     cee:	0e00      	lsrs	r0, r0, #24
     cf0:	e000      	b.n	cf4 <SPI_DAC_data_transfers_8bit+0x4a>
		else
			dat &= ~(1 << (i - 1));
     cf2:	4398      	bics	r0, r3
{
	unsigned char dat = 0;
	char i;

	//Write
	for(i = 8;  i > 0 ; i--)
     cf4:	3901      	subs	r1, #1
     cf6:	d2dc      	bcs.n	cb2 <SPI_DAC_data_transfers_8bit+0x8>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     cf8:	bc30      	pop	{r4, r5}
     cfa:	bc02      	pop	{r1}
     cfc:	4708      	bx	r1
     cfe:	46c0      	nop			; (mov r8, r8)
     d00:	3fffc034 	.word	0x3fffc034
     d04:	feffffff 	.word	0xfeffffff
     d08:	ffefffff 	.word	0xffefffff

00000d0c <SPI0_send_1_byte>:
#include "spi.h"
/* #define DEBUG_SPI */


uint8_t SPI0_send_1_byte(uint8_t data, uint8_t slave)
{
     d0c:	b508      	push	{r3, lr}
	uint8_t dat = 0;
	/* S0SPDR = data; */
	/* while (spi_readStatus() == 0);  */
	/* data = S0SPDR; */
	if (slave == ADC )
     d0e:	2912      	cmp	r1, #18
     d10:	d102      	bne.n	d18 <SPI0_send_1_byte+0xc>
	{
	dat = SPI_ADC_data_transfers_8bit(data);
     d12:	f7ff ff4d 	bl	bb0 <SPI_ADC_data_transfers_8bit>
     d16:	e004      	b.n	d22 <SPI0_send_1_byte+0x16>
/* #define DEBUG_SPI */


uint8_t SPI0_send_1_byte(uint8_t data, uint8_t slave)
{
	uint8_t dat = 0;
     d18:	2300      	movs	r3, #0
	/* while (spi_readStatus() == 0);  */
	/* data = S0SPDR; */
	if (slave == ADC )
	{
	dat = SPI_ADC_data_transfers_8bit(data);
	}else if (slave == DAC)
     d1a:	291d      	cmp	r1, #29
     d1c:	d102      	bne.n	d24 <SPI0_send_1_byte+0x18>
	{
	dat = SPI_DAC_data_transfers_8bit(data);
     d1e:	f7ff ffc4 	bl	caa <SPI_DAC_data_transfers_8bit>
     d22:	1c03      	adds	r3, r0, #0
	}
	return dat;
}
     d24:	1c18      	adds	r0, r3, #0
     d26:	bc08      	pop	{r3}
     d28:	bc02      	pop	{r1}
     d2a:	4708      	bx	r1

00000d2c <Delay>:
{
	int i, j;
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
     d2c:	4770      	bx	lr

00000d2e <adc_init>:
void adc_init(void)
{
     d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t dat = 0;
	
	FIO1CLR |= 1 << ADC;
     d30:	2680      	movs	r6, #128	; 0x80
     d32:	4d23      	ldr	r5, [pc, #140]	; (dc0 <adc_init+0x92>)
     d34:	682b      	ldr	r3, [r5, #0]
     d36:	02f6      	lsls	r6, r6, #11
     d38:	4333      	orrs	r3, r6
     d3a:	602b      	str	r3, [r5, #0]

	SPI0_send_1_byte(READ_ID_REG, ADC);
     d3c:	2112      	movs	r1, #18
     d3e:	2060      	movs	r0, #96	; 0x60
     d40:	f7ff ffe4 	bl	d0c <SPI0_send_1_byte>
	dat = SPI0_send_1_byte(0xFF, ADC);
     d44:	2112      	movs	r1, #18
     d46:	20ff      	movs	r0, #255	; 0xff
     d48:	f7ff ffe0 	bl	d0c <SPI0_send_1_byte>
     d4c:	1c07      	adds	r7, r0, #0

	FIO1SET |= 1 << ADC;
     d4e:	4c1d      	ldr	r4, [pc, #116]	; (dc4 <adc_init+0x96>)
     d50:	6823      	ldr	r3, [r4, #0]
     d52:	4333      	orrs	r3, r6
     d54:	6023      	str	r3, [r4, #0]

	UART0_send("\nSPI_recieved: ", 15);
     d56:	210f      	movs	r1, #15
     d58:	481b      	ldr	r0, [pc, #108]	; (dc8 <adc_init+0x9a>)
     d5a:	f7ff fe4d 	bl	9f8 <UART0_send>
	UART0_send_byte(dat);
     d5e:	1c38      	adds	r0, r7, #0
     d60:	f7ff fe34 	bl	9cc <UART0_send_byte>

	FIO1CLR |= 1 << ADC;
     d64:	682b      	ldr	r3, [r5, #0]
     d66:	4333      	orrs	r3, r6
     d68:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     d6a:	2112      	movs	r1, #18
     d6c:	2010      	movs	r0, #16
     d6e:	f7ff ffcd 	bl	d0c <SPI0_send_1_byte>
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
     d72:	2112      	movs	r1, #18
     d74:	4815      	ldr	r0, [pc, #84]	; (dcc <adc_init+0x9e>)
     d76:	f7ff ff89 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     d7a:	6823      	ldr	r3, [r4, #0]
     d7c:	4333      	orrs	r3, r6
     d7e:	6023      	str	r3, [r4, #0]

	FIO1CLR |= 1 << ADC;
     d80:	682b      	ldr	r3, [r5, #0]
     d82:	4333      	orrs	r3, r6
     d84:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     d86:	2112      	movs	r1, #18
     d88:	2008      	movs	r0, #8
     d8a:	f7ff ffbf 	bl	d0c <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
     d8e:	2112      	movs	r1, #18
     d90:	2001      	movs	r0, #1
     d92:	f7ff ff7b 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     d96:	6823      	ldr	r3, [r4, #0]
     d98:	431e      	orrs	r6, r3
     d9a:	6026      	str	r6, [r4, #0]

	FIO1CLR |= 1 << DAC;
     d9c:	2680      	movs	r6, #128	; 0x80
     d9e:	682b      	ldr	r3, [r5, #0]
     da0:	05b6      	lsls	r6, r6, #22
     da2:	4333      	orrs	r3, r6
     da4:	602b      	str	r3, [r5, #0]
	/* SPI0_send_2_byte(0x1000 | 578); */
	SPI0_send_2_byte((0x1000 | 578), DAC);
     da6:	211d      	movs	r1, #29
     da8:	4809      	ldr	r0, [pc, #36]	; (dd0 <adc_init+0xa2>)
     daa:	f7ff ff6f 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     dae:	6823      	ldr	r3, [r4, #0]
     db0:	4333      	orrs	r3, r6
     db2:	6023      	str	r3, [r4, #0]

	/* SPI0_send_1_byte(WRITE_OFFSET_REG); */
	/* SPI0_send_2_byte(OFFSET_REG_VAL); */
	led_set(LED1);
     db4:	2000      	movs	r0, #0
     db6:	f7ff fc61 	bl	67c <led_set>

}
     dba:	bcf8      	pop	{r3, r4, r5, r6, r7}
     dbc:	bc01      	pop	{r0}
     dbe:	4700      	bx	r0
     dc0:	3fffc03c 	.word	0x3fffc03c
     dc4:	3fffc038 	.word	0x3fffc038
     dc8:	00001405 	.word	0x00001405
     dcc:	00001010 	.word	0x00001010
     dd0:	00001242 	.word	0x00001242

00000dd4 <dac_set_voltage>:

void dac_set_voltage(uint16_t voltage)
{
     dd4:	b510      	push	{r4, lr}
	/* SPI0_send_2_byte((voltage | DAC_LOAD_CMD)); */
	FIO1CLR |= 1 << DAC;
     dd6:	2480      	movs	r4, #128	; 0x80
     dd8:	4a08      	ldr	r2, [pc, #32]	; (dfc <dac_set_voltage+0x28>)
     dda:	6813      	ldr	r3, [r2, #0]
     ddc:	05a4      	lsls	r4, r4, #22
     dde:	4323      	orrs	r3, r4
     de0:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((0x1000 | voltage), DAC);
     de2:	2380      	movs	r3, #128	; 0x80
     de4:	015b      	lsls	r3, r3, #5
     de6:	4318      	orrs	r0, r3
     de8:	211d      	movs	r1, #29
     dea:	f7ff ff4f 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     dee:	4a04      	ldr	r2, [pc, #16]	; (e00 <dac_set_voltage+0x2c>)
     df0:	6813      	ldr	r3, [r2, #0]
     df2:	4323      	orrs	r3, r4
     df4:	6013      	str	r3, [r2, #0]
}
     df6:	bc10      	pop	{r4}
     df8:	bc01      	pop	{r0}
     dfa:	4700      	bx	r0
     dfc:	3fffc03c 	.word	0x3fffc03c
     e00:	3fffc038 	.word	0x3fffc038

00000e04 <adc_read_current>:

uint16_t adc_read_current(void)
{
     e04:	b570      	push	{r4, r5, r6, lr}
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
     e06:	2580      	movs	r5, #128	; 0x80
     e08:	4e10      	ldr	r6, [pc, #64]	; (e4c <adc_read_current+0x48>)
     e0a:	6833      	ldr	r3, [r6, #0]
     e0c:	02ed      	lsls	r5, r5, #11
     e0e:	432b      	orrs	r3, r5
     e10:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
	FIO1SET |= 1 << ADC;
     e12:	4c0f      	ldr	r4, [pc, #60]	; (e50 <adc_read_current+0x4c>)
uint16_t adc_read_current(void)
{
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     e14:	2112      	movs	r1, #18
     e16:	2008      	movs	r0, #8
     e18:	f7ff ff78 	bl	d0c <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
     e1c:	2112      	movs	r1, #18
     e1e:	2001      	movs	r0, #1
     e20:	f7ff ff34 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     e24:	6823      	ldr	r3, [r4, #0]
     e26:	432b      	orrs	r3, r5
     e28:	6023      	str	r3, [r4, #0]

	FIO1CLR |= 1 << ADC;
     e2a:	6833      	ldr	r3, [r6, #0]
     e2c:	432b      	orrs	r3, r5
     e2e:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
     e30:	2112      	movs	r1, #18
     e32:	2058      	movs	r0, #88	; 0x58
     e34:	f7ff ff6a 	bl	d0c <SPI0_send_1_byte>
	current = SPI0_send_2_byte(0xFFFF, ADC);
     e38:	2112      	movs	r1, #18
     e3a:	4806      	ldr	r0, [pc, #24]	; (e54 <adc_read_current+0x50>)
     e3c:	f7ff ff26 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     e40:	6823      	ldr	r3, [r4, #0]
     e42:	431d      	orrs	r5, r3
     e44:	6025      	str	r5, [r4, #0]

	return current;
}
     e46:	bc70      	pop	{r4, r5, r6}
     e48:	bc02      	pop	{r1}
     e4a:	4708      	bx	r1
     e4c:	3fffc03c 	.word	0x3fffc03c
     e50:	3fffc038 	.word	0x3fffc038
     e54:	0000ffff 	.word	0x0000ffff

00000e58 <adc_read_voltage>:

uint16_t adc_read_voltage(void)
{
     e58:	b570      	push	{r4, r5, r6, lr}
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
     e5a:	2580      	movs	r5, #128	; 0x80
     e5c:	4e10      	ldr	r6, [pc, #64]	; (ea0 <adc_read_voltage+0x48>)
     e5e:	6833      	ldr	r3, [r6, #0]
     e60:	02ed      	lsls	r5, r5, #11
     e62:	432b      	orrs	r3, r5
     e64:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
	SPI0_send_2_byte((MODE_REG_VAL | 1), ADC);	// | 1 - select 2 channel
	FIO1SET |= 1 << ADC;
     e66:	4c0f      	ldr	r4, [pc, #60]	; (ea4 <adc_read_voltage+0x4c>)
uint16_t adc_read_voltage(void)
{
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     e68:	2112      	movs	r1, #18
     e6a:	2008      	movs	r0, #8
     e6c:	f7ff ff4e 	bl	d0c <SPI0_send_1_byte>
	SPI0_send_2_byte((MODE_REG_VAL | 1), ADC);	// | 1 - select 2 channel
     e70:	2112      	movs	r1, #18
     e72:	2001      	movs	r0, #1
     e74:	f7ff ff0a 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     e78:	6823      	ldr	r3, [r4, #0]
     e7a:	432b      	orrs	r3, r5
     e7c:	6023      	str	r3, [r4, #0]

	FIO1CLR |= 1 << ADC;
     e7e:	6833      	ldr	r3, [r6, #0]
     e80:	432b      	orrs	r3, r5
     e82:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
     e84:	2112      	movs	r1, #18
     e86:	2058      	movs	r0, #88	; 0x58
     e88:	f7ff ff40 	bl	d0c <SPI0_send_1_byte>
	voltage = SPI0_send_2_byte(0xFFFF, ADC);
     e8c:	2112      	movs	r1, #18
     e8e:	4806      	ldr	r0, [pc, #24]	; (ea8 <adc_read_voltage+0x50>)
     e90:	f7ff fefc 	bl	c8c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     e94:	6823      	ldr	r3, [r4, #0]
     e96:	431d      	orrs	r5, r3
     e98:	6025      	str	r5, [r4, #0]

	return voltage;

}
     e9a:	bc70      	pop	{r4, r5, r6}
     e9c:	bc02      	pop	{r1}
     e9e:	4708      	bx	r1
     ea0:	3fffc03c 	.word	0x3fffc03c
     ea4:	3fffc038 	.word	0x3fffc038
     ea8:	0000ffff 	.word	0x0000ffff

00000eac <Isr_TIM0>:
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
	uint8_t dat;
	T0IR = 0x3F;
     eac:	223f      	movs	r2, #63	; 0x3f
 *         data = curr >> 8;
 *         UART0_send_byte(data);
 *         data = curr & 0xFF;
 *         UART0_send_byte(data); */

	FIO1PIN |= (1 << ADC_SCLK);
     eae:	2180      	movs	r1, #128	; 0x80
#include "adc_dac.h"
#include "usart_console.h"
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
     eb0:	b538      	push	{r3, r4, r5, lr}
 *         UART0_send_byte(data);
 *         data = curr & 0xFF;
 *         UART0_send_byte(data); */

	FIO1PIN |= (1 << ADC_SCLK);
	FIO1CLR |= 1 << ADC;
     eb2:	2480      	movs	r4, #128	; 0x80
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
	uint8_t dat;
	T0IR = 0x3F;
     eb4:	4b12      	ldr	r3, [pc, #72]	; (f00 <VIC_VectAddr>)
     eb6:	601a      	str	r2, [r3, #0]
 *         data = curr >> 8;
 *         UART0_send_byte(data);
 *         data = curr & 0xFF;
 *         UART0_send_byte(data); */

	FIO1PIN |= (1 << ADC_SCLK);
     eb8:	4a12      	ldr	r2, [pc, #72]	; (f04 <VIC_VectAddr+0x4>)
     eba:	6813      	ldr	r3, [r2, #0]
     ebc:	0349      	lsls	r1, r1, #13
     ebe:	430b      	orrs	r3, r1
     ec0:	6013      	str	r3, [r2, #0]
	FIO1CLR |= 1 << ADC;
     ec2:	4a11      	ldr	r2, [pc, #68]	; (f08 <VIC_VectAddr+0x8>)
     ec4:	6813      	ldr	r3, [r2, #0]
     ec6:	02e4      	lsls	r4, r4, #11
     ec8:	4323      	orrs	r3, r4
     eca:	6013      	str	r3, [r2, #0]

	SPI0_send_1_byte(READ_ID_REG, ADC);
     ecc:	2112      	movs	r1, #18
     ece:	2060      	movs	r0, #96	; 0x60
     ed0:	f7ff ff1c 	bl	d0c <SPI0_send_1_byte>
	dat = SPI0_send_1_byte(0xFF, ADC);
     ed4:	2112      	movs	r1, #18
     ed6:	20ff      	movs	r0, #255	; 0xff
     ed8:	f7ff ff18 	bl	d0c <SPI0_send_1_byte>
     edc:	1c05      	adds	r5, r0, #0

	FIO1SET |= 1 << ADC;
     ede:	4a0b      	ldr	r2, [pc, #44]	; (f0c <VIC_VectAddr+0xc>)
     ee0:	6813      	ldr	r3, [r2, #0]
     ee2:	4323      	orrs	r3, r4
     ee4:	6013      	str	r3, [r2, #0]

	UART0_send("\nSPI_recieved: ", 15);
     ee6:	210f      	movs	r1, #15
     ee8:	4809      	ldr	r0, [pc, #36]	; (f10 <VIC_VectAddr+0x10>)
     eea:	f7ff fd85 	bl	9f8 <UART0_send>
	UART0_send_byte(dat);
     eee:	1c28      	adds	r0, r5, #0
     ef0:	f7ff fd6c 	bl	9cc <UART0_send_byte>
	/* UART0_send(&data, 1); */
	/* UART0_send("Tim0\n", 5); */
	VICVectAddr = 0;
     ef4:	2200      	movs	r2, #0
     ef6:	4b07      	ldr	r3, [pc, #28]	; (f14 <VIC_VectAddr+0x14>)
     ef8:	601a      	str	r2, [r3, #0]
}
     efa:	bc38      	pop	{r3, r4, r5}
     efc:	bc01      	pop	{r0}
     efe:	4700      	bx	r0
     f00:	e0004000 	.word	0xe0004000
     f04:	3fffc034 	.word	0x3fffc034
     f08:	3fffc03c 	.word	0x3fffc03c
     f0c:	3fffc038 	.word	0x3fffc038
     f10:	00001405 	.word	0x00001405
     f14:	ffffff00 	.word	0xffffff00

00000f18 <timer0_init>:
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
     f18:	2102      	movs	r1, #2
     f1a:	4a0f      	ldr	r2, [pc, #60]	; (f58 <timer0_init+0x40>)
	/* UART0_send(&data, 1); */
	/* UART0_send("Tim0\n", 5); */
	VICVectAddr = 0;
}
void timer0_init(void)
{
     f1c:	b508      	push	{r3, lr}
	PCONP |= (1 << 1);	/* Power on tim0 */
     f1e:	6813      	ldr	r3, [r2, #0]
     f20:	430b      	orrs	r3, r1
     f22:	6013      	str	r3, [r2, #0]
	T0TCR = 0;	/* Disable tim0 */
     f24:	2300      	movs	r3, #0
     f26:	4a0d      	ldr	r2, [pc, #52]	; (f5c <timer0_init+0x44>)
     f28:	6013      	str	r3, [r2, #0]

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
     f2a:	4a0d      	ldr	r2, [pc, #52]	; (f60 <timer0_init+0x48>)
     f2c:	3901      	subs	r1, #1
     f2e:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
     f30:	4a0c      	ldr	r2, [pc, #48]	; (f64 <timer0_init+0x4c>)
     f32:	3102      	adds	r1, #2
     f34:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
     f36:	4a0c      	ldr	r2, [pc, #48]	; (f68 <timer0_init+0x50>)
     f38:	6013      	str	r3, [r2, #0]
	T0PR = 50;	/* Prescaler */
     f3a:	2232      	movs	r2, #50	; 0x32
     f3c:	4b0b      	ldr	r3, [pc, #44]	; (f6c <timer0_init+0x54>)
     f3e:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
     f40:	4a0b      	ldr	r2, [pc, #44]	; (f70 <timer0_init+0x58>)
     f42:	4b0c      	ldr	r3, [pc, #48]	; (f74 <timer0_init+0x5c>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
     f44:	2004      	movs	r0, #4

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
	T0MCR = 3;
	T0CTCR = 0;
	T0PR = 50;	/* Prescaler */
	T0MR0 = 72000;	/* Top value (5 Hz) */
     f46:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
     f48:	490b      	ldr	r1, [pc, #44]	; (f78 <timer0_init+0x60>)
     f4a:	220f      	movs	r2, #15
     f4c:	f7ff fc56 	bl	7fc <RegisterIrq>
}
     f50:	bc08      	pop	{r3}
     f52:	bc01      	pop	{r0}
     f54:	4700      	bx	r0
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	e01fc0c4 	.word	0xe01fc0c4
     f5c:	e0004004 	.word	0xe0004004
     f60:	e0004000 	.word	0xe0004000
     f64:	e0004014 	.word	0xe0004014
     f68:	e0004070 	.word	0xe0004070
     f6c:	e000400c 	.word	0xe000400c
     f70:	00011940 	.word	0x00011940
     f74:	e0004018 	.word	0xe0004018
     f78:	00000ead 	.word	0x00000ead

00000f7c <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
     f7c:	2101      	movs	r1, #1
     f7e:	4a06      	ldr	r2, [pc, #24]	; (f98 <timer0_start+0x1c>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
}

void timer0_start(void)
{
     f80:	b508      	push	{r3, lr}
	T0TCR |= 1;
     f82:	6813      	ldr	r3, [r2, #0]
     f84:	430b      	orrs	r3, r1
     f86:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     f88:	2002      	movs	r0, #2
     f8a:	310c      	adds	r1, #12
     f8c:	f7ff fb8a 	bl	6a4 <gpio_set>
}
     f90:	bc08      	pop	{r3}
     f92:	bc01      	pop	{r0}
     f94:	4700      	bx	r0
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	e0004004 	.word	0xe0004004

00000f9c <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
     f9c:	2101      	movs	r1, #1
     f9e:	4a06      	ldr	r2, [pc, #24]	; (fb8 <timer0_stop+0x1c>)
	T0TCR |= 1;
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
}

void timer0_stop(void)
{
     fa0:	b508      	push	{r3, lr}
	T0TCR &= ~1;
     fa2:	6813      	ldr	r3, [r2, #0]
     fa4:	438b      	bics	r3, r1
     fa6:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     fa8:	2002      	movs	r0, #2
     faa:	310c      	adds	r1, #12
     fac:	f7ff fb9c 	bl	6e8 <gpio_clear>
}
     fb0:	bc08      	pop	{r3}
     fb2:	bc01      	pop	{r0}
     fb4:	4700      	bx	r0
     fb6:	46c0      	nop			; (mov r8, r8)
     fb8:	e0004004 	.word	0xe0004004

00000fbc <atoi>:
     fbc:	b508      	push	{r3, lr}
     fbe:	2100      	movs	r1, #0
     fc0:	220a      	movs	r2, #10
     fc2:	f000 f90b 	bl	11dc <strtol>
     fc6:	bc08      	pop	{r3}
     fc8:	bc02      	pop	{r1}
     fca:	4708      	bx	r1

00000fcc <strncmp>:
     fcc:	1c03      	adds	r3, r0, #0
     fce:	b530      	push	{r4, r5, lr}
     fd0:	2000      	movs	r0, #0
     fd2:	2a00      	cmp	r2, #0
     fd4:	d03a      	beq.n	104c <strncmp+0x80>
     fd6:	1c1c      	adds	r4, r3, #0
     fd8:	430c      	orrs	r4, r1
     fda:	07a4      	lsls	r4, r4, #30
     fdc:	d120      	bne.n	1020 <strncmp+0x54>
     fde:	2a03      	cmp	r2, #3
     fe0:	d91e      	bls.n	1020 <strncmp+0x54>
     fe2:	681c      	ldr	r4, [r3, #0]
     fe4:	680d      	ldr	r5, [r1, #0]
     fe6:	42ac      	cmp	r4, r5
     fe8:	d11a      	bne.n	1020 <strncmp+0x54>
     fea:	3a04      	subs	r2, #4
     fec:	2a00      	cmp	r2, #0
     fee:	d02d      	beq.n	104c <strncmp+0x80>
     ff0:	4d1a      	ldr	r5, [pc, #104]	; (105c <strncmp+0x90>)
     ff2:	1965      	adds	r5, r4, r5
     ff4:	43a5      	bics	r5, r4
     ff6:	1c2c      	adds	r4, r5, #0
     ff8:	4d19      	ldr	r5, [pc, #100]	; (1060 <strncmp+0x94>)
     ffa:	422c      	tst	r4, r5
     ffc:	d00c      	beq.n	1018 <strncmp+0x4c>
     ffe:	e025      	b.n	104c <strncmp+0x80>
    1000:	6818      	ldr	r0, [r3, #0]
    1002:	680c      	ldr	r4, [r1, #0]
    1004:	42a0      	cmp	r0, r4
    1006:	d10b      	bne.n	1020 <strncmp+0x54>
    1008:	3a04      	subs	r2, #4
    100a:	2a00      	cmp	r2, #0
    100c:	d021      	beq.n	1052 <strncmp+0x86>
    100e:	4c13      	ldr	r4, [pc, #76]	; (105c <strncmp+0x90>)
    1010:	1904      	adds	r4, r0, r4
    1012:	4384      	bics	r4, r0
    1014:	422c      	tst	r4, r5
    1016:	d11c      	bne.n	1052 <strncmp+0x86>
    1018:	3304      	adds	r3, #4
    101a:	3104      	adds	r1, #4
    101c:	2a03      	cmp	r2, #3
    101e:	d8ef      	bhi.n	1000 <strncmp+0x34>
    1020:	781d      	ldrb	r5, [r3, #0]
    1022:	7808      	ldrb	r0, [r1, #0]
    1024:	3a01      	subs	r2, #1
    1026:	4285      	cmp	r5, r0
    1028:	d115      	bne.n	1056 <strncmp+0x8a>
    102a:	2a00      	cmp	r2, #0
    102c:	d011      	beq.n	1052 <strncmp+0x86>
    102e:	2d00      	cmp	r5, #0
    1030:	d104      	bne.n	103c <strncmp+0x70>
    1032:	e00e      	b.n	1052 <strncmp+0x86>
    1034:	2c00      	cmp	r4, #0
    1036:	d00c      	beq.n	1052 <strncmp+0x86>
    1038:	2a00      	cmp	r2, #0
    103a:	d00a      	beq.n	1052 <strncmp+0x86>
    103c:	3301      	adds	r3, #1
    103e:	3101      	adds	r1, #1
    1040:	781c      	ldrb	r4, [r3, #0]
    1042:	7808      	ldrb	r0, [r1, #0]
    1044:	3a01      	subs	r2, #1
    1046:	4284      	cmp	r4, r0
    1048:	d0f4      	beq.n	1034 <strncmp+0x68>
    104a:	1a20      	subs	r0, r4, r0
    104c:	bc30      	pop	{r4, r5}
    104e:	bc02      	pop	{r1}
    1050:	4708      	bx	r1
    1052:	2000      	movs	r0, #0
    1054:	e7fa      	b.n	104c <strncmp+0x80>
    1056:	1c2c      	adds	r4, r5, #0
    1058:	1a20      	subs	r0, r4, r0
    105a:	e7f7      	b.n	104c <strncmp+0x80>
    105c:	fefefeff 	.word	0xfefefeff
    1060:	80808080 	.word	0x80808080

00001064 <_strtol_r>:
    1064:	b5f0      	push	{r4, r5, r6, r7, lr}
    1066:	464d      	mov	r5, r9
    1068:	4656      	mov	r6, sl
    106a:	465f      	mov	r7, fp
    106c:	4644      	mov	r4, r8
    106e:	b4f0      	push	{r4, r5, r6, r7}
    1070:	1c1e      	adds	r6, r3, #0
    1072:	4b58      	ldr	r3, [pc, #352]	; (11d4 <_strtol_r+0x170>)
    1074:	b085      	sub	sp, #20
    1076:	9102      	str	r1, [sp, #8]
    1078:	681d      	ldr	r5, [r3, #0]
    107a:	9003      	str	r0, [sp, #12]
    107c:	1c0b      	adds	r3, r1, #0
    107e:	4691      	mov	r9, r2
    1080:	2108      	movs	r1, #8
    1082:	e000      	b.n	1086 <_strtol_r+0x22>
    1084:	1c3b      	adds	r3, r7, #0
    1086:	781c      	ldrb	r4, [r3, #0]
    1088:	192a      	adds	r2, r5, r4
    108a:	7852      	ldrb	r2, [r2, #1]
    108c:	1c5f      	adds	r7, r3, #1
    108e:	4211      	tst	r1, r2
    1090:	d1f8      	bne.n	1084 <_strtol_r+0x20>
    1092:	2c2d      	cmp	r4, #45	; 0x2d
    1094:	d100      	bne.n	1098 <_strtol_r+0x34>
    1096:	e072      	b.n	117e <_strtol_r+0x11a>
    1098:	2200      	movs	r2, #0
    109a:	9201      	str	r2, [sp, #4]
    109c:	2c2b      	cmp	r4, #43	; 0x2b
    109e:	d100      	bne.n	10a2 <_strtol_r+0x3e>
    10a0:	e07f      	b.n	11a2 <_strtol_r+0x13e>
    10a2:	2310      	movs	r3, #16
    10a4:	1c32      	adds	r2, r6, #0
    10a6:	46b0      	mov	r8, r6
    10a8:	439a      	bics	r2, r3
    10aa:	d10a      	bne.n	10c2 <_strtol_r+0x5e>
    10ac:	4273      	negs	r3, r6
    10ae:	4173      	adcs	r3, r6
    10b0:	2c30      	cmp	r4, #48	; 0x30
    10b2:	d100      	bne.n	10b6 <_strtol_r+0x52>
    10b4:	e078      	b.n	11a8 <_strtol_r+0x144>
    10b6:	2b00      	cmp	r3, #0
    10b8:	d100      	bne.n	10bc <_strtol_r+0x58>
    10ba:	e088      	b.n	11ce <_strtol_r+0x16a>
    10bc:	230a      	movs	r3, #10
    10be:	260a      	movs	r6, #10
    10c0:	4698      	mov	r8, r3
    10c2:	4a45      	ldr	r2, [pc, #276]	; (11d8 <_strtol_r+0x174>)
    10c4:	4694      	mov	ip, r2
    10c6:	9b01      	ldr	r3, [sp, #4]
    10c8:	4463      	add	r3, ip
    10ca:	1c18      	adds	r0, r3, #0
    10cc:	4641      	mov	r1, r8
    10ce:	469a      	mov	sl, r3
    10d0:	f000 f92c 	bl	132c <____aeabi_uidivmod_from_thumb>
    10d4:	4650      	mov	r0, sl
    10d6:	468b      	mov	fp, r1
    10d8:	4641      	mov	r1, r8
    10da:	f000 f92b 	bl	1334 <____aeabi_uidiv_from_thumb>
    10de:	2204      	movs	r2, #4
    10e0:	4684      	mov	ip, r0
    10e2:	4692      	mov	sl, r2
    10e4:	1c32      	adds	r2, r6, #0
    10e6:	1c3b      	adds	r3, r7, #0
    10e8:	1c2e      	adds	r6, r5, #0
    10ea:	2000      	movs	r0, #0
    10ec:	4665      	mov	r5, ip
    10ee:	2100      	movs	r1, #0
    10f0:	4694      	mov	ip, r2
    10f2:	e012      	b.n	111a <_strtol_r+0xb6>
    10f4:	3c30      	subs	r4, #48	; 0x30
    10f6:	45a4      	cmp	ip, r4
    10f8:	dd1d      	ble.n	1136 <_strtol_r+0xd2>
    10fa:	2800      	cmp	r0, #0
    10fc:	db09      	blt.n	1112 <_strtol_r+0xae>
    10fe:	428d      	cmp	r5, r1
    1100:	d307      	bcc.n	1112 <_strtol_r+0xae>
    1102:	2201      	movs	r2, #1
    1104:	455c      	cmp	r4, fp
    1106:	dc00      	bgt.n	110a <_strtol_r+0xa6>
    1108:	2200      	movs	r2, #0
    110a:	0612      	lsls	r2, r2, #24
    110c:	d02c      	beq.n	1168 <_strtol_r+0x104>
    110e:	42a9      	cmp	r1, r5
    1110:	d12a      	bne.n	1168 <_strtol_r+0x104>
    1112:	2001      	movs	r0, #1
    1114:	4240      	negs	r0, r0
    1116:	781c      	ldrb	r4, [r3, #0]
    1118:	3301      	adds	r3, #1
    111a:	4657      	mov	r7, sl
    111c:	1932      	adds	r2, r6, r4
    111e:	7852      	ldrb	r2, [r2, #1]
    1120:	4217      	tst	r7, r2
    1122:	d1e7      	bne.n	10f4 <_strtol_r+0x90>
    1124:	2703      	movs	r7, #3
    1126:	403a      	ands	r2, r7
    1128:	d005      	beq.n	1136 <_strtol_r+0xd2>
    112a:	2a01      	cmp	r2, #1
    112c:	d021      	beq.n	1172 <_strtol_r+0x10e>
    112e:	2257      	movs	r2, #87	; 0x57
    1130:	1aa4      	subs	r4, r4, r2
    1132:	45a4      	cmp	ip, r4
    1134:	dce1      	bgt.n	10fa <_strtol_r+0x96>
    1136:	1c42      	adds	r2, r0, #1
    1138:	d026      	beq.n	1188 <_strtol_r+0x124>
    113a:	9c01      	ldr	r4, [sp, #4]
    113c:	4262      	negs	r2, r4
    113e:	4051      	eors	r1, r2
    1140:	46a4      	mov	ip, r4
    1142:	464a      	mov	r2, r9
    1144:	4461      	add	r1, ip
    1146:	2a00      	cmp	r2, #0
    1148:	d039      	beq.n	11be <_strtol_r+0x15a>
    114a:	2800      	cmp	r0, #0
    114c:	d114      	bne.n	1178 <_strtol_r+0x114>
    114e:	1c08      	adds	r0, r1, #0
    1150:	9b02      	ldr	r3, [sp, #8]
    1152:	464a      	mov	r2, r9
    1154:	6013      	str	r3, [r2, #0]
    1156:	b005      	add	sp, #20
    1158:	bc3c      	pop	{r2, r3, r4, r5}
    115a:	4690      	mov	r8, r2
    115c:	4699      	mov	r9, r3
    115e:	46a2      	mov	sl, r4
    1160:	46ab      	mov	fp, r5
    1162:	bcf0      	pop	{r4, r5, r6, r7}
    1164:	bc02      	pop	{r1}
    1166:	4708      	bx	r1
    1168:	4642      	mov	r2, r8
    116a:	434a      	muls	r2, r1
    116c:	2001      	movs	r0, #1
    116e:	18a1      	adds	r1, r4, r2
    1170:	e7d1      	b.n	1116 <_strtol_r+0xb2>
    1172:	2237      	movs	r2, #55	; 0x37
    1174:	1aa4      	subs	r4, r4, r2
    1176:	e7dc      	b.n	1132 <_strtol_r+0xce>
    1178:	1c08      	adds	r0, r1, #0
    117a:	3b01      	subs	r3, #1
    117c:	e7e9      	b.n	1152 <_strtol_r+0xee>
    117e:	1c9f      	adds	r7, r3, #2
    1180:	785c      	ldrb	r4, [r3, #1]
    1182:	2301      	movs	r3, #1
    1184:	9301      	str	r3, [sp, #4]
    1186:	e78c      	b.n	10a2 <_strtol_r+0x3e>
    1188:	4913      	ldr	r1, [pc, #76]	; (11d8 <_strtol_r+0x174>)
    118a:	468c      	mov	ip, r1
    118c:	9a01      	ldr	r2, [sp, #4]
    118e:	4462      	add	r2, ip
    1190:	1c10      	adds	r0, r2, #0
    1192:	2222      	movs	r2, #34	; 0x22
    1194:	9903      	ldr	r1, [sp, #12]
    1196:	600a      	str	r2, [r1, #0]
    1198:	464a      	mov	r2, r9
    119a:	2a00      	cmp	r2, #0
    119c:	d0db      	beq.n	1156 <_strtol_r+0xf2>
    119e:	3b01      	subs	r3, #1
    11a0:	e7d7      	b.n	1152 <_strtol_r+0xee>
    11a2:	1c9f      	adds	r7, r3, #2
    11a4:	785c      	ldrb	r4, [r3, #1]
    11a6:	e77c      	b.n	10a2 <_strtol_r+0x3e>
    11a8:	2120      	movs	r1, #32
    11aa:	783a      	ldrb	r2, [r7, #0]
    11ac:	438a      	bics	r2, r1
    11ae:	2a58      	cmp	r2, #88	; 0x58
    11b0:	d107      	bne.n	11c2 <_strtol_r+0x15e>
    11b2:	2310      	movs	r3, #16
    11b4:	787c      	ldrb	r4, [r7, #1]
    11b6:	4698      	mov	r8, r3
    11b8:	3702      	adds	r7, #2
    11ba:	2610      	movs	r6, #16
    11bc:	e781      	b.n	10c2 <_strtol_r+0x5e>
    11be:	1c08      	adds	r0, r1, #0
    11c0:	e7c9      	b.n	1156 <_strtol_r+0xf2>
    11c2:	2b00      	cmp	r3, #0
    11c4:	d003      	beq.n	11ce <_strtol_r+0x16a>
    11c6:	2308      	movs	r3, #8
    11c8:	2608      	movs	r6, #8
    11ca:	4698      	mov	r8, r3
    11cc:	e779      	b.n	10c2 <_strtol_r+0x5e>
    11ce:	46b0      	mov	r8, r6
    11d0:	e777      	b.n	10c2 <_strtol_r+0x5e>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	40000000 	.word	0x40000000
    11d8:	7fffffff 	.word	0x7fffffff

000011dc <strtol>:
    11dc:	b538      	push	{r3, r4, r5, lr}
    11de:	1c05      	adds	r5, r0, #0
    11e0:	1c0c      	adds	r4, r1, #0
    11e2:	1c13      	adds	r3, r2, #0
    11e4:	4a04      	ldr	r2, [pc, #16]	; (11f8 <strtol+0x1c>)
    11e6:	1c29      	adds	r1, r5, #0
    11e8:	6810      	ldr	r0, [r2, #0]
    11ea:	1c22      	adds	r2, r4, #0
    11ec:	f7ff ff3a 	bl	1064 <_strtol_r>
    11f0:	bc38      	pop	{r3, r4, r5}
    11f2:	bc02      	pop	{r1}
    11f4:	4708      	bx	r1
    11f6:	46c0      	nop			; (mov r8, r8)
    11f8:	40000430 	.word	0x40000430

000011fc <__aeabi_uidiv>:
    11fc:	e2512001 	subs	r2, r1, #1
    1200:	012fff1e 	bxeq	lr
    1204:	3a000036 	bcc	12e4 <__aeabi_uidiv+0xe8>
    1208:	e1500001 	cmp	r0, r1
    120c:	9a000022 	bls	129c <__aeabi_uidiv+0xa0>
    1210:	e1110002 	tst	r1, r2
    1214:	0a000023 	beq	12a8 <__aeabi_uidiv+0xac>
    1218:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    121c:	01a01181 	lsleq	r1, r1, #3
    1220:	03a03008 	moveq	r3, #8
    1224:	13a03001 	movne	r3, #1
    1228:	e3510201 	cmp	r1, #268435456	; 0x10000000
    122c:	31510000 	cmpcc	r1, r0
    1230:	31a01201 	lslcc	r1, r1, #4
    1234:	31a03203 	lslcc	r3, r3, #4
    1238:	3afffffa 	bcc	1228 <__aeabi_uidiv+0x2c>
    123c:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1240:	31510000 	cmpcc	r1, r0
    1244:	31a01081 	lslcc	r1, r1, #1
    1248:	31a03083 	lslcc	r3, r3, #1
    124c:	3afffffa 	bcc	123c <__aeabi_uidiv+0x40>
    1250:	e3a02000 	mov	r2, #0
    1254:	e1500001 	cmp	r0, r1
    1258:	20400001 	subcs	r0, r0, r1
    125c:	21822003 	orrcs	r2, r2, r3
    1260:	e15000a1 	cmp	r0, r1, lsr #1
    1264:	204000a1 	subcs	r0, r0, r1, lsr #1
    1268:	218220a3 	orrcs	r2, r2, r3, lsr #1
    126c:	e1500121 	cmp	r0, r1, lsr #2
    1270:	20400121 	subcs	r0, r0, r1, lsr #2
    1274:	21822123 	orrcs	r2, r2, r3, lsr #2
    1278:	e15001a1 	cmp	r0, r1, lsr #3
    127c:	204001a1 	subcs	r0, r0, r1, lsr #3
    1280:	218221a3 	orrcs	r2, r2, r3, lsr #3
    1284:	e3500000 	cmp	r0, #0
    1288:	11b03223 	lsrsne	r3, r3, #4
    128c:	11a01221 	lsrne	r1, r1, #4
    1290:	1affffef 	bne	1254 <__aeabi_uidiv+0x58>
    1294:	e1a00002 	mov	r0, r2
    1298:	e12fff1e 	bx	lr
    129c:	03a00001 	moveq	r0, #1
    12a0:	13a00000 	movne	r0, #0
    12a4:	e12fff1e 	bx	lr
    12a8:	e3510801 	cmp	r1, #65536	; 0x10000
    12ac:	21a01821 	lsrcs	r1, r1, #16
    12b0:	23a02010 	movcs	r2, #16
    12b4:	33a02000 	movcc	r2, #0
    12b8:	e3510c01 	cmp	r1, #256	; 0x100
    12bc:	21a01421 	lsrcs	r1, r1, #8
    12c0:	22822008 	addcs	r2, r2, #8
    12c4:	e3510010 	cmp	r1, #16
    12c8:	21a01221 	lsrcs	r1, r1, #4
    12cc:	22822004 	addcs	r2, r2, #4
    12d0:	e3510004 	cmp	r1, #4
    12d4:	82822003 	addhi	r2, r2, #3
    12d8:	908220a1 	addls	r2, r2, r1, lsr #1
    12dc:	e1a00230 	lsr	r0, r0, r2
    12e0:	e12fff1e 	bx	lr
    12e4:	e12fff1f 	bx	pc
    12e8:	e1a00000 	nop			; (mov r0, r0)
    12ec:	e3500000 	cmp	r0, #0
    12f0:	13e00000 	mvnne	r0, #0
    12f4:	ea000009 	b	1320 <____aeabi_idiv0_from_arm>

000012f8 <__aeabi_uidivmod>:
    12f8:	e3510000 	cmp	r1, #0
    12fc:	0afffff8 	beq	12e4 <__aeabi_uidiv+0xe8>
    1300:	e92d4003 	push	{r0, r1, lr}
    1304:	ebffffbc 	bl	11fc <__aeabi_uidiv>
    1308:	e8bd4006 	pop	{r1, r2, lr}
    130c:	e0030092 	mul	r3, r2, r0
    1310:	e0411003 	sub	r1, r1, r3
    1314:	e12fff1e 	bx	lr

00001318 <__aeabi_idiv0>:
    1318:	4770      	bx	lr
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	0000      	movs	r0, r0
	...

00001320 <____aeabi_idiv0_from_arm>:
    1320:	e59fc000 	ldr	ip, [pc]	; 1328 <____aeabi_idiv0_from_arm+0x8>
    1324:	e12fff1c 	bx	ip
    1328:	00001319 	.word	0x00001319

0000132c <____aeabi_uidivmod_from_thumb>:
    132c:	4778      	bx	pc
    132e:	46c0      	nop			; (mov r8, r8)
    1330:	eafffff0 	b	12f8 <__aeabi_uidivmod>

00001334 <____aeabi_uidiv_from_thumb>:
    1334:	4778      	bx	pc
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	eaffffaf 	b	11fc <__aeabi_uidiv>
    133c:	00000000 	andeq	r0, r0, r0

00001340 <help_msg>:
    1340:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
    1350:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
    1360:	20202020 72617473 202d2074 72617473         start - star
    1370:	656d2074 72757361 6e656d65 200a7374     t measurements. 
    1380:	73202020 20706f74 6966202d 6873696e        stop - finish
    1390:	61656d20 65727573 746e656d 20200a73      measurements.  
    13a0:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
    13b0:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
    13c0:	75746573 0a000a70 2043504c 74696e69     setup...LPC init
    13d0:	696c6169 0a64657a 61747300 0a007472     ialized..start..
    13e0:	72617453 0a646574 6f747300 530a0070     Started..stop..S
    13f0:	70706f74 000a6465 00746573 000a4b4f     topped..set.OK..
    1400:	706c6568 50530a00 65725f49 76656963     help..SPI_reciev
    1410:	203a6465 00000000                       ed: ....

00001418 <_ctype_>:
    1418:	20202000 20202020 28282020 20282828     .         ((((( 
    1428:	20202020 20202020 20202020 20202020                     
    1438:	10108820 10101010 10101010 10101010      ...............
    1448:	04040410 04040404 10040404 10101010     ................
    1458:	41411010 41414141 01010101 01010101     ..AAAAAA........
    1468:	01010101 01010101 01010101 10101010     ................
    1478:	42421010 42424242 02020202 02020202     ..BBBBBB........
    1488:	02020202 02020202 02020202 10101010     ................
    1498:	00000020 00000000 00000000 00000000      ...............
	...
    151c:	00000043                                C...
