
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ea6  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  40000000  40000000  00010ea6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000144  40000000  40000000  00020000  2**1
                  ALLOC
  3 .stack        00000a14  40000144  40000144  00020000  2**2
                  ALLOC
  4 .usbram       00000000  7fd00000  7fd00000  00010ea6  2**0
                  CONTENTS
  5 .etherram     00000000  7fe00000  7fe00000  00010ea6  2**0
                  CONTENTS
  6 .batteryram   00000000  e0084000  e0084000  00010ea6  2**0
                  CONTENTS
  7 .comment      00000070  00000000  00000000  00010ea6  2**0
                  CONTENTS, READONLY
  8 .ARM.attributes 0000002e  00000000  00000000  00010f16  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000130  00000000  00000000  00010f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000132f  00000000  00000000  00011078  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000798  00000000  00000000  000123a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00000828  00000000  00000000  00012b3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000035c  00000000  00000000  00013368  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000045f  00000000  00000000  000136c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000006a9  00000000  00000000  00013b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  000141d0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
   0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, =trap		@ Undef entry
   4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =swi_handler	@ SWI entry
   8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, =trap		@ PAbt entry
   c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =trap		@ DAbt entry
  10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
  14:	00000000 	.word	0x00000000
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
  18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
	LDR     PC, =fiq_handler	@ FIQ entry
  1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
  20:	00000300 	.word	0x00000300
	LDR	PC, =trap		@ Undef entry
  24:	0000038c 	.word	0x0000038c
	LDR	PC, =swi_handler	@ SWI entry
  28:	000003fc 	.word	0x000003fc
	LDR	PC, =trap		@ PAbt entry
	LDR	PC, =trap		@ DAbt entry
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
  2c:	000003ac 	.word	0x000003ac
	LDR     PC, =fiq_handler	@ FIQ entry
  30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
 300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
 304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
 308:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
 30c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
 310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
 314:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
 318:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
 31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
 320:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
 324:	e2400010 	sub	r0, r0, #16

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
 328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
 32c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
 330:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
 334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
 338:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
 33c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
 340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
 344:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
 348:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
 34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
	LDR	R2, =_sdata
 350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
	LDR	R3, =_edata
 354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
1:	CMP	R2, R3
 358:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
 35c:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
 360:	34820004 	strcc	r0, [r2], #4
	BLO	1b
 364:	3afffffb 	bcc	358 <reset_handler+0x58>

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
 368:	e3a00000 	mov	r0, #0
	LDR	R1, =_sbss
 36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
	LDR	R2, =_ebss
 370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
3:	CMP	R1, R2
 374:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
 378:	34810004 	strcc	r0, [r1], #4
	BLO	3b
 37c:	3afffffc 	bcc	374 <reset_handler+0x74>

@ Start main()
.extern main
	LDR	R0, =main
 380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
	MOV	LR, PC
 384:	e1a0e00f 	mov	lr, pc
	BX	R0
 388:	e12fff10 	bx	r0

0000038c <trap>:

@ Trap (infinite loop)
trap:
	B	trap
 38c:	eafffffe 	b	38c <trap>
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
 390:	40000b58 	.word	0x40000b58
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
	MOV	SP, R0
	SUB	SL, SP, #USR_Stack_Size

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
 394:	00000ea8 	.word	0x00000ea8
	LDR	R2, =_sdata
 398:	40000000 	.word	0x40000000
	LDR	R3, =_edata
 39c:	40000000 	.word	0x40000000
	STRLO	R0, [R2], #4
	BLO	1b

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
	LDR	R1, =_sbss
 3a0:	40000000 	.word	0x40000000
	LDR	R2, =_ebss
 3a4:	40000144 	.word	0x40000144
	STRLO	R0, [R1], #4
	BLO	3b

@ Start main()
.extern main
	LDR	R0, =main
 3a8:	000007bd 	.word	0x000007bd

000003ac <irq_handler>:
.equ VIC_VectAddr0,	0x100
.equ VIC_VectPriority0,	0x200
.equ VIC_VectAddr,	0xF00

irq_handler:
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
 3ac:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
 3b0:	e92d4000 	stmfd	sp!, {lr}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
 3b4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
 3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
 3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
	LDR	R0, [R0, #VIC_VectAddr]
 3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
	MSR	CPSR_c, #M_SVC		@ Enter SVC mode and enable Irq and Fiq
 3c4:	e321f013 	msr	CPSR_c, #19

	STMFD	SP!, {LR}		@ Call the ISR
 3c8:	e92d4000 	stmfd	sp!, {lr}
	MOV	LR, PC
 3cc:	e1a0e00f 	mov	lr, pc
	BX	R0
 3d0:	e12fff10 	bx	r0
	LDMIA	SP!, {LR}
 3d4:	e8bd4000 	ldmfd	sp!, {lr}

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
 3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMIA	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
 3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
 3e0:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
 3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
	STR	LR, [LR, #VIC_VectAddr]
 3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMIA	SP!, {PC}^		@ Reruen from the IRQ handler
 3ec:	e8fd8000 	ldm	sp!, {pc}^
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
	STMFD	SP!, {LR}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
 3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
@ FIQ Handler
@ FIQ routine is typically written in assembler
@-----------------------------------------------------------@

fiq_handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq
 3f4:	e24ee004 	sub	lr, lr, #4

	@ Put the FIQ service here

	MOVS	PC, LR			@ Return from FIQ
 3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
@-----------------------------------------------------------@
@ SWI Service (declared in interrupt.h)
@-----------------------------------------------------------@

swi_handler:
	MRS	IP, SPSR
 3fc:	e14fc000 	mrs	ip, SPSR
	TST	IP, #B_Thumb		@ Check caller's state, ARM or Thumb
 400:	e31c0020 	tst	ip, #32
	LDRNEH	IP, [LR, #-2]		@ Get swi instruction code (on Thumb state)
 404:	115ec0b2 	ldrhne	ip, [lr, #-2]
	LDREQ	IP, [LR, #-4]		@ Get swi instruction code (on ARM state)
 408:	051ec004 	ldreq	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
 40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #7			@ Check range
 410:	e35c0007 	cmp	ip, #7
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump to each service function when code is valid
 414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
 418:	e1b0f00e 	movs	pc, lr
 41c:	00000438 	.word	0x00000438
 420:	00000448 	.word	0x00000448
 424:	00000458 	.word	0x00000458
 428:	0000047c 	.word	0x0000047c
 42c:	000004b4 	.word	0x000004b4
 430:	000004d4 	.word	0x000004d4
 434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
	.word	sel_fiq		@ 4 Select FIQ interrupt
	.word	load_fiq	@ 5 Load FIQ shadow regs from memory
	.word	store_fiq	@ 6 Store FIQ shadow regs to memory

irq_disable:
	MRS	R0, SPSR
 438:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq | B_Fiq
 43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
 440:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:

irq_enable:
	MRS	R0, SPSR
 448:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq | B_Fiq
 44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
 450:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
 454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:

clear_vect:
	LDR	IP, =LPC_BASE_VIC
 458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
	MVN	R0, #0				@ Disable all interrupts
 45c:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
 460:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
 464:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
 468:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
 46c:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
 470:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_VectAddr]		@ Issule EOI command
 474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
 478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:

reg_irq:
	CMP	R0, #32				@ Range check
 47c:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
 480:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
 484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
 488:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
 48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
 490:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
 494:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
 498:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
 49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
	LDR	R2, [IP, #VIC_IntSelect]	@ Clear corresponding bit in the VICIntSelect
 4a0:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
 4a4:	e1c22001 	bic	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
 4a8:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
 4ac:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
 4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:

sel_fiq:
	CMP	R0, #32				@ Range check
 4b4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
 4b8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =LPC_BASE_VIC
 4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
	MOV	R1, #1				@ Set corresponding bit in the VICIntSelect
 4c0:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
 4c4:	e1a01011 	lsl	r1, r1, r0
	STR	R1, [IP, #VIC_IntSelect]
 4c8:	e58c100c 	str	r1, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
 4cc:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
 4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:

load_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
 4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMIA	R0!, {R8-R12}			@ Load the memory to five shadow registers
 4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
 4dc:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
 4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:

store_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
 4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
	STMIA	R0!, {R8-R12}			@ Store five shadow registers to the memory
 4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
 4ec:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
 4f0:	e1b0f00e 	movs	pc, lr
	BIC	R0, R0, #B_Irq | B_Fiq
	MSR	SPSR_c, R0
	MOVS	PC, LR

clear_vect:
	LDR	IP, =LPC_BASE_VIC
 4f4:	fffff000 	.word	0xfffff000
	MOVS	PC, LR

reg_irq:
	CMP	R0, #32				@ Range check
	MOVCSS	PC, LR
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
 4f8:	fffff100 	.word	0xfffff100
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
 4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
@ void Copy_un2al (DWORD *dst, const BYTE *src, int count);
.global Copy_un2al
.type Copy_un2al, %function
.func Copy_un2al
Copy_un2al:
	STMFD	SP!, {R4-R8}
 500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
 504:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
 508:	0a000012 	beq	558 <lb_align>

	BIC	R1, #3
 50c:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
 510:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
 514:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
 518:	e8b10080 	ldm	r1!, {r7}
1:	MOV	R3, R7
 51c:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
 520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
 524:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
 528:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
 52c:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
 530:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
 534:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
 538:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
 53c:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
 540:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
 544:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	1b
 54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
	LDMFD	SP!, {R4-R8}
 550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 554:	e12fff1e 	bx	lr

00000558 <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
 558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
 55c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
 564:	1afffffb 	bne	558 <lb_align>
	LDMFD	SP!, {R4-R8}
 568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
@ void Copy_al2un (BYTE *dst, const DWORD *src, int count);
.global Copy_al2un
.type Copy_al2un, %function
.func Copy_al2un
Copy_al2un:
	STMFD	SP!, {R4-R8}
 570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
 574:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
 578:	0a000021 	beq	604 <sb_align>

	MOV	IP, IP, LSL #3
 57c:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
 580:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
 584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
1:	STRB	R4, [R0], #1
 588:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
 58c:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
 590:	e3100003 	tst	r0, #3
	BNE	1b
 594:	1afffffb 	bne	588 <Copy_al2un+0x18>
	ORR	R4, R4, R5, LSL IP
 598:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
 59c:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
 5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
 5a4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
 5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
 5ac:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
 5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}

2:	MOV	R3, R7
 5b4:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
 5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
 5bc:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
 5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
 5c4:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
 5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
 5cc:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
 5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
 5d4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
 5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
 5dc:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	2b
 5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>

	MOV	R7, R7, LSR R8
 5e8:	e1a07837 	lsr	r7, r7, r8
3:	SUBS	IP, IP, #8
 5ec:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
 5f0:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
 5f4:	e1a07427 	lsr	r7, r7, #8
	BNE	3b
 5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>

	LDMFD	SP!, {R4-R8}
 5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 600:	e12fff1e 	bx	lr

00000604 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
 604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
 608:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
 60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
 610:	1afffffb 	bne	604 <sb_align>
	LDMFD	SP!, {R4-R8}
 614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
 618:	e12fff1e 	bx	lr

0000061c <GPIOInit>:
#include "spi.h"
#include "timers.h"

void GPIOInit (void)
{
	SCS |= 1;
 61c:	2101      	movs	r1, #1
 61e:	4a0c      	ldr	r2, [pc, #48]	; (650 <GPIOInit+0x34>)
 620:	6813      	ldr	r3, [r2, #0]
 622:	430b      	orrs	r3, r1
 624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
 626:	2200      	movs	r2, #0
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
 628:	2003      	movs	r0, #3
#include "timers.h"

void GPIOInit (void)
{
	SCS |= 1;
	FIO2MASK = 0;
 62a:	4b0a      	ldr	r3, [pc, #40]	; (654 <GPIOInit+0x38>)
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
 62c:	490a      	ldr	r1, [pc, #40]	; (658 <GPIOInit+0x3c>)
#include "timers.h"

void GPIOInit (void)
{
	SCS |= 1;
	FIO2MASK = 0;
 62e:	601a      	str	r2, [r3, #0]
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
 630:	680b      	ldr	r3, [r1, #0]
 632:	4303      	orrs	r3, r0
 634:	600b      	str	r3, [r1, #0]
	/* Switch on leds */
	/* FIO2SET = (1 << LED1) | (1 << LED2); */
	/* ADC and DAC chip select pins setup */
	FIO1MASK = 0;
 636:	4b09      	ldr	r3, [pc, #36]	; (65c <GPIOInit+0x40>)
 638:	601a      	str	r2, [r3, #0]
	FIO1DIR |= (1 << ADC) | (1 << DAC);	/* Slave select pins */
 63a:	4b09      	ldr	r3, [pc, #36]	; (660 <GPIOInit+0x44>)
 63c:	4909      	ldr	r1, [pc, #36]	; (664 <GPIOInit+0x48>)
 63e:	681a      	ldr	r2, [r3, #0]
 640:	430a      	orrs	r2, r1
 642:	601a      	str	r2, [r3, #0]
	FIO1SET |= (1 << ADC) | (1 << DAC);	/* Set hight level */
 644:	4a08      	ldr	r2, [pc, #32]	; (668 <GPIOInit+0x4c>)
 646:	6813      	ldr	r3, [r2, #0]
 648:	430b      	orrs	r3, r1
 64a:	6013      	str	r3, [r2, #0]
}
 64c:	4770      	bx	lr
 64e:	46c0      	nop			; (mov r8, r8)
 650:	e01fc1a0 	.word	0xe01fc1a0
 654:	3fffc050 	.word	0x3fffc050
 658:	3fffc040 	.word	0x3fffc040
 65c:	3fffc030 	.word	0x3fffc030
 660:	3fffc020 	.word	0x3fffc020
 664:	20040000 	.word	0x20040000
 668:	3fffc038 	.word	0x3fffc038

0000066c <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
 66c:	2201      	movs	r2, #1
 66e:	4082      	lsls	r2, r0
 670:	1c10      	adds	r0, r2, #0
 672:	4902      	ldr	r1, [pc, #8]	; (67c <led_set+0x10>)
 674:	680b      	ldr	r3, [r1, #0]
 676:	4318      	orrs	r0, r3
 678:	6008      	str	r0, [r1, #0]
}
 67a:	4770      	bx	lr
 67c:	3fffc058 	.word	0x3fffc058

00000680 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
 680:	2201      	movs	r2, #1
 682:	4082      	lsls	r2, r0
 684:	1c10      	adds	r0, r2, #0
 686:	4902      	ldr	r1, [pc, #8]	; (690 <led_clear+0x10>)
 688:	680b      	ldr	r3, [r1, #0]
 68a:	4318      	orrs	r0, r3
 68c:	6008      	str	r0, [r1, #0]
}
 68e:	4770      	bx	lr
 690:	3fffc05c 	.word	0x3fffc05c

00000694 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
 694:	b510      	push	{r4, lr}
	switch (port)
 696:	2801      	cmp	r0, #1
 698:	d00f      	beq.n	6ba <gpio_set+0x26>
 69a:	2800      	cmp	r0, #0
 69c:	d009      	beq.n	6b2 <gpio_set+0x1e>
 69e:	2802      	cmp	r0, #2
 6a0:	d110      	bne.n	6c4 <gpio_set+0x30>
		break;
	case 1:
	       	FIO1SET |= (1 << pin);
		break;
	case 2:
		FIO2SET |= (1 << pin);
 6a2:	2201      	movs	r2, #1
 6a4:	408a      	lsls	r2, r1
 6a6:	1c10      	adds	r0, r2, #0
 6a8:	4c08      	ldr	r4, [pc, #32]	; (6cc <gpio_set+0x38>)
 6aa:	6823      	ldr	r3, [r4, #0]
 6ac:	4318      	orrs	r0, r3
 6ae:	6020      	str	r0, [r4, #0]
		break;
 6b0:	e008      	b.n	6c4 <gpio_set+0x30>
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
	{
	case 0:
		FIO0SET |= (1 << pin);
 6b2:	4a07      	ldr	r2, [pc, #28]	; (6d0 <gpio_set+0x3c>)
 6b4:	2001      	movs	r0, #1
 6b6:	6813      	ldr	r3, [r2, #0]
 6b8:	e001      	b.n	6be <gpio_set+0x2a>
		break;
	case 1:
	       	FIO1SET |= (1 << pin);
 6ba:	4a06      	ldr	r2, [pc, #24]	; (6d4 <gpio_set+0x40>)
 6bc:	6813      	ldr	r3, [r2, #0]
 6be:	4088      	lsls	r0, r1
 6c0:	4318      	orrs	r0, r3
 6c2:	6010      	str	r0, [r2, #0]
		FIO2SET |= (1 << pin);
		break;
	default:
	break;	
	}
}
 6c4:	bc10      	pop	{r4}
 6c6:	bc01      	pop	{r0}
 6c8:	4700      	bx	r0
 6ca:	46c0      	nop			; (mov r8, r8)
 6cc:	3fffc058 	.word	0x3fffc058
 6d0:	3fffc018 	.word	0x3fffc018
 6d4:	3fffc038 	.word	0x3fffc038

000006d8 <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
 6d8:	b510      	push	{r4, lr}
	switch (port)
 6da:	2801      	cmp	r0, #1
 6dc:	d00f      	beq.n	6fe <gpio_clear+0x26>
 6de:	2800      	cmp	r0, #0
 6e0:	d009      	beq.n	6f6 <gpio_clear+0x1e>
 6e2:	2802      	cmp	r0, #2
 6e4:	d110      	bne.n	708 <gpio_clear+0x30>
		break;
	case 1:
	       	FIO1CLR |= (1 << pin);
		break;
	case 2:
		FIO2CLR |= (1 << pin);
 6e6:	2201      	movs	r2, #1
 6e8:	408a      	lsls	r2, r1
 6ea:	1c10      	adds	r0, r2, #0
 6ec:	4c08      	ldr	r4, [pc, #32]	; (710 <gpio_clear+0x38>)
 6ee:	6823      	ldr	r3, [r4, #0]
 6f0:	4318      	orrs	r0, r3
 6f2:	6020      	str	r0, [r4, #0]
		break;
 6f4:	e008      	b.n	708 <gpio_clear+0x30>
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
	{
	case 0:
		FIO0CLR |= (1 << pin);
 6f6:	4a07      	ldr	r2, [pc, #28]	; (714 <gpio_clear+0x3c>)
 6f8:	2001      	movs	r0, #1
 6fa:	6813      	ldr	r3, [r2, #0]
 6fc:	e001      	b.n	702 <gpio_clear+0x2a>
		break;
	case 1:
	       	FIO1CLR |= (1 << pin);
 6fe:	4a06      	ldr	r2, [pc, #24]	; (718 <gpio_clear+0x40>)
 700:	6813      	ldr	r3, [r2, #0]
 702:	4088      	lsls	r0, r1
 704:	4318      	orrs	r0, r3
 706:	6010      	str	r0, [r2, #0]
		FIO2CLR |= (1 << pin);
		break;
	default:
	break;	
	}
}
 708:	bc10      	pop	{r4}
 70a:	bc01      	pop	{r0}
 70c:	4700      	bx	r0
 70e:	46c0      	nop			; (mov r8, r8)
 710:	3fffc05c 	.word	0x3fffc05c
 714:	3fffc01c 	.word	0x3fffc01c
 718:	3fffc03c 	.word	0x3fffc03c

0000071c <IoInit>:
void IoInit(void)
{
// 1. Init OSC
	SCS = (1 << 5);
 71c:	2220      	movs	r2, #32
 71e:	4b1d      	ldr	r3, [pc, #116]	; (794 <IoInit+0x78>)
	default:
	break;	
	}
}
void IoInit(void)
{
 720:	b570      	push	{r4, r5, r6, lr}
// 1. Init OSC
	SCS = (1 << 5);
 722:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
  while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
 724:	681a      	ldr	r2, [r3, #0]
 726:	0652      	lsls	r2, r2, #25
 728:	d5fc      	bpl.n	724 <IoInit+0x8>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
 72a:	20aa      	movs	r0, #170	; 0xaa
	PLLFEED = 0x55;
 72c:	2155      	movs	r1, #85	; 0x55
// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
  while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
 72e:	2501      	movs	r5, #1
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
 730:	2400      	movs	r4, #0
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
  while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
 732:	4b19      	ldr	r3, [pc, #100]	; (798 <IoInit+0x7c>)
// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
  while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
 734:	4a19      	ldr	r2, [pc, #100]	; (79c <IoInit+0x80>)
 736:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
 738:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
 73a:	6019      	str	r1, [r3, #0]
	// 4. Disable PLL
	PLLCON = 0;
 73c:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
 73e:	4c18      	ldr	r4, [pc, #96]	; (7a0 <IoInit+0x84>)
	PLLCON = 1; 
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
 740:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
 742:	4e18      	ldr	r6, [pc, #96]	; (7a4 <IoInit+0x88>)
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
 744:	6019      	str	r1, [r3, #0]
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
 746:	6025      	str	r5, [r4, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
 748:	4c17      	ldr	r4, [pc, #92]	; (7a8 <IoInit+0x8c>)
 74a:	6026      	str	r6, [r4, #0]
	PLLFEED = 0xAA;
 74c:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
 74e:	6019      	str	r1, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
 750:	6814      	ldr	r4, [r2, #0]
 752:	432c      	orrs	r4, r5
 754:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
 756:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
 758:	6019      	str	r1, [r3, #0]
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
 75a:	4914      	ldr	r1, [pc, #80]	; (7ac <IoInit+0x90>)
 75c:	6809      	ldr	r1, [r1, #0]
 75e:	0149      	lsls	r1, r1, #5
 760:	d5fb      	bpl.n	75a <IoInit+0x3e>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
 762:	2003      	movs	r0, #3
 764:	4912      	ldr	r1, [pc, #72]	; (7b0 <IoInit+0x94>)
 766:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
 768:	2000      	movs	r0, #0
 76a:	4912      	ldr	r1, [pc, #72]	; (7b4 <IoInit+0x98>)
 76c:	4c12      	ldr	r4, [pc, #72]	; (7b8 <IoInit+0x9c>)
 76e:	6008      	str	r0, [r1, #0]
 770:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
 772:	3004      	adds	r0, #4
 774:	6008      	str	r0, [r1, #0]
        
	// 10. Connect the PLL
	PLLCON |= 1 << 1;
 776:	6811      	ldr	r1, [r2, #0]
 778:	3802      	subs	r0, #2
 77a:	4301      	orrs	r1, r0
 77c:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
 77e:	22aa      	movs	r2, #170	; 0xaa
 780:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
 782:	3a55      	subs	r2, #85	; 0x55
 784:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
 786:	f000 f831 	bl	7ec <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
 78a:	f000 f82d 	bl	7e8 <IrqEnable>

}
 78e:	bc70      	pop	{r4, r5, r6}
 790:	bc01      	pop	{r0}
 792:	4700      	bx	r0
 794:	e01fc1a0 	.word	0xe01fc1a0
 798:	e01fc08c 	.word	0xe01fc08c
 79c:	e01fc080 	.word	0xe01fc080
 7a0:	e01fc10c 	.word	0xe01fc10c
 7a4:	00010017 	.word	0x00010017
 7a8:	e01fc084 	.word	0xe01fc084
 7ac:	e01fc088 	.word	0xe01fc088
 7b0:	e01fc104 	.word	0xe01fc104
 7b4:	e01fc1ac 	.word	0xe01fc1ac
 7b8:	e01fc1a8 	.word	0xe01fc1a8

000007bc <main>:


int main (void)
{
 7bc:	b508      	push	{r3, lr}
	uint16_t d;
	GPIOInit();
 7be:	f7ff ff2d 	bl	61c <GPIOInit>
	IoInit();			/* 	[> Initialize PLL, VIC and timer <] */
 7c2:	f7ff ffab 	bl	71c <IoInit>
	uart0_init();		/* 	[> Initialize UART and join it to the console <] <] */
 7c6:	f000 f899 	bl	8fc <uart0_init>
	SPI0_init();
 7ca:	f000 f983 	bl	ad4 <SPI0_init>
	timer0_init();
 7ce:	f000 fa6d 	bl	cac <timer0_init>
	timer0_start();
 7d2:	f000 faa3 	bl	d1c <timer0_start>
	UART0_send("LPC initialized\n", 16);
 7d6:	4802      	ldr	r0, [pc, #8]	; (7e0 <main+0x24>)
 7d8:	2110      	movs	r1, #16
 7da:	f000 f8cd 	bl	978 <UART0_send>
	{
		/* S0SPDR = 0x55; */
		/* SPI0_send_1_byte(0xF0, ADC); */
		/* d = SPI0_read_2_byte(ADC); */
		/* UART0_send(d, 1); */
	}
 7de:	e7fe      	b.n	7de <main+0x22>
 7e0:	00000e7b 	.word	0x00000e7b

000007e4 <IrqDisable>:


/* Disable/Enable Irq */
void IrqDisable (void)
{
	asm ("swi 0\n");
 7e4:	df00      	svc	0
}
 7e6:	4770      	bx	lr

000007e8 <IrqEnable>:

void IrqEnable (void)
{
	asm ("swi 1\n");
 7e8:	df01      	svc	1
}
 7ea:	4770      	bx	lr

000007ec <ClearVector>:


/* Unregister all ISRs */
void ClearVector (void)
{
	asm ("swi 2\n");
 7ec:	df02      	svc	2
}
 7ee:	4770      	bx	lr

000007f0 <RegisterIrq>:
	int irq,
	void(*isr)(void),
	int pri
)
{
	asm (
 7f0:	df03      	svc	3
	"@ MOV R0, %0\n"
	"@ MOV R1, %1\n"
	"@ MOV R2, %2\n"
	"swi 3\n" : : "r" (irq), "r" (isr), "r" (pri)
	);
}
 7f2:	4770      	bx	lr

000007f4 <SelectFiq>:
/* Switch an interrtupt source as FIQ */
void SelectFiq (
	int irq
)
{
	asm (
 7f4:	df04      	svc	4
	"@ MOV R0, %0\n"
	"swi 4\n" : : "r" (irq)
	);
}
 7f6:	4770      	bx	lr

000007f8 <LoadFiqRegs>:
/* Load shadow regs R8-R12 from memory */
void LoadFiqRegs (
	long *regs
)
{
	asm (
 7f8:	df05      	svc	5
	"@ MOV R0, %0\n"
	"swi 5\n" : : "r" (regs)
	);
}
 7fa:	4770      	bx	lr

000007fc <StoreFiqRegs>:
/* Store shadow regs R8-R12 to memory */
void StoreFiqRegs (
	long *regs
)
{
	asm (
 7fc:	df06      	svc	6
	"@ MOV R0, %0\n"
	"swi 6\n" : : "r" (regs)
	);
}
 7fe:	4770      	bx	lr

00000800 <Isr_UART0>:
{

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
 800:	4b12      	ldr	r3, [pc, #72]	; (84c <USR_Stack_Size+0x4c>)
 802:	681a      	ldr	r2, [r3, #0]
 804:	4b12      	ldr	r3, [pc, #72]	; (850 <USR_Stack_Size+0x50>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
 806:	681b      	ldr	r3, [r3, #0]
 808:	061b      	lsls	r3, r3, #24
	uint16_t	ri, wi, ct;
	uint8_t		buff[UART0_RXB];
} RxBuff0;

void Isr_UART0 (void)
{
 80a:	b510      	push	{r4, lr}
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
	{	
		d = U0RBR;
 80c:	0e1b      	lsrs	r3, r3, #24

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
 80e:	07d2      	lsls	r2, r2, #31
 810:	d50c      	bpl.n	82c <Isr_UART0+0x2c>
 812:	4810      	ldr	r0, [pc, #64]	; (854 <USR_Stack_Size+0x54>)
 814:	4c10      	ldr	r4, [pc, #64]	; (858 <USR_Stack_Size+0x58>)
	{	
		d = U0RBR;
		if (d == '\n')
 816:	2b0a      	cmp	r3, #10
 818:	d104      	bne.n	824 <Isr_UART0+0x24>
		{
			process_command(resiever);
 81a:	f000 f8cf 	bl	9bc <process_command>
			rec_len = 0;
 81e:	2300      	movs	r3, #0
 820:	7023      	strb	r3, [r4, #0]
 822:	e00d      	b.n	840 <Isr_UART0+0x40>
		}else{
			resiever[rec_len++] = d;
 824:	7822      	ldrb	r2, [r4, #0]
 826:	1c51      	adds	r1, r2, #1
 828:	7021      	strb	r1, [r4, #0]
 82a:	5483      	strb	r3, [r0, r2]
		}
	}else{
		d = U0RBR;
	}
	if (d == 'L')
 82c:	2b4c      	cmp	r3, #76	; 0x4c
 82e:	d102      	bne.n	836 <Isr_UART0+0x36>
	{
		FIO2SET = (1 << LED1) | (1 << LED2);
 830:	2203      	movs	r2, #3
 832:	4b0a      	ldr	r3, [pc, #40]	; (85c <USR_Stack_Size+0x5c>)
 834:	e003      	b.n	83e <Isr_UART0+0x3e>
	}else if (d == 'O')
 836:	2b4f      	cmp	r3, #79	; 0x4f
 838:	d102      	bne.n	840 <Isr_UART0+0x40>
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);
 83a:	2203      	movs	r2, #3
 83c:	4b08      	ldr	r3, [pc, #32]	; (860 <USR_Stack_Size+0x60>)
 83e:	601a      	str	r2, [r3, #0]

	}
	VICVectAddr = 0;
 840:	2200      	movs	r2, #0
 842:	4b08      	ldr	r3, [pc, #32]	; (864 <USR_Stack_Size+0x64>)
 844:	601a      	str	r2, [r3, #0]

}
 846:	bc10      	pop	{r4}
 848:	bc01      	pop	{r0}
 84a:	4700      	bx	r0
 84c:	e000c014 	.word	0xe000c014
 850:	e000c000 	.word	0xe000c000
 854:	40000110 	.word	0x40000110
 858:	40000000 	.word	0x40000000
 85c:	3fffc058 	.word	0x3fffc058
 860:	3fffc05c 	.word	0x3fffc05c
 864:	ffffff00 	.word	0xffffff00

00000868 <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
 868:	4b01      	ldr	r3, [pc, #4]	; (870 <uart0_test+0x8>)
 86a:	88d8      	ldrh	r0, [r3, #6]
}
 86c:	4770      	bx	lr
 86e:	46c0      	nop			; (mov r8, r8)
 870:	40000000 	.word	0x40000000

00000874 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
 874:	4b0b      	ldr	r3, [pc, #44]	; (8a4 <uart0_getc+0x30>)
 876:	88da      	ldrh	r2, [r3, #6]
 878:	3302      	adds	r3, #2
 87a:	2a00      	cmp	r2, #0
 87c:	d0fa      	beq.n	874 <uart0_getc>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
 87e:	881a      	ldrh	r2, [r3, #0]
	d = RxBuff0.buff[i++];
 880:	1899      	adds	r1, r3, r2
 882:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
 884:	217f      	movs	r1, #127	; 0x7f

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
	d = RxBuff0.buff[i++];
 886:	3201      	adds	r2, #1
	RxBuff0.ri = i % UART0_RXB;
 888:	400a      	ands	r2, r1
 88a:	801a      	strh	r2, [r3, #0]
	U0IER = 0;		/* Disable interrupts */
 88c:	2200      	movs	r2, #0
 88e:	4906      	ldr	r1, [pc, #24]	; (8a8 <uart0_getc+0x34>)
 890:	600a      	str	r2, [r1, #0]
	RxBuff0.ct--;
 892:	889a      	ldrh	r2, [r3, #4]
 894:	3a01      	subs	r2, #1
 896:	0412      	lsls	r2, r2, #16
 898:	0c12      	lsrs	r2, r2, #16
 89a:	809a      	strh	r2, [r3, #4]
	U0IER = 0x07;	/* Reenable interrupt */
 89c:	2307      	movs	r3, #7
 89e:	600b      	str	r3, [r1, #0]

	return d;
}
 8a0:	4770      	bx	lr
 8a2:	46c0      	nop			; (mov r8, r8)
 8a4:	40000000 	.word	0x40000000
 8a8:	e000c004 	.word	0xe000c004

000008ac <uart0_putc>:


void uart0_putc (uint8_t d)
{
 8ac:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
 8ae:	4b10      	ldr	r3, [pc, #64]	; (8f0 <uart0_putc+0x44>)
 8b0:	899a      	ldrh	r2, [r3, #12]
 8b2:	2a7f      	cmp	r2, #127	; 0x7f
 8b4:	d8fb      	bhi.n	8ae <uart0_putc+0x2>

	U0IER = 0x05;		/* Disable Tx Interrupt */
 8b6:	2205      	movs	r2, #5
 8b8:	490e      	ldr	r1, [pc, #56]	; (8f4 <uart0_putc+0x48>)
 8ba:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
 8bc:	89da      	ldrh	r2, [r3, #14]
 8be:	2a00      	cmp	r2, #0
 8c0:	d00c      	beq.n	8dc <uart0_putc+0x30>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
 8c2:	895a      	ldrh	r2, [r3, #10]
		TxBuff0.buff[i++] = d;
 8c4:	189c      	adds	r4, r3, r2
 8c6:	7420      	strb	r0, [r4, #16]
		TxBuff0.wi = i % UART0_TXB;
 8c8:	207f      	movs	r0, #127	; 0x7f
	while (TxBuff0.ct >= UART0_TXB) ;

	U0IER = 0x05;		/* Disable Tx Interrupt */
	if (TxBuff0.act) {
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
		TxBuff0.buff[i++] = d;
 8ca:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
 8cc:	4002      	ands	r2, r0
 8ce:	815a      	strh	r2, [r3, #10]
		TxBuff0.ct++;
 8d0:	899a      	ldrh	r2, [r3, #12]
 8d2:	3201      	adds	r2, #1
 8d4:	0412      	lsls	r2, r2, #16
 8d6:	0c12      	lsrs	r2, r2, #16
 8d8:	819a      	strh	r2, [r3, #12]
 8da:	e003      	b.n	8e4 <uart0_putc+0x38>
	} else {
		U0THR = d;		/* Trigger Tx sequense */
 8dc:	4a06      	ldr	r2, [pc, #24]	; (8f8 <uart0_putc+0x4c>)
 8de:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
 8e0:	2201      	movs	r2, #1
 8e2:	81da      	strh	r2, [r3, #14]
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
 8e4:	2307      	movs	r3, #7
 8e6:	600b      	str	r3, [r1, #0]
}
 8e8:	bc10      	pop	{r4}
 8ea:	bc01      	pop	{r0}
 8ec:	4700      	bx	r0
 8ee:	46c0      	nop			; (mov r8, r8)
 8f0:	40000080 	.word	0x40000080
 8f4:	e000c004 	.word	0xe000c004
 8f8:	e000c000 	.word	0xe000c000

000008fc <uart0_init>:


void uart0_init (void)
{
  //UART0
  PCONP |= 1 << PCUART0; // Питание на UART0
 8fc:	2108      	movs	r1, #8
 8fe:	4a16      	ldr	r2, [pc, #88]	; (958 <uart0_init+0x5c>)
	U0IER = 0x07;		/* Reenable Tx Interrupt */
}


void uart0_init (void)
{
 900:	b508      	push	{r3, lr}
  //UART0
  PCONP |= 1 << PCUART0; // Питание на UART0
 902:	6813      	ldr	r3, [r2, #0]
 904:	430b      	orrs	r3, r1
 906:	6013      	str	r3, [r2, #0]
  //PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK
  
  //8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
  U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
 908:	4b14      	ldr	r3, [pc, #80]	; (95c <uart0_init+0x60>)
 90a:	681a      	ldr	r2, [r3, #0]
 90c:	317b      	adds	r1, #123	; 0x7b
 90e:	430a      	orrs	r2, r1
 910:	601a      	str	r2, [r3, #0]
  //f = 18 mGz,Baud = 115200.
  U0FDR = 0xC1;
 912:	4a13      	ldr	r2, [pc, #76]	; (960 <uart0_init+0x64>)
 914:	313e      	adds	r1, #62	; 0x3e
 916:	6011      	str	r1, [r2, #0]
  U0DLL = 0x09;
 918:	4a12      	ldr	r2, [pc, #72]	; (964 <uart0_init+0x68>)
 91a:	39b8      	subs	r1, #184	; 0xb8
 91c:	6011      	str	r1, [r2, #0]
  U0DLM = 0x00;
 91e:	2100      	movs	r1, #0
  U0LCR &= ~(1 << DLAB);//DLAB = 0
 920:	2080      	movs	r0, #128	; 0x80
  //8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
  U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
  //f = 18 mGz,Baud = 115200.
  U0FDR = 0xC1;
  U0DLL = 0x09;
  U0DLM = 0x00;
 922:	4a11      	ldr	r2, [pc, #68]	; (968 <uart0_init+0x6c>)
 924:	6011      	str	r1, [r2, #0]
  U0LCR &= ~(1 << DLAB);//DLAB = 0
 926:	6819      	ldr	r1, [r3, #0]
 928:	4381      	bics	r1, r0
 92a:	6019      	str	r1, [r3, #0]
  
  //UART FIFO Нужно ли оно?
  U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
 92c:	490f      	ldr	r1, [pc, #60]	; (96c <uart0_init+0x70>)
 92e:	680b      	ldr	r3, [r1, #0]
 930:	3879      	subs	r0, #121	; 0x79
 932:	4303      	orrs	r3, r0
 934:	600b      	str	r3, [r1, #0]
  
  //Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
  //P0.02,P0.03 - pull-up mode
  PINSEL0 |= (1 << 4)|(1 << 6);
 936:	490e      	ldr	r1, [pc, #56]	; (970 <uart0_init+0x74>)
 938:	680b      	ldr	r3, [r1, #0]
 93a:	3049      	adds	r0, #73	; 0x49
 93c:	4303      	orrs	r3, r0
 93e:	600b      	str	r3, [r1, #0]
  
  //Interrupts
  /* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
  /* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
  U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
 940:	2101      	movs	r1, #1
 942:	6813      	ldr	r3, [r2, #0]
 944:	430b      	orrs	r3, r1
 946:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
 948:	384a      	subs	r0, #74	; 0x4a
 94a:	490a      	ldr	r1, [pc, #40]	; (974 <uart0_init+0x78>)
 94c:	220f      	movs	r2, #15
 94e:	f7ff ff4f 	bl	7f0 <RegisterIrq>
  
}
 952:	bc08      	pop	{r3}
 954:	bc01      	pop	{r0}
 956:	4700      	bx	r0
 958:	e01fc0c4 	.word	0xe01fc0c4
 95c:	e000c00c 	.word	0xe000c00c
 960:	e000c028 	.word	0xe000c028
 964:	e000c000 	.word	0xe000c000
 968:	e000c004 	.word	0xe000c004
 96c:	e000c008 	.word	0xe000c008
 970:	e002c000 	.word	0xe002c000
 974:	00000801 	.word	0x00000801

00000978 <UART0_send>:
	if(strncmp(cmd, "help", 4) == 0)
		UART0_send(help_msg, sizeof(help_msg));

}
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
 978:	b510      	push	{r4, lr}
  U0IER &= ~(1 << RBR_Enable );     // Disable RBR
 97a:	2401      	movs	r4, #1
 97c:	4b0c      	ldr	r3, [pc, #48]	; (9b0 <UART0_send+0x38>)
 97e:	681a      	ldr	r2, [r3, #0]
 980:	43a2      	bics	r2, r4
 982:	1c1c      	adds	r4, r3, #0
 984:	601a      	str	r2, [r3, #0]
  
  while ( Length != 0 )
 986:	2900      	cmp	r1, #0
 988:	d00b      	beq.n	9a2 <UART0_send+0x2a>
  {
    // THRE status, contain valid data 
    while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
 98a:	4b0a      	ldr	r3, [pc, #40]	; (9b4 <UART0_send+0x3c>)
 98c:	681b      	ldr	r3, [r3, #0]
 98e:	069b      	lsls	r3, r3, #26
 990:	d5fb      	bpl.n	98a <UART0_send+0x12>
    U0THR = *BufferPtr;// в сдвиговый регистр положить данные
 992:	7802      	ldrb	r2, [r0, #0]
 994:	4b08      	ldr	r3, [pc, #32]	; (9b8 <UART0_send+0x40>)
    BufferPtr++;
    Length--;
 996:	3901      	subs	r1, #1
 998:	0409      	lsls	r1, r1, #16
  
  while ( Length != 0 )
  {
    // THRE status, contain valid data 
    while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
    U0THR = *BufferPtr;// в сдвиговый регистр положить данные
 99a:	601a      	str	r2, [r3, #0]
    BufferPtr++;
 99c:	3001      	adds	r0, #1
    Length--;
 99e:	0c09      	lsrs	r1, r1, #16
 9a0:	e7f1      	b.n	986 <UART0_send+0xe>
  }
  U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
 9a2:	2201      	movs	r2, #1
 9a4:	6823      	ldr	r3, [r4, #0]
 9a6:	4313      	orrs	r3, r2
 9a8:	6023      	str	r3, [r4, #0]
  
  return;
}
 9aa:	bc10      	pop	{r4}
 9ac:	bc01      	pop	{r0}
 9ae:	4700      	bx	r0
 9b0:	e000c004 	.word	0xe000c004
 9b4:	e000c014 	.word	0xe000c014
 9b8:	e000c000 	.word	0xe000c000

000009bc <process_command>:
#include "LPC2300.h"
#include "uart23xx.h"
unsigned char RxCount,Index;
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";
void process_command(char *cmd)
{
 9bc:	b538      	push	{r3, r4, r5, lr}
	char answer[20]="";
	if(strncmp(cmd, "start", 5) == 0)
 9be:	491c      	ldr	r1, [pc, #112]	; (a30 <Stack_Size+0x20>)
 9c0:	2205      	movs	r2, #5
#include "LPC2300.h"
#include "uart23xx.h"
unsigned char RxCount,Index;
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n";
void process_command(char *cmd)
{
 9c2:	1c04      	adds	r4, r0, #0
	char answer[20]="";
	if(strncmp(cmd, "start", 5) == 0)
 9c4:	f000 f9ca 	bl	d5c <strncmp>
 9c8:	2800      	cmp	r0, #0
 9ca:	d108      	bne.n	9de <process_command+0x22>
	{
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
 9cc:	210d      	movs	r1, #13
 9ce:	3002      	adds	r0, #2
 9d0:	f7ff fe60 	bl	694 <gpio_set>
		led_set(LED2);
 9d4:	2001      	movs	r0, #1
 9d6:	f7ff fe49 	bl	66c <led_set>
		timer0_start();
 9da:	f000 f99f 	bl	d1c <timer0_start>
	}    

	/* Turn off amplifier */
	if(strncmp(cmd, "stop", 4) == 0)
 9de:	1c20      	adds	r0, r4, #0
 9e0:	4914      	ldr	r1, [pc, #80]	; (a34 <Stack_Size+0x24>)
 9e2:	2204      	movs	r2, #4
 9e4:	f000 f9ba 	bl	d5c <strncmp>
 9e8:	1e05      	subs	r5, r0, #0
 9ea:	d108      	bne.n	9fe <process_command+0x42>
	{
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
 9ec:	210d      	movs	r1, #13
 9ee:	2002      	movs	r0, #2
 9f0:	f7ff fe72 	bl	6d8 <gpio_clear>
		led_set(LED1);
 9f4:	1c28      	adds	r0, r5, #0
 9f6:	f7ff fe39 	bl	66c <led_set>
		timer0_stop();
 9fa:	f000 f99f 	bl	d3c <timer0_stop>
	}
	/* Voltage setup  */
	if(strncmp(cmd, "set", 3) == 0)
 9fe:	1c20      	adds	r0, r4, #0
 a00:	490d      	ldr	r1, [pc, #52]	; (a38 <Stack_Size+0x28>)
 a02:	2203      	movs	r2, #3
 a04:	f000 f9aa 	bl	d5c <strncmp>
 a08:	2800      	cmp	r0, #0
 a0a:	d102      	bne.n	a12 <Stack_Size+0x2>
	{
		dac_set_voltage(cmd+4);
 a0c:	1d20      	adds	r0, r4, #4
 a0e:	f000 f905 	bl	c1c <dac_set_voltage>
	}

	/* Manual  */
	if(strncmp(cmd, "help", 4) == 0)
 a12:	1c20      	adds	r0, r4, #0
 a14:	4909      	ldr	r1, [pc, #36]	; (a3c <Stack_Size+0x2c>)
 a16:	2204      	movs	r2, #4
 a18:	f000 f9a0 	bl	d5c <strncmp>
 a1c:	2800      	cmp	r0, #0
 a1e:	d103      	bne.n	a28 <Stack_Size+0x18>
		UART0_send(help_msg, sizeof(help_msg));
 a20:	4807      	ldr	r0, [pc, #28]	; (a40 <Stack_Size+0x30>)
 a22:	2187      	movs	r1, #135	; 0x87
 a24:	f7ff ffa8 	bl	978 <UART0_send>

}
 a28:	bc38      	pop	{r3, r4, r5}
 a2a:	bc01      	pop	{r0}
 a2c:	4700      	bx	r0
 a2e:	46c0      	nop			; (mov r8, r8)
 a30:	00000e8c 	.word	0x00000e8c
 a34:	00000e92 	.word	0x00000e92
 a38:	00000e97 	.word	0x00000e97
 a3c:	00000e9b 	.word	0x00000e9b
 a40:	00000df4 	.word	0x00000df4

00000a44 <SPI0_send_1_byte>:



void SPI0_send_1_byte(uint8_t data, uint8_t slave)
{
	if(slave == DAC)
 a44:	291d      	cmp	r1, #29
 a46:	d104      	bne.n	a52 <SPI0_send_1_byte+0xe>
	{
		FIO1CLR |= 1 << DAC;
 a48:	2180      	movs	r1, #128	; 0x80
 a4a:	4b0a      	ldr	r3, [pc, #40]	; (a74 <SPI0_send_1_byte+0x30>)
 a4c:	0589      	lsls	r1, r1, #22
 a4e:	681a      	ldr	r2, [r3, #0]
 a50:	e005      	b.n	a5e <SPI0_send_1_byte+0x1a>
		S0SPDR = data;
		while(S0SPSR & 0x80 == 0);
		FIO1SET |= 1 << DAC;

	}else if (slave == ADC){
 a52:	2912      	cmp	r1, #18
 a54:	d10d      	bne.n	a72 <SPI0_send_1_byte+0x2e>
	
		FIO1CLR |= 1 << ADC;
 a56:	2180      	movs	r1, #128	; 0x80
 a58:	4b06      	ldr	r3, [pc, #24]	; (a74 <SPI0_send_1_byte+0x30>)
 a5a:	681a      	ldr	r2, [r3, #0]
 a5c:	02c9      	lsls	r1, r1, #11
 a5e:	430a      	orrs	r2, r1
 a60:	601a      	str	r2, [r3, #0]
		S0SPDR = data;
 a62:	4b05      	ldr	r3, [pc, #20]	; (a78 <SPI0_send_1_byte+0x34>)
		while(S0SPSR & 0x80 == 0);
		FIO1SET |= 1 << ADC;
 a64:	4a05      	ldr	r2, [pc, #20]	; (a7c <SPI0_send_1_byte+0x38>)
		FIO1SET |= 1 << DAC;

	}else if (slave == ADC){
	
		FIO1CLR |= 1 << ADC;
		S0SPDR = data;
 a66:	6018      	str	r0, [r3, #0]
		while(S0SPSR & 0x80 == 0);
 a68:	4b05      	ldr	r3, [pc, #20]	; (a80 <SPI0_send_1_byte+0x3c>)
 a6a:	681b      	ldr	r3, [r3, #0]
		FIO1SET |= 1 << ADC;
 a6c:	6813      	ldr	r3, [r2, #0]
 a6e:	430b      	orrs	r3, r1
 a70:	6013      	str	r3, [r2, #0]
	}
	
}
 a72:	4770      	bx	lr
 a74:	3fffc03c 	.word	0x3fffc03c
 a78:	e0020008 	.word	0xe0020008
 a7c:	3fffc038 	.word	0x3fffc038
 a80:	e0020004 	.word	0xe0020004

00000a84 <SPI0_send_2_byte>:

void SPI0_send_2_byte(uint16_t data, uint8_t slave)
{
 a84:	b510      	push	{r4, lr}
	if(slave == DAC)
 a86:	291d      	cmp	r1, #29
 a88:	d104      	bne.n	a94 <SPI0_send_2_byte+0x10>
	{
		//cs
		FIO1CLR |= 1 << DAC;
 a8a:	2180      	movs	r1, #128	; 0x80
 a8c:	4b0d      	ldr	r3, [pc, #52]	; (ac4 <SPI0_send_2_byte+0x40>)
 a8e:	0589      	lsls	r1, r1, #22
 a90:	681a      	ldr	r2, [r3, #0]
 a92:	e005      	b.n	aa0 <SPI0_send_2_byte+0x1c>
		while(S0SPSR & 0x80 == 0);
		S0SPDR = data >> 8;
		while(S0SPSR & 0x80 == 0);
		S0SPDR = data & 0xFF;
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
 a94:	2912      	cmp	r1, #18
 a96:	d112      	bne.n	abe <SPI0_send_2_byte+0x3a>
		FIO1CLR |= 1 << ADC;
 a98:	2180      	movs	r1, #128	; 0x80
 a9a:	4b0a      	ldr	r3, [pc, #40]	; (ac4 <SPI0_send_2_byte+0x40>)
 a9c:	681a      	ldr	r2, [r3, #0]
 a9e:	02c9      	lsls	r1, r1, #11
 aa0:	430a      	orrs	r2, r1
 aa2:	601a      	str	r2, [r3, #0]
		while(S0SPSR & 0x80 == 0);
 aa4:	4a08      	ldr	r2, [pc, #32]	; (ac8 <SPI0_send_2_byte+0x44>)
 aa6:	6813      	ldr	r3, [r2, #0]
		S0SPDR = data >> 8;
 aa8:	4b08      	ldr	r3, [pc, #32]	; (acc <SPI0_send_2_byte+0x48>)
 aaa:	0a04      	lsrs	r4, r0, #8
 aac:	601c      	str	r4, [r3, #0]
		while(S0SPSR & 0x80 == 0);
		S0SPDR = data & 0xFF;
 aae:	0600      	lsls	r0, r0, #24
 ab0:	0e00      	lsrs	r0, r0, #24
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
		while(S0SPSR & 0x80 == 0);
		S0SPDR = data >> 8;
		while(S0SPSR & 0x80 == 0);
 ab2:	6812      	ldr	r2, [r2, #0]
		S0SPDR = data & 0xFF;
 ab4:	6018      	str	r0, [r3, #0]
		FIO1SET |= 1 << ADC;
 ab6:	4a06      	ldr	r2, [pc, #24]	; (ad0 <SPI0_send_2_byte+0x4c>)
 ab8:	6813      	ldr	r3, [r2, #0]
 aba:	430b      	orrs	r3, r1
 abc:	6013      	str	r3, [r2, #0]
	}
	
}
 abe:	bc10      	pop	{r4}
 ac0:	bc01      	pop	{r0}
 ac2:	4700      	bx	r0
 ac4:	3fffc03c 	.word	0x3fffc03c
 ac8:	e0020004 	.word	0xe0020004
 acc:	e0020008 	.word	0xe0020008
 ad0:	3fffc038 	.word	0x3fffc038

00000ad4 <SPI0_init>:

void SPI0_init(void)
{
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
 ad4:	21c0      	movs	r1, #192	; 0xc0
 ad6:	4a0f      	ldr	r2, [pc, #60]	; (b14 <SPI0_init+0x40>)
 ad8:	6813      	ldr	r3, [r2, #0]
 ada:	0289      	lsls	r1, r1, #10
 adc:	430b      	orrs	r3, r1
	PCON |= (1 << 8);
 ade:	2180      	movs	r1, #128	; 0x80
	
}

void SPI0_init(void)
{
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
 ae0:	6013      	str	r3, [r2, #0]
	PCON |= (1 << 8);
 ae2:	4a0d      	ldr	r2, [pc, #52]	; (b18 <SPI0_init+0x44>)
 ae4:	6813      	ldr	r3, [r2, #0]
 ae6:	0049      	lsls	r1, r1, #1
 ae8:	430b      	orrs	r3, r1
 aea:	6013      	str	r3, [r2, #0]
	S0SPCR |= (1 << 3) | (1 << 5);	/*   Master mode & CPHA */
 aec:	4a0b      	ldr	r2, [pc, #44]	; (b1c <SPI0_init+0x48>)
 aee:	6813      	ldr	r3, [r2, #0]
 af0:	39d8      	subs	r1, #216	; 0xd8
 af2:	430b      	orrs	r3, r1
 af4:	6013      	str	r3, [r2, #0]
	S0SPCCR = 0xFF; 	/* SPI0 perif clock divided by 256 */
 af6:	22ff      	movs	r2, #255	; 0xff
	/* PINSEL3 |= (3 << 14) | (3 < 16);	[>MISO & MOSI pins <] */
	PINSEL3 |= (1 << 14) | (1 << 15) | (1 << 16) | (1 << 17);	/*MISO & MOSI pins */
 af8:	21f0      	movs	r1, #240	; 0xf0
void SPI0_init(void)
{
	PCLKSEL0 |= (1<<17) | (1<<16);//=72Mhz/8 
	PCON |= (1 << 8);
	S0SPCR |= (1 << 3) | (1 << 5);	/*   Master mode & CPHA */
	S0SPCCR = 0xFF; 	/* SPI0 perif clock divided by 256 */
 afa:	4b09      	ldr	r3, [pc, #36]	; (b20 <SPI0_init+0x4c>)
 afc:	601a      	str	r2, [r3, #0]
	/* PINSEL3 |= (3 << 14) | (3 < 16);	[>MISO & MOSI pins <] */
	PINSEL3 |= (1 << 14) | (1 << 15) | (1 << 16) | (1 << 17);	/*MISO & MOSI pins */
 afe:	4a09      	ldr	r2, [pc, #36]	; (b24 <SPI0_init+0x50>)
 b00:	6813      	ldr	r3, [r2, #0]
 b02:	0289      	lsls	r1, r1, #10
 b04:	430b      	orrs	r3, r1
 b06:	6013      	str	r3, [r2, #0]
	PINMODE3 |= (1 << 15) | (1 << 7);
 b08:	4a07      	ldr	r2, [pc, #28]	; (b28 <SPI0_init+0x54>)
 b0a:	4908      	ldr	r1, [pc, #32]	; (b2c <SPI0_init+0x58>)
 b0c:	6813      	ldr	r3, [r2, #0]
 b0e:	430b      	orrs	r3, r1
 b10:	6013      	str	r3, [r2, #0]
}
 b12:	4770      	bx	lr
 b14:	e01fc1a8 	.word	0xe01fc1a8
 b18:	e01fc0c0 	.word	0xe01fc0c0
 b1c:	e0020000 	.word	0xe0020000
 b20:	e002000c 	.word	0xe002000c
 b24:	e002c00c 	.word	0xe002c00c
 b28:	e002c04c 	.word	0xe002c04c
 b2c:	00008080 	.word	0x00008080

00000b30 <SPI0_read_1_byte>:

uint8_t SPI0_read_1_byte(uint8_t slave)
{
	uint8_t data;
	if(slave == DAC)
 b30:	281d      	cmp	r0, #29
 b32:	d104      	bne.n	b3e <SPI0_read_1_byte+0xe>
	{
		FIO1CLR |= 1 << DAC;
 b34:	2080      	movs	r0, #128	; 0x80
 b36:	4a0d      	ldr	r2, [pc, #52]	; (b6c <SPI0_read_1_byte+0x3c>)
 b38:	0580      	lsls	r0, r0, #22
 b3a:	6813      	ldr	r3, [r2, #0]
 b3c:	e005      	b.n	b4a <SPI0_read_1_byte+0x1a>
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR;
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
 b3e:	2812      	cmp	r0, #18
 b40:	d112      	bne.n	b68 <SPI0_read_1_byte+0x38>
		FIO1CLR |= 1 << ADC;
 b42:	2080      	movs	r0, #128	; 0x80
 b44:	4a09      	ldr	r2, [pc, #36]	; (b6c <SPI0_read_1_byte+0x3c>)
 b46:	6813      	ldr	r3, [r2, #0]
 b48:	02c0      	lsls	r0, r0, #11
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
 b4a:	2100      	movs	r1, #0
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR;
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
 b4c:	4303      	orrs	r3, r0
 b4e:	6013      	str	r3, [r2, #0]
		while(S0SPSR & 0x80 != 0x80);
 b50:	4a07      	ldr	r2, [pc, #28]	; (b70 <SPI0_read_1_byte+0x40>)
 b52:	6813      	ldr	r3, [r2, #0]
		S0SPDR = 0;
 b54:	4b07      	ldr	r3, [pc, #28]	; (b74 <SPI0_read_1_byte+0x44>)
 b56:	6019      	str	r1, [r3, #0]
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR;
		FIO1SET |= 1 << ADC;
 b58:	4907      	ldr	r1, [pc, #28]	; (b78 <SPI0_read_1_byte+0x48>)
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
 b5a:	6812      	ldr	r2, [r2, #0]
		data = S0SPDR;
 b5c:	681b      	ldr	r3, [r3, #0]
		FIO1SET |= 1 << ADC;
 b5e:	680a      	ldr	r2, [r1, #0]
 b60:	4302      	orrs	r2, r0
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR;
 b62:	061b      	lsls	r3, r3, #24
		FIO1SET |= 1 << ADC;
 b64:	600a      	str	r2, [r1, #0]
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR;
 b66:	0e1b      	lsrs	r3, r3, #24
		FIO1SET |= 1 << ADC;
	}
	
return data;
}
 b68:	1c18      	adds	r0, r3, #0
 b6a:	4770      	bx	lr
 b6c:	3fffc03c 	.word	0x3fffc03c
 b70:	e0020004 	.word	0xe0020004
 b74:	e0020008 	.word	0xe0020008
 b78:	3fffc038 	.word	0x3fffc038

00000b7c <SPI0_read_2_byte>:
uint16_t SPI0_read_2_byte(uint8_t slave)
{
 b7c:	b510      	push	{r4, lr}
	uint16_t data;
	if(slave == DAC)
 b7e:	281d      	cmp	r0, #29
 b80:	d104      	bne.n	b8c <SPI0_read_2_byte+0x10>
	{
		FIO1CLR |= 1 << DAC;
 b82:	2080      	movs	r0, #128	; 0x80
 b84:	4a11      	ldr	r2, [pc, #68]	; (bcc <SPI0_read_2_byte+0x50>)
 b86:	0580      	lsls	r0, r0, #22
 b88:	6813      	ldr	r3, [r2, #0]
 b8a:	e005      	b.n	b98 <SPI0_read_2_byte+0x1c>
		data = S0SPDR << 8;
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data |= S0SPDR;
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
 b8c:	2812      	cmp	r0, #18
 b8e:	d118      	bne.n	bc2 <SPI0_read_2_byte+0x46>
		FIO1CLR |= 1 << ADC;
 b90:	2080      	movs	r0, #128	; 0x80
 b92:	4a0e      	ldr	r2, [pc, #56]	; (bcc <SPI0_read_2_byte+0x50>)
 b94:	6813      	ldr	r3, [r2, #0]
 b96:	02c0      	lsls	r0, r0, #11
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
 b98:	2400      	movs	r4, #0
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data |= S0SPDR;
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
 b9a:	4303      	orrs	r3, r0
 b9c:	6013      	str	r3, [r2, #0]
		while(S0SPSR & 0x80 != 0x80);
 b9e:	490c      	ldr	r1, [pc, #48]	; (bd0 <SPI0_read_2_byte+0x54>)
		S0SPDR = 0;
 ba0:	4a0c      	ldr	r2, [pc, #48]	; (bd4 <SPI0_read_2_byte+0x58>)
		while(S0SPSR & 0x80 != 0x80);
		data |= S0SPDR;
		FIO1SET |= 1 << DAC;
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
		while(S0SPSR & 0x80 != 0x80);
 ba2:	680b      	ldr	r3, [r1, #0]
		S0SPDR = 0;
 ba4:	6014      	str	r4, [r2, #0]
		while(S0SPSR & 0x80 != 0x80);
 ba6:	680b      	ldr	r3, [r1, #0]
		data = S0SPDR << 8;
 ba8:	6813      	ldr	r3, [r2, #0]
		S0SPDR = 0;
 baa:	6014      	str	r4, [r2, #0]
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR << 8;
 bac:	061b      	lsls	r3, r3, #24
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
 bae:	6809      	ldr	r1, [r1, #0]
		data |= S0SPDR;
 bb0:	6811      	ldr	r1, [r2, #0]
	}else if (slave == ADC){
		FIO1CLR |= 1 << ADC;
		while(S0SPSR & 0x80 != 0x80);
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR << 8;
 bb2:	0c1b      	lsrs	r3, r3, #16
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data |= S0SPDR;
 bb4:	430b      	orrs	r3, r1
		FIO1SET |= 1 << ADC;
 bb6:	4908      	ldr	r1, [pc, #32]	; (bd8 <SPI0_read_2_byte+0x5c>)
 bb8:	680a      	ldr	r2, [r1, #0]
 bba:	4302      	orrs	r2, r0
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR << 8;
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data |= S0SPDR;
 bbc:	041b      	lsls	r3, r3, #16
		FIO1SET |= 1 << ADC;
 bbe:	600a      	str	r2, [r1, #0]
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data = S0SPDR << 8;
		S0SPDR = 0;
		while(S0SPSR & 0x80 != 0x80);
		data |= S0SPDR;
 bc0:	0c1b      	lsrs	r3, r3, #16
		FIO1SET |= 1 << ADC;
	}
	
return data;
}
 bc2:	1c18      	adds	r0, r3, #0
 bc4:	bc10      	pop	{r4}
 bc6:	bc02      	pop	{r1}
 bc8:	4708      	bx	r1
 bca:	46c0      	nop			; (mov r8, r8)
 bcc:	3fffc03c 	.word	0x3fffc03c
 bd0:	e0020004 	.word	0xe0020004
 bd4:	e0020008 	.word	0xe0020008
 bd8:	3fffc038 	.word	0x3fffc038

00000bdc <adc_init>:
#include "adc_dac.h"
#include <stdint.h>
#include "LPC2300.h"
#include "defines.h"
void adc_init(void)
{
 bdc:	b508      	push	{r3, lr}
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
 bde:	2112      	movs	r1, #18
 be0:	2010      	movs	r0, #16
 be2:	f7ff ff2f 	bl	a44 <SPI0_send_1_byte>
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
 be6:	2112      	movs	r1, #18
 be8:	480b      	ldr	r0, [pc, #44]	; (c18 <adc_init+0x3c>)
 bea:	f7ff ff4b 	bl	a84 <SPI0_send_2_byte>
	
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
 bee:	2112      	movs	r1, #18
 bf0:	2008      	movs	r0, #8
 bf2:	f7ff ff27 	bl	a44 <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
 bf6:	2112      	movs	r1, #18
 bf8:	2005      	movs	r0, #5
 bfa:	f7ff ff43 	bl	a84 <SPI0_send_2_byte>

	SPI0_send_1_byte(WRITE_OFFSET_REG, ADC);
 bfe:	2112      	movs	r1, #18
 c00:	2038      	movs	r0, #56	; 0x38
 c02:	f7ff ff1f 	bl	a44 <SPI0_send_1_byte>
	SPI0_send_2_byte(OFFSET_REG_VAL, ADC);
 c06:	2080      	movs	r0, #128	; 0x80
 c08:	2112      	movs	r1, #18
 c0a:	0200      	lsls	r0, r0, #8
 c0c:	f7ff ff3a 	bl	a84 <SPI0_send_2_byte>

}
 c10:	bc08      	pop	{r3}
 c12:	bc01      	pop	{r0}
 c14:	4700      	bx	r0
 c16:	46c0      	nop			; (mov r8, r8)
 c18:	00001010 	.word	0x00001010

00000c1c <dac_set_voltage>:

void dac_set_voltage(uint16_t voltage)
{
 c1c:	b508      	push	{r3, lr}
	SPI0_send_2_byte((voltage | DAC_LOAD_CMD), DAC);
 c1e:	2380      	movs	r3, #128	; 0x80
 c20:	015b      	lsls	r3, r3, #5
 c22:	4318      	orrs	r0, r3
 c24:	211d      	movs	r1, #29
 c26:	f7ff ff2d 	bl	a84 <SPI0_send_2_byte>
}
 c2a:	bc08      	pop	{r3}
 c2c:	bc01      	pop	{r0}
 c2e:	4700      	bx	r0

00000c30 <adc_read_current>:

uint16_t adc_read_current(void)
{
 c30:	b508      	push	{r3, lr}
	uint16_t current;
	/* Need to select proper channel */
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
 c32:	2112      	movs	r1, #18
 c34:	2008      	movs	r0, #8
 c36:	f7ff ff05 	bl	a44 <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
 c3a:	2112      	movs	r1, #18
 c3c:	2005      	movs	r0, #5
 c3e:	f7ff ff21 	bl	a84 <SPI0_send_2_byte>

	SPI0_send_1_byte(READ_DATA_REG, ADC);
 c42:	2112      	movs	r1, #18
 c44:	2058      	movs	r0, #88	; 0x58
 c46:	f7ff fefd 	bl	a44 <SPI0_send_1_byte>
	current = SPI0_read_2_byte(ADC);
 c4a:	2012      	movs	r0, #18
 c4c:	f7ff ff96 	bl	b7c <SPI0_read_2_byte>

	return current;
 c50:	0400      	lsls	r0, r0, #16
 c52:	0c00      	lsrs	r0, r0, #16
}
 c54:	bc08      	pop	{r3}
 c56:	bc02      	pop	{r1}
 c58:	4708      	bx	r1

00000c5a <adc_read_voltage>:

uint16_t adc_read_voltage(void)
{
 c5a:	b508      	push	{r3, lr}
	uint16_t voltage;
	/* Need to select proper channel */
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
 c5c:	2112      	movs	r1, #18
 c5e:	2008      	movs	r0, #8
 c60:	f7ff fef0 	bl	a44 <SPI0_send_1_byte>
	SPI0_send_2_byte((MODE_REG_VAL | 1), ADC);	// | 1 - select 2 channel
 c64:	2112      	movs	r1, #18
 c66:	2005      	movs	r0, #5
 c68:	f7ff ff0c 	bl	a84 <SPI0_send_2_byte>

	SPI0_send_1_byte(READ_DATA_REG, ADC);
 c6c:	2112      	movs	r1, #18
 c6e:	2058      	movs	r0, #88	; 0x58
 c70:	f7ff fee8 	bl	a44 <SPI0_send_1_byte>
	voltage = SPI0_read_2_byte(ADC);
 c74:	2012      	movs	r0, #18
 c76:	f7ff ff81 	bl	b7c <SPI0_read_2_byte>

	return voltage;
 c7a:	0400      	lsls	r0, r0, #16
 c7c:	0c00      	lsrs	r0, r0, #16

}
 c7e:	bc08      	pop	{r3}
 c80:	bc02      	pop	{r1}
 c82:	4708      	bx	r1

00000c84 <Isr_TIM0>:
#include "adc_dac.h"
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
	T0IR = 0x3F;
 c84:	223f      	movs	r2, #63	; 0x3f
#include "uart23xx.h"
#include "adc_dac.h"
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
 c86:	b508      	push	{r3, lr}
	T0IR = 0x3F;
 c88:	4b05      	ldr	r3, [pc, #20]	; (ca0 <Isr_TIM0+0x1c>)
	/* UART0_send("\nCurrent: ",10 ); */
	/* data = curr >> 8; */
	/* UART0_send(&data, 1); */
	/* data = curr & 0xFF; */
	/* UART0_send(&data, 1); */
	UART0_send("Tim0\n", 5);
 c8a:	4806      	ldr	r0, [pc, #24]	; (ca4 <Isr_TIM0+0x20>)
#include "adc_dac.h"
extern void gpio_set(uint8_t port, uint8_t pin);
extern void gpio_clear(uint8_t port, uint8_t pin);
void Isr_TIM0(void)
{
	T0IR = 0x3F;
 c8c:	601a      	str	r2, [r3, #0]
	/* UART0_send("\nCurrent: ",10 ); */
	/* data = curr >> 8; */
	/* UART0_send(&data, 1); */
	/* data = curr & 0xFF; */
	/* UART0_send(&data, 1); */
	UART0_send("Tim0\n", 5);
 c8e:	2105      	movs	r1, #5
 c90:	f7ff fe72 	bl	978 <UART0_send>
	VICVectAddr = 0;
 c94:	2200      	movs	r2, #0
 c96:	4b04      	ldr	r3, [pc, #16]	; (ca8 <Isr_TIM0+0x24>)
 c98:	601a      	str	r2, [r3, #0]
}
 c9a:	bc08      	pop	{r3}
 c9c:	bc01      	pop	{r0}
 c9e:	4700      	bx	r0
 ca0:	e0004000 	.word	0xe0004000
 ca4:	00000ea0 	.word	0x00000ea0
 ca8:	ffffff00 	.word	0xffffff00

00000cac <timer0_init>:
void timer0_init(void)
{
 cac:	b508      	push	{r3, lr}
	led_set(LED1);
 cae:	2000      	movs	r0, #0
 cb0:	f7ff fcdc 	bl	66c <led_set>
	PCONP |= (1 << 1);	/* Power on tim0 */
 cb4:	2102      	movs	r1, #2
 cb6:	4a10      	ldr	r2, [pc, #64]	; (cf8 <timer0_init+0x4c>)
 cb8:	6813      	ldr	r3, [r2, #0]
 cba:	430b      	orrs	r3, r1
 cbc:	6013      	str	r3, [r2, #0]
	led_set(LED2);
 cbe:	2001      	movs	r0, #1
 cc0:	f7ff fcd4 	bl	66c <led_set>
	T0TCR = 0;	/* Disable tim0 */
 cc4:	2300      	movs	r3, #0

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
 cc6:	2101      	movs	r1, #1
void timer0_init(void)
{
	led_set(LED1);
	PCONP |= (1 << 1);	/* Power on tim0 */
	led_set(LED2);
	T0TCR = 0;	/* Disable tim0 */
 cc8:	4a0c      	ldr	r2, [pc, #48]	; (cfc <timer0_init+0x50>)
 cca:	6013      	str	r3, [r2, #0]

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
 ccc:	4a0c      	ldr	r2, [pc, #48]	; (d00 <timer0_init+0x54>)
 cce:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
 cd0:	4a0c      	ldr	r2, [pc, #48]	; (d04 <timer0_init+0x58>)
 cd2:	3102      	adds	r1, #2
 cd4:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
 cd6:	4a0c      	ldr	r2, [pc, #48]	; (d08 <timer0_init+0x5c>)
 cd8:	6013      	str	r3, [r2, #0]
	T0PC = 400;	/* Prescaler */
 cda:	22c8      	movs	r2, #200	; 0xc8
 cdc:	4b0b      	ldr	r3, [pc, #44]	; (d0c <timer0_init+0x60>)
 cde:	0052      	lsls	r2, r2, #1
 ce0:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
 ce2:	4a0b      	ldr	r2, [pc, #44]	; (d10 <timer0_init+0x64>)
 ce4:	4b0b      	ldr	r3, [pc, #44]	; (d14 <timer0_init+0x68>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
 ce6:	2004      	movs	r0, #4

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
	T0MCR = 3;
	T0CTCR = 0;
	T0PC = 400;	/* Prescaler */
	T0MR0 = 72000;	/* Top value (5 Hz) */
 ce8:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
 cea:	490b      	ldr	r1, [pc, #44]	; (d18 <timer0_init+0x6c>)
 cec:	220f      	movs	r2, #15
 cee:	f7ff fd7f 	bl	7f0 <RegisterIrq>
}
 cf2:	bc08      	pop	{r3}
 cf4:	bc01      	pop	{r0}
 cf6:	4700      	bx	r0
 cf8:	e01fc0c4 	.word	0xe01fc0c4
 cfc:	e0004004 	.word	0xe0004004
 d00:	e0004000 	.word	0xe0004000
 d04:	e0004014 	.word	0xe0004014
 d08:	e0004070 	.word	0xe0004070
 d0c:	e0004010 	.word	0xe0004010
 d10:	00011940 	.word	0x00011940
 d14:	e0004018 	.word	0xe0004018
 d18:	00000c85 	.word	0x00000c85

00000d1c <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
 d1c:	2101      	movs	r1, #1
 d1e:	4a06      	ldr	r2, [pc, #24]	; (d38 <timer0_start+0x1c>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
}

void timer0_start(void)
{
 d20:	b508      	push	{r3, lr}
	T0TCR |= 1;
 d22:	6813      	ldr	r3, [r2, #0]
 d24:	430b      	orrs	r3, r1
 d26:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
 d28:	2002      	movs	r0, #2
 d2a:	310c      	adds	r1, #12
 d2c:	f7ff fcb2 	bl	694 <gpio_set>
}
 d30:	bc08      	pop	{r3}
 d32:	bc01      	pop	{r0}
 d34:	4700      	bx	r0
 d36:	46c0      	nop			; (mov r8, r8)
 d38:	e0004004 	.word	0xe0004004

00000d3c <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
 d3c:	2101      	movs	r1, #1
 d3e:	4a06      	ldr	r2, [pc, #24]	; (d58 <timer0_stop+0x1c>)
	T0TCR |= 1;
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
}

void timer0_stop(void)
{
 d40:	b508      	push	{r3, lr}
	T0TCR &= ~1;
 d42:	6813      	ldr	r3, [r2, #0]
 d44:	438b      	bics	r3, r1
 d46:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
 d48:	2002      	movs	r0, #2
 d4a:	310c      	adds	r1, #12
 d4c:	f7ff fcc4 	bl	6d8 <gpio_clear>
}
 d50:	bc08      	pop	{r3}
 d52:	bc01      	pop	{r0}
 d54:	4700      	bx	r0
 d56:	46c0      	nop			; (mov r8, r8)
 d58:	e0004004 	.word	0xe0004004

00000d5c <strncmp>:
 d5c:	1c03      	adds	r3, r0, #0
 d5e:	b530      	push	{r4, r5, lr}
 d60:	2000      	movs	r0, #0
 d62:	2a00      	cmp	r2, #0
 d64:	d03a      	beq.n	ddc <strncmp+0x80>
 d66:	1c1c      	adds	r4, r3, #0
 d68:	430c      	orrs	r4, r1
 d6a:	07a4      	lsls	r4, r4, #30
 d6c:	d120      	bne.n	db0 <strncmp+0x54>
 d6e:	2a03      	cmp	r2, #3
 d70:	d91e      	bls.n	db0 <strncmp+0x54>
 d72:	681c      	ldr	r4, [r3, #0]
 d74:	680d      	ldr	r5, [r1, #0]
 d76:	42ac      	cmp	r4, r5
 d78:	d11a      	bne.n	db0 <strncmp+0x54>
 d7a:	3a04      	subs	r2, #4
 d7c:	2a00      	cmp	r2, #0
 d7e:	d02d      	beq.n	ddc <strncmp+0x80>
 d80:	4d1a      	ldr	r5, [pc, #104]	; (dec <strncmp+0x90>)
 d82:	1965      	adds	r5, r4, r5
 d84:	43a5      	bics	r5, r4
 d86:	1c2c      	adds	r4, r5, #0
 d88:	4d19      	ldr	r5, [pc, #100]	; (df0 <strncmp+0x94>)
 d8a:	422c      	tst	r4, r5
 d8c:	d00c      	beq.n	da8 <strncmp+0x4c>
 d8e:	e025      	b.n	ddc <strncmp+0x80>
 d90:	6818      	ldr	r0, [r3, #0]
 d92:	680c      	ldr	r4, [r1, #0]
 d94:	42a0      	cmp	r0, r4
 d96:	d10b      	bne.n	db0 <strncmp+0x54>
 d98:	3a04      	subs	r2, #4
 d9a:	2a00      	cmp	r2, #0
 d9c:	d021      	beq.n	de2 <strncmp+0x86>
 d9e:	4c13      	ldr	r4, [pc, #76]	; (dec <strncmp+0x90>)
 da0:	1904      	adds	r4, r0, r4
 da2:	4384      	bics	r4, r0
 da4:	422c      	tst	r4, r5
 da6:	d11c      	bne.n	de2 <strncmp+0x86>
 da8:	3304      	adds	r3, #4
 daa:	3104      	adds	r1, #4
 dac:	2a03      	cmp	r2, #3
 dae:	d8ef      	bhi.n	d90 <strncmp+0x34>
 db0:	781d      	ldrb	r5, [r3, #0]
 db2:	7808      	ldrb	r0, [r1, #0]
 db4:	3a01      	subs	r2, #1
 db6:	4285      	cmp	r5, r0
 db8:	d115      	bne.n	de6 <strncmp+0x8a>
 dba:	2a00      	cmp	r2, #0
 dbc:	d011      	beq.n	de2 <strncmp+0x86>
 dbe:	2d00      	cmp	r5, #0
 dc0:	d104      	bne.n	dcc <strncmp+0x70>
 dc2:	e00e      	b.n	de2 <strncmp+0x86>
 dc4:	2c00      	cmp	r4, #0
 dc6:	d00c      	beq.n	de2 <strncmp+0x86>
 dc8:	2a00      	cmp	r2, #0
 dca:	d00a      	beq.n	de2 <strncmp+0x86>
 dcc:	3301      	adds	r3, #1
 dce:	3101      	adds	r1, #1
 dd0:	781c      	ldrb	r4, [r3, #0]
 dd2:	7808      	ldrb	r0, [r1, #0]
 dd4:	3a01      	subs	r2, #1
 dd6:	4284      	cmp	r4, r0
 dd8:	d0f4      	beq.n	dc4 <strncmp+0x68>
 dda:	1a20      	subs	r0, r4, r0
 ddc:	bc30      	pop	{r4, r5}
 dde:	bc02      	pop	{r1}
 de0:	4708      	bx	r1
 de2:	2000      	movs	r0, #0
 de4:	e7fa      	b.n	ddc <strncmp+0x80>
 de6:	1c2c      	adds	r4, r5, #0
 de8:	1a20      	subs	r0, r4, r0
 dea:	e7f7      	b.n	ddc <strncmp+0x80>
 dec:	fefefeff 	.word	0xfefefeff
 df0:	80808080 	.word	0x80808080

00000df4 <help_msg>:
 df4:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
 e04:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
 e14:	20202020 72617473 202d2074 72617473         start - star
 e24:	656d2074 72757361 6e656d65 200a7374     t measurements. 
 e34:	73202020 20706f74 6966202d 6873696e        stop - finish
 e44:	61656d20 65727573 746e656d 20200a73      measurements.  
 e54:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
 e64:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
 e74:	75746573 4c000a70 69204350 6974696e     setup..LPC initi
 e84:	7a696c61 000a6465 72617473 74730074     alized..start.st
 e94:	7300706f 68007465 00706c65 306d6954     op.set.help.Tim0
 ea4:	0000000a                                         ..
