
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003043  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.excep    00000008  00003044  00003044  00013044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000043c  40000000  0000304c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000158  40000440  00003490  00020440  2**3
                  ALLOC
  4 .stack        00000a10  40000598  40000598  0002043c  2**2
                  CONTENTS
  5 .usbram       00000000  7fd00000  7fd00000  00020e4c  2**0
                  CONTENTS
  6 .etherram     00000000  7fe00000  7fe00000  00020e4c  2**0
                  CONTENTS
  7 .batteryram   00000000  e0084000  e0084000  00020e4c  2**0
                  CONTENTS
  8 .comment      00000034  00000000  00000000  00020e4c  2**0
                  CONTENTS, READONLY
  9 .ARM.attributes 00000031  00000000  00000000  00020e80  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000478  00000000  00000000  00020eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00006053  00000000  00000000  00021330  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001a40  00000000  00000000  00027383  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000313b  00000000  00000000  00028dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000798  00000000  00000000  0002bf00  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001365  00000000  00000000  0002c698  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00002c18  00000000  00000000  0002d9fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000148  00000000  00000000  00030618  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
	LDR	PC, =trap		@ Undef entry
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =swi_handler	@ SWI entry
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
	LDR	PC, =trap		@ PAbt entry
       c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
	LDR	PC, =trap		@ DAbt entry
      10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
      14:	00000000 	.word	0x00000000
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
	LDR     PC, =fiq_handler	@ FIQ entry
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
@-----------------------------------------------------------@

.section .VECTOR, "ax"
.arm

	LDR	PC, =reset_handler	@ Reset entry
      20:	00000300 	.word	0x00000300
	LDR	PC, =trap		@ Undef entry
      24:	0000038c 	.word	0x0000038c
	LDR	PC, =swi_handler	@ SWI entry
      28:	000003fc 	.word	0x000003fc
	LDR	PC, =trap		@ PAbt entry
	LDR	PC, =trap		@ DAbt entry
	.word	0			@ Check sum (set by flash programmer)
	LDR	PC, =irq_handler	@ IRQ entry
      2c:	000003ac 	.word	0x000003ac
	LDR     PC, =fiq_handler	@ FIQ entry
      30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>

@ Enter Undefined Instruction Mode and set its Stack Pointer
	MSR	CPSR_c, #M_UND | B_Irq | B_Fiq
     304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
	MOV	SP, R0
     308:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #UND_Stack_Size
     30c:	e2400000 	sub	r0, r0, #0

@ Enter Abort Mode and set its Stack Pointer
	MSR	CPSR_c, #M_ABT | B_Irq | B_Fiq
     310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
	MOV	SP, R0
     314:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #ABT_Stack_Size
     318:	e2400000 	sub	r0, r0, #0

@ Enter FIQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_FIQ | B_Irq | B_Fiq
     31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
	MOV	SP, R0
     320:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #FIQ_Stack_Size
     324:	e2400010 	sub	r0, r0, #16

@ Enter IRQ Mode and set its Stack Pointer
	MSR	CPSR_c, #M_IRQ | B_Irq | B_Fiq
     328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
	MOV	SP, R0
     32c:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #IRQ_Stack_Size
     330:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter Supervisor Mode and set its Stack Pointer
	MSR	CPSR_c, #M_SVC | B_Irq | B_Fiq
     334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
	MOV	SP, R0
     338:	e1a0d000 	mov	sp, r0
	SUB	R0, R0, #SVC_Stack_Size
     33c:	e2400c01 	sub	r0, r0, #256	; 0x100

@ Enter User Mode and set its Stack Pointer
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
     340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
	MOV	SP, R0
     344:	e1a0d000 	mov	sp, r0
	SUB	SL, SP, #USR_Stack_Size
     348:	e24dab02 	sub	sl, sp, #2048	; 0x800

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
	LDR	R2, =_sdata
     350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
	LDR	R3, =_edata
     354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
1:	CMP	R2, R3
     358:	e1520003 	cmp	r2, r3
	LDRLO	R0, [R1], #4
     35c:	34910004 	ldrcc	r0, [r1], #4
	STRLO	R0, [R2], #4
     360:	34820004 	strcc	r0, [r2], #4
	BLO	1b
     364:	3afffffb 	bcc	358 <reset_handler+0x58>

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
     368:	e3a00000 	mov	r0, #0
	LDR	R1, =_sbss
     36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
	LDR	R2, =_ebss
     370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
3:	CMP	R1, R2
     374:	e1510002 	cmp	r1, r2
	STRLO	R0, [R1], #4
     378:	34810004 	strcc	r0, [r1], #4
	BLO	3b
     37c:	3afffffc 	bcc	374 <reset_handler+0x74>

@ Start main()
.extern main
	LDR	R0, =main
     380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
	MOV	LR, PC
     384:	e1a0e00f 	mov	lr, pc
	BX	R0
     388:	e12fff10 	bx	r0

0000038c <trap>:

@ Trap (infinite loop)
trap:
	B	trap
     38c:	eafffffe 	b	38c <trap>
@	LDR	R0, =TargetResetInit
@	MOV	LR, PC
@	BX	R0

@ Setup Stack for each mode
	LDR	R0, =stack_end
     390:	40000fa8 	.word	0x40000fa8
	MSR	CPSR_c, #M_USR | B_Irq | B_Fiq
	MOV	SP, R0
	SUB	SL, SP, #USR_Stack_Size

@ Initialize .data section (Copy ROM data)
	LDR	R1, =_sidata
     394:	0000304c 	.word	0x0000304c
	LDR	R2, =_sdata
     398:	40000000 	.word	0x40000000
	LDR	R3, =_edata
     39c:	4000043c 	.word	0x4000043c
	STRLO	R0, [R2], #4
	BLO	1b

@ Initialize .bss section (Fill with 0)
	MOV	R0, #0
	LDR	R1, =_sbss
     3a0:	40000440 	.word	0x40000440
	LDR	R2, =_ebss
     3a4:	40000598 	.word	0x40000598
	STRLO	R0, [R1], #4
	BLO	3b

@ Start main()
.extern main
	LDR	R0, =main
     3a8:	000007d5 	.word	0x000007d5

000003ac <irq_handler>:
.equ VIC_VectAddr0,	0x100
.equ VIC_VectPriority0,	0x200
.equ VIC_VectAddr,	0xF00

irq_handler:
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
     3ac:	e24ee004 	sub	lr, lr, #4
	STMFD	SP!, {LR}
     3b0:	e92d4000 	stmfd	sp!, {lr}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
     3b4:	e14fe000 	mrs	lr, SPSR
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
     3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
	LDR	R0, [R0, #VIC_VectAddr]
     3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
	MSR	CPSR_c, #M_SVC		@ Enter SVC mode and enable Irq and Fiq
     3c4:	e321f013 	msr	CPSR_c, #19

	STMFD	SP!, {LR}		@ Call the ISR
     3c8:	e92d4000 	stmfd	sp!, {lr}
	MOV	LR, PC
     3cc:	e1a0e00f 	mov	lr, pc
	BX	R0
     3d0:	e12fff10 	bx	r0
	LDMIA	SP!, {LR}
     3d4:	e8bd4000 	ldmfd	sp!, {lr}

	MSR	CPSR_c, #M_IRQ | B_Irq	@ Enter IRQ mode and disable Irq
     3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
	LDMIA	SP!, {R0-R3,IP,LR}	@ Restore scratch/used registers and SPSR
     3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
	MSR	SPSR_cxsf, LR		@ Restore SPSR_irq
     3e0:	e16ff00e 	msr	SPSR_fsxc, lr

	LDR	LR, =LPC_BASE_VIC	@ Issue EOI command to the VIC
     3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
	STR	LR, [LR, #VIC_VectAddr]
     3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00

	LDMIA	SP!, {PC}^		@ Reruen from the IRQ handler
     3ec:	e8fd8000 	ldm	sp!, {pc}^
	SUB	LR, LR, #4		@ Adjust LR_irq and push it
	STMFD	SP!, {LR}

	MRS	LR, SPSR		@ Save SPSR need to be saved for nested interrupt
	STMFD	SP!, {R0-R3,IP,LR}	@ Push scratch/used registers and SPSR
	LDR	R0, =LPC_BASE_VIC	@ Get the ISR address pointed by VIC_VectAddr
     3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
@ FIQ Handler
@ FIQ routine is typically written in assembler
@-----------------------------------------------------------@

fiq_handler:
	SUB	LR, LR, #4		@ Adjust LR_fiq
     3f4:	e24ee004 	sub	lr, lr, #4

	@ Put the FIQ service here

	MOVS	PC, LR			@ Return from FIQ
     3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
@-----------------------------------------------------------@
@ SWI Service (declared in interrupt.h)
@-----------------------------------------------------------@

swi_handler:
	MRS	IP, SPSR
     3fc:	e14fc000 	mrs	ip, SPSR
	TST	IP, #B_Thumb		@ Check caller's state, ARM or Thumb
     400:	e31c0020 	tst	ip, #32
	LDRNEH	IP, [LR, #-2]		@ Get swi instruction code (on Thumb state)
     404:	115ec0b2 	ldrhne	ip, [lr, #-2]
	LDREQ	IP, [LR, #-4]		@ Get swi instruction code (on ARM state)
     408:	051ec004 	ldreq	ip, [lr, #-4]
	AND	IP, #0xFF		@ Get swi comment field (lower 8 bit)
     40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
	CMP	IP, #7			@ Check range
     410:	e35c0007 	cmp	ip, #7
	LDRLO	PC, [PC, IP, LSL #2]	@ Jump to each service function when code is valid
     414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
	MOVS	PC, LR			@ Otherwise return
     418:	e1b0f00e 	movs	pc, lr
     41c:	00000438 	.word	0x00000438
     420:	00000448 	.word	0x00000448
     424:	00000458 	.word	0x00000458
     428:	0000047c 	.word	0x0000047c
     42c:	000004b4 	.word	0x000004b4
     430:	000004d4 	.word	0x000004d4
     434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
	.word	sel_fiq		@ 4 Select FIQ interrupt
	.word	load_fiq	@ 5 Load FIQ shadow regs from memory
	.word	store_fiq	@ 6 Store FIQ shadow regs to memory

irq_disable:
	MRS	R0, SPSR
     438:	e14f0000 	mrs	r0, SPSR
	ORR	R0, R0, #B_Irq | B_Fiq
     43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     440:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:

irq_enable:
	MRS	R0, SPSR
     448:	e14f0000 	mrs	r0, SPSR
	BIC	R0, R0, #B_Irq | B_Fiq
     44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
	MSR	SPSR_c, R0
     450:	e161f000 	msr	SPSR_c, r0
	MOVS	PC, LR
     454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
	MVN	R0, #0				@ Disable all interrupts
     45c:	e3e00000 	mvn	r0, #0
	STR	R0, [IP, #VIC_IntEnClear]
     460:	e58c0014 	str	r0, [ip, #20]
	MOV	R0, R0, LSR #16			@ Unmask all interrupt levels
     464:	e1a00820 	lsr	r0, r0, #16
	STR	R0, [IP, #VIC_SWPriorityMask]
     468:	e58c0024 	str	r0, [ip, #36]	; 0x24
	MOV	R0, #1				@ Enable protection
     46c:	e3a00001 	mov	r0, #1
	STR	R0, [IP, #VIC_Protection]
     470:	e58c0020 	str	r0, [ip, #32]
	STR	R0, [IP, #VIC_VectAddr]		@ Issule EOI command
     474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
	MOVS	PC, LR
     478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:

reg_irq:
	CMP	R0, #32				@ Range check
     47c:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     480:	21b0f00e 	movscs	pc, lr
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
     488:	e78c1100 	str	r1, [ip, r0, lsl #2]
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
	STR	R2, [IP, R0, LSL #2]		@ Set VICVectPriority<n>
     490:	e78c2100 	str	r2, [ip, r0, lsl #2]
	MOV	R1, #1
     494:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     498:	e1a01011 	lsl	r1, r1, r0
	LDR	IP, =LPC_BASE_VIC
     49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
	LDR	R2, [IP, #VIC_IntSelect]	@ Clear corresponding bit in the VICIntSelect
     4a0:	e59c200c 	ldr	r2, [ip, #12]
	BIC	R2, R1
     4a4:	e1c22001 	bic	r2, r2, r1
	STR	R2, [IP, #VIC_IntSelect]
     4a8:	e58c200c 	str	r2, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4ac:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:

sel_fiq:
	CMP	R0, #32				@ Range check
     4b4:	e3500020 	cmp	r0, #32
	MOVCSS	PC, LR
     4b8:	21b0f00e 	movscs	pc, lr
	LDR	IP, =LPC_BASE_VIC
     4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
	MOV	R1, #1				@ Set corresponding bit in the VICIntSelect
     4c0:	e3a01001 	mov	r1, #1
	MOV	R1, R1, LSL R0
     4c4:	e1a01011 	lsl	r1, r1, r0
	STR	R1, [IP, #VIC_IntSelect]
     4c8:	e58c100c 	str	r1, [ip, #12]
	STR	R1, [IP, #VIC_IntEnable]	@ Enable corresponding interrupt
     4cc:	e58c1010 	str	r1, [ip, #16]
	MOVS	PC, LR
     4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:

load_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
	LDMIA	R0!, {R8-R12}			@ Load the memory to five shadow registers
     4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4dc:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:

store_fiq:
	MSR	CPSR_c, #M_FIQ | B_Fiq
     4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
	STMIA	R0!, {R8-R12}			@ Store five shadow registers to the memory
     4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
	MSR	CPSR_c, #M_SVC
     4ec:	e321f013 	msr	CPSR_c, #19
	MOVS	PC, LR
     4f0:	e1b0f00e 	movs	pc, lr
	BIC	R0, R0, #B_Irq | B_Fiq
	MSR	SPSR_c, R0
	MOVS	PC, LR

clear_vect:
	LDR	IP, =LPC_BASE_VIC
     4f4:	fffff000 	.word	0xfffff000
	MOVS	PC, LR

reg_irq:
	CMP	R0, #32				@ Range check
	MOVCSS	PC, LR
	LDR	IP, =(LPC_BASE_VIC+VIC_VectAddr0)
     4f8:	fffff100 	.word	0xfffff100
	STR	R1, [IP, R0, LSL #2]		@ Set VICVectVectAddr<n>
	LDR	IP, =(LPC_BASE_VIC+VIC_VectPriority0)
     4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
@ void Copy_un2al (DWORD *dst, const BYTE *src, int count);
.global Copy_un2al
.type Copy_un2al, %function
.func Copy_un2al
Copy_un2al:
	STMFD	SP!, {R4-R8}
     500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R1, #3
     504:	e211c003 	ands	ip, r1, #3
	BEQ	lb_align
     508:	0a000012 	beq	558 <lb_align>

	BIC	R1, #3
     50c:	e3c11003 	bic	r1, r1, #3
	MOV	IP, IP, LSL #3
     510:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     514:	e26c8020 	rsb	r8, ip, #32
	LDMIA	R1!, {R7}
     518:	e8b10080 	ldm	r1!, {r7}
1:	MOV	R3, R7
     51c:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR IP
     524:	e1a03c33 	lsr	r3, r3, ip
	ORR	R3, R3, R4, LSL R8
     528:	e1833814 	orr	r3, r3, r4, lsl r8
	MOV	R4, R4, LSR IP
     52c:	e1a04c34 	lsr	r4, r4, ip
	ORR	R4, R4, R5, LSL R8
     530:	e1844815 	orr	r4, r4, r5, lsl r8
	MOV	R5, R5, LSR IP
     534:	e1a05c35 	lsr	r5, r5, ip
	ORR	R5, R5, R6, LSL R8
     538:	e1855816 	orr	r5, r5, r6, lsl r8
	MOV	R6, R6, LSR IP
     53c:	e1a06c36 	lsr	r6, r6, ip
	ORR	R6, R6, R7, LSL R8
     540:	e1866817 	orr	r6, r6, r7, lsl r8
	SUBS	R2, R2, #16
     544:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	1b
     54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
	LDMFD	SP!, {R4-R8}
     550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     554:	e12fff1e 	bx	lr

00000558 <lb_align>:

lb_align:
	LDMIA	R1!, {R3-R6}
     558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, R2, #16
     55c:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	lb_align
     564:	1afffffb 	bne	558 <lb_align>
	LDMFD	SP!, {R4-R8}
     568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
@ void Copy_al2un (BYTE *dst, const DWORD *src, int count);
.global Copy_al2un
.type Copy_al2un, %function
.func Copy_al2un
Copy_al2un:
	STMFD	SP!, {R4-R8}
     570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
	ANDS	IP, R0, #3
     574:	e210c003 	ands	ip, r0, #3
	BEQ	sb_align
     578:	0a000021 	beq	604 <sb_align>

	MOV	IP, IP, LSL #3
     57c:	e1a0c18c 	lsl	ip, ip, #3
	RSB	R8, IP, #32
     580:	e26c8020 	rsb	r8, ip, #32

	LDMIA	R1!, {R4-R7}
     584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
1:	STRB	R4, [R0], #1
     588:	e4c04001 	strb	r4, [r0], #1
	MOV	R4, R4, LSR #8
     58c:	e1a04424 	lsr	r4, r4, #8
	TST	R0, #3
     590:	e3100003 	tst	r0, #3
	BNE	1b
     594:	1afffffb 	bne	588 <Copy_al2un+0x18>
	ORR	R4, R4, R5, LSL IP
     598:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     59c:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5a4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5ac:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R4-R6}
     5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}

2:	MOV	R3, R7
     5b4:	e1a03007 	mov	r3, r7
	LDMIA	R1!, {R4-R7}
     5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
	MOV	R3, R3, LSR R8
     5bc:	e1a03833 	lsr	r3, r3, r8
	ORR	R3, R3, R4, LSL IP
     5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
	MOV	R4, R4, LSR R8
     5c4:	e1a04834 	lsr	r4, r4, r8
	ORR	R4, R4, R5, LSL IP
     5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
	MOV	R5, R5, LSR R8
     5cc:	e1a05835 	lsr	r5, r5, r8
	ORR	R5, R5, R6, LSL IP
     5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
	MOV	R6, R6, LSR R8
     5d4:	e1a06836 	lsr	r6, r6, r8
	ORR	R6, R6, R7, LSL IP
     5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
	SUBS	R2, R2, #16
     5dc:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	2b
     5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>

	MOV	R7, R7, LSR R8
     5e8:	e1a07837 	lsr	r7, r7, r8
3:	SUBS	IP, IP, #8
     5ec:	e25cc008 	subs	ip, ip, #8
	STRB	R7, [R0], #1
     5f0:	e4c07001 	strb	r7, [r0], #1
	MOV	R7, R7, LSR #8
     5f4:	e1a07427 	lsr	r7, r7, #8
	BNE	3b
     5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>

	LDMFD	SP!, {R4-R8}
     5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     600:	e12fff1e 	bx	lr

00000604 <sb_align>:

sb_align:
	LDMIA	R1!, {R3-R6}
     604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
	SUBS	R2, #16
     608:	e2522010 	subs	r2, r2, #16
	STMIA	R0!, {R3-R6}
     60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
	BNE	sb_align
     610:	1afffffb 	bne	604 <sb_align>
	LDMFD	SP!, {R4-R8}
     614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
	BX	LR
     618:	e12fff1e 	bx	lr

0000061c <gpio_init>:
uint8_t getflag =0;
uint64_t curr_big;
uint16_t volts, curr;
void gpio_init (void)
{	
	SCS |= 1;
     61c:	2101      	movs	r1, #1
     61e:	4a0e      	ldr	r2, [pc, #56]	; (658 <gpio_init+0x3c>)
     620:	6813      	ldr	r3, [r2, #0]
     622:	430b      	orrs	r3, r1
     624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
     626:	2200      	movs	r2, #0
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     628:	2003      	movs	r0, #3
uint64_t curr_big;
uint16_t volts, curr;
void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62a:	4b0c      	ldr	r3, [pc, #48]	; (65c <gpio_init+0x40>)
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     62c:	490c      	ldr	r1, [pc, #48]	; (660 <gpio_init+0x44>)
uint64_t curr_big;
uint16_t volts, curr;
void gpio_init (void)
{	
	SCS |= 1;
	FIO2MASK = 0;
     62e:	601a      	str	r2, [r3, #0]
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     630:	680b      	ldr	r3, [r1, #0]
     632:	4303      	orrs	r3, r0
     634:	600b      	str	r3, [r1, #0]

	/* FIO1MASK = 0xFFFFFFFF & (0 << DAC) | (0 << ADC); */
	FIO1MASK = 0;
     636:	4b0b      	ldr	r3, [pc, #44]	; (664 <gpio_init+0x48>)
     638:	601a      	str	r2, [r3, #0]
	FIO1DIR |=  (1 << DAC) | (1 << ADC) | (1 << ADC_DIN) | (1 << ADC_SCLK);	/*  Slave select pins  */
     63a:	4b0b      	ldr	r3, [pc, #44]	; (668 <gpio_init+0x4c>)
     63c:	490b      	ldr	r1, [pc, #44]	; (66c <gpio_init+0x50>)
     63e:	681a      	ldr	r2, [r3, #0]
     640:	430a      	orrs	r2, r1
     642:	601a      	str	r2, [r3, #0]
	FIO1DIR &= ~(1 << ADC_DOUT);
     644:	4a0a      	ldr	r2, [pc, #40]	; (670 <gpio_init+0x54>)
     646:	6819      	ldr	r1, [r3, #0]
     648:	400a      	ands	r2, r1
     64a:	601a      	str	r2, [r3, #0]
	/* FIO1DIR |=  (1 << DAC) | (1 << ADC);[> 	Slave select pins  <] */
	FIO1SET |= (1 << ADC) | (1 << DAC) | (1 << ADC_SCLK);	 /*  Set hight level  */
     64c:	4a09      	ldr	r2, [pc, #36]	; (674 <gpio_init+0x58>)
     64e:	490a      	ldr	r1, [pc, #40]	; (678 <gpio_init+0x5c>)
     650:	6813      	ldr	r3, [r2, #0]
     652:	430b      	orrs	r3, r1
     654:	6013      	str	r3, [r2, #0]
}
     656:	4770      	bx	lr
     658:	e01fc1a0 	.word	0xe01fc1a0
     65c:	3fffc050 	.word	0x3fffc050
     660:	3fffc040 	.word	0x3fffc040
     664:	3fffc030 	.word	0x3fffc030
     668:	3fffc020 	.word	0x3fffc020
     66c:	21140000 	.word	0x21140000
     670:	ff7fffff 	.word	0xff7fffff
     674:	3fffc038 	.word	0x3fffc038
     678:	20140000 	.word	0x20140000

0000067c <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
     67c:	2201      	movs	r2, #1
     67e:	4082      	lsls	r2, r0
     680:	1c10      	adds	r0, r2, #0
     682:	4902      	ldr	r1, [pc, #8]	; (68c <led_set+0x10>)
     684:	680b      	ldr	r3, [r1, #0]
     686:	4318      	orrs	r0, r3
     688:	6008      	str	r0, [r1, #0]
}
     68a:	4770      	bx	lr
     68c:	3fffc058 	.word	0x3fffc058

00000690 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
     690:	2201      	movs	r2, #1
     692:	4082      	lsls	r2, r0
     694:	1c10      	adds	r0, r2, #0
     696:	4902      	ldr	r1, [pc, #8]	; (6a0 <led_clear+0x10>)
     698:	680b      	ldr	r3, [r1, #0]
     69a:	4318      	orrs	r0, r3
     69c:	6008      	str	r0, [r1, #0]
}
     69e:	4770      	bx	lr
     6a0:	3fffc05c 	.word	0x3fffc05c

000006a4 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
     6a4:	b510      	push	{r4, lr}
	switch (port)
     6a6:	2801      	cmp	r0, #1
     6a8:	d00f      	beq.n	6ca <gpio_set+0x26>
     6aa:	2800      	cmp	r0, #0
     6ac:	d009      	beq.n	6c2 <gpio_set+0x1e>
     6ae:	2802      	cmp	r0, #2
     6b0:	d110      	bne.n	6d4 <gpio_set+0x30>
			break;
		case 1:
			FIO1SET |= (1 << pin);
			break;
		case 2:
			FIO2SET |= (1 << pin);
     6b2:	2201      	movs	r2, #1
     6b4:	408a      	lsls	r2, r1
     6b6:	1c10      	adds	r0, r2, #0
     6b8:	4c08      	ldr	r4, [pc, #32]	; (6dc <gpio_set+0x38>)
     6ba:	6823      	ldr	r3, [r4, #0]
     6bc:	4318      	orrs	r0, r3
     6be:	6020      	str	r0, [r4, #0]
			break;
     6c0:	e008      	b.n	6d4 <gpio_set+0x30>
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0SET |= (1 << pin);
     6c2:	4a07      	ldr	r2, [pc, #28]	; (6e0 <gpio_set+0x3c>)
     6c4:	2001      	movs	r0, #1
     6c6:	6813      	ldr	r3, [r2, #0]
     6c8:	e001      	b.n	6ce <gpio_set+0x2a>
			break;
		case 1:
			FIO1SET |= (1 << pin);
     6ca:	4a06      	ldr	r2, [pc, #24]	; (6e4 <gpio_set+0x40>)
     6cc:	6813      	ldr	r3, [r2, #0]
     6ce:	4088      	lsls	r0, r1
     6d0:	4318      	orrs	r0, r3
     6d2:	6010      	str	r0, [r2, #0]
			FIO2SET |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6d4:	bc10      	pop	{r4}
     6d6:	bc01      	pop	{r0}
     6d8:	4700      	bx	r0
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	3fffc058 	.word	0x3fffc058
     6e0:	3fffc018 	.word	0x3fffc018
     6e4:	3fffc038 	.word	0x3fffc038

000006e8 <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
     6e8:	b510      	push	{r4, lr}
	switch (port)
     6ea:	2801      	cmp	r0, #1
     6ec:	d00f      	beq.n	70e <gpio_clear+0x26>
     6ee:	2800      	cmp	r0, #0
     6f0:	d009      	beq.n	706 <gpio_clear+0x1e>
     6f2:	2802      	cmp	r0, #2
     6f4:	d110      	bne.n	718 <gpio_clear+0x30>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
			break;
		case 2:
			FIO2CLR |= (1 << pin);
     6f6:	2201      	movs	r2, #1
     6f8:	408a      	lsls	r2, r1
     6fa:	1c10      	adds	r0, r2, #0
     6fc:	4c08      	ldr	r4, [pc, #32]	; (720 <gpio_clear+0x38>)
     6fe:	6823      	ldr	r3, [r4, #0]
     700:	4318      	orrs	r0, r3
     702:	6020      	str	r0, [r4, #0]
			break;
     704:	e008      	b.n	718 <gpio_clear+0x30>
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
	{
		case 0:
			FIO0CLR |= (1 << pin);
     706:	4a07      	ldr	r2, [pc, #28]	; (724 <gpio_clear+0x3c>)
     708:	2001      	movs	r0, #1
     70a:	6813      	ldr	r3, [r2, #0]
     70c:	e001      	b.n	712 <gpio_clear+0x2a>
			break;
		case 1:
			FIO1CLR |= (1 << pin);
     70e:	4a06      	ldr	r2, [pc, #24]	; (728 <gpio_clear+0x40>)
     710:	6813      	ldr	r3, [r2, #0]
     712:	4088      	lsls	r0, r1
     714:	4318      	orrs	r0, r3
     716:	6010      	str	r0, [r2, #0]
			FIO2CLR |= (1 << pin);
			break;
		default:
			break;	
	}
}
     718:	bc10      	pop	{r4}
     71a:	bc01      	pop	{r0}
     71c:	4700      	bx	r0
     71e:	46c0      	nop			; (mov r8, r8)
     720:	3fffc05c 	.word	0x3fffc05c
     724:	3fffc01c 	.word	0x3fffc01c
     728:	3fffc03c 	.word	0x3fffc03c

0000072c <pll_init>:
void pll_init(void)
{
	// 1. Init OSC
	SCS = (1 << 5);
     72c:	2220      	movs	r2, #32
     72e:	4b1f      	ldr	r3, [pc, #124]	; (7ac <pll_init+0x80>)
		default:
			break;	
	}
}
void pll_init(void)
{
     730:	b570      	push	{r4, r5, r6, lr}
	// 1. Init OSC
	SCS = (1 << 5);
     732:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
     734:	2240      	movs	r2, #64	; 0x40
     736:	6819      	ldr	r1, [r3, #0]
     738:	4211      	tst	r1, r2
     73a:	d0fc      	beq.n	736 <pll_init+0xa>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
     73c:	2155      	movs	r1, #85	; 0x55
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     73e:	20aa      	movs	r0, #170	; 0xaa
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     740:	2501      	movs	r5, #1
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
     742:	2400      	movs	r4, #0
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     744:	4b1a      	ldr	r3, [pc, #104]	; (7b0 <pll_init+0x84>)
	// 1. Init OSC
	SCS = (1 << 5);
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
	// 3. Disconnect PLL
	PLLCON = 1; 
     746:	4a1b      	ldr	r2, [pc, #108]	; (7b4 <pll_init+0x88>)
     748:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
     74a:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     74c:	6019      	str	r1, [r3, #0]
	// 4. Disable PLL
	PLLCON = 0;
     74e:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     750:	4c19      	ldr	r4, [pc, #100]	; (7b8 <pll_init+0x8c>)
	PLLCON = 1; 
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
     752:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     754:	4e19      	ldr	r6, [pc, #100]	; (7bc <pll_init+0x90>)
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 4. Disable PLL
	PLLCON = 0;
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
     756:	6019      	str	r1, [r3, #0]
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     758:	6025      	str	r5, [r4, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     75a:	4c19      	ldr	r4, [pc, #100]	; (7c0 <pll_init+0x94>)
     75c:	6026      	str	r6, [r4, #0]
	PLLFEED = 0xAA;
     75e:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     760:	6019      	str	r1, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
     762:	6814      	ldr	r4, [r2, #0]
     764:	432c      	orrs	r4, r5
     766:	6014      	str	r4, [r2, #0]
	PLLFEED = 0xAA;
     768:	6018      	str	r0, [r3, #0]
	PLLFEED = 0x55;
     76a:	6019      	str	r1, [r3, #0]
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     76c:	2180      	movs	r1, #128	; 0x80
     76e:	4c15      	ldr	r4, [pc, #84]	; (7c4 <pll_init+0x98>)
     770:	04c9      	lsls	r1, r1, #19
     772:	6820      	ldr	r0, [r4, #0]
     774:	4208      	tst	r0, r1
     776:	d0fc      	beq.n	772 <pll_init+0x46>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
     778:	2003      	movs	r0, #3
     77a:	4913      	ldr	r1, [pc, #76]	; (7c8 <pll_init+0x9c>)
     77c:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
     77e:	2000      	movs	r0, #0
     780:	4912      	ldr	r1, [pc, #72]	; (7cc <pll_init+0xa0>)
     782:	4c13      	ldr	r4, [pc, #76]	; (7d0 <pll_init+0xa4>)
     784:	6008      	str	r0, [r1, #0]
     786:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
     788:	2004      	movs	r0, #4
     78a:	6008      	str	r0, [r1, #0]

	// 10. Connect the PLL
	PLLCON |= 1 << 1;
     78c:	2002      	movs	r0, #2
     78e:	6811      	ldr	r1, [r2, #0]
     790:	4301      	orrs	r1, r0
     792:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     794:	22aa      	movs	r2, #170	; 0xaa
     796:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
     798:	2255      	movs	r2, #85	; 0x55
     79a:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
     79c:	f000 f830 	bl	800 <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
     7a0:	f000 f82c 	bl	7fc <IrqEnable>

}
     7a4:	bc70      	pop	{r4, r5, r6}
     7a6:	bc01      	pop	{r0}
     7a8:	4700      	bx	r0
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	e01fc1a0 	.word	0xe01fc1a0
     7b0:	e01fc08c 	.word	0xe01fc08c
     7b4:	e01fc080 	.word	0xe01fc080
     7b8:	e01fc10c 	.word	0xe01fc10c
     7bc:	00010017 	.word	0x00010017
     7c0:	e01fc084 	.word	0xe01fc084
     7c4:	e01fc088 	.word	0xe01fc088
     7c8:	e01fc104 	.word	0xe01fc104
     7cc:	e01fc1ac 	.word	0xe01fc1ac
     7d0:	e01fc1a8 	.word	0xe01fc1a8

000007d4 <main>:


int main (void)
{
     7d4:	b510      	push	{r4, lr}
	uint16_t i, j, rise; 
	pll_init();
     7d6:	f7ff ffa9 	bl	72c <pll_init>
	uart0_init();	
     7da:	f000 f89d 	bl	918 <uart0_init>
	/* SPI0_init(); */
	timer0_init();
     7de:	f000 fcdd 	bl	119c <timer0_init>
	gpio_init();
     7e2:	f7ff ff1b 	bl	61c <gpio_init>
	adc_init();
     7e6:	f000 fbaa 	bl	f3e <adc_init>
	UART0_send("\nLPC initialized\n", 17);
     7ea:	2111      	movs	r1, #17
     7ec:	4801      	ldr	r0, [pc, #4]	; (7f4 <main+0x20>)
     7ee:	f000 f90d 	bl	a0c <UART0_send>

	while(1)
	{
	}
     7f2:	e7fe      	b.n	7f2 <main+0x1e>
     7f4:	00002f9e 	.word	0x00002f9e

000007f8 <IrqDisable>:


/* Disable/Enable Irq */
void IrqDisable (void)
{
	asm ("swi 0\n");
     7f8:	df00      	svc	0
}
     7fa:	4770      	bx	lr

000007fc <IrqEnable>:

void IrqEnable (void)
{
	asm ("swi 1\n");
     7fc:	df01      	svc	1
}
     7fe:	4770      	bx	lr

00000800 <ClearVector>:


/* Unregister all ISRs */
void ClearVector (void)
{
	asm ("swi 2\n");
     800:	df02      	svc	2
}
     802:	4770      	bx	lr

00000804 <RegisterIrq>:
	int irq,
	void(*isr)(void),
	int pri
)
{
	asm (
     804:	df03      	svc	3
	"@ MOV R0, %0\n"
	"@ MOV R1, %1\n"
	"@ MOV R2, %2\n"
	"swi 3\n" : : "r" (irq), "r" (isr), "r" (pri)
	);
}
     806:	4770      	bx	lr

00000808 <SelectFiq>:
/* Switch an interrtupt source as FIQ */
void SelectFiq (
	int irq
)
{
	asm (
     808:	df04      	svc	4
	"@ MOV R0, %0\n"
	"swi 4\n" : : "r" (irq)
	);
}
     80a:	4770      	bx	lr

0000080c <LoadFiqRegs>:
/* Load shadow regs R8-R12 from memory */
void LoadFiqRegs (
	long *regs
)
{
	asm (
     80c:	df05      	svc	5
	"@ MOV R0, %0\n"
	"swi 5\n" : : "r" (regs)
	);
}
     80e:	4770      	bx	lr

00000810 <StoreFiqRegs>:
/* Store shadow regs R8-R12 to memory */
void StoreFiqRegs (
	long *regs
)
{
	asm (
     810:	df06      	svc	6
	"@ MOV R0, %0\n"
	"swi 6\n" : : "r" (regs)
	);
}
     812:	4770      	bx	lr

00000814 <Isr_UART0>:
{

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
     814:	4b14      	ldr	r3, [pc, #80]	; (868 <Isr_UART0+0x54>)
     816:	681a      	ldr	r2, [r3, #0]
     818:	4b14      	ldr	r3, [pc, #80]	; (86c <Isr_UART0+0x58>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     81a:	681b      	ldr	r3, [r3, #0]
     81c:	061b      	lsls	r3, r3, #24
	uint16_t	ri, wi, ct;
	uint8_t		buff[UART0_RXB];
} RxBuff0;

void Isr_UART0 (void)
{
     81e:	b570      	push	{r4, r5, r6, lr}
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     820:	0e1b      	lsrs	r3, r3, #24

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
	if(iir & 1 != 0)
     822:	07d2      	lsls	r2, r2, #31
     824:	d510      	bpl.n	848 <Isr_UART0+0x34>
     826:	4c12      	ldr	r4, [pc, #72]	; (870 <Isr_UART0+0x5c>)
     828:	4812      	ldr	r0, [pc, #72]	; (874 <Isr_UART0+0x60>)
	{	
		d = U0RBR;
		if (d == '\n')
     82a:	2b0a      	cmp	r3, #10
     82c:	d108      	bne.n	840 <Isr_UART0+0x2c>
		{
			resiever[rec_len++] = 0;	/* Make null-terminated string */
     82e:	2500      	movs	r5, #0
     830:	7823      	ldrb	r3, [r4, #0]
     832:	1c5a      	adds	r2, r3, #1
     834:	7022      	strb	r2, [r4, #0]
     836:	54c5      	strb	r5, [r0, r3]
			process_command(resiever);
     838:	f000 f9aa 	bl	b90 <process_command>
			rec_len = 0;
     83c:	7025      	strb	r5, [r4, #0]
     83e:	e00d      	b.n	85c <Isr_UART0+0x48>
		}else{
			resiever[rec_len++] = d;
     840:	7822      	ldrb	r2, [r4, #0]
     842:	1c51      	adds	r1, r2, #1
     844:	7021      	strb	r1, [r4, #0]
     846:	5483      	strb	r3, [r0, r2]
		}
	}else{
		d = U0RBR;
	}
	if (d == 'L')
     848:	2b4c      	cmp	r3, #76	; 0x4c
     84a:	d102      	bne.n	852 <Isr_UART0+0x3e>
	{
		FIO2SET = (1 << LED1) | (1 << LED2);
     84c:	2203      	movs	r2, #3
     84e:	4b0a      	ldr	r3, [pc, #40]	; (878 <Isr_UART0+0x64>)
     850:	e003      	b.n	85a <Isr_UART0+0x46>
	}else if (d == 'O')
     852:	2b4f      	cmp	r3, #79	; 0x4f
     854:	d102      	bne.n	85c <Isr_UART0+0x48>
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);
     856:	2203      	movs	r2, #3
     858:	4b08      	ldr	r3, [pc, #32]	; (87c <Isr_UART0+0x68>)
     85a:	601a      	str	r2, [r3, #0]

	}
	VICVectAddr = 0;
     85c:	2200      	movs	r2, #0
     85e:	4b08      	ldr	r3, [pc, #32]	; (880 <Isr_UART0+0x6c>)
     860:	601a      	str	r2, [r3, #0]

}
     862:	bc70      	pop	{r4, r5, r6}
     864:	bc01      	pop	{r0}
     866:	4700      	bx	r0
     868:	e000c014 	.word	0xe000c014
     86c:	e000c000 	.word	0xe000c000
     870:	40000442 	.word	0x40000442
     874:	40000564 	.word	0x40000564
     878:	3fffc058 	.word	0x3fffc058
     87c:	3fffc05c 	.word	0x3fffc05c
     880:	ffffff00 	.word	0xffffff00

00000884 <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
     884:	4b01      	ldr	r3, [pc, #4]	; (88c <uart0_test+0x8>)
     886:	88d8      	ldrh	r0, [r3, #6]
}
     888:	4770      	bx	lr
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	40000442 	.word	0x40000442

00000890 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
     890:	4b0b      	ldr	r3, [pc, #44]	; (8c0 <uart0_getc+0x30>)
     892:	3302      	adds	r3, #2
     894:	889a      	ldrh	r2, [r3, #4]
     896:	2a00      	cmp	r2, #0
     898:	d0fc      	beq.n	894 <uart0_getc+0x4>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
     89a:	881a      	ldrh	r2, [r3, #0]
	d = RxBuff0.buff[i++];
     89c:	1899      	adds	r1, r3, r2
     89e:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
     8a0:	217f      	movs	r1, #127	; 0x7f

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
	d = RxBuff0.buff[i++];
     8a2:	3201      	adds	r2, #1
	RxBuff0.ri = i % UART0_RXB;
     8a4:	400a      	ands	r2, r1
     8a6:	801a      	strh	r2, [r3, #0]
	U0IER = 0;		/* Disable interrupts */
     8a8:	2200      	movs	r2, #0
     8aa:	4906      	ldr	r1, [pc, #24]	; (8c4 <uart0_getc+0x34>)
     8ac:	600a      	str	r2, [r1, #0]
	RxBuff0.ct--;
     8ae:	889a      	ldrh	r2, [r3, #4]
     8b0:	3a01      	subs	r2, #1
     8b2:	0412      	lsls	r2, r2, #16
     8b4:	0c12      	lsrs	r2, r2, #16
     8b6:	809a      	strh	r2, [r3, #4]
	U0IER = 0x07;	/* Reenable interrupt */
     8b8:	2307      	movs	r3, #7
     8ba:	600b      	str	r3, [r1, #0]

	return d;
}
     8bc:	4770      	bx	lr
     8be:	46c0      	nop			; (mov r8, r8)
     8c0:	40000442 	.word	0x40000442
     8c4:	e000c004 	.word	0xe000c004

000008c8 <uart0_putc>:


void uart0_putc (uint8_t d)
{
     8c8:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
     8ca:	4b10      	ldr	r3, [pc, #64]	; (90c <uart0_putc+0x44>)
     8cc:	899a      	ldrh	r2, [r3, #12]
     8ce:	2a7f      	cmp	r2, #127	; 0x7f
     8d0:	d8fc      	bhi.n	8cc <uart0_putc+0x4>

	U0IER = 0x05;		/* Disable Tx Interrupt */
     8d2:	2205      	movs	r2, #5
     8d4:	490e      	ldr	r1, [pc, #56]	; (910 <uart0_putc+0x48>)
     8d6:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
     8d8:	89da      	ldrh	r2, [r3, #14]
     8da:	2a00      	cmp	r2, #0
     8dc:	d00c      	beq.n	8f8 <uart0_putc+0x30>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
     8de:	895a      	ldrh	r2, [r3, #10]
		TxBuff0.buff[i++] = d;
     8e0:	189c      	adds	r4, r3, r2
     8e2:	7420      	strb	r0, [r4, #16]
		TxBuff0.wi = i % UART0_TXB;
     8e4:	207f      	movs	r0, #127	; 0x7f
	while (TxBuff0.ct >= UART0_TXB) ;

	U0IER = 0x05;		/* Disable Tx Interrupt */
	if (TxBuff0.act) {
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
		TxBuff0.buff[i++] = d;
     8e6:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
     8e8:	4002      	ands	r2, r0
     8ea:	815a      	strh	r2, [r3, #10]
		TxBuff0.ct++;
     8ec:	899a      	ldrh	r2, [r3, #12]
     8ee:	3201      	adds	r2, #1
     8f0:	0412      	lsls	r2, r2, #16
     8f2:	0c12      	lsrs	r2, r2, #16
     8f4:	819a      	strh	r2, [r3, #12]
     8f6:	e003      	b.n	900 <uart0_putc+0x38>
	} else {
		U0THR = d;		/* Trigger Tx sequense */
     8f8:	4a06      	ldr	r2, [pc, #24]	; (914 <uart0_putc+0x4c>)
     8fa:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
     8fc:	2201      	movs	r2, #1
     8fe:	81da      	strh	r2, [r3, #14]
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
     900:	2307      	movs	r3, #7
     902:	600b      	str	r3, [r1, #0]
}
     904:	bc10      	pop	{r4}
     906:	bc01      	pop	{r0}
     908:	4700      	bx	r0
     90a:	46c0      	nop			; (mov r8, r8)
     90c:	400004c2 	.word	0x400004c2
     910:	e000c004 	.word	0xe000c004
     914:	e000c000 	.word	0xe000c000

00000918 <uart0_init>:


void uart0_init (void)
{
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     918:	2108      	movs	r1, #8
     91a:	4a16      	ldr	r2, [pc, #88]	; (974 <uart0_init+0x5c>)
     91c:	6813      	ldr	r3, [r2, #0]
     91e:	430b      	orrs	r3, r1
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     920:	2183      	movs	r1, #131	; 0x83
	U0IER = 0x07;		/* Reenable Tx Interrupt */
}


void uart0_init (void)
{
     922:	b510      	push	{r4, lr}
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     924:	6013      	str	r3, [r2, #0]
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     926:	4b14      	ldr	r3, [pc, #80]	; (978 <uart0_init+0x60>)
     928:	681a      	ldr	r2, [r3, #0]
     92a:	430a      	orrs	r2, r1
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     92c:	21c1      	movs	r1, #193	; 0xc1
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     92e:	601a      	str	r2, [r3, #0]
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     930:	4a12      	ldr	r2, [pc, #72]	; (97c <uart0_init+0x64>)
     932:	6011      	str	r1, [r2, #0]
	U0DLL = 0x09;
     934:	2109      	movs	r1, #9
     936:	4a12      	ldr	r2, [pc, #72]	; (980 <uart0_init+0x68>)
     938:	6011      	str	r1, [r2, #0]
	U0DLM = 0x00;
     93a:	2100      	movs	r1, #0
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     93c:	2080      	movs	r0, #128	; 0x80
	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
	U0DLL = 0x09;
	U0DLM = 0x00;
     93e:	4a11      	ldr	r2, [pc, #68]	; (984 <uart0_init+0x6c>)
     940:	6011      	str	r1, [r2, #0]
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     942:	6819      	ldr	r1, [r3, #0]
     944:	4381      	bics	r1, r0

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     946:	2007      	movs	r0, #7
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
	U0DLL = 0x09;
	U0DLM = 0x00;
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     948:	6019      	str	r1, [r3, #0]

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     94a:	490f      	ldr	r1, [pc, #60]	; (988 <uart0_init+0x70>)
     94c:	680b      	ldr	r3, [r1, #0]
     94e:	4303      	orrs	r3, r0

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     950:	2050      	movs	r0, #80	; 0x50
	U0DLL = 0x09;
	U0DLM = 0x00;
	U0LCR &= ~(1 << DLAB);//DLAB = 0

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     952:	600b      	str	r3, [r1, #0]

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     954:	490d      	ldr	r1, [pc, #52]	; (98c <uart0_init+0x74>)
     956:	680b      	ldr	r3, [r1, #0]
     958:	4303      	orrs	r3, r0
     95a:	600b      	str	r3, [r1, #0]

	//Interrupts
	/* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
	/* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
	U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
     95c:	2101      	movs	r1, #1
     95e:	6813      	ldr	r3, [r2, #0]
     960:	430b      	orrs	r3, r1
     962:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
     964:	490a      	ldr	r1, [pc, #40]	; (990 <uart0_init+0x78>)
     966:	220f      	movs	r2, #15
     968:	2006      	movs	r0, #6
     96a:	f7ff ff4b 	bl	804 <RegisterIrq>

}
     96e:	bc10      	pop	{r4}
     970:	bc01      	pop	{r0}
     972:	4700      	bx	r0
     974:	e01fc0c4 	.word	0xe01fc0c4
     978:	e000c00c 	.word	0xe000c00c
     97c:	e000c028 	.word	0xe000c028
     980:	e000c000 	.word	0xe000c000
     984:	e000c004 	.word	0xe000c004
     988:	e000c008 	.word	0xe000c008
     98c:	e002c000 	.word	0xe002c000
     990:	00000815 	.word	0x00000815
     994:	00000000 	.word	0x00000000

00000998 <hex_to_int>:


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     998:	220a      	movs	r2, #10
extern uint8_t getflag;
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n    native - non-formated output\n    ascii - output in ascii presentation\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
     99a:	0903      	lsrs	r3, r0, #4
     99c:	3b03      	subs	r3, #3
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     99e:	4353      	muls	r3, r2
const char help_msg[] = "Plazma probe controller\n Usage:\n    start - start measurements\n    stop - finish measurements\n    set <voltage> - probe voltage setup\n    native - non-formated output\n    ascii - output in ascii presentation\n";


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
     9a0:	220f      	movs	r2, #15
     9a2:	4010      	ands	r0, r2
	uint16_t result = first*10 + second;
     9a4:	18c0      	adds	r0, r0, r3
     9a6:	0400      	lsls	r0, r0, #16
     9a8:	0c00      	lsrs	r0, r0, #16
	if(result > 9) result--;
     9aa:	2809      	cmp	r0, #9
     9ac:	d902      	bls.n	9b4 <hex_to_int+0x1c>
     9ae:	3801      	subs	r0, #1
     9b0:	0400      	lsls	r0, r0, #16
     9b2:	0c00      	lsrs	r0, r0, #16
	return result;
}
     9b4:	4770      	bx	lr

000009b6 <hex_to_ascii>:

uint16_t hex_to_ascii(uint16_t c){
     9b6:	b570      	push	{r4, r5, r6, lr}
     9b8:	1c05      	adds	r5, r0, #0
	uint16_t high = hex_to_int(c >> 8) * 16;
     9ba:	0a00      	lsrs	r0, r0, #8
     9bc:	f7ff ffec 	bl	998 <hex_to_int>
     9c0:	1c04      	adds	r4, r0, #0
	uint16_t low = hex_to_int(c & 0xFF);
     9c2:	0628      	lsls	r0, r5, #24
     9c4:	0e00      	lsrs	r0, r0, #24
     9c6:	f7ff ffe7 	bl	998 <hex_to_int>
	if(result > 9) result--;
	return result;
}

uint16_t hex_to_ascii(uint16_t c){
	uint16_t high = hex_to_int(c >> 8) * 16;
     9ca:	0124      	lsls	r4, r4, #4
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
     9cc:	1900      	adds	r0, r0, r4
     9ce:	0400      	lsls	r0, r0, #16
     9d0:	0c00      	lsrs	r0, r0, #16
}
     9d2:	bc70      	pop	{r4, r5, r6}
     9d4:	bc02      	pop	{r1}
     9d6:	4708      	bx	r1

000009d8 <UART0_send_byte>:
#endif
}
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9d8:	2101      	movs	r1, #1
     9da:	4b09      	ldr	r3, [pc, #36]	; (a00 <UART0_send_byte+0x28>)
     9dc:	681a      	ldr	r2, [r3, #0]
     9de:	438a      	bics	r2, r1
		native = 0;
	}
#endif
}
void UART0_send_byte(uint8_t byte)
{
     9e0:	b510      	push	{r4, lr}

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9e2:	601a      	str	r2, [r3, #0]
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9e4:	2220      	movs	r2, #32
     9e6:	4c07      	ldr	r4, [pc, #28]	; (a04 <UART0_send_byte+0x2c>)
     9e8:	6821      	ldr	r1, [r4, #0]
     9ea:	4211      	tst	r1, r2
     9ec:	d0fc      	beq.n	9e8 <UART0_send_byte+0x10>
	U0THR = byte;
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9ee:	2101      	movs	r1, #1
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
	U0THR = byte;
     9f0:	4a05      	ldr	r2, [pc, #20]	; (a08 <UART0_send_byte+0x30>)
     9f2:	6010      	str	r0, [r2, #0]
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9f4:	681a      	ldr	r2, [r3, #0]
     9f6:	430a      	orrs	r2, r1
     9f8:	601a      	str	r2, [r3, #0]
}
     9fa:	bc10      	pop	{r4}
     9fc:	bc01      	pop	{r0}
     9fe:	4700      	bx	r0
     a00:	e000c004 	.word	0xe000c004
     a04:	e000c014 	.word	0xe000c014
     a08:	e000c000 	.word	0xe000c000

00000a0c <UART0_send>:
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
     a0c:	b570      	push	{r4, r5, r6, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     a0e:	2401      	movs	r4, #1
     a10:	4b0d      	ldr	r3, [pc, #52]	; (a48 <Stack_Size+0x38>)
     a12:	681a      	ldr	r2, [r3, #0]
     a14:	43a2      	bics	r2, r4

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a16:	2420      	movs	r4, #32
	U0THR = byte;
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
}
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     a18:	601a      	str	r2, [r3, #0]

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a1a:	4d0c      	ldr	r5, [pc, #48]	; (a4c <Stack_Size+0x3c>)
     a1c:	1c1a      	adds	r2, r3, #0
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a1e:	4b0c      	ldr	r3, [pc, #48]	; (a50 <Stack_Size+0x40>)
}
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR

	while ( Length != 0 )
     a20:	2900      	cmp	r1, #0
     a22:	d009      	beq.n	a38 <Stack_Size+0x28>
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a24:	681e      	ldr	r6, [r3, #0]
     a26:	4226      	tst	r6, r4
     a28:	d0fc      	beq.n	a24 <Stack_Size+0x14>
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a2a:	7806      	ldrb	r6, [r0, #0]
		BufferPtr++;
		Length--;
     a2c:	3901      	subs	r1, #1
     a2e:	0409      	lsls	r1, r1, #16

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a30:	602e      	str	r6, [r5, #0]
		BufferPtr++;
     a32:	3001      	adds	r0, #1
		Length--;
     a34:	0c09      	lsrs	r1, r1, #16
     a36:	e7f3      	b.n	a20 <Stack_Size+0x10>
	}
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a38:	2101      	movs	r1, #1
     a3a:	6813      	ldr	r3, [r2, #0]
     a3c:	430b      	orrs	r3, r1
     a3e:	6013      	str	r3, [r2, #0]

	return;
}
     a40:	bc70      	pop	{r4, r5, r6}
     a42:	bc01      	pop	{r0}
     a44:	4700      	bx	r0
     a46:	46c0      	nop			; (mov r8, r8)
     a48:	e000c004 	.word	0xe000c004
     a4c:	e000c000 	.word	0xe000c000
     a50:	e000c014 	.word	0xe000c014

00000a54 <atof>:



double atof(const char *s)
{
     a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
	int c;
	uint8_t neg_flag = 0;
     a56:	2200      	movs	r2, #0
	if ((c = *s) == '-')
     a58:	7803      	ldrb	r3, [r0, #0]
}



double atof(const char *s)
{
     a5a:	1c05      	adds	r5, r0, #0
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
	int c;
	uint8_t neg_flag = 0;
     a5c:	9200      	str	r2, [sp, #0]
	if ((c = *s) == '-')
     a5e:	2b2d      	cmp	r3, #45	; 0x2d
     a60:	d102      	bne.n	a68 <atof+0x14>
	{
		neg_flag = 1;
     a62:	2301      	movs	r3, #1
     a64:	9300      	str	r3, [sp, #0]
		*s++;
     a66:	3501      	adds	r5, #1
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
	int c;
	uint8_t neg_flag = 0;
     a68:	2700      	movs	r7, #0
     a6a:	46bc      	mov	ip, r7
	if ((c = *s) == '-')
	{
		neg_flag = 1;
		*s++;
	}
	while ((c = *s++) != '\0' && isdigit(c)) {
     a6c:	3501      	adds	r5, #1
     a6e:	1e6b      	subs	r3, r5, #1
     a70:	781e      	ldrb	r6, [r3, #0]
     a72:	2e00      	cmp	r6, #0
     a74:	d059      	beq.n	b2a <atof+0xd6>
     a76:	1c34      	adds	r4, r6, #0
     a78:	3c30      	subs	r4, #48	; 0x30
     a7a:	2c09      	cmp	r4, #9
     a7c:	d813      	bhi.n	aa6 <atof+0x52>
		a = a*10.0 + (c - '0');
     a7e:	4b41      	ldr	r3, [pc, #260]	; (b84 <atof+0x130>)
     a80:	4a3f      	ldr	r2, [pc, #252]	; (b80 <atof+0x12c>)
     a82:	4661      	mov	r1, ip
     a84:	1c38      	adds	r0, r7, #0
     a86:	f001 f8dd 	bl	1c44 <__aeabi_dmul>
     a8a:	1c06      	adds	r6, r0, #0
     a8c:	1c20      	adds	r0, r4, #0
     a8e:	1c0f      	adds	r7, r1, #0
     a90:	f001 f872 	bl	1b78 <__aeabi_i2d>
     a94:	1c02      	adds	r2, r0, #0
     a96:	1c0b      	adds	r3, r1, #0
     a98:	1c30      	adds	r0, r6, #0
     a9a:	1c39      	adds	r1, r7, #0
     a9c:	f000 ff20 	bl	18e0 <__adddf3>
     aa0:	1c07      	adds	r7, r0, #0
     aa2:	468c      	mov	ip, r1
     aa4:	e7e2      	b.n	a6c <atof+0x18>
     aa6:	1c33      	adds	r3, r6, #0
	if ((c = *s) == '-')
	{
		neg_flag = 1;
		*s++;
	}
	while ((c = *s++) != '\0' && isdigit(c)) {
     aa8:	1c2c      	adds	r4, r5, #0
		a = a*10.0 + (c - '0');
	}
	if (c == '.') {
     aaa:	2e2e      	cmp	r6, #46	; 0x2e
     aac:	d11d      	bne.n	aea <atof+0x96>
     aae:	1b2e      	subs	r6, r5, r4
		while ((c = *s++) != '\0' && isdigit(c)) {
     ab0:	3401      	adds	r4, #1
     ab2:	1e63      	subs	r3, r4, #1
     ab4:	781a      	ldrb	r2, [r3, #0]
     ab6:	1e13      	subs	r3, r2, #0
     ab8:	d037      	beq.n	b2a <atof+0xd6>
     aba:	3a30      	subs	r2, #48	; 0x30
     abc:	9201      	str	r2, [sp, #4]
     abe:	2a09      	cmp	r2, #9
     ac0:	d814      	bhi.n	aec <atof+0x98>
			a = a*10.0 + (c - '0');
     ac2:	4b30      	ldr	r3, [pc, #192]	; (b84 <atof+0x130>)
     ac4:	4a2e      	ldr	r2, [pc, #184]	; (b80 <atof+0x12c>)
     ac6:	4661      	mov	r1, ip
     ac8:	1c38      	adds	r0, r7, #0
     aca:	f001 f8bb 	bl	1c44 <__aeabi_dmul>
     ace:	1c06      	adds	r6, r0, #0
     ad0:	9801      	ldr	r0, [sp, #4]
     ad2:	1c0f      	adds	r7, r1, #0
     ad4:	f001 f850 	bl	1b78 <__aeabi_i2d>
     ad8:	1c02      	adds	r2, r0, #0
     ada:	1c0b      	adds	r3, r1, #0
     adc:	1c30      	adds	r0, r6, #0
     ade:	1c39      	adds	r1, r7, #0
     ae0:	f000 fefe 	bl	18e0 <__adddf3>
     ae4:	1c07      	adds	r7, r0, #0
     ae6:	468c      	mov	ip, r1
     ae8:	e7e1      	b.n	aae <atof+0x5a>
double atof(const char *s)
{
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
     aea:	2600      	movs	r6, #0
		while ((c = *s++) != '\0' && isdigit(c)) {
			a = a*10.0 + (c - '0');
			e = e-1;
		}
	}
	if (c == 'e' || c == 'E') {
     aec:	2b65      	cmp	r3, #101	; 0x65
     aee:	d001      	beq.n	af4 <atof+0xa0>
     af0:	2b45      	cmp	r3, #69	; 0x45
     af2:	d11a      	bne.n	b2a <atof+0xd6>
		int sign = 1;
		int i = 0;
		c = *s++;
     af4:	7823      	ldrb	r3, [r4, #0]
		if (c == '+')
     af6:	2b2b      	cmp	r3, #43	; 0x2b
     af8:	d102      	bne.n	b00 <atof+0xac>
			c = *s++;
     afa:	1ca1      	adds	r1, r4, #2
     afc:	7863      	ldrb	r3, [r4, #1]
     afe:	e002      	b.n	b06 <atof+0xb2>
		else if (c == '-') {
     b00:	2b2d      	cmp	r3, #45	; 0x2d
     b02:	d002      	beq.n	b0a <atof+0xb6>
		}
	}
	if (c == 'e' || c == 'E') {
		int sign = 1;
		int i = 0;
		c = *s++;
     b04:	1c61      	adds	r1, r4, #1
			a = a*10.0 + (c - '0');
			e = e-1;
		}
	}
	if (c == 'e' || c == 'E') {
		int sign = 1;
     b06:	2001      	movs	r0, #1
     b08:	e003      	b.n	b12 <atof+0xbe>
		c = *s++;
		if (c == '+')
			c = *s++;
		else if (c == '-') {
			c = *s++;
			sign = -1;
     b0a:	2001      	movs	r0, #1
		int i = 0;
		c = *s++;
		if (c == '+')
			c = *s++;
		else if (c == '-') {
			c = *s++;
     b0c:	7863      	ldrb	r3, [r4, #1]
     b0e:	1ca1      	adds	r1, r4, #2
			sign = -1;
     b10:	4240      	negs	r0, r0
			a = a*10.0 + (c - '0');
			e = e-1;
		}
	}
	if (c == 'e' || c == 'E') {
		int sign = 1;
     b12:	2200      	movs	r2, #0
		else if (c == '-') {
			c = *s++;
			sign = -1;
		}
		while (isdigit(c)) {
			i = i*10 + (c - '0');
     b14:	240a      	movs	r4, #10
			c = *s++;
		else if (c == '-') {
			c = *s++;
			sign = -1;
		}
		while (isdigit(c)) {
     b16:	3b30      	subs	r3, #48	; 0x30
     b18:	2b09      	cmp	r3, #9
     b1a:	d804      	bhi.n	b26 <atof+0xd2>
			i = i*10 + (c - '0');
     b1c:	4362      	muls	r2, r4
     b1e:	18d2      	adds	r2, r2, r3
			c = *s++;
     b20:	780b      	ldrb	r3, [r1, #0]
     b22:	3101      	adds	r1, #1
     b24:	e7f7      	b.n	b16 <atof+0xc2>
		}
		e += i*sign;
     b26:	4342      	muls	r2, r0
     b28:	18b6      	adds	r6, r6, r2
double atof(const char *s)
{
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
     b2a:	1c34      	adds	r4, r6, #0
			i = i*10 + (c - '0');
			c = *s++;
		}
		e += i*sign;
	}
	while (e > 0) {
     b2c:	2c00      	cmp	r4, #0
     b2e:	dd09      	ble.n	b44 <atof+0xf0>
		a *= 10.0;
     b30:	1c38      	adds	r0, r7, #0
     b32:	4661      	mov	r1, ip
     b34:	4b13      	ldr	r3, [pc, #76]	; (b84 <atof+0x130>)
     b36:	4a12      	ldr	r2, [pc, #72]	; (b80 <atof+0x12c>)
     b38:	f001 f884 	bl	1c44 <__aeabi_dmul>
		e--;
     b3c:	3c01      	subs	r4, #1
			c = *s++;
		}
		e += i*sign;
	}
	while (e > 0) {
		a *= 10.0;
     b3e:	1c07      	adds	r7, r0, #0
     b40:	468c      	mov	ip, r1
     b42:	e7f3      	b.n	b2c <atof+0xd8>
     b44:	43f3      	mvns	r3, r6
     b46:	17db      	asrs	r3, r3, #31
     b48:	439e      	bics	r6, r3
		e--;
	}
	while (e < 0) {
     b4a:	2e00      	cmp	r6, #0
     b4c:	d009      	beq.n	b62 <atof+0x10e>
		a *= 0.1;
     b4e:	1c38      	adds	r0, r7, #0
     b50:	4661      	mov	r1, ip
     b52:	4a0d      	ldr	r2, [pc, #52]	; (b88 <atof+0x134>)
     b54:	4b0d      	ldr	r3, [pc, #52]	; (b8c <atof+0x138>)
     b56:	f001 f875 	bl	1c44 <__aeabi_dmul>
		e++;
     b5a:	3601      	adds	r6, #1
	while (e > 0) {
		a *= 10.0;
		e--;
	}
	while (e < 0) {
		a *= 0.1;
     b5c:	1c07      	adds	r7, r0, #0
     b5e:	468c      	mov	ip, r1
     b60:	e7f3      	b.n	b4a <atof+0xf6>
		e++;
	}
	if (neg_flag == 1)
     b62:	9b00      	ldr	r3, [sp, #0]
     b64:	4661      	mov	r1, ip
     b66:	2b01      	cmp	r3, #1
     b68:	d102      	bne.n	b70 <atof+0x11c>
		a = a*(-1);
     b6a:	2380      	movs	r3, #128	; 0x80
     b6c:	061b      	lsls	r3, r3, #24
     b6e:	18c9      	adds	r1, r1, r3
	return a;
}
     b70:	1c38      	adds	r0, r7, #0
     b72:	b003      	add	sp, #12
     b74:	bcf0      	pop	{r4, r5, r6, r7}
     b76:	bc04      	pop	{r2}
     b78:	4710      	bx	r2
     b7a:	46c0      	nop			; (mov r8, r8)
     b7c:	46c0      	nop			; (mov r8, r8)
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	00000000 	.word	0x00000000
     b84:	40240000 	.word	0x40240000
     b88:	9999999a 	.word	0x9999999a
     b8c:	3fb99999 	.word	0x3fb99999

00000b90 <process_command>:
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     b90:	b570      	push	{r4, r5, r6, lr}
	uint16_t num;
	uint8_t lenth;
	double input;
#ifdef GUI
#else
		if(strncmp(cmd, "Z?", 2) == 0)
     b92:	2202      	movs	r2, #2
     b94:	4960      	ldr	r1, [pc, #384]	; (d18 <process_command+0x188>)
	uint16_t high = hex_to_int(c >> 8) * 16;
	uint16_t low = hex_to_int(c & 0xFF);
	return high+low;
}
void process_command(char *cmd)
{
     b96:	1c05      	adds	r5, r0, #0
	uint16_t num;
	uint8_t lenth;
	double input;
#ifdef GUI
#else
		if(strncmp(cmd, "Z?", 2) == 0)
     b98:	f000 fdb4 	bl	1704 <strncmp>
     b9c:	2800      	cmp	r0, #0
     b9e:	d106      	bne.n	bae <process_command+0x1e>
	{
		UART0_send("z\n", 2);
     ba0:	485e      	ldr	r0, [pc, #376]	; (d1c <process_command+0x18c>)
     ba2:	2102      	movs	r1, #2
     ba4:	f7ff ff32 	bl	a0c <UART0_send>
		//gpio_set(OP_AMP_PORT, OP_AMP_PIN);
		led_set(LED2);
     ba8:	2001      	movs	r0, #1
     baa:	f7ff fd67 	bl	67c <led_set>
	//	timer0_start();
	}    
	
	if(strncmp(cmd, "start", 5) == 0)
     bae:	2205      	movs	r2, #5
     bb0:	495b      	ldr	r1, [pc, #364]	; (d20 <process_command+0x190>)
     bb2:	1c28      	adds	r0, r5, #0
     bb4:	f000 fda6 	bl	1704 <strncmp>
     bb8:	1e04      	subs	r4, r0, #0
     bba:	d10f      	bne.n	bdc <process_command+0x4c>
	{
		UART0_send("\nStarted\n", 9);
     bbc:	2109      	movs	r1, #9
     bbe:	4859      	ldr	r0, [pc, #356]	; (d24 <process_command+0x194>)
     bc0:	f7ff ff24 	bl	a0c <UART0_send>
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     bc4:	210d      	movs	r1, #13
     bc6:	2002      	movs	r0, #2
     bc8:	f7ff fd6c 	bl	6a4 <gpio_set>
		led_set(LED1);
     bcc:	1c20      	adds	r0, r4, #0
     bce:	f7ff fd55 	bl	67c <led_set>
		timer0_set_freq(1);
     bd2:	2001      	movs	r0, #1
     bd4:	f000 fac0 	bl	1158 <timer0_set_freq>
		timer0_start();
     bd8:	f000 fb12 	bl	1200 <timer0_start>
	}    

	/* Turn off amplifier */
	if(strncmp(cmd, "stop", 4) == 0)
     bdc:	2204      	movs	r2, #4
     bde:	4952      	ldr	r1, [pc, #328]	; (d28 <process_command+0x198>)
     be0:	1c28      	adds	r0, r5, #0
     be2:	f000 fd8f 	bl	1704 <strncmp>
     be6:	1e04      	subs	r4, r0, #0
     be8:	d116      	bne.n	c18 <process_command+0x88>
	{
		//UART0_send("\nStopped\n", 9);
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     bea:	210d      	movs	r1, #13
     bec:	2002      	movs	r0, #2
     bee:	f7ff fd7b 	bl	6e8 <gpio_clear>
		led_clear(LED1);
     bf2:	1c20      	adds	r0, r4, #0
		timer0_stop();
		FIO1CLR |= 1 << DAC;
     bf4:	2480      	movs	r4, #128	; 0x80
	/* Turn off amplifier */
	if(strncmp(cmd, "stop", 4) == 0)
	{
		//UART0_send("\nStopped\n", 9);
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
		led_clear(LED1);
     bf6:	f7ff fd4b 	bl	690 <led_clear>
		timer0_stop();
     bfa:	f000 fb11 	bl	1220 <timer0_stop>
		FIO1CLR |= 1 << DAC;
     bfe:	4a4b      	ldr	r2, [pc, #300]	; (d2c <process_command+0x19c>)
     c00:	6813      	ldr	r3, [r2, #0]
     c02:	05a4      	lsls	r4, r4, #22
     c04:	4323      	orrs	r3, r4
     c06:	6013      	str	r3, [r2, #0]
		SPI0_send_2_byte((0x1000 | 578), DAC);
     c08:	211d      	movs	r1, #29
     c0a:	4849      	ldr	r0, [pc, #292]	; (d30 <process_command+0x1a0>)
     c0c:	f000 f942 	bl	e94 <SPI0_send_2_byte>
		FIO1SET |= 1 << DAC;
     c10:	4a48      	ldr	r2, [pc, #288]	; (d34 <process_command+0x1a4>)
     c12:	6813      	ldr	r3, [r2, #0]
     c14:	4323      	orrs	r3, r4
     c16:	6013      	str	r3, [r2, #0]
	}
	/* Voltage setup  */
	if(strncmp(cmd, "set", 3) == 0)
     c18:	2203      	movs	r2, #3
     c1a:	4947      	ldr	r1, [pc, #284]	; (d38 <process_command+0x1a8>)
     c1c:	1c28      	adds	r0, r5, #0
     c1e:	f000 fd71 	bl	1704 <strncmp>
     c22:	2800      	cmp	r0, #0
     c24:	d123      	bne.n	c6e <process_command+0xde>
	{

		lenth = strlen(cmd+4)-1;
		if (native == 1)
     c26:	4b45      	ldr	r3, [pc, #276]	; (d3c <process_command+0x1ac>)
     c28:	781b      	ldrb	r3, [r3, #0]
     c2a:	1d28      	adds	r0, r5, #4
     c2c:	2b01      	cmp	r3, #1
     c2e:	d102      	bne.n	c36 <process_command+0xa6>
		{
		num = atoi(cmd + 4);
     c30:	f000 fd28 	bl	1684 <atoi>
     c34:	e00b      	b.n	c4e <process_command+0xbe>
		}else{
		input = atof(cmd + 4);
     c36:	f7ff ff0d 	bl	a54 <atof>
		//input = input/0.01445 +578;
		input = (input + 25.523)/0.0185;
     c3a:	4b34      	ldr	r3, [pc, #208]	; (d0c <process_command+0x17c>)
     c3c:	4a32      	ldr	r2, [pc, #200]	; (d08 <process_command+0x178>)
     c3e:	f000 fe4f 	bl	18e0 <__adddf3>
     c42:	4a33      	ldr	r2, [pc, #204]	; (d10 <process_command+0x180>)
     c44:	4b33      	ldr	r3, [pc, #204]	; (d14 <process_command+0x184>)
     c46:	f001 f927 	bl	1e98 <__aeabi_ddiv>
		num = (int)input;
     c4a:	f001 fa0d 	bl	2068 <__aeabi_d2iz>
     c4e:	0404      	lsls	r4, r0, #16
     c50:	0c24      	lsrs	r4, r4, #16
		}
		UART0_send("\nOK\n", 4);
     c52:	2104      	movs	r1, #4
     c54:	483a      	ldr	r0, [pc, #232]	; (d40 <process_command+0x1b0>)
     c56:	f7ff fed9 	bl	a0c <UART0_send>
		UART0_send_byte(num >> 8);
     c5a:	0a20      	lsrs	r0, r4, #8
     c5c:	f7ff febc 	bl	9d8 <UART0_send_byte>
		UART0_send_byte(num);
     c60:	0620      	lsls	r0, r4, #24
     c62:	0e00      	lsrs	r0, r0, #24
     c64:	f7ff feb8 	bl	9d8 <UART0_send_byte>
		dac_set_voltage(num);
     c68:	1c20      	adds	r0, r4, #0
     c6a:	f000 f9bf 	bl	fec <dac_set_voltage>
	}
	if(strncmp(cmd, "get", 3) == 0)
     c6e:	2203      	movs	r2, #3
     c70:	4934      	ldr	r1, [pc, #208]	; (d44 <process_command+0x1b4>)
     c72:	1c28      	adds	r0, r5, #0
     c74:	f000 fd46 	bl	1704 <strncmp>
     c78:	2800      	cmp	r0, #0
     c7a:	d122      	bne.n	cc2 <process_command+0x132>
	{
		//read_volt();
		lenth = strlen(cmd+4)-1;
		if (native == 1)
     c7c:	4b2f      	ldr	r3, [pc, #188]	; (d3c <process_command+0x1ac>)
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	1d28      	adds	r0, r5, #4
     c82:	2b01      	cmp	r3, #1
     c84:	d102      	bne.n	c8c <process_command+0xfc>
		{
		num = atoi(cmd + 4);
     c86:	f000 fcfd 	bl	1684 <atoi>
     c8a:	e00b      	b.n	ca4 <process_command+0x114>
		}else{
		input = atof(cmd + 4);
     c8c:	f7ff fee2 	bl	a54 <atof>
		//input = input/0.01445 +578;	
		input = (input + 25.523)/0.0185;	
     c90:	4b1e      	ldr	r3, [pc, #120]	; (d0c <process_command+0x17c>)
     c92:	4a1d      	ldr	r2, [pc, #116]	; (d08 <process_command+0x178>)
     c94:	f000 fe24 	bl	18e0 <__adddf3>
     c98:	4a1d      	ldr	r2, [pc, #116]	; (d10 <process_command+0x180>)
     c9a:	4b1e      	ldr	r3, [pc, #120]	; (d14 <process_command+0x184>)
     c9c:	f001 f8fc 	bl	1e98 <__aeabi_ddiv>
		num = (int)input;
     ca0:	f001 f9e2 	bl	2068 <__aeabi_d2iz>
     ca4:	0400      	lsls	r0, r0, #16
     ca6:	0c00      	lsrs	r0, r0, #16
		}
		dac_set_voltage(num);
     ca8:	f000 f9a0 	bl	fec <dac_set_voltage>
		//UART0_send_byte(num >> 8);
		//UART0_send_byte(num);
		getflag = 1;
     cac:	2201      	movs	r2, #1
     cae:	4b26      	ldr	r3, [pc, #152]	; (d48 <process_command+0x1b8>)
		
		
		//UART0_send_byte(volts>>8);
		//UART0_send_byte(volts & 0xFF);
		timer0_set_freq(100);
     cb0:	2064      	movs	r0, #100	; 0x64
		num = (int)input;
		}
		dac_set_voltage(num);
		//UART0_send_byte(num >> 8);
		//UART0_send_byte(num);
		getflag = 1;
     cb2:	701a      	strb	r2, [r3, #0]
		
		
		//UART0_send_byte(volts>>8);
		//UART0_send_byte(volts & 0xFF);
		timer0_set_freq(100);
     cb4:	f000 fa50 	bl	1158 <timer0_set_freq>
		led_set(LED1);
     cb8:	2000      	movs	r0, #0
     cba:	f7ff fcdf 	bl	67c <led_set>
		
		timer0_start();
     cbe:	f000 fa9f 	bl	1200 <timer0_start>
		//UART0_send("\nOK\n", 4);
		
	}
	/* Manual  */
	if(strncmp(cmd, "help", 4) == 0)
     cc2:	2204      	movs	r2, #4
     cc4:	4921      	ldr	r1, [pc, #132]	; (d4c <process_command+0x1bc>)
     cc6:	1c28      	adds	r0, r5, #0
     cc8:	f000 fd1c 	bl	1704 <strncmp>
     ccc:	2800      	cmp	r0, #0
     cce:	d103      	bne.n	cd8 <process_command+0x148>
	{
		UART0_send(help_msg, sizeof(help_msg)-1);
     cd0:	21d0      	movs	r1, #208	; 0xd0
     cd2:	481f      	ldr	r0, [pc, #124]	; (d50 <process_command+0x1c0>)
     cd4:	f7ff fe9a 	bl	a0c <UART0_send>
	}
	/* Switching between output value presentation */
	if (strncmp(cmd, "native", 6) == 0)
     cd8:	2206      	movs	r2, #6
     cda:	491e      	ldr	r1, [pc, #120]	; (d54 <process_command+0x1c4>)
     cdc:	1c28      	adds	r0, r5, #0
     cde:	f000 fd11 	bl	1704 <strncmp>
     ce2:	2800      	cmp	r0, #0
     ce4:	d102      	bne.n	cec <process_command+0x15c>
	{
		native = 1;
     ce6:	2201      	movs	r2, #1
     ce8:	4b14      	ldr	r3, [pc, #80]	; (d3c <process_command+0x1ac>)
     cea:	701a      	strb	r2, [r3, #0]
	}
	if (strncmp(cmd, "ascii", 5) == 0)
     cec:	2205      	movs	r2, #5
     cee:	491a      	ldr	r1, [pc, #104]	; (d58 <process_command+0x1c8>)
     cf0:	1c28      	adds	r0, r5, #0
     cf2:	f000 fd07 	bl	1704 <strncmp>
     cf6:	2800      	cmp	r0, #0
     cf8:	d101      	bne.n	cfe <process_command+0x16e>
	{
		native = 0;
     cfa:	4b10      	ldr	r3, [pc, #64]	; (d3c <process_command+0x1ac>)
     cfc:	7018      	strb	r0, [r3, #0]
	}
#endif
}
     cfe:	bc70      	pop	{r4, r5, r6}
     d00:	bc01      	pop	{r0}
     d02:	4700      	bx	r0
     d04:	46c0      	nop			; (mov r8, r8)
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	53f7ced9 	.word	0x53f7ced9
     d0c:	403985e3 	.word	0x403985e3
     d10:	fbe76c8b 	.word	0xfbe76c8b
     d14:	3f92f1a9 	.word	0x3f92f1a9
     d18:	00002fb0 	.word	0x00002fb0
     d1c:	00002feb 	.word	0x00002feb
     d20:	00002fb3 	.word	0x00002fb3
     d24:	00002fb9 	.word	0x00002fb9
     d28:	00002fc3 	.word	0x00002fc3
     d2c:	3fffc03c 	.word	0x3fffc03c
     d30:	00001242 	.word	0x00001242
     d34:	3fffc038 	.word	0x3fffc038
     d38:	00002fc8 	.word	0x00002fc8
     d3c:	40000441 	.word	0x40000441
     d40:	00002fcc 	.word	0x00002fcc
     d44:	00002fd1 	.word	0x00002fd1
     d48:	40000440 	.word	0x40000440
     d4c:	00002fd5 	.word	0x00002fd5
     d50:	00002dcc 	.word	0x00002dcc
     d54:	00002fda 	.word	0x00002fda
     d58:	00002fe1 	.word	0x00002fe1

00000d5c <SPI_ADC_data_transfers_16bit>:
	}
	return dat;
}

uint16_t SPI_ADC_data_transfers_16bit (uint16_t data)
{
     d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d5e:	220f      	movs	r2, #15
	uint16_t dat = 0;
     d60:	2300      	movs	r3, #0
	for(i = 16;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
     d62:	2401      	movs	r4, #1
	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     d64:	4914      	ldr	r1, [pc, #80]	; (db8 <SPI_ADC_data_transfers_16bit+0x5c>)
     d66:	680d      	ldr	r5, [r1, #0]
     d68:	4e14      	ldr	r6, [pc, #80]	; (dbc <SPI_ADC_data_transfers_16bit+0x60>)
     d6a:	4035      	ands	r5, r6
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
     d6c:	1c06      	adds	r6, r0, #0
     d6e:	4116      	asrs	r6, r2
	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     d70:	600d      	str	r5, [r1, #0]
     d72:	4d11      	ldr	r5, [pc, #68]	; (db8 <SPI_ADC_data_transfers_16bit+0x5c>)
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
     d74:	4226      	tst	r6, r4
     d76:	d004      	beq.n	d82 <SPI_ADC_data_transfers_16bit+0x26>
			FIO1PIN |= 1 << ADC_DIN;
     d78:	2780      	movs	r7, #128	; 0x80
     d7a:	680e      	ldr	r6, [r1, #0]
     d7c:	047f      	lsls	r7, r7, #17
     d7e:	433e      	orrs	r6, r7
     d80:	e002      	b.n	d88 <SPI_ADC_data_transfers_16bit+0x2c>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     d82:	680e      	ldr	r6, [r1, #0]
     d84:	4f0e      	ldr	r7, [pc, #56]	; (dc0 <SPI_ADC_data_transfers_16bit+0x64>)
     d86:	403e      	ands	r6, r7

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     d88:	2780      	movs	r7, #128	; 0x80
		FIO1PIN &= ~(1 << ADC_SCLK);
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     d8a:	600e      	str	r6, [r1, #0]

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     d8c:	682e      	ldr	r6, [r5, #0]
     d8e:	037f      	lsls	r7, r7, #13
     d90:	433e      	orrs	r6, r7
     d92:	602e      	str	r6, [r5, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     d94:	682d      	ldr	r5, [r5, #0]
     d96:	022d      	lsls	r5, r5, #8
     d98:	d505      	bpl.n	da6 <SPI_ADC_data_transfers_16bit+0x4a>
			dat |= 1 << (i - 1);
     d9a:	1c25      	adds	r5, r4, #0
     d9c:	4095      	lsls	r5, r2
     d9e:	432b      	orrs	r3, r5
     da0:	041b      	lsls	r3, r3, #16
     da2:	0c1b      	lsrs	r3, r3, #16
     da4:	e002      	b.n	dac <SPI_ADC_data_transfers_16bit+0x50>
		else
			dat &= ~(1 << (i - 1));
     da6:	1c25      	adds	r5, r4, #0
     da8:	4095      	lsls	r5, r2
     daa:	43ab      	bics	r3, r5
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
     dac:	3a01      	subs	r2, #1
     dae:	d2da      	bcs.n	d66 <SPI_ADC_data_transfers_16bit+0xa>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     db0:	1c18      	adds	r0, r3, #0
     db2:	bcf0      	pop	{r4, r5, r6, r7}
     db4:	bc02      	pop	{r1}
     db6:	4708      	bx	r1
     db8:	3fffc034 	.word	0x3fffc034
     dbc:	ffefffff 	.word	0xffefffff
     dc0:	feffffff 	.word	0xfeffffff

00000dc4 <SPI_ADC_data_transfers_8bit>:

unsigned char SPI_ADC_data_transfers_8bit (unsigned char data)
{
     dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
     dc6:	2207      	movs	r2, #7
	unsigned char dat = 0;
     dc8:	2300      	movs	r3, #0
	//Write
	for(i = 8;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		if(data & (1 << (i - 1)))
     dca:	2401      	movs	r4, #1
	uint16_t mask = 0x8000;
	//Write
	for(i = 8;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     dcc:	4914      	ldr	r1, [pc, #80]	; (e20 <SPI_ADC_data_transfers_8bit+0x5c>)
     dce:	680d      	ldr	r5, [r1, #0]
     dd0:	4e14      	ldr	r6, [pc, #80]	; (e24 <SPI_ADC_data_transfers_8bit+0x60>)
     dd2:	4035      	ands	r5, r6
		if(data & (1 << (i - 1)))
     dd4:	1c06      	adds	r6, r0, #0
     dd6:	4116      	asrs	r6, r2
	uint16_t mask = 0x8000;
	//Write
	for(i = 8;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
     dd8:	600d      	str	r5, [r1, #0]
     dda:	4d11      	ldr	r5, [pc, #68]	; (e20 <SPI_ADC_data_transfers_8bit+0x5c>)
		if(data & (1 << (i - 1)))
     ddc:	4226      	tst	r6, r4
     dde:	d004      	beq.n	dea <SPI_ADC_data_transfers_8bit+0x26>
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
     de0:	2780      	movs	r7, #128	; 0x80
     de2:	680e      	ldr	r6, [r1, #0]
     de4:	047f      	lsls	r7, r7, #17
     de6:	433e      	orrs	r6, r7
     de8:	e002      	b.n	df0 <SPI_ADC_data_transfers_8bit+0x2c>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     dea:	680e      	ldr	r6, [r1, #0]
     dec:	4f0e      	ldr	r7, [pc, #56]	; (e28 <SPI_ADC_data_transfers_8bit+0x64>)
     dee:	403e      	ands	r6, r7

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     df0:	2780      	movs	r7, #128	; 0x80
		FIO1PIN &= ~(1 << ADC_SCLK);
		if(data & (1 << (i - 1)))
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     df2:	600e      	str	r6, [r1, #0]

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     df4:	682e      	ldr	r6, [r5, #0]
     df6:	037f      	lsls	r7, r7, #13
     df8:	433e      	orrs	r6, r7
     dfa:	602e      	str	r6, [r5, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     dfc:	682d      	ldr	r5, [r5, #0]
     dfe:	022d      	lsls	r5, r5, #8
     e00:	d505      	bpl.n	e0e <SPI_ADC_data_transfers_8bit+0x4a>
			dat |= 1 << (i - 1);
     e02:	1c25      	adds	r5, r4, #0
     e04:	4095      	lsls	r5, r2
     e06:	432b      	orrs	r3, r5
     e08:	061b      	lsls	r3, r3, #24
     e0a:	0e1b      	lsrs	r3, r3, #24
     e0c:	e002      	b.n	e14 <SPI_ADC_data_transfers_8bit+0x50>
		else
			dat &= ~(1 << (i - 1));
     e0e:	1c25      	adds	r5, r4, #0
     e10:	4095      	lsls	r5, r2
     e12:	43ab      	bics	r3, r5
	unsigned char dat = 0;
	char i, j;

	uint16_t mask = 0x8000;
	//Write
	for(i = 8;  i > 0 ; i--)
     e14:	3a01      	subs	r2, #1
     e16:	d2da      	bcs.n	dce <SPI_ADC_data_transfers_8bit+0xa>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     e18:	1c18      	adds	r0, r3, #0
     e1a:	bcf0      	pop	{r4, r5, r6, r7}
     e1c:	bc02      	pop	{r1}
     e1e:	4708      	bx	r1
     e20:	3fffc034 	.word	0x3fffc034
     e24:	ffefffff 	.word	0xffefffff
     e28:	feffffff 	.word	0xfeffffff

00000e2c <SPI_DAC_data_transfers_16bit>:
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t dat = 0;
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
     e2e:	2480      	movs	r4, #128	; 0x80

	}  
	return dat;
}
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     e30:	210f      	movs	r1, #15
	uint16_t dat = 0;
     e32:	2300      	movs	r3, #0

	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
     e34:	4a14      	ldr	r2, [pc, #80]	; (e88 <SPI_DAC_data_transfers_16bit+0x5c>)
	uint16_t dat = 0;
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
     e36:	0224      	lsls	r4, r4, #8
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
     e38:	2680      	movs	r6, #128	; 0x80
     e3a:	6815      	ldr	r5, [r2, #0]
     e3c:	0376      	lsls	r6, r6, #13
     e3e:	4335      	orrs	r5, r6
     e40:	6015      	str	r5, [r2, #0]
     e42:	4d11      	ldr	r5, [pc, #68]	; (e88 <SPI_DAC_data_transfers_16bit+0x5c>)
		if(data & mask)
			FIO1PIN |= 1 << ADC_DIN;
     e44:	6816      	ldr	r6, [r2, #0]
	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
		if(data & mask)
     e46:	4220      	tst	r0, r4
     e48:	d003      	beq.n	e52 <SPI_DAC_data_transfers_16bit+0x26>
			FIO1PIN |= 1 << ADC_DIN;
     e4a:	2780      	movs	r7, #128	; 0x80
     e4c:	047f      	lsls	r7, r7, #17
     e4e:	433e      	orrs	r6, r7
     e50:	e001      	b.n	e56 <SPI_DAC_data_transfers_16bit+0x2a>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     e52:	4f0e      	ldr	r7, [pc, #56]	; (e8c <SPI_DAC_data_transfers_16bit+0x60>)
     e54:	403e      	ands	r6, r7
     e56:	6016      	str	r6, [r2, #0]

		//SCLK
		mask = mask >> 1;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     e58:	682e      	ldr	r6, [r5, #0]
     e5a:	46b4      	mov	ip, r6
     e5c:	4667      	mov	r7, ip
     e5e:	4e0c      	ldr	r6, [pc, #48]	; (e90 <SPI_DAC_data_transfers_16bit+0x64>)
     e60:	403e      	ands	r6, r7
     e62:	602e      	str	r6, [r5, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e64:	682e      	ldr	r6, [r5, #0]
     e66:	2501      	movs	r5, #1
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);

		//SCLK
		mask = mask >> 1;
     e68:	0864      	lsrs	r4, r4, #1
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
			dat |= 1 << (i - 1);
     e6a:	408d      	lsls	r5, r1
		mask = mask >> 1;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e6c:	0236      	lsls	r6, r6, #8
     e6e:	d503      	bpl.n	e78 <SPI_DAC_data_transfers_16bit+0x4c>
			dat |= 1 << (i - 1);
     e70:	432b      	orrs	r3, r5
     e72:	041b      	lsls	r3, r3, #16
     e74:	0c1b      	lsrs	r3, r3, #16
     e76:	e000      	b.n	e7a <SPI_DAC_data_transfers_16bit+0x4e>
		else
			dat &= ~(1 << (i - 1));
     e78:	43ab      	bics	r3, r5
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
	for(i = 16;  i > 0 ; i--)
     e7a:	3901      	subs	r1, #1
     e7c:	d2dc      	bcs.n	e38 <SPI_DAC_data_transfers_16bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     e7e:	1c18      	adds	r0, r3, #0
     e80:	bcf0      	pop	{r4, r5, r6, r7}
     e82:	bc02      	pop	{r1}
     e84:	4708      	bx	r1
     e86:	46c0      	nop			; (mov r8, r8)
     e88:	3fffc034 	.word	0x3fffc034
     e8c:	feffffff 	.word	0xfeffffff
     e90:	ffefffff 	.word	0xffefffff

00000e94 <SPI0_send_2_byte>:
	}
	return dat;
}

uint16_t SPI0_send_2_byte(uint16_t data, uint8_t slave)
{
     e94:	b510      	push	{r4, lr}
	uint16_t dat;
	if (slave == ADC )
     e96:	2912      	cmp	r1, #18
     e98:	d102      	bne.n	ea0 <SPI0_send_2_byte+0xc>
	{
	dat = SPI_ADC_data_transfers_16bit(data);
     e9a:	f7ff ff5f 	bl	d5c <SPI_ADC_data_transfers_16bit>
     e9e:	e003      	b.n	ea8 <SPI0_send_2_byte+0x14>
	}else if (slave == DAC)
     ea0:	291d      	cmp	r1, #29
     ea2:	d102      	bne.n	eaa <SPI0_send_2_byte+0x16>
	{
	dat = SPI_DAC_data_transfers_16bit(data);
     ea4:	f7ff ffc2 	bl	e2c <SPI_DAC_data_transfers_16bit>
     ea8:	1c03      	adds	r3, r0, #0
	}
	return dat;
}
     eaa:	1c18      	adds	r0, r3, #0
     eac:	bc10      	pop	{r4}
     eae:	bc02      	pop	{r1}
     eb0:	4708      	bx	r1

00000eb2 <SPI_DAC_data_transfers_8bit>:
	}  
	return dat;
}

unsigned char SPI_DAC_data_transfers_8bit (unsigned char data)
{
     eb2:	b5f0      	push	{r4, r5, r6, r7, lr}

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
     eb4:	2780      	movs	r7, #128	; 0x80
	}  
	return dat;
}

unsigned char SPI_DAC_data_transfers_8bit (unsigned char data)
{
     eb6:	2107      	movs	r1, #7
	unsigned char dat = 0;
     eb8:	2200      	movs	r2, #0
	char i, j;

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
     eba:	2401      	movs	r4, #1
     ebc:	4b14      	ldr	r3, [pc, #80]	; (f10 <VIC_VectAddr+0x10>)
			FIO1PIN |= 1 << ADC_DIN;
     ebe:	047f      	lsls	r7, r7, #17
	char i, j;

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
     ec0:	1c05      	adds	r5, r0, #0
     ec2:	410d      	asrs	r5, r1
     ec4:	4225      	tst	r5, r4
     ec6:	d002      	beq.n	ece <SPI_DAC_data_transfers_8bit+0x1c>
			FIO1PIN |= 1 << ADC_DIN;
     ec8:	681d      	ldr	r5, [r3, #0]
     eca:	433d      	orrs	r5, r7
     ecc:	e002      	b.n	ed4 <SPI_DAC_data_transfers_8bit+0x22>
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     ece:	681d      	ldr	r5, [r3, #0]
     ed0:	4e10      	ldr	r6, [pc, #64]	; (f14 <VIC_VectAddr+0x14>)
     ed2:	4035      	ands	r5, r6

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     ed4:	2680      	movs	r6, #128	; 0x80
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     ed6:	601d      	str	r5, [r3, #0]

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     ed8:	681d      	ldr	r5, [r3, #0]
     eda:	0376      	lsls	r6, r6, #13
     edc:	4335      	orrs	r5, r6
     ede:	601d      	str	r5, [r3, #0]
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     ee0:	681d      	ldr	r5, [r3, #0]
     ee2:	46ac      	mov	ip, r5
     ee4:	4666      	mov	r6, ip
     ee6:	4d0c      	ldr	r5, [pc, #48]	; (f18 <VIC_VectAddr+0x18>)
     ee8:	4035      	ands	r5, r6
     eea:	601d      	str	r5, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     eec:	681d      	ldr	r5, [r3, #0]
     eee:	022d      	lsls	r5, r5, #8
     ef0:	d505      	bpl.n	efe <SPI_DAC_data_transfers_8bit+0x4c>
			dat |= 1 << (i - 1);
     ef2:	1c25      	adds	r5, r4, #0
     ef4:	408d      	lsls	r5, r1
     ef6:	432a      	orrs	r2, r5
     ef8:	0612      	lsls	r2, r2, #24
     efa:	0e12      	lsrs	r2, r2, #24
     efc:	e002      	b.n	f04 <VIC_VectAddr+0x4>
		else
			dat &= ~(1 << (i - 1));
     efe:	1c25      	adds	r5, r4, #0
     f00:	408d      	lsls	r5, r1
     f02:	43aa      	bics	r2, r5
{
	unsigned char dat = 0;
	char i, j;

	//Write
	for(i = 8;  i > 0 ; i--)
     f04:	3901      	subs	r1, #1
     f06:	d2db      	bcs.n	ec0 <SPI_DAC_data_transfers_8bit+0xe>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     f08:	1c10      	adds	r0, r2, #0
     f0a:	bcf0      	pop	{r4, r5, r6, r7}
     f0c:	bc02      	pop	{r1}
     f0e:	4708      	bx	r1
     f10:	3fffc034 	.word	0x3fffc034
     f14:	feffffff 	.word	0xfeffffff
     f18:	ffefffff 	.word	0xffefffff

00000f1c <SPI0_send_1_byte>:
#include "spi.h"
/* #define DEBUG_SPI */


uint8_t SPI0_send_1_byte(uint8_t data, uint8_t slave)
{
     f1c:	b510      	push	{r4, lr}
	uint8_t dat = 0;
	if (slave == ADC )
     f1e:	2912      	cmp	r1, #18
     f20:	d102      	bne.n	f28 <SPI0_send_1_byte+0xc>
	{
	dat = SPI_ADC_data_transfers_8bit(data);
     f22:	f7ff ff4f 	bl	dc4 <SPI_ADC_data_transfers_8bit>
     f26:	e004      	b.n	f32 <SPI0_send_1_byte+0x16>
/* #define DEBUG_SPI */


uint8_t SPI0_send_1_byte(uint8_t data, uint8_t slave)
{
	uint8_t dat = 0;
     f28:	2300      	movs	r3, #0
	if (slave == ADC )
	{
	dat = SPI_ADC_data_transfers_8bit(data);
	}else if (slave == DAC)
     f2a:	291d      	cmp	r1, #29
     f2c:	d102      	bne.n	f34 <SPI0_send_1_byte+0x18>
	{
	dat = SPI_DAC_data_transfers_8bit(data);
     f2e:	f7ff ffc0 	bl	eb2 <SPI_DAC_data_transfers_8bit>
     f32:	1c03      	adds	r3, r0, #0
	}
	return dat;
}
     f34:	1c18      	adds	r0, r3, #0
     f36:	bc10      	pop	{r4}
     f38:	bc02      	pop	{r1}
     f3a:	4708      	bx	r1

00000f3c <Delay>:
{
	int i, j;
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
     f3c:	4770      	bx	lr

00000f3e <adc_init>:
void adc_init(void)
{
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
     f3e:	2180      	movs	r1, #128	; 0x80
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
void adc_init(void)
{
     f40:	b570      	push	{r4, r5, r6, lr}
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
     f42:	2680      	movs	r6, #128	; 0x80
}
void adc_init(void)
{
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
     f44:	4a24      	ldr	r2, [pc, #144]	; (fd8 <adc_init+0x9a>)
     f46:	6813      	ldr	r3, [r2, #0]
     f48:	0349      	lsls	r1, r1, #13
     f4a:	430b      	orrs	r3, r1
     f4c:	6013      	str	r3, [r2, #0]
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
     f4e:	4d23      	ldr	r5, [pc, #140]	; (fdc <adc_init+0x9e>)
     f50:	682b      	ldr	r3, [r5, #0]
     f52:	02f6      	lsls	r6, r6, #11
     f54:	4333      	orrs	r3, r6
     f56:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(0xFF, ADC);
     f58:	2112      	movs	r1, #18
     f5a:	20ff      	movs	r0, #255	; 0xff
     f5c:	f7ff ffde 	bl	f1c <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f60:	2112      	movs	r1, #18
     f62:	20ff      	movs	r0, #255	; 0xff
	SPI0_send_1_byte(0xFF, ADC);
	SPI0_send_1_byte(0xFF, ADC);
	FIO1SET |= 1 << ADC;
     f64:	4c1e      	ldr	r4, [pc, #120]	; (fe0 <adc_init+0xa2>)
	FIO1PIN |= (1 << ADC_SCLK);
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(0xFF, ADC);
	SPI0_send_1_byte(0xFF, ADC);
     f66:	f7ff ffd9 	bl	f1c <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f6a:	2112      	movs	r1, #18
     f6c:	20ff      	movs	r0, #255	; 0xff
     f6e:	f7ff ffd5 	bl	f1c <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f72:	2112      	movs	r1, #18
     f74:	20ff      	movs	r0, #255	; 0xff
     f76:	f7ff ffd1 	bl	f1c <SPI0_send_1_byte>
	FIO1SET |= 1 << ADC;
     f7a:	6823      	ldr	r3, [r4, #0]
     f7c:	4333      	orrs	r3, r6
     f7e:	6023      	str	r3, [r4, #0]

	/* Delay because adc needs 500us after reset sequence */
	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     f80:	682b      	ldr	r3, [r5, #0]
     f82:	4333      	orrs	r3, r6
     f84:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     f86:	2112      	movs	r1, #18
     f88:	2010      	movs	r0, #16
     f8a:	f7ff ffc7 	bl	f1c <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
     f8e:	2112      	movs	r1, #18
     f90:	4814      	ldr	r0, [pc, #80]	; (fe4 <adc_init+0xa6>)
     f92:	f7ff ff7f 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     f96:	6823      	ldr	r3, [r4, #0]
     f98:	4333      	orrs	r3, r6
     f9a:	6023      	str	r3, [r4, #0]

	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     f9c:	682b      	ldr	r3, [r5, #0]
     f9e:	4333      	orrs	r3, r6
     fa0:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     fa2:	2112      	movs	r1, #18
     fa4:	2008      	movs	r0, #8
     fa6:	f7ff ffb9 	bl	f1c <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
     faa:	2112      	movs	r1, #18
     fac:	2001      	movs	r0, #1
     fae:	f7ff ff71 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     fb2:	6823      	ldr	r3, [r4, #0]
     fb4:	431e      	orrs	r6, r3
     fb6:	6026      	str	r6, [r4, #0]

	FIO1CLR |= 1 << DAC;
     fb8:	2680      	movs	r6, #128	; 0x80
     fba:	682b      	ldr	r3, [r5, #0]
     fbc:	05b6      	lsls	r6, r6, #22
     fbe:	4333      	orrs	r3, r6
     fc0:	602b      	str	r3, [r5, #0]
	//SPI0_send_2_byte((0x1000 | 578), DAC);
	SPI0_send_2_byte((0x1000 | 1382), DAC);
     fc2:	211d      	movs	r1, #29
     fc4:	4808      	ldr	r0, [pc, #32]	; (fe8 <adc_init+0xaa>)
     fc6:	f7ff ff65 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     fca:	6823      	ldr	r3, [r4, #0]
     fcc:	4333      	orrs	r3, r6
     fce:	6023      	str	r3, [r4, #0]

	/* Switch on green led to indicate successful  initialization */
	//led_set(LED1);

}
     fd0:	bc70      	pop	{r4, r5, r6}
     fd2:	bc01      	pop	{r0}
     fd4:	4700      	bx	r0
     fd6:	46c0      	nop			; (mov r8, r8)
     fd8:	3fffc034 	.word	0x3fffc034
     fdc:	3fffc03c 	.word	0x3fffc03c
     fe0:	3fffc038 	.word	0x3fffc038
     fe4:	00001001 	.word	0x00001001
     fe8:	00001566 	.word	0x00001566

00000fec <dac_set_voltage>:

void dac_set_voltage(uint16_t voltage)
{
     fec:	b510      	push	{r4, lr}
	/* SPI0_send_2_byte((voltage | DAC_LOAD_CMD)); */
	FIO1CLR |= 1 << DAC;
     fee:	2480      	movs	r4, #128	; 0x80
     ff0:	4a08      	ldr	r2, [pc, #32]	; (1014 <dac_set_voltage+0x28>)
     ff2:	6813      	ldr	r3, [r2, #0]
     ff4:	05a4      	lsls	r4, r4, #22
     ff6:	4323      	orrs	r3, r4
     ff8:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((0x1000 | voltage), DAC);
     ffa:	2380      	movs	r3, #128	; 0x80
     ffc:	015b      	lsls	r3, r3, #5
     ffe:	4318      	orrs	r0, r3
    1000:	211d      	movs	r1, #29
    1002:	f7ff ff47 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
    1006:	4a04      	ldr	r2, [pc, #16]	; (1018 <dac_set_voltage+0x2c>)
    1008:	6813      	ldr	r3, [r2, #0]
    100a:	4323      	orrs	r3, r4
    100c:	6013      	str	r3, [r2, #0]
}
    100e:	bc10      	pop	{r4}
    1010:	bc01      	pop	{r0}
    1012:	4700      	bx	r0
    1014:	3fffc03c 	.word	0x3fffc03c
    1018:	3fffc038 	.word	0x3fffc038

0000101c <adc_read_current>:

uint16_t adc_read_current(void)
{
    101c:	b570      	push	{r4, r5, r6, lr}
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
    101e:	2580      	movs	r5, #128	; 0x80
    1020:	4e11      	ldr	r6, [pc, #68]	; (1068 <adc_read_current+0x4c>)
    1022:	6833      	ldr	r3, [r6, #0]
    1024:	02ed      	lsls	r5, r5, #11
    1026:	432b      	orrs	r3, r5
    1028:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    102a:	2112      	movs	r1, #18
    102c:	2010      	movs	r0, #16
    102e:	f7ff ff75 	bl	f1c <SPI0_send_1_byte>
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
    1032:	2080      	movs	r0, #128	; 0x80
	FIO1SET |= 1 << ADC;
    1034:	4c0d      	ldr	r4, [pc, #52]	; (106c <adc_read_current+0x50>)
{
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
    1036:	2112      	movs	r1, #18
    1038:	0140      	lsls	r0, r0, #5
    103a:	f7ff ff2b 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    103e:	6823      	ldr	r3, [r4, #0]
    1040:	432b      	orrs	r3, r5
    1042:	6023      	str	r3, [r4, #0]

	for (current = 0; current < 200; current++);
	FIO1CLR |= 1 << ADC;
    1044:	6833      	ldr	r3, [r6, #0]
    1046:	432b      	orrs	r3, r5
    1048:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
    104a:	2112      	movs	r1, #18
    104c:	2058      	movs	r0, #88	; 0x58
    104e:	f7ff ff65 	bl	f1c <SPI0_send_1_byte>
	current = SPI0_send_2_byte(0xFFFF, ADC);
    1052:	2112      	movs	r1, #18
    1054:	4806      	ldr	r0, [pc, #24]	; (1070 <adc_read_current+0x54>)
    1056:	f7ff ff1d 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    105a:	6823      	ldr	r3, [r4, #0]
    105c:	431d      	orrs	r5, r3
    105e:	6025      	str	r5, [r4, #0]

	return current;
}
    1060:	bc70      	pop	{r4, r5, r6}
    1062:	bc02      	pop	{r1}
    1064:	4708      	bx	r1
    1066:	46c0      	nop			; (mov r8, r8)
    1068:	3fffc03c 	.word	0x3fffc03c
    106c:	3fffc038 	.word	0x3fffc038
    1070:	0000ffff 	.word	0x0000ffff

00001074 <adc_read_voltage>:

uint16_t adc_read_voltage(void)
{
    1074:	b570      	push	{r4, r5, r6, lr}
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
    1076:	2580      	movs	r5, #128	; 0x80
    1078:	4e10      	ldr	r6, [pc, #64]	; (10bc <adc_read_voltage+0x48>)
    107a:	6833      	ldr	r3, [r6, #0]
    107c:	02ed      	lsls	r5, r5, #11
    107e:	432b      	orrs	r3, r5
    1080:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
	FIO1SET |= 1 << ADC;
    1082:	4c0f      	ldr	r4, [pc, #60]	; (10c0 <adc_read_voltage+0x4c>)
uint16_t adc_read_voltage(void)
{
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1084:	2112      	movs	r1, #18
    1086:	2010      	movs	r0, #16
    1088:	f7ff ff48 	bl	f1c <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
    108c:	2112      	movs	r1, #18
    108e:	480d      	ldr	r0, [pc, #52]	; (10c4 <adc_read_voltage+0x50>)
    1090:	f7ff ff00 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    1094:	6823      	ldr	r3, [r4, #0]
    1096:	432b      	orrs	r3, r5
    1098:	6023      	str	r3, [r4, #0]
	for (voltage = 0; voltage < 200; voltage ++);

	FIO1CLR |= 1 << ADC;
    109a:	6833      	ldr	r3, [r6, #0]
    109c:	432b      	orrs	r3, r5
    109e:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
    10a0:	2112      	movs	r1, #18
    10a2:	2058      	movs	r0, #88	; 0x58
    10a4:	f7ff ff3a 	bl	f1c <SPI0_send_1_byte>
	voltage = SPI0_send_2_byte(0xFFFF, ADC);
    10a8:	2112      	movs	r1, #18
    10aa:	4807      	ldr	r0, [pc, #28]	; (10c8 <adc_read_voltage+0x54>)
    10ac:	f7ff fef2 	bl	e94 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    10b0:	6823      	ldr	r3, [r4, #0]
    10b2:	431d      	orrs	r5, r3
    10b4:	6025      	str	r5, [r4, #0]

	return voltage;

}
    10b6:	bc70      	pop	{r4, r5, r6}
    10b8:	bc02      	pop	{r1}
    10ba:	4708      	bx	r1
    10bc:	3fffc03c 	.word	0x3fffc03c
    10c0:	3fffc038 	.word	0x3fffc038
    10c4:	00001001 	.word	0x00001001
    10c8:	0000ffff 	.word	0x0000ffff
    10cc:	00000000 	.word	0x00000000

000010d0 <read_volt>:
		}
	}
	VICVectAddr = 0;
}
void read_volt(void)
{
    10d0:	b510      	push	{r4, lr}
		volts = adc_read_voltage();
    10d2:	f7ff ffcf 	bl	1074 <adc_read_voltage>
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    10d6:	2480      	movs	r4, #128	; 0x80
    10d8:	4a0b      	ldr	r2, [pc, #44]	; (1108 <read_volt+0x38>)
	}
	VICVectAddr = 0;
}
void read_volt(void)
{
		volts = adc_read_voltage();
    10da:	4b0c      	ldr	r3, [pc, #48]	; (110c <read_volt+0x3c>)
    10dc:	8018      	strh	r0, [r3, #0]
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    10de:	6813      	ldr	r3, [r2, #0]
    10e0:	02e4      	lsls	r4, r4, #11
    10e2:	4323      	orrs	r3, r4
    10e4:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    10e6:	2112      	movs	r1, #18
    10e8:	2010      	movs	r0, #16
    10ea:	f7ff ff17 	bl	f1c <SPI0_send_1_byte>
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
    10ee:	2080      	movs	r0, #128	; 0x80
    10f0:	2112      	movs	r1, #18
    10f2:	0140      	lsls	r0, r0, #5
    10f4:	f7ff fece 	bl	e94 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    10f8:	4a05      	ldr	r2, [pc, #20]	; (1110 <read_volt+0x40>)
    10fa:	6813      	ldr	r3, [r2, #0]
    10fc:	4323      	orrs	r3, r4
    10fe:	6013      	str	r3, [r2, #0]
}
    1100:	bc10      	pop	{r4}
    1102:	bc01      	pop	{r0}
    1104:	4700      	bx	r0
    1106:	46c0      	nop			; (mov r8, r8)
    1108:	3fffc03c 	.word	0x3fffc03c
    110c:	40000562 	.word	0x40000562
    1110:	3fffc038 	.word	0x3fffc038

00001114 <read_curr>:
void read_curr(void){
    1114:	b510      	push	{r4, lr}
			curr = adc_read_current();
    1116:	f7ff ff81 	bl	101c <adc_read_current>
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    111a:	2480      	movs	r4, #128	; 0x80
    111c:	4a0a      	ldr	r2, [pc, #40]	; (1148 <read_curr+0x34>)
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
		FIO1SET |= 1 << ADC;
}
void read_curr(void){
			curr = adc_read_current();
    111e:	4b0b      	ldr	r3, [pc, #44]	; (114c <read_curr+0x38>)
    1120:	8018      	strh	r0, [r3, #0]
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    1122:	6813      	ldr	r3, [r2, #0]
    1124:	02e4      	lsls	r4, r4, #11
    1126:	4323      	orrs	r3, r4
    1128:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    112a:	2112      	movs	r1, #18
    112c:	2010      	movs	r0, #16
    112e:	f7ff fef5 	bl	f1c <SPI0_send_1_byte>
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
    1132:	2112      	movs	r1, #18
    1134:	4806      	ldr	r0, [pc, #24]	; (1150 <read_curr+0x3c>)
    1136:	f7ff fead 	bl	e94 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    113a:	4a06      	ldr	r2, [pc, #24]	; (1154 <read_curr+0x40>)
    113c:	6813      	ldr	r3, [r2, #0]
    113e:	4323      	orrs	r3, r4
    1140:	6013      	str	r3, [r2, #0]
}
    1142:	bc10      	pop	{r4}
    1144:	bc01      	pop	{r0}
    1146:	4700      	bx	r0
    1148:	3fffc03c 	.word	0x3fffc03c
    114c:	40000560 	.word	0x40000560
    1150:	00001001 	.word	0x00001001
    1154:	3fffc038 	.word	0x3fffc038

00001158 <timer0_set_freq>:
void timer0_set_freq(uint8_t hz){
	T0TCR = 0;	/* Disable tim0 */
    1158:	2200      	movs	r2, #0
    115a:	4b0b      	ldr	r3, [pc, #44]	; (1188 <timer0_set_freq+0x30>)
		FIO1CLR |= 1 << ADC;
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
		FIO1SET |= 1 << ADC;
}
void timer0_set_freq(uint8_t hz){
    115c:	b570      	push	{r4, r5, r6, lr}
	T0TCR = 0;	/* Disable tim0 */
    115e:	601a      	str	r2, [r3, #0]
    1160:	4d0a      	ldr	r5, [pc, #40]	; (118c <timer0_set_freq+0x34>)
    1162:	4c0b      	ldr	r4, [pc, #44]	; (1190 <timer0_set_freq+0x38>)
	if (hz == 100)
    1164:	2864      	cmp	r0, #100	; 0x64
    1166:	d104      	bne.n	1172 <timer0_set_freq+0x1a>
	{
		T0PR = 250;	/* Prescaler */
    1168:	23fa      	movs	r3, #250	; 0xfa
    116a:	602b      	str	r3, [r5, #0]
		//T0MR0 = 28800;	/* Top value (100 Hz) */
		T0MR0 = 720;	/* Top value (100 Hz) */
    116c:	23b4      	movs	r3, #180	; 0xb4
    116e:	009b      	lsls	r3, r3, #2
    1170:	e006      	b.n	1180 <timer0_set_freq+0x28>
	}else{
		//T0MR0 = 72000;	/* Top value (40 Hz) */
		UART0_send("100hz\n", 6);
    1172:	2106      	movs	r1, #6
    1174:	4807      	ldr	r0, [pc, #28]	; (1194 <timer0_set_freq+0x3c>)
    1176:	f7ff fc49 	bl	a0c <UART0_send>
		T0PR = 250;	/* Prescaler */
    117a:	23fa      	movs	r3, #250	; 0xfa
    117c:	602b      	str	r3, [r5, #0]
		T0MR0 = 36000;	/* Top value (1 Hz) */
    117e:	4b06      	ldr	r3, [pc, #24]	; (1198 <timer0_set_freq+0x40>)
    1180:	6023      	str	r3, [r4, #0]
	}
}
    1182:	bc70      	pop	{r4, r5, r6}
    1184:	bc01      	pop	{r0}
    1186:	4700      	bx	r0
    1188:	e0004004 	.word	0xe0004004
    118c:	e000400c 	.word	0xe000400c
    1190:	e0004018 	.word	0xe0004018
    1194:	00002fe7 	.word	0x00002fe7
    1198:	00008ca0 	.word	0x00008ca0

0000119c <timer0_init>:

		}
}
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
    119c:	2102      	movs	r1, #2
    119e:	4a0f      	ldr	r2, [pc, #60]	; (11dc <timer0_init+0x40>)
    11a0:	6813      	ldr	r3, [r2, #0]
    11a2:	430b      	orrs	r3, r1
			UART0_send("\n", 1);

		}
}
void timer0_init(void)
{
    11a4:	b510      	push	{r4, lr}
	PCONP |= (1 << 1);	/* Power on tim0 */
    11a6:	6013      	str	r3, [r2, #0]
	T0TCR = 0;	/* Disable tim0 */
    11a8:	2300      	movs	r3, #0

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    11aa:	2101      	movs	r1, #1
		}
}
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
	T0TCR = 0;	/* Disable tim0 */
    11ac:	4a0c      	ldr	r2, [pc, #48]	; (11e0 <timer0_init+0x44>)
    11ae:	6013      	str	r3, [r2, #0]

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    11b0:	4a0c      	ldr	r2, [pc, #48]	; (11e4 <timer0_init+0x48>)
    11b2:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
    11b4:	2103      	movs	r1, #3
    11b6:	4a0c      	ldr	r2, [pc, #48]	; (11e8 <timer0_init+0x4c>)
    11b8:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
    11ba:	4a0c      	ldr	r2, [pc, #48]	; (11ec <timer0_init+0x50>)
    11bc:	6013      	str	r3, [r2, #0]
	T0PR = 25;	/* Prescaler */
    11be:	2219      	movs	r2, #25
    11c0:	4b0b      	ldr	r3, [pc, #44]	; (11f0 <timer0_init+0x54>)
    11c2:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
    11c4:	4a0b      	ldr	r2, [pc, #44]	; (11f4 <timer0_init+0x58>)
    11c6:	4b0c      	ldr	r3, [pc, #48]	; (11f8 <timer0_init+0x5c>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    11c8:	490c      	ldr	r1, [pc, #48]	; (11fc <timer0_init+0x60>)

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
	T0MCR = 3;
	T0CTCR = 0;
	T0PR = 25;	/* Prescaler */
	T0MR0 = 72000;	/* Top value (5 Hz) */
    11ca:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    11cc:	2004      	movs	r0, #4
    11ce:	220f      	movs	r2, #15
    11d0:	f7ff fb18 	bl	804 <RegisterIrq>
}
    11d4:	bc10      	pop	{r4}
    11d6:	bc01      	pop	{r0}
    11d8:	4700      	bx	r0
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	e01fc0c4 	.word	0xe01fc0c4
    11e0:	e0004004 	.word	0xe0004004
    11e4:	e0004000 	.word	0xe0004000
    11e8:	e0004014 	.word	0xe0004014
    11ec:	e0004070 	.word	0xe0004070
    11f0:	e000400c 	.word	0xe000400c
    11f4:	00011940 	.word	0x00011940
    11f8:	e0004018 	.word	0xe0004018
    11fc:	00001435 	.word	0x00001435

00001200 <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
    1200:	2101      	movs	r1, #1
    1202:	4a06      	ldr	r2, [pc, #24]	; (121c <timer0_start+0x1c>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
}

void timer0_start(void)
{
    1204:	b510      	push	{r4, lr}
	T0TCR |= 1;
    1206:	6813      	ldr	r3, [r2, #0]
    1208:	430b      	orrs	r3, r1
    120a:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
    120c:	210d      	movs	r1, #13
    120e:	2002      	movs	r0, #2
    1210:	f7ff fa48 	bl	6a4 <gpio_set>
}
    1214:	bc10      	pop	{r4}
    1216:	bc01      	pop	{r0}
    1218:	4700      	bx	r0
    121a:	46c0      	nop			; (mov r8, r8)
    121c:	e0004004 	.word	0xe0004004

00001220 <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
    1220:	2101      	movs	r1, #1
    1222:	4a06      	ldr	r2, [pc, #24]	; (123c <timer0_stop+0x1c>)
	T0TCR |= 1;
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
}

void timer0_stop(void)
{
    1224:	b510      	push	{r4, lr}
	T0TCR &= ~1;
    1226:	6813      	ldr	r3, [r2, #0]
    1228:	438b      	bics	r3, r1
    122a:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
    122c:	210d      	movs	r1, #13
    122e:	2002      	movs	r0, #2
    1230:	f7ff fa5a 	bl	6e8 <gpio_clear>
}
    1234:	bc10      	pop	{r4}
    1236:	bc01      	pop	{r0}
    1238:	4700      	bx	r0
    123a:	46c0      	nop			; (mov r8, r8)
    123c:	e0004004 	.word	0xe0004004

00001240 <ftoa>:
	}
	strcat(str, decimal);
}
*/
void ftoa(float num, char *str)
{
    1240:	b570      	push	{r4, r5, r6, lr}
    1242:	b086      	sub	sp, #24
    1244:	1c0c      	adds	r4, r1, #0
    1246:	1c05      	adds	r5, r0, #0
    int intpart = num;
    1248:	f001 fa5a 	bl	2700 <__aeabi_f2iz>
    int intdecimal;
    int i;
    float decimal_part;
    char decimal[20];

    memset(str, 0x0, 20);
    124c:	2100      	movs	r1, #0
	strcat(str, decimal);
}
*/
void ftoa(float num, char *str)
{
    int intpart = num;
    124e:	1c06      	adds	r6, r0, #0
    int intdecimal;
    int i;
    float decimal_part;
    char decimal[20];

    memset(str, 0x0, 20);
    1250:	2214      	movs	r2, #20
    1252:	1c20      	adds	r0, r4, #0
    1254:	f000 fa37 	bl	16c6 <memset>
    if (num > (-1) && num < (0))
    1258:	4922      	ldr	r1, [pc, #136]	; (12e4 <ftoa+0xa4>)
    125a:	1c28      	adds	r0, r5, #0
    125c:	f001 fa46 	bl	26ec <__aeabi_fcmpgt>
    1260:	2800      	cmp	r0, #0
    1262:	d00c      	beq.n	127e <ftoa+0x3e>
    1264:	2100      	movs	r1, #0
    1266:	1c28      	adds	r0, r5, #0
    1268:	f001 fa22 	bl	26b0 <__aeabi_fcmplt>
    126c:	2800      	cmp	r0, #0
    126e:	d006      	beq.n	127e <ftoa+0x3e>
    {
        strcat(str, "-");
    1270:	491d      	ldr	r1, [pc, #116]	; (12e8 <ftoa+0xa8>)
    1272:	1c20      	adds	r0, r4, #0
    1274:	f000 fa2f 	bl	16d6 <strcat>
        itoa(num, str+1, 10);
    1278:	1c61      	adds	r1, r4, #1
    127a:	220a      	movs	r2, #10
    127c:	e001      	b.n	1282 <ftoa+0x42>
    }else{
        itoa(num, str, 10);
    127e:	220a      	movs	r2, #10
    1280:	1c21      	adds	r1, r4, #0
    1282:	1c30      	adds	r0, r6, #0
    1284:	f000 fa1d 	bl	16c2 <itoa>
    }
    strcat(str, ".");
    1288:	4918      	ldr	r1, [pc, #96]	; (12ec <ftoa+0xac>)
    128a:	1c20      	adds	r0, r4, #0
    128c:	f000 fa23 	bl	16d6 <strcat>

    decimal_part = num - intpart;
    1290:	1c30      	adds	r0, r6, #0
    1292:	f001 f81b 	bl	22cc <__aeabi_i2f>
    1296:	1c01      	adds	r1, r0, #0
    1298:	1c28      	adds	r0, r5, #0
    129a:	f000 ff61 	bl	2160 <__aeabi_fsub>
    intdecimal = decimal_part * 1000000;
    129e:	4914      	ldr	r1, [pc, #80]	; (12f0 <ftoa+0xb0>)
    12a0:	f001 f868 	bl	2374 <__aeabi_fmul>
    12a4:	f001 fa2c 	bl	2700 <__aeabi_f2iz>
    if(intdecimal < 0)
    {
        intdecimal = -intdecimal;
    }
    itoa(intdecimal, decimal, 10);
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    12a8:	2500      	movs	r5, #0
    12aa:	17c3      	asrs	r3, r0, #31
    12ac:	18c0      	adds	r0, r0, r3
    12ae:	4058      	eors	r0, r3

    if(intdecimal < 0)
    {
        intdecimal = -intdecimal;
    }
    itoa(intdecimal, decimal, 10);
    12b0:	220a      	movs	r2, #10
    12b2:	a901      	add	r1, sp, #4
    12b4:	f000 fa05 	bl	16c2 <itoa>
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    {
        strcat(str, "0");
    12b8:	4e0e      	ldr	r6, [pc, #56]	; (12f4 <ftoa+0xb4>)
    if(intdecimal < 0)
    {
        intdecimal = -intdecimal;
    }
    itoa(intdecimal, decimal, 10);
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    12ba:	a801      	add	r0, sp, #4
    12bc:	f000 fa1a 	bl	16f4 <strlen>
    12c0:	2306      	movs	r3, #6
    12c2:	1a18      	subs	r0, r3, r0
    12c4:	4285      	cmp	r5, r0
    12c6:	d205      	bcs.n	12d4 <ftoa+0x94>
    {
        strcat(str, "0");
    12c8:	1c31      	adds	r1, r6, #0
    12ca:	1c20      	adds	r0, r4, #0
    12cc:	f000 fa03 	bl	16d6 <strcat>
    if(intdecimal < 0)
    {
        intdecimal = -intdecimal;
    }
    itoa(intdecimal, decimal, 10);
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    12d0:	3501      	adds	r5, #1
    12d2:	e7f2      	b.n	12ba <ftoa+0x7a>
    {
        strcat(str, "0");
    }
    strcat(str, decimal);
    12d4:	a901      	add	r1, sp, #4
    12d6:	1c20      	adds	r0, r4, #0
    12d8:	f000 f9fd 	bl	16d6 <strcat>
}
    12dc:	b006      	add	sp, #24
    12de:	bc70      	pop	{r4, r5, r6}
    12e0:	bc01      	pop	{r0}
    12e2:	4700      	bx	r0
    12e4:	bf800000 	.word	0xbf800000
    12e8:	00002fee 	.word	0x00002fee
    12ec:	00002ff0 	.word	0x00002ff0
    12f0:	49742400 	.word	0x49742400
    12f4:	00002ff2 	.word	0x00002ff2

000012f8 <send_results>:
		UART0_send("100hz\n", 6);
		T0PR = 250;	/* Prescaler */
		T0MR0 = 36000;	/* Top value (1 Hz) */
	}
}
void send_results(void){
    12f8:	b570      	push	{r4, r5, r6, lr}
	uint16_t dat;
	uint8_t data;
	uint8_t num = 5;
	char *volt_ascii[50];
	char *curr_ascii[50];
	if (native == 1)
    12fa:	4b43      	ldr	r3, [pc, #268]	; (1408 <send_results+0x110>)
    12fc:	781b      	ldrb	r3, [r3, #0]
		UART0_send("100hz\n", 6);
		T0PR = 250;	/* Prescaler */
		T0MR0 = 36000;	/* Top value (1 Hz) */
	}
}
void send_results(void){
    12fe:	b0e4      	sub	sp, #400	; 0x190
    1300:	4c42      	ldr	r4, [pc, #264]	; (140c <send_results+0x114>)
    1302:	4e43      	ldr	r6, [pc, #268]	; (1410 <send_results+0x118>)
	uint16_t dat;
	uint8_t data;
	uint8_t num = 5;
	char *volt_ascii[50];
	char *curr_ascii[50];
	if (native == 1)
    1304:	2b01      	cmp	r3, #1
    1306:	d138      	bne.n	137a <send_results+0x82>
		{
			/* UART0_send("\nOutput voltage: ",17 ); */
			UART0_send("\n\nVoltage, V  : ",16 );
    1308:	4842      	ldr	r0, [pc, #264]	; (1414 <send_results+0x11c>)
    130a:	2110      	movs	r1, #16
    130c:	f7ff fb7e 	bl	a0c <UART0_send>

			if (volts < 10000)
    1310:	4d41      	ldr	r5, [pc, #260]	; (1418 <send_results+0x120>)
    1312:	8820      	ldrh	r0, [r4, #0]
	}
}
void send_results(void){
	uint16_t dat;
	uint8_t data;
	uint8_t num = 5;
    1314:	2405      	movs	r4, #5
	if (native == 1)
		{
			/* UART0_send("\nOutput voltage: ",17 ); */
			UART0_send("\n\nVoltage, V  : ",16 );

			if (volts < 10000)
    1316:	42a8      	cmp	r0, r5
    1318:	d80c      	bhi.n	1334 <send_results+0x3c>
				num = 4;
			if (volts < 1000)
    131a:	4b40      	ldr	r3, [pc, #256]	; (141c <send_results+0x124>)
		{
			/* UART0_send("\nOutput voltage: ",17 ); */
			UART0_send("\n\nVoltage, V  : ",16 );

			if (volts < 10000)
				num = 4;
    131c:	2404      	movs	r4, #4
			if (volts < 1000)
    131e:	4298      	cmp	r0, r3
    1320:	d808      	bhi.n	1334 <send_results+0x3c>
				num = 3;
    1322:	2403      	movs	r4, #3
			if (volts < 100)
    1324:	2863      	cmp	r0, #99	; 0x63
    1326:	d805      	bhi.n	1334 <send_results+0x3c>
				num = 2;
    1328:	2400      	movs	r4, #0
    132a:	2309      	movs	r3, #9
    132c:	2102      	movs	r1, #2
    132e:	4283      	cmp	r3, r0
    1330:	4164      	adcs	r4, r4
    1332:	1b0c      	subs	r4, r1, r4
			if (volts < 10)
				num = 1;
			UART0_send(itoa(volts, volt_ascii,10), num);
    1334:	220a      	movs	r2, #10
    1336:	4669      	mov	r1, sp
    1338:	f000 f9c3 	bl	16c2 <itoa>
    133c:	0421      	lsls	r1, r4, #16
    133e:	0c09      	lsrs	r1, r1, #16
    1340:	f7ff fb64 	bl	a0c <UART0_send>
			/* UART0_send("\nCurrent: ",10 ); */
			UART0_send("\nCurrent, mkA: ",15 );
    1344:	4836      	ldr	r0, [pc, #216]	; (1420 <send_results+0x128>)
    1346:	210f      	movs	r1, #15
    1348:	f7ff fb60 	bl	a0c <UART0_send>
			if (curr < 10000)
    134c:	8830      	ldrh	r0, [r6, #0]
    134e:	42a8      	cmp	r0, r5
    1350:	d80c      	bhi.n	136c <send_results+0x74>
				num = 4;
			if (curr < 1000)
    1352:	4b32      	ldr	r3, [pc, #200]	; (141c <send_results+0x124>)
				num = 1;
			UART0_send(itoa(volts, volt_ascii,10), num);
			/* UART0_send("\nCurrent: ",10 ); */
			UART0_send("\nCurrent, mkA: ",15 );
			if (curr < 10000)
				num = 4;
    1354:	2404      	movs	r4, #4
			if (curr < 1000)
    1356:	4298      	cmp	r0, r3
    1358:	d808      	bhi.n	136c <send_results+0x74>
				num = 3;
    135a:	2403      	movs	r4, #3
			if (curr < 100)
    135c:	2863      	cmp	r0, #99	; 0x63
    135e:	d805      	bhi.n	136c <send_results+0x74>
				num = 2;
    1360:	2400      	movs	r4, #0
    1362:	2309      	movs	r3, #9
    1364:	2102      	movs	r1, #2
    1366:	4283      	cmp	r3, r0
    1368:	4164      	adcs	r4, r4
    136a:	1b0c      	subs	r4, r1, r4
			if (curr < 10)
				num = 1;
			UART0_send(itoa(curr, curr_ascii,10), num);
    136c:	a932      	add	r1, sp, #200	; 0xc8
    136e:	220a      	movs	r2, #10
    1370:	f000 f9a7 	bl	16c2 <itoa>
    1374:	0421      	lsls	r1, r4, #16
    1376:	0c09      	lsrs	r1, r1, #16
    1378:	e033      	b.n	13e2 <send_results+0xea>
			uint16_t curr_ascii_pointer;

			//fvolts = (volts - 9211)/1065.2;
			//fcurr = (curr - 6037)/0.7927817;
			//fvolts = volts*0.0185-25.523;
			fvolts = volts * 0.00124-27.723;
    137a:	8820      	ldrh	r0, [r4, #0]
    137c:	f000 fbfc 	bl	1b78 <__aeabi_i2d>
    1380:	4b1c      	ldr	r3, [pc, #112]	; (13f4 <send_results+0xfc>)
    1382:	4a1b      	ldr	r2, [pc, #108]	; (13f0 <send_results+0xf8>)
    1384:	f000 fc5e 	bl	1c44 <__aeabi_dmul>
    1388:	4a1b      	ldr	r2, [pc, #108]	; (13f8 <send_results+0x100>)
    138a:	4b1c      	ldr	r3, [pc, #112]	; (13fc <send_results+0x104>)
    138c:	f000 faa6 	bl	18dc <__aeabi_dsub>
    1390:	f000 fe92 	bl	20b8 <__aeabi_d2f>
			fcurr = (curr - 6037)/0.7927817;
    1394:	4b23      	ldr	r3, [pc, #140]	; (1424 <send_results+0x12c>)
			uint16_t curr_ascii_pointer;

			//fvolts = (volts - 9211)/1065.2;
			//fcurr = (curr - 6037)/0.7927817;
			//fvolts = volts*0.0185-25.523;
			fvolts = volts * 0.00124-27.723;
    1396:	1c04      	adds	r4, r0, #0
			fcurr = (curr - 6037)/0.7927817;
    1398:	8830      	ldrh	r0, [r6, #0]
    139a:	18c0      	adds	r0, r0, r3
    139c:	f000 fbec 	bl	1b78 <__aeabi_i2d>
    13a0:	4a17      	ldr	r2, [pc, #92]	; (1400 <send_results+0x108>)
    13a2:	4b18      	ldr	r3, [pc, #96]	; (1404 <send_results+0x10c>)
    13a4:	f000 fd78 	bl	1e98 <__aeabi_ddiv>
    13a8:	f000 fe86 	bl	20b8 <__aeabi_d2f>
			/* fvolts = (volts)/3.3; */
			/* fcurr = (curr - 1000); */

			//UART0_send("\n\nVoltage, V  : ",16 );
			UART0_send("V", 1);
    13ac:	2101      	movs	r1, #1

			//fvolts = (volts - 9211)/1065.2;
			//fcurr = (curr - 6037)/0.7927817;
			//fvolts = volts*0.0185-25.523;
			fvolts = volts * 0.00124-27.723;
			fcurr = (curr - 6037)/0.7927817;
    13ae:	1c05      	adds	r5, r0, #0
			/* fvolts = (volts)/3.3; */
			/* fcurr = (curr - 1000); */

			//UART0_send("\n\nVoltage, V  : ",16 );
			UART0_send("V", 1);
    13b0:	481d      	ldr	r0, [pc, #116]	; (1428 <send_results+0x130>)
    13b2:	f7ff fb2b 	bl	a0c <UART0_send>
			/* sprintf(volt_ascii, "%+f", fvolts); */
			ftoa(fvolts, volt_ascii);
    13b6:	4669      	mov	r1, sp
    13b8:	1c20      	adds	r0, r4, #0
    13ba:	f7ff ff41 	bl	1240 <ftoa>
			//my_ftoa(fvolts, volt_ascii);
			UART0_send(volt_ascii, 6);
    13be:	2106      	movs	r1, #6
    13c0:	4668      	mov	r0, sp
    13c2:	f7ff fb23 	bl	a0c <UART0_send>
			//UART0_send("\nCurrent, mkA: ",15 );
			UART0_send("C", 1);
    13c6:	2101      	movs	r1, #1
    13c8:	4818      	ldr	r0, [pc, #96]	; (142c <send_results+0x134>)
    13ca:	f7ff fb1f 	bl	a0c <UART0_send>
			/* sprintf(curr_ascii, "+%f", fcurr); */
			ftoa(fcurr, curr_ascii);
    13ce:	a932      	add	r1, sp, #200	; 0xc8
    13d0:	1c28      	adds	r0, r5, #0
    13d2:	f7ff ff35 	bl	1240 <ftoa>
			//ftoa2(fcurr, curr_ascii, 4);
			UART0_send(curr_ascii, 6);
    13d6:	2106      	movs	r1, #6
    13d8:	a832      	add	r0, sp, #200	; 0xc8
    13da:	f7ff fb17 	bl	a0c <UART0_send>
			UART0_send("\n", 1);
    13de:	2101      	movs	r1, #1
    13e0:	4813      	ldr	r0, [pc, #76]	; (1430 <send_results+0x138>)
    13e2:	f7ff fb13 	bl	a0c <UART0_send>

		}
}
    13e6:	b064      	add	sp, #400	; 0x190
    13e8:	bc70      	pop	{r4, r5, r6}
    13ea:	bc01      	pop	{r0}
    13ec:	4700      	bx	r0
    13ee:	46c0      	nop			; (mov r8, r8)
    13f0:	dc9c4da9 	.word	0xdc9c4da9
    13f4:	3f5450ef 	.word	0x3f5450ef
    13f8:	872b020c 	.word	0x872b020c
    13fc:	403bb916 	.word	0x403bb916
    1400:	ba4bc0c9 	.word	0xba4bc0c9
    1404:	3fe95e77 	.word	0x3fe95e77
    1408:	40000441 	.word	0x40000441
    140c:	40000562 	.word	0x40000562
    1410:	40000560 	.word	0x40000560
    1414:	00002ff4 	.word	0x00002ff4
    1418:	0000270f 	.word	0x0000270f
    141c:	000003e7 	.word	0x000003e7
    1420:	00003005 	.word	0x00003005
    1424:	ffffe86b 	.word	0xffffe86b
    1428:	00003015 	.word	0x00003015
    142c:	00003017 	.word	0x00003017
    1430:	00002fcf 	.word	0x00002fcf

00001434 <Isr_TIM0>:
extern uint64_t curr_big;
extern uint16_t volts, curr;
void Isr_TIM0(void)
{
	uint16_t dat;
	T0IR = 0x3F;
    1434:	223f      	movs	r2, #63	; 0x3f
	uint8_t data;
	uint8_t num = 5;
	char *volt_ascii[50];
	char *curr_ascii[50];
	FIO1PIN |= (1 << ADC_SCLK);
    1436:	2180      	movs	r1, #128	; 0x80
extern uint8_t native, getflag, conv_number;
extern uint8_t channel;
extern uint64_t curr_big;
extern uint16_t volts, curr;
void Isr_TIM0(void)
{
    1438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t dat;
	T0IR = 0x3F;
    143a:	4b3c      	ldr	r3, [pc, #240]	; (152c <Isr_TIM0+0xf8>)
    143c:	601a      	str	r2, [r3, #0]
	uint8_t data;
	uint8_t num = 5;
	char *volt_ascii[50];
	char *curr_ascii[50];
	FIO1PIN |= (1 << ADC_SCLK);
    143e:	4a3c      	ldr	r2, [pc, #240]	; (1530 <Isr_TIM0+0xfc>)
    1440:	6813      	ldr	r3, [r2, #0]
    1442:	0349      	lsls	r1, r1, #13
    1444:	430b      	orrs	r3, r1
    1446:	6013      	str	r3, [r2, #0]
	if (getflag == 0){
    1448:	4f3a      	ldr	r7, [pc, #232]	; (1534 <Isr_TIM0+0x100>)
    144a:	783d      	ldrb	r5, [r7, #0]
    144c:	2d00      	cmp	r5, #0
    144e:	d110      	bne.n	1472 <Isr_TIM0+0x3e>
		if (channel == 1)
    1450:	4c39      	ldr	r4, [pc, #228]	; (1538 <Isr_TIM0+0x104>)
    1452:	7823      	ldrb	r3, [r4, #0]
    1454:	2b01      	cmp	r3, #1
    1456:	d105      	bne.n	1464 <Isr_TIM0+0x30>
		{
			read_volt();
    1458:	f7ff fe3a 	bl	10d0 <read_volt>
			channel = 0;
    145c:	7025      	strb	r5, [r4, #0]
			send_results();
    145e:	f7ff ff4b 	bl	12f8 <send_results>
    1462:	e05c      	b.n	151e <Isr_TIM0+0xea>
		}else if (channel == 0)
    1464:	2b00      	cmp	r3, #0
    1466:	d15a      	bne.n	151e <Isr_TIM0+0xea>
		{
			read_curr();
    1468:	f7ff fe54 	bl	1114 <read_curr>
			channel = 1;
    146c:	2301      	movs	r3, #1
    146e:	7023      	strb	r3, [r4, #0]
    1470:	e055      	b.n	151e <Isr_TIM0+0xea>
		}
	}else{
		//UART0_send("\ngf\n", 4);
		if (conv_number == NUM_OF_CONV+1) {
    1472:	4e32      	ldr	r6, [pc, #200]	; (153c <Isr_TIM0+0x108>)
    1474:	7834      	ldrb	r4, [r6, #0]
    1476:	2c33      	cmp	r4, #51	; 0x33
    1478:	d119      	bne.n	14ae <Isr_TIM0+0x7a>
			conv_number--;
    147a:	2332      	movs	r3, #50	; 0x32
    147c:	7033      	strb	r3, [r6, #0]
			volts = adc_read_voltage();
    147e:	f7ff fdf9 	bl	1074 <adc_read_voltage>
		//UART0_send_byte(volts>>8);
		//UART0_send_byte(volts & 0xFF);
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    1482:	2480      	movs	r4, #128	; 0x80
    1484:	4a2e      	ldr	r2, [pc, #184]	; (1540 <Isr_TIM0+0x10c>)
		}
	}else{
		//UART0_send("\ngf\n", 4);
		if (conv_number == NUM_OF_CONV+1) {
			conv_number--;
			volts = adc_read_voltage();
    1486:	4b2f      	ldr	r3, [pc, #188]	; (1544 <Isr_TIM0+0x110>)
    1488:	8018      	strh	r0, [r3, #0]
		//UART0_send_byte(volts>>8);
		//UART0_send_byte(volts & 0xFF);
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    148a:	6813      	ldr	r3, [r2, #0]
    148c:	02e4      	lsls	r4, r4, #11
    148e:	4323      	orrs	r3, r4
    1490:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1492:	2112      	movs	r1, #18
    1494:	2010      	movs	r0, #16
    1496:	f7ff fd41 	bl	f1c <SPI0_send_1_byte>
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
    149a:	2080      	movs	r0, #128	; 0x80
    149c:	2112      	movs	r1, #18
    149e:	0140      	lsls	r0, r0, #5
    14a0:	f7ff fcf8 	bl	e94 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    14a4:	4a28      	ldr	r2, [pc, #160]	; (1548 <Isr_TIM0+0x114>)
    14a6:	6813      	ldr	r3, [r2, #0]
    14a8:	4323      	orrs	r3, r4
    14aa:	6013      	str	r3, [r2, #0]
    14ac:	e037      	b.n	151e <Isr_TIM0+0xea>
    14ae:	4d27      	ldr	r5, [pc, #156]	; (154c <Isr_TIM0+0x118>)
		}else if (conv_number != 0){
    14b0:	2c00      	cmp	r4, #0
    14b2:	d00c      	beq.n	14ce <Isr_TIM0+0x9a>
			conv_number--;
    14b4:	3c01      	subs	r4, #1
    14b6:	7034      	strb	r4, [r6, #0]
			curr_big += adc_read_current();
    14b8:	f7ff fdb0 	bl	101c <adc_read_current>
    14bc:	2300      	movs	r3, #0
    14be:	1c02      	adds	r2, r0, #0
    14c0:	6828      	ldr	r0, [r5, #0]
    14c2:	6869      	ldr	r1, [r5, #4]
    14c4:	1812      	adds	r2, r2, r0
    14c6:	414b      	adcs	r3, r1
    14c8:	602a      	str	r2, [r5, #0]
    14ca:	606b      	str	r3, [r5, #4]
    14cc:	e027      	b.n	151e <Isr_TIM0+0xea>
		}else if (conv_number == 0){
			curr = (curr_big/NUM_OF_CONV);
    14ce:	2232      	movs	r2, #50	; 0x32
    14d0:	2300      	movs	r3, #0
    14d2:	6828      	ldr	r0, [r5, #0]
    14d4:	6869      	ldr	r1, [r5, #4]
    14d6:	f001 f939 	bl	274c <__aeabi_uldivmod>
    14da:	4b1d      	ldr	r3, [pc, #116]	; (1550 <Isr_TIM0+0x11c>)
    14dc:	8018      	strh	r0, [r3, #0]
			conv_number = NUM_OF_CONV+1;
    14de:	2333      	movs	r3, #51	; 0x33
    14e0:	7033      	strb	r3, [r6, #0]
			getflag = 0;
			
					/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    14e2:	2680      	movs	r6, #128	; 0x80
    14e4:	4a16      	ldr	r2, [pc, #88]	; (1540 <Isr_TIM0+0x10c>)
			conv_number--;
			curr_big += adc_read_current();
		}else if (conv_number == 0){
			curr = (curr_big/NUM_OF_CONV);
			conv_number = NUM_OF_CONV+1;
			getflag = 0;
    14e6:	703c      	strb	r4, [r7, #0]
			
					/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    14e8:	6813      	ldr	r3, [r2, #0]
    14ea:	02f6      	lsls	r6, r6, #11
    14ec:	4333      	orrs	r3, r6
    14ee:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    14f0:	2112      	movs	r1, #18
    14f2:	2010      	movs	r0, #16
    14f4:	f7ff fd12 	bl	f1c <SPI0_send_1_byte>
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
    14f8:	2112      	movs	r1, #18
    14fa:	4816      	ldr	r0, [pc, #88]	; (1554 <Isr_TIM0+0x120>)
    14fc:	f7ff fcca 	bl	e94 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    1500:	4a11      	ldr	r2, [pc, #68]	; (1548 <Isr_TIM0+0x114>)
    1502:	6813      	ldr	r3, [r2, #0]
    1504:	4333      	orrs	r3, r6
    1506:	6013      	str	r3, [r2, #0]
		curr_big = 0;
    1508:	2200      	movs	r2, #0
    150a:	2300      	movs	r3, #0
    150c:	602a      	str	r2, [r5, #0]
    150e:	606b      	str	r3, [r5, #4]
		send_results();
    1510:	f7ff fef2 	bl	12f8 <send_results>
		timer0_stop();
    1514:	f7ff fe84 	bl	1220 <timer0_stop>
		led_clear(LED1);
    1518:	1c20      	adds	r0, r4, #0
    151a:	f7ff f8b9 	bl	690 <led_clear>
		}
	}
	VICVectAddr = 0;
    151e:	2200      	movs	r2, #0
    1520:	4b0d      	ldr	r3, [pc, #52]	; (1558 <Isr_TIM0+0x124>)
    1522:	601a      	str	r2, [r3, #0]
}
    1524:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1526:	bc01      	pop	{r0}
    1528:	4700      	bx	r0
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	e0004000 	.word	0xe0004000
    1530:	3fffc034 	.word	0x3fffc034
    1534:	40000440 	.word	0x40000440
    1538:	40000001 	.word	0x40000001
    153c:	40000000 	.word	0x40000000
    1540:	3fffc03c 	.word	0x3fffc03c
    1544:	40000562 	.word	0x40000562
    1548:	3fffc038 	.word	0x3fffc038
    154c:	40000558 	.word	0x40000558
    1550:	40000560 	.word	0x40000560
    1554:	00001001 	.word	0x00001001
    1558:	ffffff00 	.word	0xffffff00

0000155c <calculateSD>:
    }
    strcat(str, decimal);
}

float calculateSD(float data[])
{
    155c:	1c03      	adds	r3, r0, #0
    155e:	b5f0      	push	{r4, r5, r6, r7, lr}
    1560:	1c04      	adds	r4, r0, #0
    1562:	1c05      	adds	r5, r0, #0
    float sum = 0.0, mean, standardDeviation = 0.0;
    1564:	2000      	movs	r0, #0
    }
    strcat(str, decimal);
}

float calculateSD(float data[])
{
    1566:	b085      	sub	sp, #20
    1568:	33c8      	adds	r3, #200	; 0xc8
    156a:	9300      	str	r3, [sp, #0]

    int i;

    for(i=0; i<NUM_OF_CONV; ++i)
    {
        sum += data[i];
    156c:	cd02      	ldmia	r5!, {r1}
    156e:	f000 fdf9 	bl	2164 <__addsf3>
{
    float sum = 0.0, mean, standardDeviation = 0.0;

    int i;

    for(i=0; i<NUM_OF_CONV; ++i)
    1572:	9b00      	ldr	r3, [sp, #0]
    1574:	429d      	cmp	r5, r3
    1576:	d1f9      	bne.n	156c <calculateSD+0x10>
    {
        sum += data[i];
    }

    mean = sum/NUM_OF_CONV;
    1578:	4918      	ldr	r1, [pc, #96]	; (15dc <calculateSD+0x80>)
    157a:	f000 ffaf 	bl	24dc <__aeabi_fdiv>
    strcat(str, decimal);
}

float calculateSD(float data[])
{
    float sum = 0.0, mean, standardDeviation = 0.0;
    157e:	2500      	movs	r5, #0
    for(i=0; i<NUM_OF_CONV; ++i)
    {
        sum += data[i];
    }

    mean = sum/NUM_OF_CONV;
    1580:	9001      	str	r0, [sp, #4]

    for(i=0; i<NUM_OF_CONV; ++i)
        standardDeviation += pow(data[i] - mean, 2);
    1582:	9901      	ldr	r1, [sp, #4]
    1584:	cc01      	ldmia	r4!, {r0}
    1586:	f000 fdeb 	bl	2160 <__aeabi_fsub>
    158a:	f000 fb07 	bl	1b9c <__aeabi_f2d>
    158e:	1c06      	adds	r6, r0, #0
    1590:	1c28      	adds	r0, r5, #0
    1592:	1c0f      	adds	r7, r1, #0
    1594:	f000 fb02 	bl	1b9c <__aeabi_f2d>
    1598:	1c32      	adds	r2, r6, #0
    159a:	9002      	str	r0, [sp, #8]
    159c:	9103      	str	r1, [sp, #12]
    159e:	1c3b      	adds	r3, r7, #0
    15a0:	1c30      	adds	r0, r6, #0
    15a2:	1c39      	adds	r1, r7, #0
    15a4:	f000 fb4e 	bl	1c44 <__aeabi_dmul>
    15a8:	1c0b      	adds	r3, r1, #0
    15aa:	1c02      	adds	r2, r0, #0
    15ac:	9802      	ldr	r0, [sp, #8]
    15ae:	9903      	ldr	r1, [sp, #12]
    15b0:	f000 f996 	bl	18e0 <__adddf3>
    15b4:	f000 fd80 	bl	20b8 <__aeabi_d2f>
        sum += data[i];
    }

    mean = sum/NUM_OF_CONV;

    for(i=0; i<NUM_OF_CONV; ++i)
    15b8:	9b00      	ldr	r3, [sp, #0]
        standardDeviation += pow(data[i] - mean, 2);
    15ba:	1c05      	adds	r5, r0, #0
        sum += data[i];
    }

    mean = sum/NUM_OF_CONV;

    for(i=0; i<NUM_OF_CONV; ++i)
    15bc:	429c      	cmp	r4, r3
    15be:	d1e0      	bne.n	1582 <calculateSD+0x26>
        standardDeviation += pow(data[i] - mean, 2);

    return sqrt(standardDeviation/NUM_OF_CONV);
    15c0:	4906      	ldr	r1, [pc, #24]	; (15dc <calculateSD+0x80>)
    15c2:	f000 ff8b 	bl	24dc <__aeabi_fdiv>
    15c6:	f000 fae9 	bl	1b9c <__aeabi_f2d>
    15ca:	f001 fa47 	bl	2a5c <sqrt>
    15ce:	f000 fd73 	bl	20b8 <__aeabi_d2f>
}
    15d2:	b005      	add	sp, #20
    15d4:	bcf0      	pop	{r4, r5, r6, r7}
    15d6:	bc02      	pop	{r1}
    15d8:	4708      	bx	r1
    15da:	46c0      	nop			; (mov r8, r8)
    15dc:	42480000 	.word	0x42480000

000015e0 <process_array>:

float process_array(char array[])
{
    15e0:	1c03      	adds	r3, r0, #0
    15e2:	b5f0      	push	{r4, r5, r6, r7, lr}
    15e4:	1c04      	adds	r4, r0, #0
    15e6:	1c07      	adds	r7, r0, #0
    15e8:	1c05      	adds	r5, r0, #0
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    15ea:	2600      	movs	r6, #0

    return sqrt(standardDeviation/NUM_OF_CONV);
}

float process_array(char array[])
{
    15ec:	b085      	sub	sp, #20
    15ee:	3332      	adds	r3, #50	; 0x32
    15f0:	9303      	str	r3, [sp, #12]
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    int i, counter = 0;
    
    for (i = 0; i < NUM_OF_CONV; i++)
    {
       median += array[i];
    15f2:	7828      	ldrb	r0, [r5, #0]
    15f4:	f000 fe6a 	bl	22cc <__aeabi_i2f>
    15f8:	1c01      	adds	r1, r0, #0
    15fa:	1c30      	adds	r0, r6, #0
    15fc:	f000 fdb2 	bl	2164 <__addsf3>
float process_array(char array[])
{
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    int i, counter = 0;
    
    for (i = 0; i < NUM_OF_CONV; i++)
    1600:	9b03      	ldr	r3, [sp, #12]
    1602:	3501      	adds	r5, #1
    {
       median += array[i];
    1604:	1c06      	adds	r6, r0, #0
float process_array(char array[])
{
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    int i, counter = 0;
    
    for (i = 0; i < NUM_OF_CONV; i++)
    1606:	429d      	cmp	r5, r3
    1608:	d1f3      	bne.n	15f2 <process_array+0x12>
    {
       median += array[i];
    }
    median = median / NUM_OF_CONV;
    160a:	491d      	ldr	r1, [pc, #116]	; (1680 <process_array+0xa0>)
    160c:	f000 ff66 	bl	24dc <__aeabi_fdiv>
    1610:	9001      	str	r0, [sp, #4]
    
    sd = calculateSD(array);
    1612:	1c20      	adds	r0, r4, #0
    1614:	f7ff ffa2 	bl	155c <calculateSD>
}

float process_array(char array[])
{
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    int i, counter = 0;
    1618:	2400      	movs	r4, #0
    return sqrt(standardDeviation/NUM_OF_CONV);
}

float process_array(char array[])
{
    float result = 0.0, median = 0.0, median2 = 0.0, sd = 0.0;
    161a:	2500      	movs	r5, #0
    {
       median += array[i];
    }
    median = median / NUM_OF_CONV;
    
    sd = calculateSD(array);
    161c:	9002      	str	r0, [sp, #8]
    
    for (i = 0; i < NUM_OF_CONV; i++)
    {
       if (!((array[i] < (median - sd)) || (array[i] > (median + sd))))
    161e:	7838      	ldrb	r0, [r7, #0]
    1620:	f000 fe54 	bl	22cc <__aeabi_i2f>
    1624:	9902      	ldr	r1, [sp, #8]
    1626:	1c06      	adds	r6, r0, #0
    1628:	9801      	ldr	r0, [sp, #4]
    162a:	f000 fd99 	bl	2160 <__aeabi_fsub>
    162e:	1c01      	adds	r1, r0, #0
    1630:	1c30      	adds	r0, r6, #0
    1632:	f001 f83d 	bl	26b0 <__aeabi_fcmplt>
    1636:	2800      	cmp	r0, #0
    1638:	d10f      	bne.n	165a <process_array+0x7a>
    163a:	9902      	ldr	r1, [sp, #8]
    163c:	9801      	ldr	r0, [sp, #4]
    163e:	f000 fd91 	bl	2164 <__addsf3>
    1642:	1c01      	adds	r1, r0, #0
    1644:	1c30      	adds	r0, r6, #0
    1646:	f001 f851 	bl	26ec <__aeabi_fcmpgt>
    164a:	2800      	cmp	r0, #0
    164c:	d105      	bne.n	165a <process_array+0x7a>
       {
           median2 += array[i];
    164e:	1c28      	adds	r0, r5, #0
    1650:	1c31      	adds	r1, r6, #0
    1652:	f000 fd87 	bl	2164 <__addsf3>
           counter++;
    1656:	3401      	adds	r4, #1
    
    for (i = 0; i < NUM_OF_CONV; i++)
    {
       if (!((array[i] < (median - sd)) || (array[i] > (median + sd))))
       {
           median2 += array[i];
    1658:	1c05      	adds	r5, r0, #0
    }
    median = median / NUM_OF_CONV;
    
    sd = calculateSD(array);
    
    for (i = 0; i < NUM_OF_CONV; i++)
    165a:	9b03      	ldr	r3, [sp, #12]
    165c:	3701      	adds	r7, #1
    165e:	429f      	cmp	r7, r3
    1660:	d1dd      	bne.n	161e <process_array+0x3e>
    }
    if (counter != 0)
    {
      return (median2 / counter);
    }else{
        return 0;
    1662:	2000      	movs	r0, #0
       {
           median2 += array[i];
           counter++;
       }
    }
    if (counter != 0)
    1664:	2c00      	cmp	r4, #0
    1666:	d006      	beq.n	1676 <process_array+0x96>
    {
      return (median2 / counter);
    1668:	1c20      	adds	r0, r4, #0
    166a:	f000 fe2f 	bl	22cc <__aeabi_i2f>
    166e:	1c01      	adds	r1, r0, #0
    1670:	1c28      	adds	r0, r5, #0
    1672:	f000 ff33 	bl	24dc <__aeabi_fdiv>
    }else{
        return 0;
    }
    
}
    1676:	b005      	add	sp, #20
    1678:	bcf0      	pop	{r4, r5, r6, r7}
    167a:	bc02      	pop	{r1}
    167c:	4708      	bx	r1
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	42480000 	.word	0x42480000

00001684 <atoi>:
    1684:	220a      	movs	r2, #10
    1686:	2100      	movs	r1, #0
    1688:	f000 b8dc 	b.w	1844 <strtol>

0000168c <_atoi_r>:
    168c:	230a      	movs	r3, #10
    168e:	2200      	movs	r2, #0
    1690:	f000 b852 	b.w	1738 <_strtol_r>

00001694 <__itoa>:
    1694:	1e93      	subs	r3, r2, #2
    1696:	2b22      	cmp	r3, #34	; 0x22
    1698:	b510      	push	{r4, lr}
    169a:	460c      	mov	r4, r1
    169c:	d902      	bls.n	16a4 <__itoa+0x10>
    169e:	2000      	movs	r0, #0
    16a0:	7008      	strb	r0, [r1, #0]
    16a2:	bd10      	pop	{r4, pc}
    16a4:	2a0a      	cmp	r2, #10
    16a6:	d106      	bne.n	16b6 <__itoa+0x22>
    16a8:	2800      	cmp	r0, #0
    16aa:	da04      	bge.n	16b6 <__itoa+0x22>
    16ac:	232d      	movs	r3, #45	; 0x2d
    16ae:	700b      	strb	r3, [r1, #0]
    16b0:	4240      	negs	r0, r0
    16b2:	2101      	movs	r1, #1
    16b4:	e000      	b.n	16b8 <__itoa+0x24>
    16b6:	2100      	movs	r1, #0
    16b8:	4421      	add	r1, r4
    16ba:	f000 f8cd 	bl	1858 <__utoa>
    16be:	4620      	mov	r0, r4
    16c0:	bd10      	pop	{r4, pc}

000016c2 <itoa>:
    16c2:	f7ff bfe7 	b.w	1694 <__itoa>

000016c6 <memset>:
    16c6:	4603      	mov	r3, r0
    16c8:	4402      	add	r2, r0
    16ca:	4293      	cmp	r3, r2
    16cc:	d002      	beq.n	16d4 <memset+0xe>
    16ce:	f803 1b01 	strb.w	r1, [r3], #1
    16d2:	e7fa      	b.n	16ca <memset+0x4>
    16d4:	4770      	bx	lr

000016d6 <strcat>:
    16d6:	4602      	mov	r2, r0
    16d8:	b510      	push	{r4, lr}
    16da:	4613      	mov	r3, r2
    16dc:	781c      	ldrb	r4, [r3, #0]
    16de:	3201      	adds	r2, #1
    16e0:	2c00      	cmp	r4, #0
    16e2:	d1fa      	bne.n	16da <strcat+0x4>
    16e4:	3b01      	subs	r3, #1
    16e6:	f811 2b01 	ldrb.w	r2, [r1], #1
    16ea:	f803 2f01 	strb.w	r2, [r3, #1]!
    16ee:	2a00      	cmp	r2, #0
    16f0:	d1f9      	bne.n	16e6 <strcat+0x10>
    16f2:	bd10      	pop	{r4, pc}

000016f4 <strlen>:
    16f4:	4603      	mov	r3, r0
    16f6:	f813 2b01 	ldrb.w	r2, [r3], #1
    16fa:	2a00      	cmp	r2, #0
    16fc:	d1fb      	bne.n	16f6 <strlen+0x2>
    16fe:	1a18      	subs	r0, r3, r0
    1700:	3801      	subs	r0, #1
    1702:	4770      	bx	lr

00001704 <strncmp>:
    1704:	b570      	push	{r4, r5, r6, lr}
    1706:	b1a2      	cbz	r2, 1732 <strncmp+0x2e>
    1708:	1e45      	subs	r5, r0, #1
    170a:	3901      	subs	r1, #1
    170c:	786b      	ldrb	r3, [r5, #1]
    170e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    1712:	1c6e      	adds	r6, r5, #1
    1714:	42a3      	cmp	r3, r4
    1716:	d106      	bne.n	1726 <strncmp+0x22>
    1718:	f06f 0401 	mvn.w	r4, #1
    171c:	1b64      	subs	r4, r4, r5
    171e:	4414      	add	r4, r2
    1720:	42e0      	cmn	r0, r4
    1722:	d102      	bne.n	172a <strncmp+0x26>
    1724:	461c      	mov	r4, r3
    1726:	1b18      	subs	r0, r3, r4
    1728:	bd70      	pop	{r4, r5, r6, pc}
    172a:	4635      	mov	r5, r6
    172c:	2b00      	cmp	r3, #0
    172e:	d1ed      	bne.n	170c <strncmp+0x8>
    1730:	e7f8      	b.n	1724 <strncmp+0x20>
    1732:	4610      	mov	r0, r2
    1734:	bd70      	pop	{r4, r5, r6, pc}
	...

00001738 <_strtol_r>:
    1738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    173c:	460f      	mov	r7, r1
    173e:	4c40      	ldr	r4, [pc, #256]	; (1840 <_strtol_r+0x108>)
    1740:	f8d4 9000 	ldr.w	r9, [r4]
    1744:	463d      	mov	r5, r7
    1746:	f815 eb01 	ldrb.w	lr, [r5], #1
    174a:	eb09 040e 	add.w	r4, r9, lr
    174e:	7866      	ldrb	r6, [r4, #1]
    1750:	f006 0408 	and.w	r4, r6, #8
    1754:	f004 06ff 	and.w	r6, r4, #255	; 0xff
    1758:	b10c      	cbz	r4, 175e <_strtol_r+0x26>
    175a:	462f      	mov	r7, r5
    175c:	e7f2      	b.n	1744 <_strtol_r+0xc>
    175e:	4674      	mov	r4, lr
    1760:	2c2d      	cmp	r4, #45	; 0x2d
    1762:	d103      	bne.n	176c <_strtol_r+0x34>
    1764:	1cbd      	adds	r5, r7, #2
    1766:	787c      	ldrb	r4, [r7, #1]
    1768:	2601      	movs	r6, #1
    176a:	e003      	b.n	1774 <_strtol_r+0x3c>
    176c:	2c2b      	cmp	r4, #43	; 0x2b
    176e:	bf04      	itt	eq
    1770:	787c      	ldrbeq	r4, [r7, #1]
    1772:	1cbd      	addeq	r5, r7, #2
    1774:	b113      	cbz	r3, 177c <_strtol_r+0x44>
    1776:	2b10      	cmp	r3, #16
    1778:	d10a      	bne.n	1790 <_strtol_r+0x58>
    177a:	e05a      	b.n	1832 <_strtol_r+0xfa>
    177c:	2c30      	cmp	r4, #48	; 0x30
    177e:	d156      	bne.n	182e <_strtol_r+0xf6>
    1780:	782c      	ldrb	r4, [r5, #0]
    1782:	f004 04df 	and.w	r4, r4, #223	; 0xdf
    1786:	2c58      	cmp	r4, #88	; 0x58
    1788:	d14c      	bne.n	1824 <_strtol_r+0xec>
    178a:	786c      	ldrb	r4, [r5, #1]
    178c:	2310      	movs	r3, #16
    178e:	3502      	adds	r5, #2
    1790:	2e00      	cmp	r6, #0
    1792:	bf14      	ite	ne
    1794:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
    1798:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
    179c:	fbb8 faf3 	udiv	sl, r8, r3
    17a0:	2700      	movs	r7, #0
    17a2:	46be      	mov	lr, r7
    17a4:	fb03 881a 	mls	r8, r3, sl, r8
    17a8:	eb09 0c04 	add.w	ip, r9, r4
    17ac:	f89c c001 	ldrb.w	ip, [ip, #1]
    17b0:	f01c 0f04 	tst.w	ip, #4
    17b4:	d001      	beq.n	17ba <_strtol_r+0x82>
    17b6:	3c30      	subs	r4, #48	; 0x30
    17b8:	e00b      	b.n	17d2 <_strtol_r+0x9a>
    17ba:	f01c 0c03 	ands.w	ip, ip, #3
    17be:	d01b      	beq.n	17f8 <_strtol_r+0xc0>
    17c0:	f1bc 0f01 	cmp.w	ip, #1
    17c4:	bf0c      	ite	eq
    17c6:	f04f 0c37 	moveq.w	ip, #55	; 0x37
    17ca:	f04f 0c57 	movne.w	ip, #87	; 0x57
    17ce:	ebcc 0404 	rsb	r4, ip, r4
    17d2:	429c      	cmp	r4, r3
    17d4:	da10      	bge.n	17f8 <_strtol_r+0xc0>
    17d6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
    17da:	d00a      	beq.n	17f2 <_strtol_r+0xba>
    17dc:	45d6      	cmp	lr, sl
    17de:	d806      	bhi.n	17ee <_strtol_r+0xb6>
    17e0:	d101      	bne.n	17e6 <_strtol_r+0xae>
    17e2:	4544      	cmp	r4, r8
    17e4:	dc03      	bgt.n	17ee <_strtol_r+0xb6>
    17e6:	fb03 4e0e 	mla	lr, r3, lr, r4
    17ea:	2701      	movs	r7, #1
    17ec:	e001      	b.n	17f2 <_strtol_r+0xba>
    17ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
    17f2:	f815 4b01 	ldrb.w	r4, [r5], #1
    17f6:	e7d7      	b.n	17a8 <_strtol_r+0x70>
    17f8:	1c7c      	adds	r4, r7, #1
    17fa:	4673      	mov	r3, lr
    17fc:	d10a      	bne.n	1814 <_strtol_r+0xdc>
    17fe:	2e00      	cmp	r6, #0
    1800:	f04f 0122 	mov.w	r1, #34	; 0x22
    1804:	bf14      	ite	ne
    1806:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
    180a:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
    180e:	6001      	str	r1, [r0, #0]
    1810:	b92a      	cbnz	r2, 181e <_strtol_r+0xe6>
    1812:	e011      	b.n	1838 <_strtol_r+0x100>
    1814:	b10e      	cbz	r6, 181a <_strtol_r+0xe2>
    1816:	f1ce 0300 	rsb	r3, lr, #0
    181a:	b16a      	cbz	r2, 1838 <_strtol_r+0x100>
    181c:	b107      	cbz	r7, 1820 <_strtol_r+0xe8>
    181e:	1e69      	subs	r1, r5, #1
    1820:	6011      	str	r1, [r2, #0]
    1822:	e009      	b.n	1838 <_strtol_r+0x100>
    1824:	2430      	movs	r4, #48	; 0x30
    1826:	2b00      	cmp	r3, #0
    1828:	d1b2      	bne.n	1790 <_strtol_r+0x58>
    182a:	2308      	movs	r3, #8
    182c:	e7b0      	b.n	1790 <_strtol_r+0x58>
    182e:	230a      	movs	r3, #10
    1830:	e7ae      	b.n	1790 <_strtol_r+0x58>
    1832:	2c30      	cmp	r4, #48	; 0x30
    1834:	d1ac      	bne.n	1790 <_strtol_r+0x58>
    1836:	e7a3      	b.n	1780 <_strtol_r+0x48>
    1838:	4618      	mov	r0, r3
    183a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    183e:	bf00      	nop
    1840:	40000004 	.word	0x40000004

00001844 <strtol>:
    1844:	4613      	mov	r3, r2
    1846:	460a      	mov	r2, r1
    1848:	4601      	mov	r1, r0
    184a:	4802      	ldr	r0, [pc, #8]	; (1854 <strtol+0x10>)
    184c:	6800      	ldr	r0, [r0, #0]
    184e:	f7ff bf73 	b.w	1738 <_strtol_r>
    1852:	bf00      	nop
    1854:	40000008 	.word	0x40000008

00001858 <__utoa>:
    1858:	b5f0      	push	{r4, r5, r6, r7, lr}
    185a:	b08b      	sub	sp, #44	; 0x2c
    185c:	4603      	mov	r3, r0
    185e:	460f      	mov	r7, r1
    1860:	466d      	mov	r5, sp
    1862:	4c1a      	ldr	r4, [pc, #104]	; (18cc <__utoa+0x74>)
    1864:	f104 0e20 	add.w	lr, r4, #32
    1868:	462e      	mov	r6, r5
    186a:	6820      	ldr	r0, [r4, #0]
    186c:	6861      	ldr	r1, [r4, #4]
    186e:	3408      	adds	r4, #8
    1870:	c603      	stmia	r6!, {r0, r1}
    1872:	4574      	cmp	r4, lr
    1874:	4635      	mov	r5, r6
    1876:	d1f7      	bne.n	1868 <__utoa+0x10>
    1878:	7921      	ldrb	r1, [r4, #4]
    187a:	6820      	ldr	r0, [r4, #0]
    187c:	7131      	strb	r1, [r6, #4]
    187e:	1e91      	subs	r1, r2, #2
    1880:	2922      	cmp	r1, #34	; 0x22
    1882:	6030      	str	r0, [r6, #0]
    1884:	f04f 0000 	mov.w	r0, #0
    1888:	d901      	bls.n	188e <__utoa+0x36>
    188a:	7038      	strb	r0, [r7, #0]
    188c:	e01c      	b.n	18c8 <__utoa+0x70>
    188e:	1e7d      	subs	r5, r7, #1
    1890:	fbb3 f4f2 	udiv	r4, r3, r2
    1894:	fb02 3314 	mls	r3, r2, r4, r3
    1898:	ae0a      	add	r6, sp, #40	; 0x28
    189a:	4433      	add	r3, r6
    189c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
    18a0:	1c41      	adds	r1, r0, #1
    18a2:	f805 3f01 	strb.w	r3, [r5, #1]!
    18a6:	4623      	mov	r3, r4
    18a8:	b10c      	cbz	r4, 18ae <__utoa+0x56>
    18aa:	4608      	mov	r0, r1
    18ac:	e7f0      	b.n	1890 <__utoa+0x38>
    18ae:	547c      	strb	r4, [r7, r1]
    18b0:	183a      	adds	r2, r7, r0
    18b2:	1ac1      	subs	r1, r0, r3
    18b4:	428b      	cmp	r3, r1
    18b6:	da06      	bge.n	18c6 <__utoa+0x6e>
    18b8:	5cf9      	ldrb	r1, [r7, r3]
    18ba:	7814      	ldrb	r4, [r2, #0]
    18bc:	54fc      	strb	r4, [r7, r3]
    18be:	f802 1901 	strb.w	r1, [r2], #-1
    18c2:	3301      	adds	r3, #1
    18c4:	e7f5      	b.n	18b2 <__utoa+0x5a>
    18c6:	4638      	mov	r0, r7
    18c8:	b00b      	add	sp, #44	; 0x2c
    18ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    18cc:	00003019 	.word	0x00003019

000018d0 <utoa>:
    18d0:	f7ff bfc2 	b.w	1858 <__utoa>

000018d4 <__aeabi_drsub>:
    18d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    18d8:	e002      	b.n	18e0 <__adddf3>
    18da:	bf00      	nop

000018dc <__aeabi_dsub>:
    18dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000018e0 <__adddf3>:
    18e0:	b530      	push	{r4, r5, lr}
    18e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    18e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    18ea:	ea94 0f05 	teq	r4, r5
    18ee:	bf08      	it	eq
    18f0:	ea90 0f02 	teqeq	r0, r2
    18f4:	bf1f      	itttt	ne
    18f6:	ea54 0c00 	orrsne.w	ip, r4, r0
    18fa:	ea55 0c02 	orrsne.w	ip, r5, r2
    18fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    1902:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1906:	f000 80e2 	beq.w	1ace <__adddf3+0x1ee>
    190a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    190e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    1912:	bfb8      	it	lt
    1914:	426d      	neglt	r5, r5
    1916:	dd0c      	ble.n	1932 <__adddf3+0x52>
    1918:	442c      	add	r4, r5
    191a:	ea80 0202 	eor.w	r2, r0, r2
    191e:	ea81 0303 	eor.w	r3, r1, r3
    1922:	ea82 0000 	eor.w	r0, r2, r0
    1926:	ea83 0101 	eor.w	r1, r3, r1
    192a:	ea80 0202 	eor.w	r2, r0, r2
    192e:	ea81 0303 	eor.w	r3, r1, r3
    1932:	2d36      	cmp	r5, #54	; 0x36
    1934:	bf88      	it	hi
    1936:	bd30      	pophi	{r4, r5, pc}
    1938:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    193c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1940:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    1944:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    1948:	d002      	beq.n	1950 <__adddf3+0x70>
    194a:	4240      	negs	r0, r0
    194c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1950:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    1954:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1958:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    195c:	d002      	beq.n	1964 <__adddf3+0x84>
    195e:	4252      	negs	r2, r2
    1960:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1964:	ea94 0f05 	teq	r4, r5
    1968:	f000 80a7 	beq.w	1aba <__adddf3+0x1da>
    196c:	f1a4 0401 	sub.w	r4, r4, #1
    1970:	f1d5 0e20 	rsbs	lr, r5, #32
    1974:	db0d      	blt.n	1992 <__adddf3+0xb2>
    1976:	fa02 fc0e 	lsl.w	ip, r2, lr
    197a:	fa22 f205 	lsr.w	r2, r2, r5
    197e:	1880      	adds	r0, r0, r2
    1980:	f141 0100 	adc.w	r1, r1, #0
    1984:	fa03 f20e 	lsl.w	r2, r3, lr
    1988:	1880      	adds	r0, r0, r2
    198a:	fa43 f305 	asr.w	r3, r3, r5
    198e:	4159      	adcs	r1, r3
    1990:	e00e      	b.n	19b0 <__adddf3+0xd0>
    1992:	f1a5 0520 	sub.w	r5, r5, #32
    1996:	f10e 0e20 	add.w	lr, lr, #32
    199a:	2a01      	cmp	r2, #1
    199c:	fa03 fc0e 	lsl.w	ip, r3, lr
    19a0:	bf28      	it	cs
    19a2:	f04c 0c02 	orrcs.w	ip, ip, #2
    19a6:	fa43 f305 	asr.w	r3, r3, r5
    19aa:	18c0      	adds	r0, r0, r3
    19ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    19b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    19b4:	d507      	bpl.n	19c6 <__adddf3+0xe6>
    19b6:	f04f 0e00 	mov.w	lr, #0
    19ba:	f1dc 0c00 	rsbs	ip, ip, #0
    19be:	eb7e 0000 	sbcs.w	r0, lr, r0
    19c2:	eb6e 0101 	sbc.w	r1, lr, r1
    19c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    19ca:	d31b      	bcc.n	1a04 <__adddf3+0x124>
    19cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    19d0:	d30c      	bcc.n	19ec <__adddf3+0x10c>
    19d2:	0849      	lsrs	r1, r1, #1
    19d4:	ea5f 0030 	movs.w	r0, r0, rrx
    19d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
    19dc:	f104 0401 	add.w	r4, r4, #1
    19e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    19e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    19e8:	f080 809a 	bcs.w	1b20 <__adddf3+0x240>
    19ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    19f0:	bf08      	it	eq
    19f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    19f6:	f150 0000 	adcs.w	r0, r0, #0
    19fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    19fe:	ea41 0105 	orr.w	r1, r1, r5
    1a02:	bd30      	pop	{r4, r5, pc}
    1a04:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    1a08:	4140      	adcs	r0, r0
    1a0a:	eb41 0101 	adc.w	r1, r1, r1
    1a0e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1a12:	f1a4 0401 	sub.w	r4, r4, #1
    1a16:	d1e9      	bne.n	19ec <__adddf3+0x10c>
    1a18:	f091 0f00 	teq	r1, #0
    1a1c:	bf04      	itt	eq
    1a1e:	4601      	moveq	r1, r0
    1a20:	2000      	moveq	r0, #0
    1a22:	fab1 f381 	clz	r3, r1
    1a26:	bf08      	it	eq
    1a28:	3320      	addeq	r3, #32
    1a2a:	f1a3 030b 	sub.w	r3, r3, #11
    1a2e:	f1b3 0220 	subs.w	r2, r3, #32
    1a32:	da0c      	bge.n	1a4e <__adddf3+0x16e>
    1a34:	320c      	adds	r2, #12
    1a36:	dd08      	ble.n	1a4a <__adddf3+0x16a>
    1a38:	f102 0c14 	add.w	ip, r2, #20
    1a3c:	f1c2 020c 	rsb	r2, r2, #12
    1a40:	fa01 f00c 	lsl.w	r0, r1, ip
    1a44:	fa21 f102 	lsr.w	r1, r1, r2
    1a48:	e00c      	b.n	1a64 <__adddf3+0x184>
    1a4a:	f102 0214 	add.w	r2, r2, #20
    1a4e:	bfd8      	it	le
    1a50:	f1c2 0c20 	rsble	ip, r2, #32
    1a54:	fa01 f102 	lsl.w	r1, r1, r2
    1a58:	fa20 fc0c 	lsr.w	ip, r0, ip
    1a5c:	bfdc      	itt	le
    1a5e:	ea41 010c 	orrle.w	r1, r1, ip
    1a62:	4090      	lslle	r0, r2
    1a64:	1ae4      	subs	r4, r4, r3
    1a66:	bfa2      	ittt	ge
    1a68:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    1a6c:	4329      	orrge	r1, r5
    1a6e:	bd30      	popge	{r4, r5, pc}
    1a70:	ea6f 0404 	mvn.w	r4, r4
    1a74:	3c1f      	subs	r4, #31
    1a76:	da1c      	bge.n	1ab2 <__adddf3+0x1d2>
    1a78:	340c      	adds	r4, #12
    1a7a:	dc0e      	bgt.n	1a9a <__adddf3+0x1ba>
    1a7c:	f104 0414 	add.w	r4, r4, #20
    1a80:	f1c4 0220 	rsb	r2, r4, #32
    1a84:	fa20 f004 	lsr.w	r0, r0, r4
    1a88:	fa01 f302 	lsl.w	r3, r1, r2
    1a8c:	ea40 0003 	orr.w	r0, r0, r3
    1a90:	fa21 f304 	lsr.w	r3, r1, r4
    1a94:	ea45 0103 	orr.w	r1, r5, r3
    1a98:	bd30      	pop	{r4, r5, pc}
    1a9a:	f1c4 040c 	rsb	r4, r4, #12
    1a9e:	f1c4 0220 	rsb	r2, r4, #32
    1aa2:	fa20 f002 	lsr.w	r0, r0, r2
    1aa6:	fa01 f304 	lsl.w	r3, r1, r4
    1aaa:	ea40 0003 	orr.w	r0, r0, r3
    1aae:	4629      	mov	r1, r5
    1ab0:	bd30      	pop	{r4, r5, pc}
    1ab2:	fa21 f004 	lsr.w	r0, r1, r4
    1ab6:	4629      	mov	r1, r5
    1ab8:	bd30      	pop	{r4, r5, pc}
    1aba:	f094 0f00 	teq	r4, #0
    1abe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    1ac2:	bf06      	itte	eq
    1ac4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    1ac8:	3401      	addeq	r4, #1
    1aca:	3d01      	subne	r5, #1
    1acc:	e74e      	b.n	196c <__adddf3+0x8c>
    1ace:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    1ad2:	bf18      	it	ne
    1ad4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    1ad8:	d029      	beq.n	1b2e <__adddf3+0x24e>
    1ada:	ea94 0f05 	teq	r4, r5
    1ade:	bf08      	it	eq
    1ae0:	ea90 0f02 	teqeq	r0, r2
    1ae4:	d005      	beq.n	1af2 <__adddf3+0x212>
    1ae6:	ea54 0c00 	orrs.w	ip, r4, r0
    1aea:	bf04      	itt	eq
    1aec:	4619      	moveq	r1, r3
    1aee:	4610      	moveq	r0, r2
    1af0:	bd30      	pop	{r4, r5, pc}
    1af2:	ea91 0f03 	teq	r1, r3
    1af6:	bf1e      	ittt	ne
    1af8:	2100      	movne	r1, #0
    1afa:	2000      	movne	r0, #0
    1afc:	bd30      	popne	{r4, r5, pc}
    1afe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    1b02:	d105      	bne.n	1b10 <__adddf3+0x230>
    1b04:	0040      	lsls	r0, r0, #1
    1b06:	4149      	adcs	r1, r1
    1b08:	bf28      	it	cs
    1b0a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    1b0e:	bd30      	pop	{r4, r5, pc}
    1b10:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    1b14:	bf3c      	itt	cc
    1b16:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    1b1a:	bd30      	popcc	{r4, r5, pc}
    1b1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1b20:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    1b24:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1b28:	f04f 0000 	mov.w	r0, #0
    1b2c:	bd30      	pop	{r4, r5, pc}
    1b2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    1b32:	bf1a      	itte	ne
    1b34:	4619      	movne	r1, r3
    1b36:	4610      	movne	r0, r2
    1b38:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    1b3c:	bf1c      	itt	ne
    1b3e:	460b      	movne	r3, r1
    1b40:	4602      	movne	r2, r0
    1b42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    1b46:	bf06      	itte	eq
    1b48:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    1b4c:	ea91 0f03 	teqeq	r1, r3
    1b50:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    1b54:	bd30      	pop	{r4, r5, pc}
    1b56:	bf00      	nop

00001b58 <__aeabi_ui2d>:
    1b58:	f090 0f00 	teq	r0, #0
    1b5c:	bf04      	itt	eq
    1b5e:	2100      	moveq	r1, #0
    1b60:	4770      	bxeq	lr
    1b62:	b530      	push	{r4, r5, lr}
    1b64:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1b68:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1b6c:	f04f 0500 	mov.w	r5, #0
    1b70:	f04f 0100 	mov.w	r1, #0
    1b74:	e750      	b.n	1a18 <__adddf3+0x138>
    1b76:	bf00      	nop

00001b78 <__aeabi_i2d>:
    1b78:	f090 0f00 	teq	r0, #0
    1b7c:	bf04      	itt	eq
    1b7e:	2100      	moveq	r1, #0
    1b80:	4770      	bxeq	lr
    1b82:	b530      	push	{r4, r5, lr}
    1b84:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1b88:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1b8c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    1b90:	bf48      	it	mi
    1b92:	4240      	negmi	r0, r0
    1b94:	f04f 0100 	mov.w	r1, #0
    1b98:	e73e      	b.n	1a18 <__adddf3+0x138>
    1b9a:	bf00      	nop

00001b9c <__aeabi_f2d>:
    1b9c:	0042      	lsls	r2, r0, #1
    1b9e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    1ba2:	ea4f 0131 	mov.w	r1, r1, rrx
    1ba6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    1baa:	bf1f      	itttt	ne
    1bac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    1bb0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1bb4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    1bb8:	4770      	bxne	lr
    1bba:	f092 0f00 	teq	r2, #0
    1bbe:	bf14      	ite	ne
    1bc0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    1bc4:	4770      	bxeq	lr
    1bc6:	b530      	push	{r4, r5, lr}
    1bc8:	f44f 7460 	mov.w	r4, #896	; 0x380
    1bcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    1bd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1bd4:	e720      	b.n	1a18 <__adddf3+0x138>
    1bd6:	bf00      	nop

00001bd8 <__aeabi_ul2d>:
    1bd8:	ea50 0201 	orrs.w	r2, r0, r1
    1bdc:	bf08      	it	eq
    1bde:	4770      	bxeq	lr
    1be0:	b530      	push	{r4, r5, lr}
    1be2:	f04f 0500 	mov.w	r5, #0
    1be6:	e00a      	b.n	1bfe <__aeabi_l2d+0x16>

00001be8 <__aeabi_l2d>:
    1be8:	ea50 0201 	orrs.w	r2, r0, r1
    1bec:	bf08      	it	eq
    1bee:	4770      	bxeq	lr
    1bf0:	b530      	push	{r4, r5, lr}
    1bf2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    1bf6:	d502      	bpl.n	1bfe <__aeabi_l2d+0x16>
    1bf8:	4240      	negs	r0, r0
    1bfa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1bfe:	f44f 6480 	mov.w	r4, #1024	; 0x400
    1c02:	f104 0432 	add.w	r4, r4, #50	; 0x32
    1c06:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    1c0a:	f43f aedc 	beq.w	19c6 <__adddf3+0xe6>
    1c0e:	f04f 0203 	mov.w	r2, #3
    1c12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1c16:	bf18      	it	ne
    1c18:	3203      	addne	r2, #3
    1c1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    1c1e:	bf18      	it	ne
    1c20:	3203      	addne	r2, #3
    1c22:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    1c26:	f1c2 0320 	rsb	r3, r2, #32
    1c2a:	fa00 fc03 	lsl.w	ip, r0, r3
    1c2e:	fa20 f002 	lsr.w	r0, r0, r2
    1c32:	fa01 fe03 	lsl.w	lr, r1, r3
    1c36:	ea40 000e 	orr.w	r0, r0, lr
    1c3a:	fa21 f102 	lsr.w	r1, r1, r2
    1c3e:	4414      	add	r4, r2
    1c40:	e6c1      	b.n	19c6 <__adddf3+0xe6>
    1c42:	bf00      	nop

00001c44 <__aeabi_dmul>:
    1c44:	b570      	push	{r4, r5, r6, lr}
    1c46:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1c4a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1c4e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1c52:	bf1d      	ittte	ne
    1c54:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1c58:	ea94 0f0c 	teqne	r4, ip
    1c5c:	ea95 0f0c 	teqne	r5, ip
    1c60:	f000 f8de 	bleq	1e20 <__aeabi_dmul+0x1dc>
    1c64:	442c      	add	r4, r5
    1c66:	ea81 0603 	eor.w	r6, r1, r3
    1c6a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    1c6e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    1c72:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    1c76:	bf18      	it	ne
    1c78:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    1c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1c80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    1c84:	d038      	beq.n	1cf8 <__aeabi_dmul+0xb4>
    1c86:	fba0 ce02 	umull	ip, lr, r0, r2
    1c8a:	f04f 0500 	mov.w	r5, #0
    1c8e:	fbe1 e502 	umlal	lr, r5, r1, r2
    1c92:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    1c96:	fbe0 e503 	umlal	lr, r5, r0, r3
    1c9a:	f04f 0600 	mov.w	r6, #0
    1c9e:	fbe1 5603 	umlal	r5, r6, r1, r3
    1ca2:	f09c 0f00 	teq	ip, #0
    1ca6:	bf18      	it	ne
    1ca8:	f04e 0e01 	orrne.w	lr, lr, #1
    1cac:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    1cb0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    1cb4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    1cb8:	d204      	bcs.n	1cc4 <__aeabi_dmul+0x80>
    1cba:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    1cbe:	416d      	adcs	r5, r5
    1cc0:	eb46 0606 	adc.w	r6, r6, r6
    1cc4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    1cc8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    1ccc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    1cd0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    1cd4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    1cd8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1cdc:	bf88      	it	hi
    1cde:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1ce2:	d81e      	bhi.n	1d22 <__aeabi_dmul+0xde>
    1ce4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    1ce8:	bf08      	it	eq
    1cea:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    1cee:	f150 0000 	adcs.w	r0, r0, #0
    1cf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1cf6:	bd70      	pop	{r4, r5, r6, pc}
    1cf8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    1cfc:	ea46 0101 	orr.w	r1, r6, r1
    1d00:	ea40 0002 	orr.w	r0, r0, r2
    1d04:	ea81 0103 	eor.w	r1, r1, r3
    1d08:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    1d0c:	bfc2      	ittt	gt
    1d0e:	ebd4 050c 	rsbsgt	r5, r4, ip
    1d12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1d16:	bd70      	popgt	{r4, r5, r6, pc}
    1d18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1d1c:	f04f 0e00 	mov.w	lr, #0
    1d20:	3c01      	subs	r4, #1
    1d22:	f300 80ab 	bgt.w	1e7c <__aeabi_dmul+0x238>
    1d26:	f114 0f36 	cmn.w	r4, #54	; 0x36
    1d2a:	bfde      	ittt	le
    1d2c:	2000      	movle	r0, #0
    1d2e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    1d32:	bd70      	pople	{r4, r5, r6, pc}
    1d34:	f1c4 0400 	rsb	r4, r4, #0
    1d38:	3c20      	subs	r4, #32
    1d3a:	da35      	bge.n	1da8 <__aeabi_dmul+0x164>
    1d3c:	340c      	adds	r4, #12
    1d3e:	dc1b      	bgt.n	1d78 <__aeabi_dmul+0x134>
    1d40:	f104 0414 	add.w	r4, r4, #20
    1d44:	f1c4 0520 	rsb	r5, r4, #32
    1d48:	fa00 f305 	lsl.w	r3, r0, r5
    1d4c:	fa20 f004 	lsr.w	r0, r0, r4
    1d50:	fa01 f205 	lsl.w	r2, r1, r5
    1d54:	ea40 0002 	orr.w	r0, r0, r2
    1d58:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    1d5c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    1d60:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1d64:	fa21 f604 	lsr.w	r6, r1, r4
    1d68:	eb42 0106 	adc.w	r1, r2, r6
    1d6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1d70:	bf08      	it	eq
    1d72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1d76:	bd70      	pop	{r4, r5, r6, pc}
    1d78:	f1c4 040c 	rsb	r4, r4, #12
    1d7c:	f1c4 0520 	rsb	r5, r4, #32
    1d80:	fa00 f304 	lsl.w	r3, r0, r4
    1d84:	fa20 f005 	lsr.w	r0, r0, r5
    1d88:	fa01 f204 	lsl.w	r2, r1, r4
    1d8c:	ea40 0002 	orr.w	r0, r0, r2
    1d90:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1d94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    1d98:	f141 0100 	adc.w	r1, r1, #0
    1d9c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1da0:	bf08      	it	eq
    1da2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1da6:	bd70      	pop	{r4, r5, r6, pc}
    1da8:	f1c4 0520 	rsb	r5, r4, #32
    1dac:	fa00 f205 	lsl.w	r2, r0, r5
    1db0:	ea4e 0e02 	orr.w	lr, lr, r2
    1db4:	fa20 f304 	lsr.w	r3, r0, r4
    1db8:	fa01 f205 	lsl.w	r2, r1, r5
    1dbc:	ea43 0302 	orr.w	r3, r3, r2
    1dc0:	fa21 f004 	lsr.w	r0, r1, r4
    1dc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1dc8:	fa21 f204 	lsr.w	r2, r1, r4
    1dcc:	ea20 0002 	bic.w	r0, r0, r2
    1dd0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    1dd4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    1dd8:	bf08      	it	eq
    1dda:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    1dde:	bd70      	pop	{r4, r5, r6, pc}
    1de0:	f094 0f00 	teq	r4, #0
    1de4:	d10f      	bne.n	1e06 <__aeabi_dmul+0x1c2>
    1de6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    1dea:	0040      	lsls	r0, r0, #1
    1dec:	eb41 0101 	adc.w	r1, r1, r1
    1df0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1df4:	bf08      	it	eq
    1df6:	3c01      	subeq	r4, #1
    1df8:	d0f7      	beq.n	1dea <__aeabi_dmul+0x1a6>
    1dfa:	ea41 0106 	orr.w	r1, r1, r6
    1dfe:	f095 0f00 	teq	r5, #0
    1e02:	bf18      	it	ne
    1e04:	4770      	bxne	lr
    1e06:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    1e0a:	0052      	lsls	r2, r2, #1
    1e0c:	eb43 0303 	adc.w	r3, r3, r3
    1e10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    1e14:	bf08      	it	eq
    1e16:	3d01      	subeq	r5, #1
    1e18:	d0f7      	beq.n	1e0a <__aeabi_dmul+0x1c6>
    1e1a:	ea43 0306 	orr.w	r3, r3, r6
    1e1e:	4770      	bx	lr
    1e20:	ea94 0f0c 	teq	r4, ip
    1e24:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    1e28:	bf18      	it	ne
    1e2a:	ea95 0f0c 	teqne	r5, ip
    1e2e:	d00c      	beq.n	1e4a <__aeabi_dmul+0x206>
    1e30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1e34:	bf18      	it	ne
    1e36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1e3a:	d1d1      	bne.n	1de0 <__aeabi_dmul+0x19c>
    1e3c:	ea81 0103 	eor.w	r1, r1, r3
    1e40:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1e44:	f04f 0000 	mov.w	r0, #0
    1e48:	bd70      	pop	{r4, r5, r6, pc}
    1e4a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    1e4e:	bf06      	itte	eq
    1e50:	4610      	moveq	r0, r2
    1e52:	4619      	moveq	r1, r3
    1e54:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    1e58:	d019      	beq.n	1e8e <__aeabi_dmul+0x24a>
    1e5a:	ea94 0f0c 	teq	r4, ip
    1e5e:	d102      	bne.n	1e66 <__aeabi_dmul+0x222>
    1e60:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    1e64:	d113      	bne.n	1e8e <__aeabi_dmul+0x24a>
    1e66:	ea95 0f0c 	teq	r5, ip
    1e6a:	d105      	bne.n	1e78 <__aeabi_dmul+0x234>
    1e6c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    1e70:	bf1c      	itt	ne
    1e72:	4610      	movne	r0, r2
    1e74:	4619      	movne	r1, r3
    1e76:	d10a      	bne.n	1e8e <__aeabi_dmul+0x24a>
    1e78:	ea81 0103 	eor.w	r1, r1, r3
    1e7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    1e80:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1e84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    1e88:	f04f 0000 	mov.w	r0, #0
    1e8c:	bd70      	pop	{r4, r5, r6, pc}
    1e8e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    1e92:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    1e96:	bd70      	pop	{r4, r5, r6, pc}

00001e98 <__aeabi_ddiv>:
    1e98:	b570      	push	{r4, r5, r6, lr}
    1e9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    1e9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    1ea2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    1ea6:	bf1d      	ittte	ne
    1ea8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    1eac:	ea94 0f0c 	teqne	r4, ip
    1eb0:	ea95 0f0c 	teqne	r5, ip
    1eb4:	f000 f8a7 	bleq	2006 <__aeabi_ddiv+0x16e>
    1eb8:	eba4 0405 	sub.w	r4, r4, r5
    1ebc:	ea81 0e03 	eor.w	lr, r1, r3
    1ec0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    1ec4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    1ec8:	f000 8088 	beq.w	1fdc <__aeabi_ddiv+0x144>
    1ecc:	ea4f 3303 	mov.w	r3, r3, lsl #12
    1ed0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    1ed4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    1ed8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    1edc:	ea4f 2202 	mov.w	r2, r2, lsl #8
    1ee0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    1ee4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    1ee8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    1eec:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    1ef0:	429d      	cmp	r5, r3
    1ef2:	bf08      	it	eq
    1ef4:	4296      	cmpeq	r6, r2
    1ef6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    1efa:	f504 7440 	add.w	r4, r4, #768	; 0x300
    1efe:	d202      	bcs.n	1f06 <__aeabi_ddiv+0x6e>
    1f00:	085b      	lsrs	r3, r3, #1
    1f02:	ea4f 0232 	mov.w	r2, r2, rrx
    1f06:	1ab6      	subs	r6, r6, r2
    1f08:	eb65 0503 	sbc.w	r5, r5, r3
    1f0c:	085b      	lsrs	r3, r3, #1
    1f0e:	ea4f 0232 	mov.w	r2, r2, rrx
    1f12:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    1f16:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    1f1a:	ebb6 0e02 	subs.w	lr, r6, r2
    1f1e:	eb75 0e03 	sbcs.w	lr, r5, r3
    1f22:	bf22      	ittt	cs
    1f24:	1ab6      	subcs	r6, r6, r2
    1f26:	4675      	movcs	r5, lr
    1f28:	ea40 000c 	orrcs.w	r0, r0, ip
    1f2c:	085b      	lsrs	r3, r3, #1
    1f2e:	ea4f 0232 	mov.w	r2, r2, rrx
    1f32:	ebb6 0e02 	subs.w	lr, r6, r2
    1f36:	eb75 0e03 	sbcs.w	lr, r5, r3
    1f3a:	bf22      	ittt	cs
    1f3c:	1ab6      	subcs	r6, r6, r2
    1f3e:	4675      	movcs	r5, lr
    1f40:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    1f44:	085b      	lsrs	r3, r3, #1
    1f46:	ea4f 0232 	mov.w	r2, r2, rrx
    1f4a:	ebb6 0e02 	subs.w	lr, r6, r2
    1f4e:	eb75 0e03 	sbcs.w	lr, r5, r3
    1f52:	bf22      	ittt	cs
    1f54:	1ab6      	subcs	r6, r6, r2
    1f56:	4675      	movcs	r5, lr
    1f58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    1f5c:	085b      	lsrs	r3, r3, #1
    1f5e:	ea4f 0232 	mov.w	r2, r2, rrx
    1f62:	ebb6 0e02 	subs.w	lr, r6, r2
    1f66:	eb75 0e03 	sbcs.w	lr, r5, r3
    1f6a:	bf22      	ittt	cs
    1f6c:	1ab6      	subcs	r6, r6, r2
    1f6e:	4675      	movcs	r5, lr
    1f70:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    1f74:	ea55 0e06 	orrs.w	lr, r5, r6
    1f78:	d018      	beq.n	1fac <__aeabi_ddiv+0x114>
    1f7a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    1f7e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    1f82:	ea4f 1606 	mov.w	r6, r6, lsl #4
    1f86:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1f8a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    1f8e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    1f92:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    1f96:	d1c0      	bne.n	1f1a <__aeabi_ddiv+0x82>
    1f98:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1f9c:	d10b      	bne.n	1fb6 <__aeabi_ddiv+0x11e>
    1f9e:	ea41 0100 	orr.w	r1, r1, r0
    1fa2:	f04f 0000 	mov.w	r0, #0
    1fa6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    1faa:	e7b6      	b.n	1f1a <__aeabi_ddiv+0x82>
    1fac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    1fb0:	bf04      	itt	eq
    1fb2:	4301      	orreq	r1, r0
    1fb4:	2000      	moveq	r0, #0
    1fb6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    1fba:	bf88      	it	hi
    1fbc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    1fc0:	f63f aeaf 	bhi.w	1d22 <__aeabi_dmul+0xde>
    1fc4:	ebb5 0c03 	subs.w	ip, r5, r3
    1fc8:	bf04      	itt	eq
    1fca:	ebb6 0c02 	subseq.w	ip, r6, r2
    1fce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    1fd2:	f150 0000 	adcs.w	r0, r0, #0
    1fd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    1fda:	bd70      	pop	{r4, r5, r6, pc}
    1fdc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    1fe0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    1fe4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    1fe8:	bfc2      	ittt	gt
    1fea:	ebd4 050c 	rsbsgt	r5, r4, ip
    1fee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    1ff2:	bd70      	popgt	{r4, r5, r6, pc}
    1ff4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    1ff8:	f04f 0e00 	mov.w	lr, #0
    1ffc:	3c01      	subs	r4, #1
    1ffe:	e690      	b.n	1d22 <__aeabi_dmul+0xde>
    2000:	ea45 0e06 	orr.w	lr, r5, r6
    2004:	e68d      	b.n	1d22 <__aeabi_dmul+0xde>
    2006:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    200a:	ea94 0f0c 	teq	r4, ip
    200e:	bf08      	it	eq
    2010:	ea95 0f0c 	teqeq	r5, ip
    2014:	f43f af3b 	beq.w	1e8e <__aeabi_dmul+0x24a>
    2018:	ea94 0f0c 	teq	r4, ip
    201c:	d10a      	bne.n	2034 <__aeabi_ddiv+0x19c>
    201e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    2022:	f47f af34 	bne.w	1e8e <__aeabi_dmul+0x24a>
    2026:	ea95 0f0c 	teq	r5, ip
    202a:	f47f af25 	bne.w	1e78 <__aeabi_dmul+0x234>
    202e:	4610      	mov	r0, r2
    2030:	4619      	mov	r1, r3
    2032:	e72c      	b.n	1e8e <__aeabi_dmul+0x24a>
    2034:	ea95 0f0c 	teq	r5, ip
    2038:	d106      	bne.n	2048 <__aeabi_ddiv+0x1b0>
    203a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    203e:	f43f aefd 	beq.w	1e3c <__aeabi_dmul+0x1f8>
    2042:	4610      	mov	r0, r2
    2044:	4619      	mov	r1, r3
    2046:	e722      	b.n	1e8e <__aeabi_dmul+0x24a>
    2048:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    204c:	bf18      	it	ne
    204e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    2052:	f47f aec5 	bne.w	1de0 <__aeabi_dmul+0x19c>
    2056:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    205a:	f47f af0d 	bne.w	1e78 <__aeabi_dmul+0x234>
    205e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    2062:	f47f aeeb 	bne.w	1e3c <__aeabi_dmul+0x1f8>
    2066:	e712      	b.n	1e8e <__aeabi_dmul+0x24a>

00002068 <__aeabi_d2iz>:
    2068:	ea4f 0241 	mov.w	r2, r1, lsl #1
    206c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    2070:	d215      	bcs.n	209e <__aeabi_d2iz+0x36>
    2072:	d511      	bpl.n	2098 <__aeabi_d2iz+0x30>
    2074:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    2078:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    207c:	d912      	bls.n	20a4 <__aeabi_d2iz+0x3c>
    207e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    2082:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2086:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    208a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    208e:	fa23 f002 	lsr.w	r0, r3, r2
    2092:	bf18      	it	ne
    2094:	4240      	negne	r0, r0
    2096:	4770      	bx	lr
    2098:	f04f 0000 	mov.w	r0, #0
    209c:	4770      	bx	lr
    209e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    20a2:	d105      	bne.n	20b0 <__aeabi_d2iz+0x48>
    20a4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    20a8:	bf08      	it	eq
    20aa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    20ae:	4770      	bx	lr
    20b0:	f04f 0000 	mov.w	r0, #0
    20b4:	4770      	bx	lr
    20b6:	bf00      	nop

000020b8 <__aeabi_d2f>:
    20b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
    20bc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    20c0:	bf24      	itt	cs
    20c2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    20c6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    20ca:	d90d      	bls.n	20e8 <__aeabi_d2f+0x30>
    20cc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    20d0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    20d4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    20d8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    20dc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    20e0:	bf08      	it	eq
    20e2:	f020 0001 	biceq.w	r0, r0, #1
    20e6:	4770      	bx	lr
    20e8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    20ec:	d121      	bne.n	2132 <__aeabi_d2f+0x7a>
    20ee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    20f2:	bfbc      	itt	lt
    20f4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    20f8:	4770      	bxlt	lr
    20fa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    20fe:	ea4f 5252 	mov.w	r2, r2, lsr #21
    2102:	f1c2 0218 	rsb	r2, r2, #24
    2106:	f1c2 0c20 	rsb	ip, r2, #32
    210a:	fa10 f30c 	lsls.w	r3, r0, ip
    210e:	fa20 f002 	lsr.w	r0, r0, r2
    2112:	bf18      	it	ne
    2114:	f040 0001 	orrne.w	r0, r0, #1
    2118:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    211c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    2120:	fa03 fc0c 	lsl.w	ip, r3, ip
    2124:	ea40 000c 	orr.w	r0, r0, ip
    2128:	fa23 f302 	lsr.w	r3, r3, r2
    212c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2130:	e7cc      	b.n	20cc <__aeabi_d2f+0x14>
    2132:	ea7f 5362 	mvns.w	r3, r2, asr #21
    2136:	d107      	bne.n	2148 <__aeabi_d2f+0x90>
    2138:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    213c:	bf1e      	ittt	ne
    213e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    2142:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    2146:	4770      	bxne	lr
    2148:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    214c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    2150:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2154:	4770      	bx	lr
    2156:	bf00      	nop

00002158 <__aeabi_frsub>:
    2158:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    215c:	e002      	b.n	2164 <__addsf3>
    215e:	bf00      	nop

00002160 <__aeabi_fsub>:
    2160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00002164 <__addsf3>:
    2164:	0042      	lsls	r2, r0, #1
    2166:	bf1f      	itttt	ne
    2168:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    216c:	ea92 0f03 	teqne	r2, r3
    2170:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    2174:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    2178:	d06a      	beq.n	2250 <__addsf3+0xec>
    217a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    217e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    2182:	bfc1      	itttt	gt
    2184:	18d2      	addgt	r2, r2, r3
    2186:	4041      	eorgt	r1, r0
    2188:	4048      	eorgt	r0, r1
    218a:	4041      	eorgt	r1, r0
    218c:	bfb8      	it	lt
    218e:	425b      	neglt	r3, r3
    2190:	2b19      	cmp	r3, #25
    2192:	bf88      	it	hi
    2194:	4770      	bxhi	lr
    2196:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    219a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    219e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    21a2:	bf18      	it	ne
    21a4:	4240      	negne	r0, r0
    21a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    21aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    21ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    21b2:	bf18      	it	ne
    21b4:	4249      	negne	r1, r1
    21b6:	ea92 0f03 	teq	r2, r3
    21ba:	d03f      	beq.n	223c <__addsf3+0xd8>
    21bc:	f1a2 0201 	sub.w	r2, r2, #1
    21c0:	fa41 fc03 	asr.w	ip, r1, r3
    21c4:	eb10 000c 	adds.w	r0, r0, ip
    21c8:	f1c3 0320 	rsb	r3, r3, #32
    21cc:	fa01 f103 	lsl.w	r1, r1, r3
    21d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    21d4:	d502      	bpl.n	21dc <__addsf3+0x78>
    21d6:	4249      	negs	r1, r1
    21d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    21dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    21e0:	d313      	bcc.n	220a <__addsf3+0xa6>
    21e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    21e6:	d306      	bcc.n	21f6 <__addsf3+0x92>
    21e8:	0840      	lsrs	r0, r0, #1
    21ea:	ea4f 0131 	mov.w	r1, r1, rrx
    21ee:	f102 0201 	add.w	r2, r2, #1
    21f2:	2afe      	cmp	r2, #254	; 0xfe
    21f4:	d251      	bcs.n	229a <__addsf3+0x136>
    21f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    21fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    21fe:	bf08      	it	eq
    2200:	f020 0001 	biceq.w	r0, r0, #1
    2204:	ea40 0003 	orr.w	r0, r0, r3
    2208:	4770      	bx	lr
    220a:	0049      	lsls	r1, r1, #1
    220c:	eb40 0000 	adc.w	r0, r0, r0
    2210:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    2214:	f1a2 0201 	sub.w	r2, r2, #1
    2218:	d1ed      	bne.n	21f6 <__addsf3+0x92>
    221a:	fab0 fc80 	clz	ip, r0
    221e:	f1ac 0c08 	sub.w	ip, ip, #8
    2222:	ebb2 020c 	subs.w	r2, r2, ip
    2226:	fa00 f00c 	lsl.w	r0, r0, ip
    222a:	bfaa      	itet	ge
    222c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    2230:	4252      	neglt	r2, r2
    2232:	4318      	orrge	r0, r3
    2234:	bfbc      	itt	lt
    2236:	40d0      	lsrlt	r0, r2
    2238:	4318      	orrlt	r0, r3
    223a:	4770      	bx	lr
    223c:	f092 0f00 	teq	r2, #0
    2240:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    2244:	bf06      	itte	eq
    2246:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    224a:	3201      	addeq	r2, #1
    224c:	3b01      	subne	r3, #1
    224e:	e7b5      	b.n	21bc <__addsf3+0x58>
    2250:	ea4f 0341 	mov.w	r3, r1, lsl #1
    2254:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    2258:	bf18      	it	ne
    225a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    225e:	d021      	beq.n	22a4 <__addsf3+0x140>
    2260:	ea92 0f03 	teq	r2, r3
    2264:	d004      	beq.n	2270 <__addsf3+0x10c>
    2266:	f092 0f00 	teq	r2, #0
    226a:	bf08      	it	eq
    226c:	4608      	moveq	r0, r1
    226e:	4770      	bx	lr
    2270:	ea90 0f01 	teq	r0, r1
    2274:	bf1c      	itt	ne
    2276:	2000      	movne	r0, #0
    2278:	4770      	bxne	lr
    227a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    227e:	d104      	bne.n	228a <__addsf3+0x126>
    2280:	0040      	lsls	r0, r0, #1
    2282:	bf28      	it	cs
    2284:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    2288:	4770      	bx	lr
    228a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    228e:	bf3c      	itt	cc
    2290:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    2294:	4770      	bxcc	lr
    2296:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    229a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    229e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    22a2:	4770      	bx	lr
    22a4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    22a8:	bf16      	itet	ne
    22aa:	4608      	movne	r0, r1
    22ac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    22b0:	4601      	movne	r1, r0
    22b2:	0242      	lsls	r2, r0, #9
    22b4:	bf06      	itte	eq
    22b6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    22ba:	ea90 0f01 	teqeq	r0, r1
    22be:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    22c2:	4770      	bx	lr

000022c4 <__aeabi_ui2f>:
    22c4:	f04f 0300 	mov.w	r3, #0
    22c8:	e004      	b.n	22d4 <__aeabi_i2f+0x8>
    22ca:	bf00      	nop

000022cc <__aeabi_i2f>:
    22cc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    22d0:	bf48      	it	mi
    22d2:	4240      	negmi	r0, r0
    22d4:	ea5f 0c00 	movs.w	ip, r0
    22d8:	bf08      	it	eq
    22da:	4770      	bxeq	lr
    22dc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    22e0:	4601      	mov	r1, r0
    22e2:	f04f 0000 	mov.w	r0, #0
    22e6:	e01c      	b.n	2322 <__aeabi_l2f+0x2a>

000022e8 <__aeabi_ul2f>:
    22e8:	ea50 0201 	orrs.w	r2, r0, r1
    22ec:	bf08      	it	eq
    22ee:	4770      	bxeq	lr
    22f0:	f04f 0300 	mov.w	r3, #0
    22f4:	e00a      	b.n	230c <__aeabi_l2f+0x14>
    22f6:	bf00      	nop

000022f8 <__aeabi_l2f>:
    22f8:	ea50 0201 	orrs.w	r2, r0, r1
    22fc:	bf08      	it	eq
    22fe:	4770      	bxeq	lr
    2300:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    2304:	d502      	bpl.n	230c <__aeabi_l2f+0x14>
    2306:	4240      	negs	r0, r0
    2308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    230c:	ea5f 0c01 	movs.w	ip, r1
    2310:	bf02      	ittt	eq
    2312:	4684      	moveq	ip, r0
    2314:	4601      	moveq	r1, r0
    2316:	2000      	moveq	r0, #0
    2318:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    231c:	bf08      	it	eq
    231e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    2322:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    2326:	fabc f28c 	clz	r2, ip
    232a:	3a08      	subs	r2, #8
    232c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    2330:	db10      	blt.n	2354 <__aeabi_l2f+0x5c>
    2332:	fa01 fc02 	lsl.w	ip, r1, r2
    2336:	4463      	add	r3, ip
    2338:	fa00 fc02 	lsl.w	ip, r0, r2
    233c:	f1c2 0220 	rsb	r2, r2, #32
    2340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    2344:	fa20 f202 	lsr.w	r2, r0, r2
    2348:	eb43 0002 	adc.w	r0, r3, r2
    234c:	bf08      	it	eq
    234e:	f020 0001 	biceq.w	r0, r0, #1
    2352:	4770      	bx	lr
    2354:	f102 0220 	add.w	r2, r2, #32
    2358:	fa01 fc02 	lsl.w	ip, r1, r2
    235c:	f1c2 0220 	rsb	r2, r2, #32
    2360:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    2364:	fa21 f202 	lsr.w	r2, r1, r2
    2368:	eb43 0002 	adc.w	r0, r3, r2
    236c:	bf08      	it	eq
    236e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    2372:	4770      	bx	lr

00002374 <__aeabi_fmul>:
    2374:	f04f 0cff 	mov.w	ip, #255	; 0xff
    2378:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    237c:	bf1e      	ittt	ne
    237e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    2382:	ea92 0f0c 	teqne	r2, ip
    2386:	ea93 0f0c 	teqne	r3, ip
    238a:	d06f      	beq.n	246c <__aeabi_fmul+0xf8>
    238c:	441a      	add	r2, r3
    238e:	ea80 0c01 	eor.w	ip, r0, r1
    2392:	0240      	lsls	r0, r0, #9
    2394:	bf18      	it	ne
    2396:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    239a:	d01e      	beq.n	23da <__aeabi_fmul+0x66>
    239c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    23a0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    23a4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    23a8:	fba0 3101 	umull	r3, r1, r0, r1
    23ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    23b0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    23b4:	bf3e      	ittt	cc
    23b6:	0049      	lslcc	r1, r1, #1
    23b8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    23bc:	005b      	lslcc	r3, r3, #1
    23be:	ea40 0001 	orr.w	r0, r0, r1
    23c2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    23c6:	2afd      	cmp	r2, #253	; 0xfd
    23c8:	d81d      	bhi.n	2406 <__aeabi_fmul+0x92>
    23ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    23ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    23d2:	bf08      	it	eq
    23d4:	f020 0001 	biceq.w	r0, r0, #1
    23d8:	4770      	bx	lr
    23da:	f090 0f00 	teq	r0, #0
    23de:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    23e2:	bf08      	it	eq
    23e4:	0249      	lsleq	r1, r1, #9
    23e6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    23ea:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    23ee:	3a7f      	subs	r2, #127	; 0x7f
    23f0:	bfc2      	ittt	gt
    23f2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    23f6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    23fa:	4770      	bxgt	lr
    23fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    2400:	f04f 0300 	mov.w	r3, #0
    2404:	3a01      	subs	r2, #1
    2406:	dc5d      	bgt.n	24c4 <__aeabi_fmul+0x150>
    2408:	f112 0f19 	cmn.w	r2, #25
    240c:	bfdc      	itt	le
    240e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    2412:	4770      	bxle	lr
    2414:	f1c2 0200 	rsb	r2, r2, #0
    2418:	0041      	lsls	r1, r0, #1
    241a:	fa21 f102 	lsr.w	r1, r1, r2
    241e:	f1c2 0220 	rsb	r2, r2, #32
    2422:	fa00 fc02 	lsl.w	ip, r0, r2
    2426:	ea5f 0031 	movs.w	r0, r1, rrx
    242a:	f140 0000 	adc.w	r0, r0, #0
    242e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    2432:	bf08      	it	eq
    2434:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    2438:	4770      	bx	lr
    243a:	f092 0f00 	teq	r2, #0
    243e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    2442:	bf02      	ittt	eq
    2444:	0040      	lsleq	r0, r0, #1
    2446:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    244a:	3a01      	subeq	r2, #1
    244c:	d0f9      	beq.n	2442 <__aeabi_fmul+0xce>
    244e:	ea40 000c 	orr.w	r0, r0, ip
    2452:	f093 0f00 	teq	r3, #0
    2456:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    245a:	bf02      	ittt	eq
    245c:	0049      	lsleq	r1, r1, #1
    245e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    2462:	3b01      	subeq	r3, #1
    2464:	d0f9      	beq.n	245a <__aeabi_fmul+0xe6>
    2466:	ea41 010c 	orr.w	r1, r1, ip
    246a:	e78f      	b.n	238c <__aeabi_fmul+0x18>
    246c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    2470:	ea92 0f0c 	teq	r2, ip
    2474:	bf18      	it	ne
    2476:	ea93 0f0c 	teqne	r3, ip
    247a:	d00a      	beq.n	2492 <__aeabi_fmul+0x11e>
    247c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    2480:	bf18      	it	ne
    2482:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    2486:	d1d8      	bne.n	243a <__aeabi_fmul+0xc6>
    2488:	ea80 0001 	eor.w	r0, r0, r1
    248c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    2490:	4770      	bx	lr
    2492:	f090 0f00 	teq	r0, #0
    2496:	bf17      	itett	ne
    2498:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    249c:	4608      	moveq	r0, r1
    249e:	f091 0f00 	teqne	r1, #0
    24a2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    24a6:	d014      	beq.n	24d2 <__aeabi_fmul+0x15e>
    24a8:	ea92 0f0c 	teq	r2, ip
    24ac:	d101      	bne.n	24b2 <__aeabi_fmul+0x13e>
    24ae:	0242      	lsls	r2, r0, #9
    24b0:	d10f      	bne.n	24d2 <__aeabi_fmul+0x15e>
    24b2:	ea93 0f0c 	teq	r3, ip
    24b6:	d103      	bne.n	24c0 <__aeabi_fmul+0x14c>
    24b8:	024b      	lsls	r3, r1, #9
    24ba:	bf18      	it	ne
    24bc:	4608      	movne	r0, r1
    24be:	d108      	bne.n	24d2 <__aeabi_fmul+0x15e>
    24c0:	ea80 0001 	eor.w	r0, r0, r1
    24c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    24c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    24cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    24d0:	4770      	bx	lr
    24d2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    24d6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    24da:	4770      	bx	lr

000024dc <__aeabi_fdiv>:
    24dc:	f04f 0cff 	mov.w	ip, #255	; 0xff
    24e0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    24e4:	bf1e      	ittt	ne
    24e6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    24ea:	ea92 0f0c 	teqne	r2, ip
    24ee:	ea93 0f0c 	teqne	r3, ip
    24f2:	d069      	beq.n	25c8 <__aeabi_fdiv+0xec>
    24f4:	eba2 0203 	sub.w	r2, r2, r3
    24f8:	ea80 0c01 	eor.w	ip, r0, r1
    24fc:	0249      	lsls	r1, r1, #9
    24fe:	ea4f 2040 	mov.w	r0, r0, lsl #9
    2502:	d037      	beq.n	2574 <__aeabi_fdiv+0x98>
    2504:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2508:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    250c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    2510:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    2514:	428b      	cmp	r3, r1
    2516:	bf38      	it	cc
    2518:	005b      	lslcc	r3, r3, #1
    251a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    251e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    2522:	428b      	cmp	r3, r1
    2524:	bf24      	itt	cs
    2526:	1a5b      	subcs	r3, r3, r1
    2528:	ea40 000c 	orrcs.w	r0, r0, ip
    252c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    2530:	bf24      	itt	cs
    2532:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    2536:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    253a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    253e:	bf24      	itt	cs
    2540:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    2544:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    2548:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    254c:	bf24      	itt	cs
    254e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    2552:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    2556:	011b      	lsls	r3, r3, #4
    2558:	bf18      	it	ne
    255a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    255e:	d1e0      	bne.n	2522 <__aeabi_fdiv+0x46>
    2560:	2afd      	cmp	r2, #253	; 0xfd
    2562:	f63f af50 	bhi.w	2406 <__aeabi_fmul+0x92>
    2566:	428b      	cmp	r3, r1
    2568:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    256c:	bf08      	it	eq
    256e:	f020 0001 	biceq.w	r0, r0, #1
    2572:	4770      	bx	lr
    2574:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    2578:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    257c:	327f      	adds	r2, #127	; 0x7f
    257e:	bfc2      	ittt	gt
    2580:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    2584:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    2588:	4770      	bxgt	lr
    258a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    258e:	f04f 0300 	mov.w	r3, #0
    2592:	3a01      	subs	r2, #1
    2594:	e737      	b.n	2406 <__aeabi_fmul+0x92>
    2596:	f092 0f00 	teq	r2, #0
    259a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    259e:	bf02      	ittt	eq
    25a0:	0040      	lsleq	r0, r0, #1
    25a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    25a6:	3a01      	subeq	r2, #1
    25a8:	d0f9      	beq.n	259e <__aeabi_fdiv+0xc2>
    25aa:	ea40 000c 	orr.w	r0, r0, ip
    25ae:	f093 0f00 	teq	r3, #0
    25b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    25b6:	bf02      	ittt	eq
    25b8:	0049      	lsleq	r1, r1, #1
    25ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    25be:	3b01      	subeq	r3, #1
    25c0:	d0f9      	beq.n	25b6 <__aeabi_fdiv+0xda>
    25c2:	ea41 010c 	orr.w	r1, r1, ip
    25c6:	e795      	b.n	24f4 <__aeabi_fdiv+0x18>
    25c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    25cc:	ea92 0f0c 	teq	r2, ip
    25d0:	d108      	bne.n	25e4 <__aeabi_fdiv+0x108>
    25d2:	0242      	lsls	r2, r0, #9
    25d4:	f47f af7d 	bne.w	24d2 <__aeabi_fmul+0x15e>
    25d8:	ea93 0f0c 	teq	r3, ip
    25dc:	f47f af70 	bne.w	24c0 <__aeabi_fmul+0x14c>
    25e0:	4608      	mov	r0, r1
    25e2:	e776      	b.n	24d2 <__aeabi_fmul+0x15e>
    25e4:	ea93 0f0c 	teq	r3, ip
    25e8:	d104      	bne.n	25f4 <__aeabi_fdiv+0x118>
    25ea:	024b      	lsls	r3, r1, #9
    25ec:	f43f af4c 	beq.w	2488 <__aeabi_fmul+0x114>
    25f0:	4608      	mov	r0, r1
    25f2:	e76e      	b.n	24d2 <__aeabi_fmul+0x15e>
    25f4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    25f8:	bf18      	it	ne
    25fa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    25fe:	d1ca      	bne.n	2596 <__aeabi_fdiv+0xba>
    2600:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    2604:	f47f af5c 	bne.w	24c0 <__aeabi_fmul+0x14c>
    2608:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    260c:	f47f af3c 	bne.w	2488 <__aeabi_fmul+0x114>
    2610:	e75f      	b.n	24d2 <__aeabi_fmul+0x15e>
    2612:	bf00      	nop

00002614 <__gesf2>:
    2614:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    2618:	e006      	b.n	2628 <__cmpsf2+0x4>
    261a:	bf00      	nop

0000261c <__lesf2>:
    261c:	f04f 0c01 	mov.w	ip, #1
    2620:	e002      	b.n	2628 <__cmpsf2+0x4>
    2622:	bf00      	nop

00002624 <__cmpsf2>:
    2624:	f04f 0c01 	mov.w	ip, #1
    2628:	f84d cd04 	str.w	ip, [sp, #-4]!
    262c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    2630:	ea4f 0341 	mov.w	r3, r1, lsl #1
    2634:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    2638:	bf18      	it	ne
    263a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    263e:	d011      	beq.n	2664 <__cmpsf2+0x40>
    2640:	b001      	add	sp, #4
    2642:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    2646:	bf18      	it	ne
    2648:	ea90 0f01 	teqne	r0, r1
    264c:	bf58      	it	pl
    264e:	ebb2 0003 	subspl.w	r0, r2, r3
    2652:	bf88      	it	hi
    2654:	17c8      	asrhi	r0, r1, #31
    2656:	bf38      	it	cc
    2658:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    265c:	bf18      	it	ne
    265e:	f040 0001 	orrne.w	r0, r0, #1
    2662:	4770      	bx	lr
    2664:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    2668:	d102      	bne.n	2670 <__cmpsf2+0x4c>
    266a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    266e:	d105      	bne.n	267c <__cmpsf2+0x58>
    2670:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    2674:	d1e4      	bne.n	2640 <__cmpsf2+0x1c>
    2676:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    267a:	d0e1      	beq.n	2640 <__cmpsf2+0x1c>
    267c:	f85d 0b04 	ldr.w	r0, [sp], #4
    2680:	4770      	bx	lr
    2682:	bf00      	nop

00002684 <__aeabi_cfrcmple>:
    2684:	4684      	mov	ip, r0
    2686:	4608      	mov	r0, r1
    2688:	4661      	mov	r1, ip
    268a:	e7ff      	b.n	268c <__aeabi_cfcmpeq>

0000268c <__aeabi_cfcmpeq>:
    268c:	b50f      	push	{r0, r1, r2, r3, lr}
    268e:	f7ff ffc9 	bl	2624 <__cmpsf2>
    2692:	2800      	cmp	r0, #0
    2694:	bf48      	it	mi
    2696:	f110 0f00 	cmnmi.w	r0, #0
    269a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000269c <__aeabi_fcmpeq>:
    269c:	f84d ed08 	str.w	lr, [sp, #-8]!
    26a0:	f7ff fff4 	bl	268c <__aeabi_cfcmpeq>
    26a4:	bf0c      	ite	eq
    26a6:	2001      	moveq	r0, #1
    26a8:	2000      	movne	r0, #0
    26aa:	f85d fb08 	ldr.w	pc, [sp], #8
    26ae:	bf00      	nop

000026b0 <__aeabi_fcmplt>:
    26b0:	f84d ed08 	str.w	lr, [sp, #-8]!
    26b4:	f7ff ffea 	bl	268c <__aeabi_cfcmpeq>
    26b8:	bf34      	ite	cc
    26ba:	2001      	movcc	r0, #1
    26bc:	2000      	movcs	r0, #0
    26be:	f85d fb08 	ldr.w	pc, [sp], #8
    26c2:	bf00      	nop

000026c4 <__aeabi_fcmple>:
    26c4:	f84d ed08 	str.w	lr, [sp, #-8]!
    26c8:	f7ff ffe0 	bl	268c <__aeabi_cfcmpeq>
    26cc:	bf94      	ite	ls
    26ce:	2001      	movls	r0, #1
    26d0:	2000      	movhi	r0, #0
    26d2:	f85d fb08 	ldr.w	pc, [sp], #8
    26d6:	bf00      	nop

000026d8 <__aeabi_fcmpge>:
    26d8:	f84d ed08 	str.w	lr, [sp, #-8]!
    26dc:	f7ff ffd2 	bl	2684 <__aeabi_cfrcmple>
    26e0:	bf94      	ite	ls
    26e2:	2001      	movls	r0, #1
    26e4:	2000      	movhi	r0, #0
    26e6:	f85d fb08 	ldr.w	pc, [sp], #8
    26ea:	bf00      	nop

000026ec <__aeabi_fcmpgt>:
    26ec:	f84d ed08 	str.w	lr, [sp, #-8]!
    26f0:	f7ff ffc8 	bl	2684 <__aeabi_cfrcmple>
    26f4:	bf34      	ite	cc
    26f6:	2001      	movcc	r0, #1
    26f8:	2000      	movcs	r0, #0
    26fa:	f85d fb08 	ldr.w	pc, [sp], #8
    26fe:	bf00      	nop

00002700 <__aeabi_f2iz>:
    2700:	ea4f 0240 	mov.w	r2, r0, lsl #1
    2704:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    2708:	d30f      	bcc.n	272a <__aeabi_f2iz+0x2a>
    270a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    270e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    2712:	d90d      	bls.n	2730 <__aeabi_f2iz+0x30>
    2714:	ea4f 2300 	mov.w	r3, r0, lsl #8
    2718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    271c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    2720:	fa23 f002 	lsr.w	r0, r3, r2
    2724:	bf18      	it	ne
    2726:	4240      	negne	r0, r0
    2728:	4770      	bx	lr
    272a:	f04f 0000 	mov.w	r0, #0
    272e:	4770      	bx	lr
    2730:	f112 0f61 	cmn.w	r2, #97	; 0x61
    2734:	d101      	bne.n	273a <__aeabi_f2iz+0x3a>
    2736:	0242      	lsls	r2, r0, #9
    2738:	d105      	bne.n	2746 <__aeabi_f2iz+0x46>
    273a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    273e:	bf08      	it	eq
    2740:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    2744:	4770      	bx	lr
    2746:	f04f 0000 	mov.w	r0, #0
    274a:	4770      	bx	lr

0000274c <__aeabi_uldivmod>:
    274c:	b953      	cbnz	r3, 2764 <__aeabi_uldivmod+0x18>
    274e:	b94a      	cbnz	r2, 2764 <__aeabi_uldivmod+0x18>
    2750:	2900      	cmp	r1, #0
    2752:	bf08      	it	eq
    2754:	2800      	cmpeq	r0, #0
    2756:	bf1c      	itt	ne
    2758:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    275c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    2760:	f000 b97a 	b.w	2a58 <__aeabi_idiv0>
    2764:	f1ad 0c08 	sub.w	ip, sp, #8
    2768:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    276c:	f000 f806 	bl	277c <__udivmoddi4>
    2770:	f8dd e004 	ldr.w	lr, [sp, #4]
    2774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2778:	b004      	add	sp, #16
    277a:	4770      	bx	lr

0000277c <__udivmoddi4>:
    277c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2780:	468c      	mov	ip, r1
    2782:	4604      	mov	r4, r0
    2784:	9e08      	ldr	r6, [sp, #32]
    2786:	2b00      	cmp	r3, #0
    2788:	d14e      	bne.n	2828 <__udivmoddi4+0xac>
    278a:	428a      	cmp	r2, r1
    278c:	4615      	mov	r5, r2
    278e:	d96c      	bls.n	286a <__udivmoddi4+0xee>
    2790:	fab2 fe82 	clz	lr, r2
    2794:	f1be 0f00 	cmp.w	lr, #0
    2798:	d00b      	beq.n	27b2 <__udivmoddi4+0x36>
    279a:	f1ce 0320 	rsb	r3, lr, #32
    279e:	fa01 f10e 	lsl.w	r1, r1, lr
    27a2:	fa20 fc03 	lsr.w	ip, r0, r3
    27a6:	fa02 f50e 	lsl.w	r5, r2, lr
    27aa:	ea4c 0c01 	orr.w	ip, ip, r1
    27ae:	fa00 f40e 	lsl.w	r4, r0, lr
    27b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
    27b6:	fbbc f0f8 	udiv	r0, ip, r8
    27ba:	b2aa      	uxth	r2, r5
    27bc:	fb08 cc10 	mls	ip, r8, r0, ip
    27c0:	fb02 f300 	mul.w	r3, r2, r0
    27c4:	0c27      	lsrs	r7, r4, #16
    27c6:	ea47 410c 	orr.w	r1, r7, ip, lsl #16
    27ca:	428b      	cmp	r3, r1
    27cc:	d909      	bls.n	27e2 <__udivmoddi4+0x66>
    27ce:	1949      	adds	r1, r1, r5
    27d0:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
    27d4:	f080 811f 	bcs.w	2a16 <__udivmoddi4+0x29a>
    27d8:	428b      	cmp	r3, r1
    27da:	f240 811c 	bls.w	2a16 <__udivmoddi4+0x29a>
    27de:	3802      	subs	r0, #2
    27e0:	4429      	add	r1, r5
    27e2:	1ac9      	subs	r1, r1, r3
    27e4:	fbb1 f3f8 	udiv	r3, r1, r8
    27e8:	fb08 1113 	mls	r1, r8, r3, r1
    27ec:	fb02 f703 	mul.w	r7, r2, r3
    27f0:	b2a4      	uxth	r4, r4
    27f2:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    27f6:	4297      	cmp	r7, r2
    27f8:	d909      	bls.n	280e <__udivmoddi4+0x92>
    27fa:	1952      	adds	r2, r2, r5
    27fc:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
    2800:	f080 8107 	bcs.w	2a12 <__udivmoddi4+0x296>
    2804:	4297      	cmp	r7, r2
    2806:	f240 8104 	bls.w	2a12 <__udivmoddi4+0x296>
    280a:	3b02      	subs	r3, #2
    280c:	442a      	add	r2, r5
    280e:	1bd2      	subs	r2, r2, r7
    2810:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    2814:	2700      	movs	r7, #0
    2816:	b186      	cbz	r6, 283a <__udivmoddi4+0xbe>
    2818:	fa22 f20e 	lsr.w	r2, r2, lr
    281c:	2300      	movs	r3, #0
    281e:	e886 000c 	stmia.w	r6, {r2, r3}
    2822:	4639      	mov	r1, r7
    2824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2828:	428b      	cmp	r3, r1
    282a:	d909      	bls.n	2840 <__udivmoddi4+0xc4>
    282c:	2e00      	cmp	r6, #0
    282e:	f000 810e 	beq.w	2a4e <__udivmoddi4+0x2d2>
    2832:	2700      	movs	r7, #0
    2834:	e886 0003 	stmia.w	r6, {r0, r1}
    2838:	4638      	mov	r0, r7
    283a:	4639      	mov	r1, r7
    283c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2840:	fab3 f783 	clz	r7, r3
    2844:	2f00      	cmp	r7, #0
    2846:	f040 808c 	bne.w	2962 <__udivmoddi4+0x1e6>
    284a:	428b      	cmp	r3, r1
    284c:	d302      	bcc.n	2854 <__udivmoddi4+0xd8>
    284e:	4282      	cmp	r2, r0
    2850:	f200 80f1 	bhi.w	2a36 <__udivmoddi4+0x2ba>
    2854:	1a84      	subs	r4, r0, r2
    2856:	eb61 0c03 	sbc.w	ip, r1, r3
    285a:	2001      	movs	r0, #1
    285c:	2e00      	cmp	r6, #0
    285e:	d0ec      	beq.n	283a <__udivmoddi4+0xbe>
    2860:	e886 1010 	stmia.w	r6, {r4, ip}
    2864:	4639      	mov	r1, r7
    2866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    286a:	b912      	cbnz	r2, 2872 <__udivmoddi4+0xf6>
    286c:	2501      	movs	r5, #1
    286e:	fbb5 f5f2 	udiv	r5, r5, r2
    2872:	fab5 fe85 	clz	lr, r5
    2876:	f1be 0f00 	cmp.w	lr, #0
    287a:	d132      	bne.n	28e2 <__udivmoddi4+0x166>
    287c:	1b49      	subs	r1, r1, r5
    287e:	ea4f 4815 	mov.w	r8, r5, lsr #16
    2882:	fa1f f985 	uxth.w	r9, r5
    2886:	2701      	movs	r7, #1
    2888:	fbb1 f3f8 	udiv	r3, r1, r8
    288c:	fb08 1113 	mls	r1, r8, r3, r1
    2890:	fb09 f203 	mul.w	r2, r9, r3
    2894:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    2898:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
    289c:	428a      	cmp	r2, r1
    289e:	d907      	bls.n	28b0 <__udivmoddi4+0x134>
    28a0:	1949      	adds	r1, r1, r5
    28a2:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
    28a6:	d202      	bcs.n	28ae <__udivmoddi4+0x132>
    28a8:	428a      	cmp	r2, r1
    28aa:	f200 80c6 	bhi.w	2a3a <__udivmoddi4+0x2be>
    28ae:	4603      	mov	r3, r0
    28b0:	1a89      	subs	r1, r1, r2
    28b2:	fbb1 f0f8 	udiv	r0, r1, r8
    28b6:	fb08 1110 	mls	r1, r8, r0, r1
    28ba:	fb09 f900 	mul.w	r9, r9, r0
    28be:	b2a4      	uxth	r4, r4
    28c0:	ea44 4201 	orr.w	r2, r4, r1, lsl #16
    28c4:	4591      	cmp	r9, r2
    28c6:	d907      	bls.n	28d8 <__udivmoddi4+0x15c>
    28c8:	1952      	adds	r2, r2, r5
    28ca:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
    28ce:	d202      	bcs.n	28d6 <__udivmoddi4+0x15a>
    28d0:	4591      	cmp	r9, r2
    28d2:	f200 80b5 	bhi.w	2a40 <__udivmoddi4+0x2c4>
    28d6:	4608      	mov	r0, r1
    28d8:	ebc9 0202 	rsb	r2, r9, r2
    28dc:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    28e0:	e799      	b.n	2816 <__udivmoddi4+0x9a>
    28e2:	f1ce 0220 	rsb	r2, lr, #32
    28e6:	fa05 f50e 	lsl.w	r5, r5, lr
    28ea:	fa21 fc02 	lsr.w	ip, r1, r2
    28ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
    28f2:	fbbc f7f8 	udiv	r7, ip, r8
    28f6:	fa1f f985 	uxth.w	r9, r5
    28fa:	fb08 c417 	mls	r4, r8, r7, ip
    28fe:	fa20 f302 	lsr.w	r3, r0, r2
    2902:	fa01 f10e 	lsl.w	r1, r1, lr
    2906:	fb09 fa07 	mul.w	sl, r9, r7
    290a:	430b      	orrs	r3, r1
    290c:	0c1a      	lsrs	r2, r3, #16
    290e:	ea42 4c04 	orr.w	ip, r2, r4, lsl #16
    2912:	45e2      	cmp	sl, ip
    2914:	fa00 f40e 	lsl.w	r4, r0, lr
    2918:	d90a      	bls.n	2930 <__udivmoddi4+0x1b4>
    291a:	eb1c 0c05 	adds.w	ip, ip, r5
    291e:	f107 32ff 	add.w	r2, r7, #4294967295	; 0xffffffff
    2922:	f080 8086 	bcs.w	2a32 <__udivmoddi4+0x2b6>
    2926:	45e2      	cmp	sl, ip
    2928:	f240 8083 	bls.w	2a32 <__udivmoddi4+0x2b6>
    292c:	3f02      	subs	r7, #2
    292e:	44ac      	add	ip, r5
    2930:	ebca 0c0c 	rsb	ip, sl, ip
    2934:	fbbc f0f8 	udiv	r0, ip, r8
    2938:	fb08 cc10 	mls	ip, r8, r0, ip
    293c:	fb09 f100 	mul.w	r1, r9, r0
    2940:	b29b      	uxth	r3, r3
    2942:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    2946:	4299      	cmp	r1, r3
    2948:	d907      	bls.n	295a <__udivmoddi4+0x1de>
    294a:	195b      	adds	r3, r3, r5
    294c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
    2950:	d26b      	bcs.n	2a2a <__udivmoddi4+0x2ae>
    2952:	4299      	cmp	r1, r3
    2954:	d969      	bls.n	2a2a <__udivmoddi4+0x2ae>
    2956:	3802      	subs	r0, #2
    2958:	442b      	add	r3, r5
    295a:	1a59      	subs	r1, r3, r1
    295c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    2960:	e792      	b.n	2888 <__udivmoddi4+0x10c>
    2962:	f1c7 0e20 	rsb	lr, r7, #32
    2966:	fa22 f40e 	lsr.w	r4, r2, lr
    296a:	40bb      	lsls	r3, r7
    296c:	4323      	orrs	r3, r4
    296e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    2972:	fa21 f40e 	lsr.w	r4, r1, lr
    2976:	fbb4 f8fc 	udiv	r8, r4, ip
    297a:	fa1f fa83 	uxth.w	sl, r3
    297e:	fb0c 4918 	mls	r9, ip, r8, r4
    2982:	fa01 f507 	lsl.w	r5, r1, r7
    2986:	fb0a f408 	mul.w	r4, sl, r8
    298a:	fa20 f10e 	lsr.w	r1, r0, lr
    298e:	430d      	orrs	r5, r1
    2990:	0c29      	lsrs	r1, r5, #16
    2992:	ea41 4109 	orr.w	r1, r1, r9, lsl #16
    2996:	428c      	cmp	r4, r1
    2998:	fa02 f207 	lsl.w	r2, r2, r7
    299c:	fa00 f907 	lsl.w	r9, r0, r7
    29a0:	d908      	bls.n	29b4 <__udivmoddi4+0x238>
    29a2:	18c9      	adds	r1, r1, r3
    29a4:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    29a8:	d241      	bcs.n	2a2e <__udivmoddi4+0x2b2>
    29aa:	428c      	cmp	r4, r1
    29ac:	d93f      	bls.n	2a2e <__udivmoddi4+0x2b2>
    29ae:	f1a8 0802 	sub.w	r8, r8, #2
    29b2:	4419      	add	r1, r3
    29b4:	1b09      	subs	r1, r1, r4
    29b6:	fbb1 f4fc 	udiv	r4, r1, ip
    29ba:	fb0c 1114 	mls	r1, ip, r4, r1
    29be:	fb0a fa04 	mul.w	sl, sl, r4
    29c2:	b2ad      	uxth	r5, r5
    29c4:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
    29c8:	458a      	cmp	sl, r1
    29ca:	d907      	bls.n	29dc <__udivmoddi4+0x260>
    29cc:	18c9      	adds	r1, r1, r3
    29ce:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
    29d2:	d228      	bcs.n	2a26 <__udivmoddi4+0x2aa>
    29d4:	458a      	cmp	sl, r1
    29d6:	d926      	bls.n	2a26 <__udivmoddi4+0x2aa>
    29d8:	3c02      	subs	r4, #2
    29da:	4419      	add	r1, r3
    29dc:	ea44 4008 	orr.w	r0, r4, r8, lsl #16
    29e0:	fba0 4502 	umull	r4, r5, r0, r2
    29e4:	ebca 0101 	rsb	r1, sl, r1
    29e8:	42a9      	cmp	r1, r5
    29ea:	46a0      	mov	r8, r4
    29ec:	46ac      	mov	ip, r5
    29ee:	d314      	bcc.n	2a1a <__udivmoddi4+0x29e>
    29f0:	d029      	beq.n	2a46 <__udivmoddi4+0x2ca>
    29f2:	b37e      	cbz	r6, 2a54 <__udivmoddi4+0x2d8>
    29f4:	ebb9 0308 	subs.w	r3, r9, r8
    29f8:	eb61 010c 	sbc.w	r1, r1, ip
    29fc:	fa01 f20e 	lsl.w	r2, r1, lr
    2a00:	40fb      	lsrs	r3, r7
    2a02:	40f9      	lsrs	r1, r7
    2a04:	4313      	orrs	r3, r2
    2a06:	2700      	movs	r7, #0
    2a08:	6071      	str	r1, [r6, #4]
    2a0a:	6033      	str	r3, [r6, #0]
    2a0c:	4639      	mov	r1, r7
    2a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2a12:	460b      	mov	r3, r1
    2a14:	e6fb      	b.n	280e <__udivmoddi4+0x92>
    2a16:	4638      	mov	r0, r7
    2a18:	e6e3      	b.n	27e2 <__udivmoddi4+0x66>
    2a1a:	ebb4 0802 	subs.w	r8, r4, r2
    2a1e:	eb65 0c03 	sbc.w	ip, r5, r3
    2a22:	3801      	subs	r0, #1
    2a24:	e7e5      	b.n	29f2 <__udivmoddi4+0x276>
    2a26:	4604      	mov	r4, r0
    2a28:	e7d8      	b.n	29dc <__udivmoddi4+0x260>
    2a2a:	4610      	mov	r0, r2
    2a2c:	e795      	b.n	295a <__udivmoddi4+0x1de>
    2a2e:	4680      	mov	r8, r0
    2a30:	e7c0      	b.n	29b4 <__udivmoddi4+0x238>
    2a32:	4617      	mov	r7, r2
    2a34:	e77c      	b.n	2930 <__udivmoddi4+0x1b4>
    2a36:	4638      	mov	r0, r7
    2a38:	e710      	b.n	285c <__udivmoddi4+0xe0>
    2a3a:	3b02      	subs	r3, #2
    2a3c:	4429      	add	r1, r5
    2a3e:	e737      	b.n	28b0 <__udivmoddi4+0x134>
    2a40:	3802      	subs	r0, #2
    2a42:	442a      	add	r2, r5
    2a44:	e748      	b.n	28d8 <__udivmoddi4+0x15c>
    2a46:	45a1      	cmp	r9, r4
    2a48:	d3e7      	bcc.n	2a1a <__udivmoddi4+0x29e>
    2a4a:	468c      	mov	ip, r1
    2a4c:	e7d1      	b.n	29f2 <__udivmoddi4+0x276>
    2a4e:	4637      	mov	r7, r6
    2a50:	4630      	mov	r0, r6
    2a52:	e6f2      	b.n	283a <__udivmoddi4+0xbe>
    2a54:	4637      	mov	r7, r6
    2a56:	e6f0      	b.n	283a <__udivmoddi4+0xbe>

00002a58 <__aeabi_idiv0>:
    2a58:	4770      	bx	lr
    2a5a:	bf00      	nop

00002a5c <sqrt>:
    2a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a60:	b08a      	sub	sp, #40	; 0x28
    2a62:	4606      	mov	r6, r0
    2a64:	460f      	mov	r7, r1
    2a66:	f000 f84d 	bl	2b04 <__ieee754_sqrt>
    2a6a:	f8df a094 	ldr.w	sl, [pc, #148]	; 2b00 <sqrt+0xa4>
    2a6e:	4604      	mov	r4, r0
    2a70:	f99a 3000 	ldrsb.w	r3, [sl]
    2a74:	460d      	mov	r5, r1
    2a76:	3301      	adds	r3, #1
    2a78:	d03b      	beq.n	2af2 <sqrt+0x96>
    2a7a:	4630      	mov	r0, r6
    2a7c:	4639      	mov	r1, r7
    2a7e:	f000 f8ed 	bl	2c5c <__fpclassifyd>
    2a82:	2800      	cmp	r0, #0
    2a84:	d035      	beq.n	2af2 <sqrt+0x96>
    2a86:	f04f 0800 	mov.w	r8, #0
    2a8a:	f04f 0900 	mov.w	r9, #0
    2a8e:	4642      	mov	r2, r8
    2a90:	464b      	mov	r3, r9
    2a92:	4630      	mov	r0, r6
    2a94:	4639      	mov	r1, r7
    2a96:	f000 f96b 	bl	2d70 <__aeabi_dcmplt>
    2a9a:	b350      	cbz	r0, 2af2 <sqrt+0x96>
    2a9c:	2301      	movs	r3, #1
    2a9e:	9300      	str	r3, [sp, #0]
    2aa0:	4b16      	ldr	r3, [pc, #88]	; (2afc <sqrt+0xa0>)
    2aa2:	f89a 4000 	ldrb.w	r4, [sl]
    2aa6:	9301      	str	r3, [sp, #4]
    2aa8:	2300      	movs	r3, #0
    2aaa:	9308      	str	r3, [sp, #32]
    2aac:	e9cd 6704 	strd	r6, r7, [sp, #16]
    2ab0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    2ab4:	b914      	cbnz	r4, 2abc <sqrt+0x60>
    2ab6:	e9cd 8906 	strd	r8, r9, [sp, #24]
    2aba:	e009      	b.n	2ad0 <sqrt+0x74>
    2abc:	4642      	mov	r2, r8
    2abe:	464b      	mov	r3, r9
    2ac0:	4640      	mov	r0, r8
    2ac2:	4649      	mov	r1, r9
    2ac4:	f7ff f9e8 	bl	1e98 <__aeabi_ddiv>
    2ac8:	2c02      	cmp	r4, #2
    2aca:	e9cd 0106 	strd	r0, r1, [sp, #24]
    2ace:	d003      	beq.n	2ad8 <sqrt+0x7c>
    2ad0:	4668      	mov	r0, sp
    2ad2:	f000 f8eb 	bl	2cac <matherr>
    2ad6:	b918      	cbnz	r0, 2ae0 <sqrt+0x84>
    2ad8:	f000 f972 	bl	2dc0 <__errno>
    2adc:	2321      	movs	r3, #33	; 0x21
    2ade:	6003      	str	r3, [r0, #0]
    2ae0:	9b08      	ldr	r3, [sp, #32]
    2ae2:	b11b      	cbz	r3, 2aec <sqrt+0x90>
    2ae4:	f000 f96c 	bl	2dc0 <__errno>
    2ae8:	9b08      	ldr	r3, [sp, #32]
    2aea:	6003      	str	r3, [r0, #0]
    2aec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2af0:	e001      	b.n	2af6 <sqrt+0x9a>
    2af2:	4620      	mov	r0, r4
    2af4:	4629      	mov	r1, r5
    2af6:	b00a      	add	sp, #40	; 0x28
    2af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2afc:	0000303e 	.word	0x0000303e
    2b00:	40000438 	.word	0x40000438

00002b04 <__ieee754_sqrt>:
    2b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b08:	4f53      	ldr	r7, [pc, #332]	; (2c58 <__ieee754_sqrt+0x154>)
    2b0a:	f8df c14c 	ldr.w	ip, [pc, #332]	; 2c58 <__ieee754_sqrt+0x154>
    2b0e:	400f      	ands	r7, r1
    2b10:	4567      	cmp	r7, ip
    2b12:	4606      	mov	r6, r0
    2b14:	460d      	mov	r5, r1
    2b16:	4686      	mov	lr, r0
    2b18:	460a      	mov	r2, r1
    2b1a:	460c      	mov	r4, r1
    2b1c:	4603      	mov	r3, r0
    2b1e:	d108      	bne.n	2b32 <__ieee754_sqrt+0x2e>
    2b20:	4602      	mov	r2, r0
    2b22:	460b      	mov	r3, r1
    2b24:	f7ff f88e 	bl	1c44 <__aeabi_dmul>
    2b28:	4632      	mov	r2, r6
    2b2a:	462b      	mov	r3, r5
    2b2c:	f7fe fed8 	bl	18e0 <__adddf3>
    2b30:	e090      	b.n	2c54 <__ieee754_sqrt+0x150>
    2b32:	2900      	cmp	r1, #0
    2b34:	dc0e      	bgt.n	2b54 <__ieee754_sqrt+0x50>
    2b36:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
    2b3a:	4307      	orrs	r7, r0
    2b3c:	f000 8089 	beq.w	2c52 <__ieee754_sqrt+0x14e>
    2b40:	b141      	cbz	r1, 2b54 <__ieee754_sqrt+0x50>
    2b42:	4602      	mov	r2, r0
    2b44:	460b      	mov	r3, r1
    2b46:	f7fe fec9 	bl	18dc <__aeabi_dsub>
    2b4a:	4602      	mov	r2, r0
    2b4c:	460b      	mov	r3, r1
    2b4e:	f7ff f9a3 	bl	1e98 <__aeabi_ddiv>
    2b52:	e07f      	b.n	2c54 <__ieee754_sqrt+0x150>
    2b54:	1512      	asrs	r2, r2, #20
    2b56:	d113      	bne.n	2b80 <__ieee754_sqrt+0x7c>
    2b58:	b91c      	cbnz	r4, 2b62 <__ieee754_sqrt+0x5e>
    2b5a:	0adc      	lsrs	r4, r3, #11
    2b5c:	3a15      	subs	r2, #21
    2b5e:	055b      	lsls	r3, r3, #21
    2b60:	e7fa      	b.n	2b58 <__ieee754_sqrt+0x54>
    2b62:	2100      	movs	r1, #0
    2b64:	02e0      	lsls	r0, r4, #11
    2b66:	d402      	bmi.n	2b6e <__ieee754_sqrt+0x6a>
    2b68:	0064      	lsls	r4, r4, #1
    2b6a:	3101      	adds	r1, #1
    2b6c:	e7fa      	b.n	2b64 <__ieee754_sqrt+0x60>
    2b6e:	f1c1 0001 	rsb	r0, r1, #1
    2b72:	4402      	add	r2, r0
    2b74:	f1c1 0020 	rsb	r0, r1, #32
    2b78:	fa23 f000 	lsr.w	r0, r3, r0
    2b7c:	4304      	orrs	r4, r0
    2b7e:	408b      	lsls	r3, r1
    2b80:	f04f 0e00 	mov.w	lr, #0
    2b84:	4677      	mov	r7, lr
    2b86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
    2b8a:	07d1      	lsls	r1, r2, #31
    2b8c:	f3c4 0413 	ubfx	r4, r4, #0, #20
    2b90:	bf48      	it	mi
    2b92:	0fd9      	lsrmi	r1, r3, #31
    2b94:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    2b98:	bf44      	itt	mi
    2b9a:	005b      	lslmi	r3, r3, #1
    2b9c:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
    2ba0:	1056      	asrs	r6, r2, #1
    2ba2:	0fda      	lsrs	r2, r3, #31
    2ba4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    2ba8:	005b      	lsls	r3, r3, #1
    2baa:	2216      	movs	r2, #22
    2bac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    2bb0:	1878      	adds	r0, r7, r1
    2bb2:	42a0      	cmp	r0, r4
    2bb4:	bfde      	ittt	le
    2bb6:	1847      	addle	r7, r0, r1
    2bb8:	1a24      	suble	r4, r4, r0
    2bba:	448e      	addle	lr, r1
    2bbc:	0fd8      	lsrs	r0, r3, #31
    2bbe:	3a01      	subs	r2, #1
    2bc0:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    2bc4:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2bc8:	ea4f 0151 	mov.w	r1, r1, lsr #1
    2bcc:	d1f0      	bne.n	2bb0 <__ieee754_sqrt+0xac>
    2bce:	4694      	mov	ip, r2
    2bd0:	2520      	movs	r5, #32
    2bd2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    2bd6:	42a7      	cmp	r7, r4
    2bd8:	eb0c 0001 	add.w	r0, ip, r1
    2bdc:	db02      	blt.n	2be4 <__ieee754_sqrt+0xe0>
    2bde:	d116      	bne.n	2c0e <__ieee754_sqrt+0x10a>
    2be0:	4298      	cmp	r0, r3
    2be2:	d813      	bhi.n	2c0c <__ieee754_sqrt+0x108>
    2be4:	2800      	cmp	r0, #0
    2be6:	eb00 0c01 	add.w	ip, r0, r1
    2bea:	da05      	bge.n	2bf8 <__ieee754_sqrt+0xf4>
    2bec:	f1bc 0f00 	cmp.w	ip, #0
    2bf0:	db02      	blt.n	2bf8 <__ieee754_sqrt+0xf4>
    2bf2:	f107 0801 	add.w	r8, r7, #1
    2bf6:	e000      	b.n	2bfa <__ieee754_sqrt+0xf6>
    2bf8:	46b8      	mov	r8, r7
    2bfa:	1be4      	subs	r4, r4, r7
    2bfc:	4283      	cmp	r3, r0
    2bfe:	bf38      	it	cc
    2c00:	f104 34ff 	addcc.w	r4, r4, #4294967295	; 0xffffffff
    2c04:	1a1b      	subs	r3, r3, r0
    2c06:	440a      	add	r2, r1
    2c08:	4647      	mov	r7, r8
    2c0a:	e000      	b.n	2c0e <__ieee754_sqrt+0x10a>
    2c0c:	463c      	mov	r4, r7
    2c0e:	0fd8      	lsrs	r0, r3, #31
    2c10:	3d01      	subs	r5, #1
    2c12:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    2c16:	ea4f 0343 	mov.w	r3, r3, lsl #1
    2c1a:	ea4f 0151 	mov.w	r1, r1, lsr #1
    2c1e:	d1da      	bne.n	2bd6 <__ieee754_sqrt+0xd2>
    2c20:	4323      	orrs	r3, r4
    2c22:	d007      	beq.n	2c34 <__ieee754_sqrt+0x130>
    2c24:	1c53      	adds	r3, r2, #1
    2c26:	bf0b      	itete	eq
    2c28:	462a      	moveq	r2, r5
    2c2a:	f002 0301 	andne.w	r3, r2, #1
    2c2e:	f10e 0e01 	addeq.w	lr, lr, #1
    2c32:	18d2      	addne	r2, r2, r3
    2c34:	0853      	lsrs	r3, r2, #1
    2c36:	f01e 0f01 	tst.w	lr, #1
    2c3a:	bf18      	it	ne
    2c3c:	f043 4300 	orrne.w	r3, r3, #2147483648	; 0x80000000
    2c40:	4618      	mov	r0, r3
    2c42:	ea4f 016e 	mov.w	r1, lr, asr #1
    2c46:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
    2c4a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
    2c4e:	eb01 5506 	add.w	r5, r1, r6, lsl #20
    2c52:	4629      	mov	r1, r5
    2c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c58:	7ff00000 	.word	0x7ff00000

00002c5c <__fpclassifyd>:
    2c5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    2c60:	b510      	push	{r4, lr}
    2c62:	d01b      	beq.n	2c9c <__fpclassifyd+0x40>
    2c64:	4a0f      	ldr	r2, [pc, #60]	; (2ca4 <__fpclassifyd+0x48>)
    2c66:	f5a1 1480 	sub.w	r4, r1, #1048576	; 0x100000
    2c6a:	4294      	cmp	r4, r2
    2c6c:	d910      	bls.n	2c90 <__fpclassifyd+0x34>
    2c6e:	f101 41ff 	add.w	r1, r1, #2139095040	; 0x7f800000
    2c72:	4a0c      	ldr	r2, [pc, #48]	; (2ca4 <__fpclassifyd+0x48>)
    2c74:	f501 01e0 	add.w	r1, r1, #7340032	; 0x700000
    2c78:	4291      	cmp	r1, r2
    2c7a:	d909      	bls.n	2c90 <__fpclassifyd+0x34>
    2c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2c80:	d308      	bcc.n	2c94 <__fpclassifyd+0x38>
    2c82:	4a09      	ldr	r2, [pc, #36]	; (2ca8 <__fpclassifyd+0x4c>)
    2c84:	4293      	cmp	r3, r2
    2c86:	d107      	bne.n	2c98 <__fpclassifyd+0x3c>
    2c88:	fab0 f080 	clz	r0, r0
    2c8c:	0940      	lsrs	r0, r0, #5
    2c8e:	bd10      	pop	{r4, pc}
    2c90:	2004      	movs	r0, #4
    2c92:	bd10      	pop	{r4, pc}
    2c94:	2003      	movs	r0, #3
    2c96:	bd10      	pop	{r4, pc}
    2c98:	2000      	movs	r0, #0
    2c9a:	bd10      	pop	{r4, pc}
    2c9c:	2800      	cmp	r0, #0
    2c9e:	d1e6      	bne.n	2c6e <__fpclassifyd+0x12>
    2ca0:	2002      	movs	r0, #2
    2ca2:	bd10      	pop	{r4, pc}
    2ca4:	7fdfffff 	.word	0x7fdfffff
    2ca8:	7ff00000 	.word	0x7ff00000

00002cac <matherr>:
    2cac:	2000      	movs	r0, #0
    2cae:	4770      	bx	lr

00002cb0 <__gedf2>:
    2cb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    2cb4:	e006      	b.n	2cc4 <__cmpdf2+0x4>
    2cb6:	bf00      	nop

00002cb8 <__ledf2>:
    2cb8:	f04f 0c01 	mov.w	ip, #1
    2cbc:	e002      	b.n	2cc4 <__cmpdf2+0x4>
    2cbe:	bf00      	nop

00002cc0 <__cmpdf2>:
    2cc0:	f04f 0c01 	mov.w	ip, #1
    2cc4:	f84d cd04 	str.w	ip, [sp, #-4]!
    2cc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    2ccc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2cd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    2cd4:	bf18      	it	ne
    2cd6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    2cda:	d01b      	beq.n	2d14 <__cmpdf2+0x54>
    2cdc:	b001      	add	sp, #4
    2cde:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    2ce2:	bf0c      	ite	eq
    2ce4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    2ce8:	ea91 0f03 	teqne	r1, r3
    2cec:	bf02      	ittt	eq
    2cee:	ea90 0f02 	teqeq	r0, r2
    2cf2:	2000      	moveq	r0, #0
    2cf4:	4770      	bxeq	lr
    2cf6:	f110 0f00 	cmn.w	r0, #0
    2cfa:	ea91 0f03 	teq	r1, r3
    2cfe:	bf58      	it	pl
    2d00:	4299      	cmppl	r1, r3
    2d02:	bf08      	it	eq
    2d04:	4290      	cmpeq	r0, r2
    2d06:	bf2c      	ite	cs
    2d08:	17d8      	asrcs	r0, r3, #31
    2d0a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    2d0e:	f040 0001 	orr.w	r0, r0, #1
    2d12:	4770      	bx	lr
    2d14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    2d18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2d1c:	d102      	bne.n	2d24 <__cmpdf2+0x64>
    2d1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    2d22:	d107      	bne.n	2d34 <__cmpdf2+0x74>
    2d24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    2d28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    2d2c:	d1d6      	bne.n	2cdc <__cmpdf2+0x1c>
    2d2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    2d32:	d0d3      	beq.n	2cdc <__cmpdf2+0x1c>
    2d34:	f85d 0b04 	ldr.w	r0, [sp], #4
    2d38:	4770      	bx	lr
    2d3a:	bf00      	nop

00002d3c <__aeabi_cdrcmple>:
    2d3c:	4684      	mov	ip, r0
    2d3e:	4610      	mov	r0, r2
    2d40:	4662      	mov	r2, ip
    2d42:	468c      	mov	ip, r1
    2d44:	4619      	mov	r1, r3
    2d46:	4663      	mov	r3, ip
    2d48:	e000      	b.n	2d4c <__aeabi_cdcmpeq>
    2d4a:	bf00      	nop

00002d4c <__aeabi_cdcmpeq>:
    2d4c:	b501      	push	{r0, lr}
    2d4e:	f7ff ffb7 	bl	2cc0 <__cmpdf2>
    2d52:	2800      	cmp	r0, #0
    2d54:	bf48      	it	mi
    2d56:	f110 0f00 	cmnmi.w	r0, #0
    2d5a:	bd01      	pop	{r0, pc}

00002d5c <__aeabi_dcmpeq>:
    2d5c:	f84d ed08 	str.w	lr, [sp, #-8]!
    2d60:	f7ff fff4 	bl	2d4c <__aeabi_cdcmpeq>
    2d64:	bf0c      	ite	eq
    2d66:	2001      	moveq	r0, #1
    2d68:	2000      	movne	r0, #0
    2d6a:	f85d fb08 	ldr.w	pc, [sp], #8
    2d6e:	bf00      	nop

00002d70 <__aeabi_dcmplt>:
    2d70:	f84d ed08 	str.w	lr, [sp, #-8]!
    2d74:	f7ff ffea 	bl	2d4c <__aeabi_cdcmpeq>
    2d78:	bf34      	ite	cc
    2d7a:	2001      	movcc	r0, #1
    2d7c:	2000      	movcs	r0, #0
    2d7e:	f85d fb08 	ldr.w	pc, [sp], #8
    2d82:	bf00      	nop

00002d84 <__aeabi_dcmple>:
    2d84:	f84d ed08 	str.w	lr, [sp, #-8]!
    2d88:	f7ff ffe0 	bl	2d4c <__aeabi_cdcmpeq>
    2d8c:	bf94      	ite	ls
    2d8e:	2001      	movls	r0, #1
    2d90:	2000      	movhi	r0, #0
    2d92:	f85d fb08 	ldr.w	pc, [sp], #8
    2d96:	bf00      	nop

00002d98 <__aeabi_dcmpge>:
    2d98:	f84d ed08 	str.w	lr, [sp, #-8]!
    2d9c:	f7ff ffce 	bl	2d3c <__aeabi_cdrcmple>
    2da0:	bf94      	ite	ls
    2da2:	2001      	movls	r0, #1
    2da4:	2000      	movhi	r0, #0
    2da6:	f85d fb08 	ldr.w	pc, [sp], #8
    2daa:	bf00      	nop

00002dac <__aeabi_dcmpgt>:
    2dac:	f84d ed08 	str.w	lr, [sp, #-8]!
    2db0:	f7ff ffc4 	bl	2d3c <__aeabi_cdrcmple>
    2db4:	bf34      	ite	cc
    2db6:	2001      	movcc	r0, #1
    2db8:	2000      	movcs	r0, #0
    2dba:	f85d fb08 	ldr.w	pc, [sp], #8
    2dbe:	bf00      	nop

00002dc0 <__errno>:
    2dc0:	4b01      	ldr	r3, [pc, #4]	; (2dc8 <__errno+0x8>)
    2dc2:	6818      	ldr	r0, [r3, #0]
    2dc4:	4770      	bx	lr
    2dc6:	bf00      	nop
    2dc8:	40000008 	.word	0x40000008

00002dcc <help_msg>:
    2dcc:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
    2ddc:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
    2dec:	20202020 72617473 202d2074 72617473         start - star
    2dfc:	656d2074 72757361 6e656d65 200a7374     t measurements. 
    2e0c:	73202020 20706f74 6966202d 6873696e        stop - finish
    2e1c:	61656d20 65727573 746e656d 20200a73      measurements.  
    2e2c:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
    2e3c:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
    2e4c:	75746573 20200a70 616e2020 65766974     setup.    native
    2e5c:	6e202d20 662d6e6f 616d726f 20646574      - non-formated 
    2e6c:	7074756f 200a7475 61202020 69696373     output.    ascii
    2e7c:	6f202d20 75707475 6e692074 63736120      - output in asc
    2e8c:	70206969 65736572 7461746e 0a6e6f69     ii presentation.
	...

00002e9d <_ctype_>:
    2e9d:	20202000 20202020 28282020 20282828     .         ((((( 
    2ead:	20202020 20202020 20202020 20202020                     
    2ebd:	10108820 10101010 10101010 10101010      ...............
    2ecd:	04040410 04040404 10040404 10101010     ................
    2edd:	41411010 41414141 01010101 01010101     ..AAAAAA........
    2eed:	01010101 01010101 01010101 10101010     ................
    2efd:	42421010 42424242 02020202 02020202     ..BBBBBB........
    2f0d:	02020202 02020202 02020202 10101010     ................
    2f1d:	00000020 00000000 00000000 00000000      ...............
	...
    2f9d:	504c0a00 6e692043 61697469 657a696c     ..LPC initialize
    2fad:	5a000a64 7473003f 00747261 6174530a     d..Z?.start..Sta
    2fbd:	64657472 7473000a 7300706f 0a007465     rted..stop.set..
    2fcd:	000a4b4f 00746567 706c6568 74616e00     OK..get.help.nat
    2fdd:	00657669 69637361 30310069 0a7a6830     ive.ascii.100hz.
    2fed:	2e002d00 0a003000 6c6f560a 65676174     .-...0...Voltage
    2ffd:	2056202c 00203a20 7275430a 746e6572     , V  : ..Current
    300d:	6b6d202c 00203a41 00430056 33323130     , mkA: .V.C.0123
    301d:	37363534 62613938 66656463 6a696867     456789abcdefghij
    302d:	6e6d6c6b 7271706f 76757473 7a797877     klmnopqrstuvwxyz
    303d:	72717300 00000074                                .sqrt.
