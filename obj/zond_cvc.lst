
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000311d  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.excep    00000008  00003120  00003120  00013120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000059c  40000000  00003128  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000158  400005a0  000036c8  0002059c  2**3
                  ALLOC
  4 .stack        00000a10  400006f8  400006f8  0002059c  2**2
                  CONTENTS
  5 .usbram       00000000  7fd00000  7fd00000  00020fac  2**0
                  CONTENTS
  6 .etherram     00000000  7fe00000  7fe00000  00020fac  2**0
                  CONTENTS
  7 .batteryram   00000000  e0084000  e0084000  00020fac  2**0
                  CONTENTS
  8 .comment      000000b6  00000000  00000000  00020fac  2**0
                  CONTENTS, READONLY
  9 .ARM.attributes 0000002e  00000000  00000000  00021062  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000110  00000000  00000000  00021090  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000041d3  00000000  00000000  000211a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000cd6  00000000  00000000  00025373  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000d51  00000000  00000000  00026049  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000aec  00000000  00000000  00026d9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000009a7  00000000  00000000  00027888  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000105d  00000000  00000000  0002822f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000098  00000000  00000000  00029290  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
       c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
      10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
      14:	00000000 	.word	0x00000000
      18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
      20:	00000300 	.word	0x00000300
      24:	0000038c 	.word	0x0000038c
      28:	000003fc 	.word	0x000003fc
      2c:	000003ac 	.word	0x000003ac
      30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
     300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>
     304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
     308:	e1a0d000 	mov	sp, r0
     30c:	e2400000 	sub	r0, r0, #0
     310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
     314:	e1a0d000 	mov	sp, r0
     318:	e2400000 	sub	r0, r0, #0
     31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
     320:	e1a0d000 	mov	sp, r0
     324:	e2400010 	sub	r0, r0, #16
     328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
     32c:	e1a0d000 	mov	sp, r0
     330:	e2400c01 	sub	r0, r0, #256	; 0x100
     334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
     338:	e1a0d000 	mov	sp, r0
     33c:	e2400c01 	sub	r0, r0, #256	; 0x100
     340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
     344:	e1a0d000 	mov	sp, r0
     348:	e24dab02 	sub	sl, sp, #2048	; 0x800
     34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
     350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
     354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
     358:	e1520003 	cmp	r2, r3
     35c:	34910004 	ldrcc	r0, [r1], #4
     360:	34820004 	strcc	r0, [r2], #4
     364:	3afffffb 	bcc	358 <reset_handler+0x58>
     368:	e3a00000 	mov	r0, #0
     36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
     370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
     374:	e1510002 	cmp	r1, r2
     378:	34810004 	strcc	r0, [r1], #4
     37c:	3afffffc 	bcc	374 <reset_handler+0x74>
     380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
     384:	e1a0e00f 	mov	lr, pc
     388:	e12fff10 	bx	r0

0000038c <trap>:
     38c:	eafffffe 	b	38c <trap>
     390:	40001108 	.word	0x40001108
     394:	00003128 	.word	0x00003128
     398:	40000000 	.word	0x40000000
     39c:	4000059c 	.word	0x4000059c
     3a0:	400005a0 	.word	0x400005a0
     3a4:	400006f8 	.word	0x400006f8
     3a8:	000007bd 	.word	0x000007bd

000003ac <irq_handler>:
     3ac:	e24ee004 	sub	lr, lr, #4
     3b0:	e92d4000 	stmfd	sp!, {lr}
     3b4:	e14fe000 	mrs	lr, SPSR
     3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
     3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
     3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
     3c4:	e321f013 	msr	CPSR_c, #19
     3c8:	e92d4000 	stmfd	sp!, {lr}
     3cc:	e1a0e00f 	mov	lr, pc
     3d0:	e12fff10 	bx	r0
     3d4:	e8bd4000 	ldmfd	sp!, {lr}
     3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
     3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
     3e0:	e16ff00e 	msr	SPSR_fsxc, lr
     3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
     3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00
     3ec:	e8fd8000 	ldm	sp!, {pc}^
     3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
     3f4:	e24ee004 	sub	lr, lr, #4
     3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
     3fc:	e14fc000 	mrs	ip, SPSR
     400:	e31c0020 	tst	ip, #32
     404:	115ec0b2 	ldrhne	ip, [lr, #-2]
     408:	051ec004 	ldreq	ip, [lr, #-4]
     40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
     410:	e35c0007 	cmp	ip, #7
     414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
     418:	e1b0f00e 	movs	pc, lr
     41c:	00000438 	.word	0x00000438
     420:	00000448 	.word	0x00000448
     424:	00000458 	.word	0x00000458
     428:	0000047c 	.word	0x0000047c
     42c:	000004b4 	.word	0x000004b4
     430:	000004d4 	.word	0x000004d4
     434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
     438:	e14f0000 	mrs	r0, SPSR
     43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
     440:	e161f000 	msr	SPSR_c, r0
     444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:
     448:	e14f0000 	mrs	r0, SPSR
     44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     450:	e161f000 	msr	SPSR_c, r0
     454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:
     458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
     45c:	e3e00000 	mvn	r0, #0
     460:	e58c0014 	str	r0, [ip, #20]
     464:	e1a00820 	lsr	r0, r0, #16
     468:	e58c0024 	str	r0, [ip, #36]	; 0x24
     46c:	e3a00001 	mov	r0, #1
     470:	e58c0020 	str	r0, [ip, #32]
     474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
     478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:
     47c:	e3500020 	cmp	r0, #32
     480:	21b0f00e 	movscs	pc, lr
     484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
     488:	e78c1100 	str	r1, [ip, r0, lsl #2]
     48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
     490:	e78c2100 	str	r2, [ip, r0, lsl #2]
     494:	e3a01001 	mov	r1, #1
     498:	e1a01011 	lsl	r1, r1, r0
     49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
     4a0:	e59c200c 	ldr	r2, [ip, #12]
     4a4:	e1c22001 	bic	r2, r2, r1
     4a8:	e58c200c 	str	r2, [ip, #12]
     4ac:	e58c1010 	str	r1, [ip, #16]
     4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:
     4b4:	e3500020 	cmp	r0, #32
     4b8:	21b0f00e 	movscs	pc, lr
     4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
     4c0:	e3a01001 	mov	r1, #1
     4c4:	e1a01011 	lsl	r1, r1, r0
     4c8:	e58c100c 	str	r1, [ip, #12]
     4cc:	e58c1010 	str	r1, [ip, #16]
     4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:
     4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
     4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
     4dc:	e321f013 	msr	CPSR_c, #19
     4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:
     4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
     4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
     4ec:	e321f013 	msr	CPSR_c, #19
     4f0:	e1b0f00e 	movs	pc, lr
     4f4:	fffff000 	.word	0xfffff000
     4f8:	fffff100 	.word	0xfffff100
     4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
     500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
     504:	e211c003 	ands	ip, r1, #3
     508:	0a000012 	beq	558 <lb_align>
     50c:	e3c11003 	bic	r1, r1, #3
     510:	e1a0c18c 	lsl	ip, ip, #3
     514:	e26c8020 	rsb	r8, ip, #32
     518:	e8b10080 	ldm	r1!, {r7}
     51c:	e1a03007 	mov	r3, r7
     520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
     524:	e1a03c33 	lsr	r3, r3, ip
     528:	e1833814 	orr	r3, r3, r4, lsl r8
     52c:	e1a04c34 	lsr	r4, r4, ip
     530:	e1844815 	orr	r4, r4, r5, lsl r8
     534:	e1a05c35 	lsr	r5, r5, ip
     538:	e1855816 	orr	r5, r5, r6, lsl r8
     53c:	e1a06c36 	lsr	r6, r6, ip
     540:	e1866817 	orr	r6, r6, r7, lsl r8
     544:	e2522010 	subs	r2, r2, #16
     548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
     550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     554:	e12fff1e 	bx	lr

00000558 <lb_align>:
     558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
     55c:	e2522010 	subs	r2, r2, #16
     560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     564:	1afffffb 	bne	558 <lb_align>
     568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
     570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
     574:	e210c003 	ands	ip, r0, #3
     578:	0a000021 	beq	604 <sb_align>
     57c:	e1a0c18c 	lsl	ip, ip, #3
     580:	e26c8020 	rsb	r8, ip, #32
     584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
     588:	e4c04001 	strb	r4, [r0], #1
     58c:	e1a04424 	lsr	r4, r4, #8
     590:	e3100003 	tst	r0, #3
     594:	1afffffb 	bne	588 <Copy_al2un+0x18>
     598:	e1844c15 	orr	r4, r4, r5, lsl ip
     59c:	e1a05835 	lsr	r5, r5, r8
     5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
     5a4:	e1a06836 	lsr	r6, r6, r8
     5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
     5ac:	e2522010 	subs	r2, r2, #16
     5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}
     5b4:	e1a03007 	mov	r3, r7
     5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
     5bc:	e1a03833 	lsr	r3, r3, r8
     5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
     5c4:	e1a04834 	lsr	r4, r4, r8
     5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
     5cc:	e1a05835 	lsr	r5, r5, r8
     5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
     5d4:	e1a06836 	lsr	r6, r6, r8
     5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
     5dc:	e2522010 	subs	r2, r2, #16
     5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>
     5e8:	e1a07837 	lsr	r7, r7, r8
     5ec:	e25cc008 	subs	ip, ip, #8
     5f0:	e4c07001 	strb	r7, [r0], #1
     5f4:	e1a07427 	lsr	r7, r7, #8
     5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>
     5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     600:	e12fff1e 	bx	lr

00000604 <sb_align>:
     604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
     608:	e2522010 	subs	r2, r2, #16
     60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     610:	1afffffb 	bne	604 <sb_align>
     614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     618:	e12fff1e 	bx	lr

0000061c <gpio_init>:
uint8_t getflag =0;
uint64_t curr_big;
uint16_t volts, curr;
void gpio_init (void)
{	
	SCS |= 1;
     61c:	2301      	movs	r3, #1
     61e:	4a0e      	ldr	r2, [pc, #56]	; (658 <gpio_init+0x3c>)
     620:	6811      	ldr	r1, [r2, #0]
     622:	430b      	orrs	r3, r1
     624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
     626:	2200      	movs	r2, #0
     628:	4b0c      	ldr	r3, [pc, #48]	; (65c <gpio_init+0x40>)
     62a:	601a      	str	r2, [r3, #0]
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     62c:	2303      	movs	r3, #3
     62e:	490c      	ldr	r1, [pc, #48]	; (660 <gpio_init+0x44>)
     630:	6808      	ldr	r0, [r1, #0]
     632:	4303      	orrs	r3, r0
     634:	600b      	str	r3, [r1, #0]

	/* FIO1MASK = 0xFFFFFFFF & (0 << DAC) | (0 << ADC); */
	FIO1MASK = 0;
     636:	4b0b      	ldr	r3, [pc, #44]	; (664 <gpio_init+0x48>)
     638:	601a      	str	r2, [r3, #0]
	FIO1DIR |=  (1 << DAC) | (1 << ADC) | (1 << ADC_DIN) | (1 << ADC_SCLK);	/*  Slave select pins  */
     63a:	4b0b      	ldr	r3, [pc, #44]	; (668 <gpio_init+0x4c>)
     63c:	4a0b      	ldr	r2, [pc, #44]	; (66c <gpio_init+0x50>)
     63e:	6819      	ldr	r1, [r3, #0]
     640:	430a      	orrs	r2, r1
     642:	601a      	str	r2, [r3, #0]
	FIO1DIR &= ~(1 << ADC_DOUT);
     644:	490a      	ldr	r1, [pc, #40]	; (670 <gpio_init+0x54>)
     646:	681a      	ldr	r2, [r3, #0]
     648:	400a      	ands	r2, r1
     64a:	601a      	str	r2, [r3, #0]
	/* FIO1DIR |=  (1 << DAC) | (1 << ADC);[> 	Slave select pins  <] */
	FIO1SET |= (1 << ADC) | (1 << DAC) | (1 << ADC_SCLK);	 /*  Set hight level  */
     64c:	4a09      	ldr	r2, [pc, #36]	; (674 <gpio_init+0x58>)
     64e:	4b0a      	ldr	r3, [pc, #40]	; (678 <gpio_init+0x5c>)
     650:	6811      	ldr	r1, [r2, #0]
     652:	430b      	orrs	r3, r1
     654:	6013      	str	r3, [r2, #0]
}
     656:	4770      	bx	lr
     658:	e01fc1a0 	.word	0xe01fc1a0
     65c:	3fffc050 	.word	0x3fffc050
     660:	3fffc040 	.word	0x3fffc040
     664:	3fffc030 	.word	0x3fffc030
     668:	3fffc020 	.word	0x3fffc020
     66c:	21140000 	.word	0x21140000
     670:	ff7fffff 	.word	0xff7fffff
     674:	3fffc038 	.word	0x3fffc038
     678:	20140000 	.word	0x20140000

0000067c <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
     67c:	2301      	movs	r3, #1
     67e:	4083      	lsls	r3, r0
     680:	4a02      	ldr	r2, [pc, #8]	; (68c <led_set+0x10>)
     682:	6811      	ldr	r1, [r2, #0]
     684:	430b      	orrs	r3, r1
     686:	6013      	str	r3, [r2, #0]
}
     688:	4770      	bx	lr
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	3fffc058 	.word	0x3fffc058

00000690 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
     690:	2301      	movs	r3, #1
     692:	4083      	lsls	r3, r0
     694:	4a02      	ldr	r2, [pc, #8]	; (6a0 <led_clear+0x10>)
     696:	6811      	ldr	r1, [r2, #0]
     698:	430b      	orrs	r3, r1
     69a:	6013      	str	r3, [r2, #0]
}
     69c:	4770      	bx	lr
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	3fffc05c 	.word	0x3fffc05c

000006a4 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
     6a4:	2801      	cmp	r0, #1
     6a6:	d00b      	beq.n	6c0 <gpio_set+0x1c>
     6a8:	2800      	cmp	r0, #0
     6aa:	d002      	beq.n	6b2 <gpio_set+0xe>
     6ac:	2802      	cmp	r0, #2
     6ae:	d00d      	beq.n	6cc <gpio_set+0x28>
			FIO2SET |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6b0:	4770      	bx	lr
			FIO0SET |= (1 << pin);
     6b2:	4a07      	ldr	r2, [pc, #28]	; (6d0 <gpio_set+0x2c>)
			FIO2SET |= (1 << pin);
     6b4:	2301      	movs	r3, #1
     6b6:	408b      	lsls	r3, r1
     6b8:	6810      	ldr	r0, [r2, #0]
     6ba:	4303      	orrs	r3, r0
     6bc:	6013      	str	r3, [r2, #0]
}
     6be:	e7f7      	b.n	6b0 <gpio_set+0xc>
			FIO1SET |= (1 << pin);
     6c0:	4088      	lsls	r0, r1
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <gpio_set+0x30>)
     6c4:	681a      	ldr	r2, [r3, #0]
     6c6:	4310      	orrs	r0, r2
     6c8:	6018      	str	r0, [r3, #0]
			break;
     6ca:	e7f1      	b.n	6b0 <gpio_set+0xc>
			FIO2SET |= (1 << pin);
     6cc:	4a02      	ldr	r2, [pc, #8]	; (6d8 <gpio_set+0x34>)
     6ce:	e7f1      	b.n	6b4 <gpio_set+0x10>
     6d0:	3fffc018 	.word	0x3fffc018
     6d4:	3fffc038 	.word	0x3fffc038
     6d8:	3fffc058 	.word	0x3fffc058

000006dc <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
     6dc:	2801      	cmp	r0, #1
     6de:	d00b      	beq.n	6f8 <gpio_clear+0x1c>
     6e0:	2800      	cmp	r0, #0
     6e2:	d002      	beq.n	6ea <gpio_clear+0xe>
     6e4:	2802      	cmp	r0, #2
     6e6:	d00d      	beq.n	704 <gpio_clear+0x28>
			FIO2CLR |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6e8:	4770      	bx	lr
			FIO0CLR |= (1 << pin);
     6ea:	4a07      	ldr	r2, [pc, #28]	; (708 <gpio_clear+0x2c>)
			FIO2CLR |= (1 << pin);
     6ec:	2301      	movs	r3, #1
     6ee:	408b      	lsls	r3, r1
     6f0:	6810      	ldr	r0, [r2, #0]
     6f2:	4303      	orrs	r3, r0
     6f4:	6013      	str	r3, [r2, #0]
}
     6f6:	e7f7      	b.n	6e8 <gpio_clear+0xc>
			FIO1CLR |= (1 << pin);
     6f8:	4088      	lsls	r0, r1
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <gpio_clear+0x30>)
     6fc:	681a      	ldr	r2, [r3, #0]
     6fe:	4310      	orrs	r0, r2
     700:	6018      	str	r0, [r3, #0]
			break;
     702:	e7f1      	b.n	6e8 <gpio_clear+0xc>
			FIO2CLR |= (1 << pin);
     704:	4a02      	ldr	r2, [pc, #8]	; (710 <gpio_clear+0x34>)
     706:	e7f1      	b.n	6ec <gpio_clear+0x10>
     708:	3fffc01c 	.word	0x3fffc01c
     70c:	3fffc03c 	.word	0x3fffc03c
     710:	3fffc05c 	.word	0x3fffc05c

00000714 <pll_init>:
void pll_init(void)
{
	// 1. Init OSC
	SCS = (1 << 5);
     714:	2220      	movs	r2, #32
     716:	4b1f      	ldr	r3, [pc, #124]	; (794 <pll_init+0x80>)
{
     718:	b570      	push	{r4, r5, r6, lr}
	SCS = (1 << 5);
     71a:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
     71c:	1892      	adds	r2, r2, r2
     71e:	6819      	ldr	r1, [r3, #0]
     720:	4211      	tst	r1, r2
     722:	d0fc      	beq.n	71e <pll_init+0xa>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     724:	24aa      	movs	r4, #170	; 0xaa
	PLLFEED = 0x55;
     726:	2055      	movs	r0, #85	; 0x55
	PLLCON = 1; 
     728:	2101      	movs	r1, #1
	// 4. Disable PLL
	PLLCON = 0;
     72a:	2500      	movs	r5, #0
	PLLFEED = 0xAA;
     72c:	4b1a      	ldr	r3, [pc, #104]	; (798 <pll_init+0x84>)
	PLLCON = 1; 
     72e:	4a1b      	ldr	r2, [pc, #108]	; (79c <pll_init+0x88>)
     730:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     732:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     734:	6018      	str	r0, [r3, #0]
	PLLCON = 0;
     736:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     738:	4d19      	ldr	r5, [pc, #100]	; (7a0 <pll_init+0x8c>)
	PLLFEED = 0xAA;
     73a:	601c      	str	r4, [r3, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     73c:	4e19      	ldr	r6, [pc, #100]	; (7a4 <pll_init+0x90>)
	PLLFEED = 0x55;
     73e:	6018      	str	r0, [r3, #0]
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     740:	6029      	str	r1, [r5, #0]
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     742:	4d19      	ldr	r5, [pc, #100]	; (7a8 <pll_init+0x94>)
     744:	602e      	str	r6, [r5, #0]
	PLLFEED = 0xAA;
     746:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     748:	6018      	str	r0, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
     74a:	6815      	ldr	r5, [r2, #0]
     74c:	4329      	orrs	r1, r5
     74e:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     750:	2180      	movs	r1, #128	; 0x80
	PLLFEED = 0xAA;
     752:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     754:	6018      	str	r0, [r3, #0]
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     756:	4c15      	ldr	r4, [pc, #84]	; (7ac <pll_init+0x98>)
     758:	04c9      	lsls	r1, r1, #19
     75a:	6820      	ldr	r0, [r4, #0]
     75c:	4208      	tst	r0, r1
     75e:	d0fc      	beq.n	75a <pll_init+0x46>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
     760:	2003      	movs	r0, #3
     762:	4913      	ldr	r1, [pc, #76]	; (7b0 <pll_init+0x9c>)
     764:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
     766:	2000      	movs	r0, #0
     768:	4912      	ldr	r1, [pc, #72]	; (7b4 <pll_init+0xa0>)
     76a:	4c13      	ldr	r4, [pc, #76]	; (7b8 <pll_init+0xa4>)
     76c:	6008      	str	r0, [r1, #0]
     76e:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
     770:	3004      	adds	r0, #4
     772:	6008      	str	r0, [r1, #0]

	// 10. Connect the PLL
	PLLCON |= 1 << 1;
     774:	2102      	movs	r1, #2
     776:	6810      	ldr	r0, [r2, #0]
     778:	4301      	orrs	r1, r0
     77a:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     77c:	22aa      	movs	r2, #170	; 0xaa
     77e:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
     780:	3a55      	subs	r2, #85	; 0x55
     782:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
     784:	f000 f830 	bl	7e8 <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
     788:	f000 f82c 	bl	7e4 <IrqEnable>

}
     78c:	bc70      	pop	{r4, r5, r6}
     78e:	bc01      	pop	{r0}
     790:	4700      	bx	r0
     792:	46c0      	nop			; (mov r8, r8)
     794:	e01fc1a0 	.word	0xe01fc1a0
     798:	e01fc08c 	.word	0xe01fc08c
     79c:	e01fc080 	.word	0xe01fc080
     7a0:	e01fc10c 	.word	0xe01fc10c
     7a4:	00010017 	.word	0x00010017
     7a8:	e01fc084 	.word	0xe01fc084
     7ac:	e01fc088 	.word	0xe01fc088
     7b0:	e01fc104 	.word	0xe01fc104
     7b4:	e01fc1ac 	.word	0xe01fc1ac
     7b8:	e01fc1a8 	.word	0xe01fc1a8

000007bc <main>:


int main (void)
{
     7bc:	b510      	push	{r4, lr}
	uint16_t i, j, rise; 
	pll_init();
     7be:	f7ff ffa9 	bl	714 <pll_init>
	uart0_init();	
     7c2:	f000 f899 	bl	8f8 <uart0_init>
	/* SPI0_init(); */
	timer0_init();
     7c6:	f000 fce5 	bl	1194 <timer0_init>
	gpio_init();
     7ca:	f7ff ff27 	bl	61c <gpio_init>
	adc_init();
     7ce:	f000 fbb4 	bl	f3a <adc_init>
	UART0_send("\nLPC initialized\n", 17);
     7d2:	2111      	movs	r1, #17
     7d4:	4801      	ldr	r0, [pc, #4]	; (7dc <main+0x20>)
     7d6:	f000 f909 	bl	9ec <UART0_send>
     7da:	e7fe      	b.n	7da <main+0x1e>
     7dc:	00002f69 	.word	0x00002f69

000007e0 <IrqDisable>:
     7e0:	df00      	svc	0
     7e2:	4770      	bx	lr

000007e4 <IrqEnable>:
     7e4:	df01      	svc	1
     7e6:	4770      	bx	lr

000007e8 <ClearVector>:
     7e8:	df02      	svc	2
     7ea:	4770      	bx	lr

000007ec <RegisterIrq>:
     7ec:	df03      	svc	3
     7ee:	4770      	bx	lr

000007f0 <SelectFiq>:
     7f0:	df04      	svc	4
     7f2:	4770      	bx	lr

000007f4 <LoadFiqRegs>:
     7f4:	df05      	svc	5
     7f6:	4770      	bx	lr

000007f8 <StoreFiqRegs>:
     7f8:	df06      	svc	6
     7fa:	4770      	bx	lr

000007fc <Isr_UART0>:
{

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
     7fc:	4b13      	ldr	r3, [pc, #76]	; (84c <USR_Stack_Size+0x4c>)
     7fe:	681a      	ldr	r2, [r3, #0]
     800:	4b13      	ldr	r3, [pc, #76]	; (850 <USR_Stack_Size+0x50>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     802:	681b      	ldr	r3, [r3, #0]
     804:	061b      	lsls	r3, r3, #24
{
     806:	b570      	push	{r4, r5, r6, lr}
		d = U0RBR;
     808:	0e1b      	lsrs	r3, r3, #24
	if(iir & 1 != 0)
     80a:	07d2      	lsls	r2, r2, #31
     80c:	d514      	bpl.n	838 <USR_Stack_Size+0x38>
     80e:	4c11      	ldr	r4, [pc, #68]	; (854 <USR_Stack_Size+0x54>)
     810:	7821      	ldrb	r1, [r4, #0]
     812:	1c4a      	adds	r2, r1, #1
     814:	0612      	lsls	r2, r2, #24
     816:	0e12      	lsrs	r2, r2, #24
     818:	480f      	ldr	r0, [pc, #60]	; (858 <USR_Stack_Size+0x58>)
		if (d == '\n')
		{
			resiever[rec_len++] = 0;	/* Make null-terminated string */
     81a:	7022      	strb	r2, [r4, #0]
		if (d == '\n')
     81c:	2b0a      	cmp	r3, #10
     81e:	d10a      	bne.n	836 <USR_Stack_Size+0x36>
			resiever[rec_len++] = 0;	/* Make null-terminated string */
     820:	2500      	movs	r5, #0
     822:	5445      	strb	r5, [r0, r1]
			process_command(resiever);
     824:	f000 f9a0 	bl	b68 <process_command>
			rec_len = 0;
     828:	7025      	strb	r5, [r4, #0]
	}else if (d == 'O')
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);

	}
	VICVectAddr = 0;
     82a:	2200      	movs	r2, #0
     82c:	4b0b      	ldr	r3, [pc, #44]	; (85c <USR_Stack_Size+0x5c>)
     82e:	601a      	str	r2, [r3, #0]

}
     830:	bc70      	pop	{r4, r5, r6}
     832:	bc01      	pop	{r0}
     834:	4700      	bx	r0
			resiever[rec_len++] = d;
     836:	5443      	strb	r3, [r0, r1]
	if (d == 'L')
     838:	2b4c      	cmp	r3, #76	; 0x4c
     83a:	d103      	bne.n	844 <USR_Stack_Size+0x44>
		FIO2SET = (1 << LED1) | (1 << LED2);
     83c:	4b08      	ldr	r3, [pc, #32]	; (860 <USR_Stack_Size+0x60>)
		FIO2CLR = (1 << LED1) | (1 << LED2);
     83e:	2203      	movs	r2, #3
     840:	601a      	str	r2, [r3, #0]
     842:	e7f2      	b.n	82a <USR_Stack_Size+0x2a>
	}else if (d == 'O')
     844:	2b4f      	cmp	r3, #79	; 0x4f
     846:	d1f0      	bne.n	82a <USR_Stack_Size+0x2a>
		FIO2CLR = (1 << LED1) | (1 << LED2);
     848:	4b06      	ldr	r3, [pc, #24]	; (864 <USR_Stack_Size+0x64>)
     84a:	e7f8      	b.n	83e <USR_Stack_Size+0x3e>
     84c:	e000c014 	.word	0xe000c014
     850:	e000c000 	.word	0xe000c000
     854:	400005a2 	.word	0x400005a2
     858:	400006c4 	.word	0x400006c4
     85c:	ffffff00 	.word	0xffffff00
     860:	3fffc058 	.word	0x3fffc058
     864:	3fffc05c 	.word	0x3fffc05c

00000868 <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
     868:	4b01      	ldr	r3, [pc, #4]	; (870 <uart0_test+0x8>)
     86a:	8898      	ldrh	r0, [r3, #4]
}
     86c:	4770      	bx	lr
     86e:	46c0      	nop			; (mov r8, r8)
     870:	400005a4 	.word	0x400005a4

00000874 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
     874:	4a0a      	ldr	r2, [pc, #40]	; (8a0 <uart0_getc+0x2c>)
     876:	8893      	ldrh	r3, [r2, #4]
     878:	2b00      	cmp	r3, #0
     87a:	d0fc      	beq.n	876 <uart0_getc+0x2>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
     87c:	8813      	ldrh	r3, [r2, #0]
	d = RxBuff0.buff[i++];
     87e:	18d1      	adds	r1, r2, r3
     880:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
     882:	217f      	movs	r1, #127	; 0x7f
	d = RxBuff0.buff[i++];
     884:	3301      	adds	r3, #1
	RxBuff0.ri = i % UART0_RXB;
     886:	400b      	ands	r3, r1
     888:	8013      	strh	r3, [r2, #0]
	U0IER = 0;		/* Disable interrupts */
     88a:	2300      	movs	r3, #0
     88c:	4905      	ldr	r1, [pc, #20]	; (8a4 <uart0_getc+0x30>)
     88e:	600b      	str	r3, [r1, #0]
	RxBuff0.ct--;
     890:	8893      	ldrh	r3, [r2, #4]
     892:	3b01      	subs	r3, #1
     894:	041b      	lsls	r3, r3, #16
     896:	0c1b      	lsrs	r3, r3, #16
     898:	8093      	strh	r3, [r2, #4]
	U0IER = 0x07;	/* Reenable interrupt */
     89a:	2307      	movs	r3, #7
     89c:	600b      	str	r3, [r1, #0]

	return d;
}
     89e:	4770      	bx	lr
     8a0:	400005a4 	.word	0x400005a4
     8a4:	e000c004 	.word	0xe000c004

000008a8 <uart0_putc>:


void uart0_putc (uint8_t d)
{
     8a8:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
     8aa:	4b10      	ldr	r3, [pc, #64]	; (8ec <uart0_putc+0x44>)
     8ac:	889a      	ldrh	r2, [r3, #4]
     8ae:	2a7f      	cmp	r2, #127	; 0x7f
     8b0:	d8fc      	bhi.n	8ac <uart0_putc+0x4>

	U0IER = 0x05;		/* Disable Tx Interrupt */
     8b2:	2205      	movs	r2, #5
     8b4:	490e      	ldr	r1, [pc, #56]	; (8f0 <uart0_putc+0x48>)
     8b6:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
     8b8:	88da      	ldrh	r2, [r3, #6]
     8ba:	2a00      	cmp	r2, #0
     8bc:	d010      	beq.n	8e0 <uart0_putc+0x38>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
     8be:	885a      	ldrh	r2, [r3, #2]
		TxBuff0.buff[i++] = d;
     8c0:	189c      	adds	r4, r3, r2
     8c2:	7220      	strb	r0, [r4, #8]
		TxBuff0.wi = i % UART0_TXB;
     8c4:	207f      	movs	r0, #127	; 0x7f
		TxBuff0.buff[i++] = d;
     8c6:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
     8c8:	4002      	ands	r2, r0
     8ca:	805a      	strh	r2, [r3, #2]
		TxBuff0.ct++;
     8cc:	889a      	ldrh	r2, [r3, #4]
     8ce:	3201      	adds	r2, #1
     8d0:	0412      	lsls	r2, r2, #16
     8d2:	0c12      	lsrs	r2, r2, #16
     8d4:	809a      	strh	r2, [r3, #4]
	} else {
		U0THR = d;		/* Trigger Tx sequense */
		TxBuff0.act = 1;
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
     8d6:	2307      	movs	r3, #7
     8d8:	600b      	str	r3, [r1, #0]
}
     8da:	bc10      	pop	{r4}
     8dc:	bc01      	pop	{r0}
     8de:	4700      	bx	r0
		U0THR = d;		/* Trigger Tx sequense */
     8e0:	4a04      	ldr	r2, [pc, #16]	; (8f4 <uart0_putc+0x4c>)
     8e2:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
     8e4:	2201      	movs	r2, #1
     8e6:	80da      	strh	r2, [r3, #6]
     8e8:	e7f5      	b.n	8d6 <uart0_putc+0x2e>
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	4000062a 	.word	0x4000062a
     8f0:	e000c004 	.word	0xe000c004
     8f4:	e000c000 	.word	0xe000c000

000008f8 <uart0_init>:


void uart0_init (void)
{
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     8f8:	2308      	movs	r3, #8
     8fa:	4a16      	ldr	r2, [pc, #88]	; (954 <uart0_init+0x5c>)
     8fc:	6811      	ldr	r1, [r2, #0]
     8fe:	430b      	orrs	r3, r1
{
     900:	b510      	push	{r4, lr}
	PCONP |= 1 << PCUART0; // Питание на UART0
     902:	6013      	str	r3, [r2, #0]
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     904:	2283      	movs	r2, #131	; 0x83
     906:	4b14      	ldr	r3, [pc, #80]	; (958 <uart0_init+0x60>)
     908:	6819      	ldr	r1, [r3, #0]
     90a:	430a      	orrs	r2, r1
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     90c:	21c1      	movs	r1, #193	; 0xc1
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     90e:	601a      	str	r2, [r3, #0]
	U0FDR = 0xC1;
     910:	4a12      	ldr	r2, [pc, #72]	; (95c <uart0_init+0x64>)
     912:	6011      	str	r1, [r2, #0]
	U0DLL = 0x09;
     914:	4a12      	ldr	r2, [pc, #72]	; (960 <uart0_init+0x68>)
     916:	39b8      	subs	r1, #184	; 0xb8
     918:	6011      	str	r1, [r2, #0]
	U0DLM = 0x00;
     91a:	2100      	movs	r1, #0
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     91c:	2080      	movs	r0, #128	; 0x80
	U0DLM = 0x00;
     91e:	4a11      	ldr	r2, [pc, #68]	; (964 <uart0_init+0x6c>)
     920:	6011      	str	r1, [r2, #0]
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     922:	6819      	ldr	r1, [r3, #0]
     924:	4381      	bics	r1, r0
     926:	6019      	str	r1, [r3, #0]

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     928:	2307      	movs	r3, #7
     92a:	490f      	ldr	r1, [pc, #60]	; (968 <uart0_init+0x70>)
     92c:	6808      	ldr	r0, [r1, #0]
     92e:	4303      	orrs	r3, r0
     930:	600b      	str	r3, [r1, #0]

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     932:	2350      	movs	r3, #80	; 0x50
     934:	490d      	ldr	r1, [pc, #52]	; (96c <uart0_init+0x74>)
     936:	6808      	ldr	r0, [r1, #0]
     938:	4303      	orrs	r3, r0
     93a:	600b      	str	r3, [r1, #0]

	//Interrupts
	/* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
	/* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
	U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
     93c:	2301      	movs	r3, #1
     93e:	6811      	ldr	r1, [r2, #0]
     940:	430b      	orrs	r3, r1
     942:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
     944:	490a      	ldr	r1, [pc, #40]	; (970 <uart0_init+0x78>)
     946:	220f      	movs	r2, #15
     948:	2006      	movs	r0, #6
     94a:	f7ff ff4f 	bl	7ec <RegisterIrq>

}
     94e:	bc10      	pop	{r4}
     950:	bc01      	pop	{r0}
     952:	4700      	bx	r0
     954:	e01fc0c4 	.word	0xe01fc0c4
     958:	e000c00c 	.word	0xe000c00c
     95c:	e000c028 	.word	0xe000c028
     960:	e000c000 	.word	0xe000c000
     964:	e000c004 	.word	0xe000c004
     968:	e000c008 	.word	0xe000c008
     96c:	e002c000 	.word	0xe002c000
     970:	000007fd 	.word	0x000007fd

00000974 <hex_to_int>:


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     974:	210a      	movs	r1, #10
	uint16_t first = c / 16 - 3;
     976:	0902      	lsrs	r2, r0, #4
     978:	3a03      	subs	r2, #3
	uint16_t result = first*10 + second;
     97a:	000b      	movs	r3, r1
     97c:	4353      	muls	r3, r2
	uint16_t second = c % 16;
     97e:	220f      	movs	r2, #15
     980:	4010      	ands	r0, r2
	uint16_t result = first*10 + second;
     982:	18c0      	adds	r0, r0, r3
     984:	0400      	lsls	r0, r0, #16
     986:	0c00      	lsrs	r0, r0, #16
	if(result > 9) result--;
     988:	2809      	cmp	r0, #9
     98a:	d902      	bls.n	992 <hex_to_int+0x1e>
     98c:	3801      	subs	r0, #1
     98e:	0400      	lsls	r0, r0, #16
     990:	0c00      	lsrs	r0, r0, #16
	return result;
}
     992:	4770      	bx	lr

00000994 <hex_to_ascii>:

uint16_t hex_to_ascii(uint16_t c){
     994:	b570      	push	{r4, r5, r6, lr}
     996:	0004      	movs	r4, r0
	uint16_t high = hex_to_int(c >> 8) * 16;
     998:	0a00      	lsrs	r0, r0, #8
     99a:	f7ff ffeb 	bl	974 <hex_to_int>
     99e:	0005      	movs	r5, r0
	uint16_t low = hex_to_int(c & 0xFF);
     9a0:	0620      	lsls	r0, r4, #24
     9a2:	0e00      	lsrs	r0, r0, #24
     9a4:	f7ff ffe6 	bl	974 <hex_to_int>
	uint16_t high = hex_to_int(c >> 8) * 16;
     9a8:	012d      	lsls	r5, r5, #4
	return high+low;
     9aa:	1940      	adds	r0, r0, r5
     9ac:	0400      	lsls	r0, r0, #16
     9ae:	0c00      	lsrs	r0, r0, #16
}
     9b0:	bc70      	pop	{r4, r5, r6}
     9b2:	bc02      	pop	{r1}
     9b4:	4708      	bx	r1

000009b6 <UART0_send_byte>:
#endif
}
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9b6:	2101      	movs	r1, #1
     9b8:	4b09      	ldr	r3, [pc, #36]	; (9e0 <UART0_send_byte+0x2a>)
     9ba:	681a      	ldr	r2, [r3, #0]
     9bc:	438a      	bics	r2, r1
{
     9be:	b510      	push	{r4, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9c0:	601a      	str	r2, [r3, #0]
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9c2:	2220      	movs	r2, #32
     9c4:	4c07      	ldr	r4, [pc, #28]	; (9e4 <UART0_send_byte+0x2e>)
     9c6:	6821      	ldr	r1, [r4, #0]
     9c8:	4211      	tst	r1, r2
     9ca:	d0fc      	beq.n	9c6 <UART0_send_byte+0x10>
	U0THR = byte;
     9cc:	4a06      	ldr	r2, [pc, #24]	; (9e8 <UART0_send_byte+0x32>)
     9ce:	6010      	str	r0, [r2, #0]
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9d0:	2201      	movs	r2, #1
     9d2:	6819      	ldr	r1, [r3, #0]
     9d4:	430a      	orrs	r2, r1
     9d6:	601a      	str	r2, [r3, #0]
}
     9d8:	bc10      	pop	{r4}
     9da:	bc01      	pop	{r0}
     9dc:	4700      	bx	r0
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	e000c004 	.word	0xe000c004
     9e4:	e000c014 	.word	0xe000c014
     9e8:	e000c000 	.word	0xe000c000

000009ec <UART0_send>:
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
     9ec:	b570      	push	{r4, r5, r6, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9ee:	2401      	movs	r4, #1
     9f0:	4b0d      	ldr	r3, [pc, #52]	; (a28 <Stack_Size+0x18>)
     9f2:	681a      	ldr	r2, [r3, #0]
     9f4:	43a2      	bics	r2, r4
     9f6:	601a      	str	r2, [r3, #0]

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     9f8:	4d0c      	ldr	r5, [pc, #48]	; (a2c <Stack_Size+0x1c>)
     9fa:	001a      	movs	r2, r3
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9fc:	4b0c      	ldr	r3, [pc, #48]	; (a30 <Stack_Size+0x20>)
     9fe:	341f      	adds	r4, #31
	while ( Length != 0 )
     a00:	2900      	cmp	r1, #0
     a02:	d106      	bne.n	a12 <Stack_Size+0x2>
		BufferPtr++;
		Length--;
	}
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a04:	2301      	movs	r3, #1
     a06:	6811      	ldr	r1, [r2, #0]
     a08:	430b      	orrs	r3, r1
     a0a:	6013      	str	r3, [r2, #0]

	return;
}
     a0c:	bc70      	pop	{r4, r5, r6}
     a0e:	bc01      	pop	{r0}
     a10:	4700      	bx	r0
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a12:	681e      	ldr	r6, [r3, #0]
     a14:	4226      	tst	r6, r4
     a16:	d0fc      	beq.n	a12 <Stack_Size+0x2>
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a18:	7806      	ldrb	r6, [r0, #0]
		Length--;
     a1a:	3901      	subs	r1, #1
     a1c:	0409      	lsls	r1, r1, #16
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a1e:	602e      	str	r6, [r5, #0]
		BufferPtr++;
     a20:	3001      	adds	r0, #1
		Length--;
     a22:	0c09      	lsrs	r1, r1, #16
     a24:	e7ec      	b.n	a00 <UART0_send+0x14>
     a26:	46c0      	nop			; (mov r8, r8)
     a28:	e000c004 	.word	0xe000c004
     a2c:	e000c000 	.word	0xe000c000
     a30:	e000c014 	.word	0xe000c014

00000a34 <atof>:
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
	int c;
	uint8_t neg_flag = 0;
     a34:	2200      	movs	r2, #0
{
     a36:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((c = *s) == '-')
     a38:	7803      	ldrb	r3, [r0, #0]
{
     a3a:	b085      	sub	sp, #20
	uint8_t neg_flag = 0;
     a3c:	9202      	str	r2, [sp, #8]
	if ((c = *s) == '-')
     a3e:	2b2d      	cmp	r3, #45	; 0x2d
     a40:	d102      	bne.n	a48 <atof+0x14>
	{
		neg_flag = 1;
     a42:	3b2c      	subs	r3, #44	; 0x2c
     a44:	9302      	str	r3, [sp, #8]
     a46:	3001      	adds	r0, #1
	uint8_t neg_flag = 0;
     a48:	2700      	movs	r7, #0
     a4a:	003e      	movs	r6, r7
     a4c:	e011      	b.n	a72 <atof+0x3e>
		*s++;
	}
	while ((c = *s++) != '\0' && isdigit(c)) {
		a = a*10.0 + (c - '0');
     a4e:	2200      	movs	r2, #0
     a50:	4b42      	ldr	r3, [pc, #264]	; (b5c <atof+0x128>)
     a52:	0038      	movs	r0, r7
     a54:	0031      	movs	r1, r6
     a56:	f002 f9e1 	bl	2e1c <____aeabi_dmul_from_thumb>
     a5a:	0006      	movs	r6, r0
     a5c:	000f      	movs	r7, r1
     a5e:	0020      	movs	r0, r4
     a60:	f002 f9ce 	bl	2e00 <____aeabi_i2d_from_thumb>
     a64:	0032      	movs	r2, r6
     a66:	003b      	movs	r3, r7
     a68:	f002 f9ce 	bl	2e08 <____aeabi_dadd_from_thumb>
     a6c:	000e      	movs	r6, r1
     a6e:	0007      	movs	r7, r0
	while ((c = *s++) != '\0' && isdigit(c)) {
     a70:	9801      	ldr	r0, [sp, #4]
     a72:	1c43      	adds	r3, r0, #1
     a74:	9301      	str	r3, [sp, #4]
     a76:	7803      	ldrb	r3, [r0, #0]
     a78:	2b00      	cmp	r3, #0
     a7a:	d04f      	beq.n	b1c <atof+0xe8>
     a7c:	001c      	movs	r4, r3
     a7e:	3c30      	subs	r4, #48	; 0x30
     a80:	2c09      	cmp	r4, #9
     a82:	d9e4      	bls.n	a4e <atof+0x1a>
     a84:	9a01      	ldr	r2, [sp, #4]
	}
	if (c == '.') {
     a86:	2b2e      	cmp	r3, #46	; 0x2e
     a88:	d01e      	beq.n	ac8 <atof+0x94>
	while ((c = *s++) != '\0' && isdigit(c)) {
     a8a:	0015      	movs	r5, r2
	int e = 0;
     a8c:	2400      	movs	r4, #0
		while ((c = *s++) != '\0' && isdigit(c)) {
			a = a*10.0 + (c - '0');
			e = e-1;
		}
	}
	if (c == 'e' || c == 'E') {
     a8e:	2b65      	cmp	r3, #101	; 0x65
     a90:	d001      	beq.n	a96 <atof+0x62>
     a92:	2b45      	cmp	r3, #69	; 0x45
     a94:	d140      	bne.n	b18 <atof+0xe4>
		int sign = 1;
		int i = 0;
		c = *s++;
     a96:	782b      	ldrb	r3, [r5, #0]
		if (c == '+')
     a98:	2b2b      	cmp	r3, #43	; 0x2b
     a9a:	d120      	bne.n	ade <atof+0xaa>
			c = *s++;
     a9c:	786b      	ldrb	r3, [r5, #1]
     a9e:	1caa      	adds	r2, r5, #2
		int sign = 1;
     aa0:	2001      	movs	r0, #1
     aa2:	e023      	b.n	aec <atof+0xb8>
			a = a*10.0 + (c - '0');
     aa4:	2200      	movs	r2, #0
     aa6:	4b2d      	ldr	r3, [pc, #180]	; (b5c <atof+0x128>)
     aa8:	0038      	movs	r0, r7
     aaa:	0031      	movs	r1, r6
     aac:	f002 f9b6 	bl	2e1c <____aeabi_dmul_from_thumb>
     ab0:	0006      	movs	r6, r0
     ab2:	000f      	movs	r7, r1
     ab4:	9803      	ldr	r0, [sp, #12]
     ab6:	f002 f9a3 	bl	2e00 <____aeabi_i2d_from_thumb>
     aba:	0032      	movs	r2, r6
     abc:	003b      	movs	r3, r7
     abe:	f002 f9a3 	bl	2e08 <____aeabi_dadd_from_thumb>
		while ((c = *s++) != '\0' && isdigit(c)) {
     ac2:	002a      	movs	r2, r5
			a = a*10.0 + (c - '0');
     ac4:	0007      	movs	r7, r0
     ac6:	000e      	movs	r6, r1
     ac8:	9b01      	ldr	r3, [sp, #4]
		while ((c = *s++) != '\0' && isdigit(c)) {
     aca:	1c55      	adds	r5, r2, #1
     acc:	1a9c      	subs	r4, r3, r2
     ace:	7812      	ldrb	r2, [r2, #0]
     ad0:	1e13      	subs	r3, r2, #0
     ad2:	d021      	beq.n	b18 <atof+0xe4>
     ad4:	3a30      	subs	r2, #48	; 0x30
     ad6:	9203      	str	r2, [sp, #12]
     ad8:	2a09      	cmp	r2, #9
     ada:	d9e3      	bls.n	aa4 <atof+0x70>
     adc:	e7d7      	b.n	a8e <atof+0x5a>
		c = *s++;
     ade:	1c6a      	adds	r2, r5, #1
		else if (c == '-') {
     ae0:	2b2d      	cmp	r3, #45	; 0x2d
     ae2:	d1dd      	bne.n	aa0 <atof+0x6c>
			c = *s++;
			sign = -1;
     ae4:	2001      	movs	r0, #1
			c = *s++;
     ae6:	786b      	ldrb	r3, [r5, #1]
     ae8:	1caa      	adds	r2, r5, #2
			sign = -1;
     aea:	4240      	negs	r0, r0
		int sign = 1;
     aec:	2100      	movs	r1, #0
		}
		while (isdigit(c)) {
			i = i*10 + (c - '0');
     aee:	250a      	movs	r5, #10
		int sign = 1;
     af0:	468c      	mov	ip, r1
     af2:	e005      	b.n	b00 <atof+0xcc>
			i = i*10 + (c - '0');
     af4:	4661      	mov	r1, ip
     af6:	4369      	muls	r1, r5
     af8:	185b      	adds	r3, r3, r1
     afa:	469c      	mov	ip, r3
			c = *s++;
     afc:	7813      	ldrb	r3, [r2, #0]
     afe:	3201      	adds	r2, #1
		while (isdigit(c)) {
     b00:	3b30      	subs	r3, #48	; 0x30
     b02:	2b09      	cmp	r3, #9
     b04:	d9f6      	bls.n	af4 <atof+0xc0>
		}
		e += i*sign;
     b06:	4661      	mov	r1, ip
     b08:	4341      	muls	r1, r0
     b0a:	190c      	adds	r4, r1, r4
     b0c:	0025      	movs	r5, r4
	}
	while (e > 0) {
     b0e:	2d00      	cmp	r5, #0
     b10:	dc10      	bgt.n	b34 <atof+0x100>
     b12:	43e3      	mvns	r3, r4
     b14:	17db      	asrs	r3, r3, #31
     b16:	439c      	bics	r4, r3
		a *= 10.0;
		e--;
	}
	while (e < 0) {
     b18:	2c00      	cmp	r4, #0
     b1a:	d115      	bne.n	b48 <atof+0x114>
		a *= 0.1;
		e++;
	}
	if (neg_flag == 1)
     b1c:	9b02      	ldr	r3, [sp, #8]
     b1e:	2b01      	cmp	r3, #1
     b20:	d102      	bne.n	b28 <atof+0xf4>
		a = a*(-1);
     b22:	2380      	movs	r3, #128	; 0x80
     b24:	061b      	lsls	r3, r3, #24
     b26:	18f6      	adds	r6, r6, r3
	return a;
}
     b28:	0038      	movs	r0, r7
     b2a:	0031      	movs	r1, r6
     b2c:	b005      	add	sp, #20
     b2e:	bcf0      	pop	{r4, r5, r6, r7}
     b30:	bc04      	pop	{r2}
     b32:	4710      	bx	r2
		a *= 10.0;
     b34:	0038      	movs	r0, r7
     b36:	0031      	movs	r1, r6
     b38:	2200      	movs	r2, #0
     b3a:	4b08      	ldr	r3, [pc, #32]	; (b5c <atof+0x128>)
     b3c:	f002 f96e 	bl	2e1c <____aeabi_dmul_from_thumb>
		e--;
     b40:	3d01      	subs	r5, #1
		a *= 10.0;
     b42:	0007      	movs	r7, r0
     b44:	000e      	movs	r6, r1
     b46:	e7e2      	b.n	b0e <atof+0xda>
		a *= 0.1;
     b48:	0038      	movs	r0, r7
     b4a:	0031      	movs	r1, r6
     b4c:	4a04      	ldr	r2, [pc, #16]	; (b60 <atof+0x12c>)
     b4e:	4b05      	ldr	r3, [pc, #20]	; (b64 <atof+0x130>)
     b50:	f002 f964 	bl	2e1c <____aeabi_dmul_from_thumb>
		e++;
     b54:	3401      	adds	r4, #1
		a *= 0.1;
     b56:	0007      	movs	r7, r0
     b58:	000e      	movs	r6, r1
     b5a:	e7dd      	b.n	b18 <atof+0xe4>
     b5c:	40240000 	.word	0x40240000
     b60:	9999999a 	.word	0x9999999a
     b64:	3fb99999 	.word	0x3fb99999

00000b68 <process_command>:
{
     b68:	b570      	push	{r4, r5, r6, lr}
		if(strncmp(cmd, "Z?", 2) == 0)
     b6a:	2202      	movs	r2, #2
     b6c:	495b      	ldr	r1, [pc, #364]	; (cdc <process_command+0x174>)
{
     b6e:	0005      	movs	r5, r0
		if(strncmp(cmd, "Z?", 2) == 0)
     b70:	f000 fdc6 	bl	1700 <strncmp>
     b74:	2800      	cmp	r0, #0
     b76:	d106      	bne.n	b86 <process_command+0x1e>
		UART0_send("z\n", 2);
     b78:	4859      	ldr	r0, [pc, #356]	; (ce0 <process_command+0x178>)
     b7a:	2102      	movs	r1, #2
     b7c:	f7ff ff36 	bl	9ec <UART0_send>
		led_set(LED2);
     b80:	2001      	movs	r0, #1
     b82:	f7ff fd7b 	bl	67c <led_set>
	if(strncmp(cmd, "start", 5) == 0)
     b86:	2205      	movs	r2, #5
     b88:	4956      	ldr	r1, [pc, #344]	; (ce4 <process_command+0x17c>)
     b8a:	0028      	movs	r0, r5
     b8c:	f000 fdb8 	bl	1700 <strncmp>
     b90:	1e04      	subs	r4, r0, #0
     b92:	d10f      	bne.n	bb4 <process_command+0x4c>
		UART0_send("\nStarted\n", 9);
     b94:	2109      	movs	r1, #9
     b96:	4854      	ldr	r0, [pc, #336]	; (ce8 <process_command+0x180>)
     b98:	f7ff ff28 	bl	9ec <UART0_send>
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     b9c:	210d      	movs	r1, #13
     b9e:	2002      	movs	r0, #2
     ba0:	f7ff fd80 	bl	6a4 <gpio_set>
		led_set(LED1);
     ba4:	0020      	movs	r0, r4
     ba6:	f7ff fd69 	bl	67c <led_set>
		timer0_set_freq(1);
     baa:	2001      	movs	r0, #1
     bac:	f000 fad0 	bl	1150 <timer0_set_freq>
		timer0_start();
     bb0:	f000 fb22 	bl	11f8 <timer0_start>
	if(strncmp(cmd, "stop", 4) == 0)
     bb4:	2204      	movs	r2, #4
     bb6:	494d      	ldr	r1, [pc, #308]	; (cec <process_command+0x184>)
     bb8:	0028      	movs	r0, r5
     bba:	f000 fda1 	bl	1700 <strncmp>
     bbe:	1e04      	subs	r4, r0, #0
     bc0:	d116      	bne.n	bf0 <process_command+0x88>
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     bc2:	210d      	movs	r1, #13
     bc4:	2002      	movs	r0, #2
     bc6:	f7ff fd89 	bl	6dc <gpio_clear>
		led_clear(LED1);
     bca:	0020      	movs	r0, r4
		FIO1CLR |= 1 << DAC;
     bcc:	2480      	movs	r4, #128	; 0x80
		led_clear(LED1);
     bce:	f7ff fd5f 	bl	690 <led_clear>
		timer0_stop();
     bd2:	f000 fb21 	bl	1218 <timer0_stop>
		FIO1CLR |= 1 << DAC;
     bd6:	4a46      	ldr	r2, [pc, #280]	; (cf0 <process_command+0x188>)
     bd8:	6813      	ldr	r3, [r2, #0]
     bda:	05a4      	lsls	r4, r4, #22
     bdc:	4323      	orrs	r3, r4
     bde:	6013      	str	r3, [r2, #0]
		SPI0_send_2_byte((0x1000 | 578), DAC);
     be0:	211d      	movs	r1, #29
     be2:	4844      	ldr	r0, [pc, #272]	; (cf4 <process_command+0x18c>)
     be4:	f000 f94c 	bl	e80 <SPI0_send_2_byte>
		FIO1SET |= 1 << DAC;
     be8:	4b43      	ldr	r3, [pc, #268]	; (cf8 <process_command+0x190>)
     bea:	681a      	ldr	r2, [r3, #0]
     bec:	4314      	orrs	r4, r2
     bee:	601c      	str	r4, [r3, #0]
	if(strncmp(cmd, "set", 3) == 0)
     bf0:	2203      	movs	r2, #3
     bf2:	4942      	ldr	r1, [pc, #264]	; (cfc <process_command+0x194>)
     bf4:	0028      	movs	r0, r5
     bf6:	f000 fd83 	bl	1700 <strncmp>
     bfa:	2800      	cmp	r0, #0
     bfc:	d116      	bne.n	c2c <process_command+0xc4>
		if (native == 1)
     bfe:	4b40      	ldr	r3, [pc, #256]	; (d00 <process_command+0x198>)
     c00:	781b      	ldrb	r3, [r3, #0]
		lenth = strlen(cmd+4)-1;
     c02:	1d28      	adds	r0, r5, #4
		if (native == 1)
     c04:	2b01      	cmp	r3, #1
     c06:	d14f      	bne.n	ca8 <process_command+0x140>
		num = atoi(cmd + 4);
     c08:	f000 fc9a 	bl	1540 <atoi>
		num = (int)input;
     c0c:	0404      	lsls	r4, r0, #16
     c0e:	0c24      	lsrs	r4, r4, #16
		UART0_send("\nOK\n", 4);
     c10:	2104      	movs	r1, #4
     c12:	483c      	ldr	r0, [pc, #240]	; (d04 <process_command+0x19c>)
     c14:	f7ff feea 	bl	9ec <UART0_send>
		UART0_send_byte(num >> 8);
     c18:	0a20      	lsrs	r0, r4, #8
     c1a:	f7ff fecc 	bl	9b6 <UART0_send_byte>
		UART0_send_byte(num);
     c1e:	0620      	lsls	r0, r4, #24
     c20:	0e00      	lsrs	r0, r0, #24
     c22:	f7ff fec8 	bl	9b6 <UART0_send_byte>
		dac_set_voltage(num);
     c26:	0020      	movs	r0, r4
     c28:	f000 f9de 	bl	fe8 <dac_set_voltage>
	if(strncmp(cmd, "get", 3) == 0)
     c2c:	2203      	movs	r2, #3
     c2e:	4936      	ldr	r1, [pc, #216]	; (d08 <process_command+0x1a0>)
     c30:	0028      	movs	r0, r5
     c32:	f000 fd65 	bl	1700 <strncmp>
     c36:	2800      	cmp	r0, #0
     c38:	d115      	bne.n	c66 <process_command+0xfe>
		if (native == 1)
     c3a:	4b31      	ldr	r3, [pc, #196]	; (d00 <process_command+0x198>)
     c3c:	781b      	ldrb	r3, [r3, #0]
		lenth = strlen(cmd+4)-1;
     c3e:	1d28      	adds	r0, r5, #4
		if (native == 1)
     c40:	2b01      	cmp	r3, #1
     c42:	d13e      	bne.n	cc2 <process_command+0x15a>
		num = atoi(cmd + 4);
     c44:	f000 fc7c 	bl	1540 <atoi>
		num = (int)input;
     c48:	0400      	lsls	r0, r0, #16
     c4a:	0c00      	lsrs	r0, r0, #16
		dac_set_voltage(num);
     c4c:	f000 f9cc 	bl	fe8 <dac_set_voltage>
		getflag = 1;
     c50:	2201      	movs	r2, #1
     c52:	4b2e      	ldr	r3, [pc, #184]	; (d0c <process_command+0x1a4>)
		timer0_set_freq(100);
     c54:	2064      	movs	r0, #100	; 0x64
		getflag = 1;
     c56:	701a      	strb	r2, [r3, #0]
		timer0_set_freq(100);
     c58:	f000 fa7a 	bl	1150 <timer0_set_freq>
		led_set(LED1);
     c5c:	2000      	movs	r0, #0
     c5e:	f7ff fd0d 	bl	67c <led_set>
		timer0_start();
     c62:	f000 fac9 	bl	11f8 <timer0_start>
	if(strncmp(cmd, "help", 4) == 0)
     c66:	2204      	movs	r2, #4
     c68:	4929      	ldr	r1, [pc, #164]	; (d10 <process_command+0x1a8>)
     c6a:	0028      	movs	r0, r5
     c6c:	f000 fd48 	bl	1700 <strncmp>
     c70:	2800      	cmp	r0, #0
     c72:	d103      	bne.n	c7c <process_command+0x114>
		UART0_send(help_msg, sizeof(help_msg)-1);
     c74:	21d0      	movs	r1, #208	; 0xd0
     c76:	4827      	ldr	r0, [pc, #156]	; (d14 <process_command+0x1ac>)
     c78:	f7ff feb8 	bl	9ec <UART0_send>
	if (strncmp(cmd, "native", 6) == 0)
     c7c:	2206      	movs	r2, #6
     c7e:	4926      	ldr	r1, [pc, #152]	; (d18 <process_command+0x1b0>)
     c80:	0028      	movs	r0, r5
     c82:	f000 fd3d 	bl	1700 <strncmp>
     c86:	2800      	cmp	r0, #0
     c88:	d102      	bne.n	c90 <process_command+0x128>
		native = 1;
     c8a:	2201      	movs	r2, #1
     c8c:	4b1c      	ldr	r3, [pc, #112]	; (d00 <process_command+0x198>)
     c8e:	701a      	strb	r2, [r3, #0]
	if (strncmp(cmd, "ascii", 5) == 0)
     c90:	2205      	movs	r2, #5
     c92:	4922      	ldr	r1, [pc, #136]	; (d1c <process_command+0x1b4>)
     c94:	0028      	movs	r0, r5
     c96:	f000 fd33 	bl	1700 <strncmp>
     c9a:	2800      	cmp	r0, #0
     c9c:	d101      	bne.n	ca2 <process_command+0x13a>
		native = 0;
     c9e:	4b18      	ldr	r3, [pc, #96]	; (d00 <process_command+0x198>)
     ca0:	7018      	strb	r0, [r3, #0]
}
     ca2:	bc70      	pop	{r4, r5, r6}
     ca4:	bc01      	pop	{r0}
     ca6:	4700      	bx	r0
		input = atof(cmd + 4);
     ca8:	f7ff fec4 	bl	a34 <atof>
		input = input/0.01445 +578;	
     cac:	4a1c      	ldr	r2, [pc, #112]	; (d20 <process_command+0x1b8>)
     cae:	4b1d      	ldr	r3, [pc, #116]	; (d24 <process_command+0x1bc>)
     cb0:	f002 f8ca 	bl	2e48 <____aeabi_ddiv_from_thumb>
     cb4:	2200      	movs	r2, #0
     cb6:	4b1c      	ldr	r3, [pc, #112]	; (d28 <process_command+0x1c0>)
     cb8:	f002 f8a6 	bl	2e08 <____aeabi_dadd_from_thumb>
		num = (int)input;
     cbc:	f002 f8da 	bl	2e74 <____aeabi_d2iz_from_thumb>
     cc0:	e7a4      	b.n	c0c <process_command+0xa4>
		input = atof(cmd + 4);
     cc2:	f7ff feb7 	bl	a34 <atof>
		input = input/0.01445 +578;	
     cc6:	4a16      	ldr	r2, [pc, #88]	; (d20 <process_command+0x1b8>)
     cc8:	4b16      	ldr	r3, [pc, #88]	; (d24 <process_command+0x1bc>)
     cca:	f002 f8bd 	bl	2e48 <____aeabi_ddiv_from_thumb>
     cce:	2200      	movs	r2, #0
     cd0:	4b15      	ldr	r3, [pc, #84]	; (d28 <process_command+0x1c0>)
     cd2:	f002 f899 	bl	2e08 <____aeabi_dadd_from_thumb>
		num = (int)input;
     cd6:	f002 f8cd 	bl	2e74 <____aeabi_d2iz_from_thumb>
     cda:	e7b5      	b.n	c48 <process_command+0xe0>
     cdc:	00002f7b 	.word	0x00002f7b
     ce0:	00002fb6 	.word	0x00002fb6
     ce4:	00002f7e 	.word	0x00002f7e
     ce8:	00002f84 	.word	0x00002f84
     cec:	00002f8e 	.word	0x00002f8e
     cf0:	3fffc03c 	.word	0x3fffc03c
     cf4:	00001242 	.word	0x00001242
     cf8:	3fffc038 	.word	0x3fffc038
     cfc:	00002f93 	.word	0x00002f93
     d00:	400005a1 	.word	0x400005a1
     d04:	00002f97 	.word	0x00002f97
     d08:	00002f9c 	.word	0x00002f9c
     d0c:	400005a0 	.word	0x400005a0
     d10:	00002fa0 	.word	0x00002fa0
     d14:	00002e98 	.word	0x00002e98
     d18:	00002fa5 	.word	0x00002fa5
     d1c:	00002fac 	.word	0x00002fac
     d20:	2b6ae7d5 	.word	0x2b6ae7d5
     d24:	3f8d97f6 	.word	0x3f8d97f6
     d28:	40821000 	.word	0x40821000

00000d2c <SPI_ADC_data_transfers_16bit>:
	}
	return dat;
}

uint16_t SPI_ADC_data_transfers_16bit (uint16_t data)
{
     d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
     d2e:	2780      	movs	r7, #128	; 0x80
{
     d30:	210f      	movs	r1, #15
	uint16_t dat = 0;
     d32:	2300      	movs	r3, #0
		if(data & (1 << (i - 1)))
     d34:	2501      	movs	r5, #1
			FIO1PIN |= 1 << ADC_DIN;
     d36:	047f      	lsls	r7, r7, #17
		FIO1PIN &= ~(1 << ADC_SCLK);
     d38:	4a15      	ldr	r2, [pc, #84]	; (d90 <SPI_ADC_data_transfers_16bit+0x64>)
     d3a:	4e16      	ldr	r6, [pc, #88]	; (d94 <SPI_ADC_data_transfers_16bit+0x68>)
     d3c:	6814      	ldr	r4, [r2, #0]
     d3e:	4034      	ands	r4, r6
     d40:	6014      	str	r4, [r2, #0]
		if(data & (1 << (i - 1)))
     d42:	0004      	movs	r4, r0
     d44:	410c      	asrs	r4, r1
     d46:	422c      	tst	r4, r5
     d48:	d01b      	beq.n	d82 <SPI_ADC_data_transfers_16bit+0x56>
			FIO1PIN |= 1 << ADC_DIN;
     d4a:	6814      	ldr	r4, [r2, #0]
     d4c:	433c      	orrs	r4, r7
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     d4e:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     d50:	6014      	str	r4, [r2, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     d52:	6814      	ldr	r4, [r2, #0]
     d54:	0376      	lsls	r6, r6, #13
     d56:	4334      	orrs	r4, r6
     d58:	6014      	str	r4, [r2, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     d5a:	6814      	ldr	r4, [r2, #0]
     d5c:	002a      	movs	r2, r5
     d5e:	2680      	movs	r6, #128	; 0x80
     d60:	408a      	lsls	r2, r1
     d62:	041b      	lsls	r3, r3, #16
     d64:	0412      	lsls	r2, r2, #16
     d66:	0436      	lsls	r6, r6, #16
     d68:	1412      	asrs	r2, r2, #16
     d6a:	141b      	asrs	r3, r3, #16
     d6c:	4234      	tst	r4, r6
     d6e:	d00c      	beq.n	d8a <SPI_ADC_data_transfers_16bit+0x5e>
			dat |= 1 << (i - 1);
     d70:	4313      	orrs	r3, r2
		else
			dat &= ~(1 << (i - 1));
     d72:	041b      	lsls	r3, r3, #16
     d74:	0c1b      	lsrs	r3, r3, #16
	for(i = 16;  i > 0 ; i--)
     d76:	3901      	subs	r1, #1
     d78:	d2de      	bcs.n	d38 <SPI_ADC_data_transfers_16bit+0xc>

	}  
	return dat;
}
     d7a:	0018      	movs	r0, r3
     d7c:	bcf0      	pop	{r4, r5, r6, r7}
     d7e:	bc02      	pop	{r1}
     d80:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     d82:	6814      	ldr	r4, [r2, #0]
     d84:	4e04      	ldr	r6, [pc, #16]	; (d98 <SPI_ADC_data_transfers_16bit+0x6c>)
     d86:	4034      	ands	r4, r6
     d88:	e7e1      	b.n	d4e <SPI_ADC_data_transfers_16bit+0x22>
			dat &= ~(1 << (i - 1));
     d8a:	4393      	bics	r3, r2
     d8c:	e7f1      	b.n	d72 <SPI_ADC_data_transfers_16bit+0x46>
     d8e:	46c0      	nop			; (mov r8, r8)
     d90:	3fffc034 	.word	0x3fffc034
     d94:	ffefffff 	.word	0xffefffff
     d98:	feffffff 	.word	0xfeffffff

00000d9c <SPI_ADC_data_transfers_8bit>:

unsigned char SPI_ADC_data_transfers_8bit (unsigned char data)
{
     d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d9e:	2107      	movs	r1, #7
	unsigned char dat = 0;
     da0:	2300      	movs	r3, #0
	//Write
	for(i = 8;  i > 0 ; i--)
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		if(data & (1 << (i - 1)))
     da2:	2501      	movs	r5, #1
		FIO1PIN &= ~(1 << ADC_SCLK);
     da4:	4a18      	ldr	r2, [pc, #96]	; (e08 <SPI_ADC_data_transfers_8bit+0x6c>)
     da6:	4e19      	ldr	r6, [pc, #100]	; (e0c <SPI_ADC_data_transfers_8bit+0x70>)
     da8:	6814      	ldr	r4, [r2, #0]
     daa:	4034      	ands	r4, r6
     dac:	6014      	str	r4, [r2, #0]
		if(data & (1 << (i - 1)))
     dae:	0004      	movs	r4, r0
     db0:	410c      	asrs	r4, r1
     db2:	422c      	tst	r4, r5
     db4:	d024      	beq.n	e00 <SPI_ADC_data_transfers_8bit+0x64>
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
     db6:	2680      	movs	r6, #128	; 0x80
     db8:	6814      	ldr	r4, [r2, #0]
     dba:	0476      	lsls	r6, r6, #17
     dbc:	4334      	orrs	r4, r6
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     dbe:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     dc0:	6014      	str	r4, [r2, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     dc2:	6814      	ldr	r4, [r2, #0]
     dc4:	0376      	lsls	r6, r6, #13
     dc6:	4334      	orrs	r4, r6
     dc8:	6014      	str	r4, [r2, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     dca:	6812      	ldr	r2, [r2, #0]
     dcc:	4694      	mov	ip, r2
     dce:	002a      	movs	r2, r5
     dd0:	061b      	lsls	r3, r3, #24
     dd2:	408a      	lsls	r2, r1
     dd4:	161c      	asrs	r4, r3, #24
			dat |= 1 << (i - 1);
		else
			dat &= ~(1 << (i - 1));
     dd6:	0023      	movs	r3, r4
		if(FIO1PIN & (1 << (ADC_DOUT)))
     dd8:	2780      	movs	r7, #128	; 0x80
     dda:	4666      	mov	r6, ip
     ddc:	0612      	lsls	r2, r2, #24
     dde:	1612      	asrs	r2, r2, #24
			dat &= ~(1 << (i - 1));
     de0:	4393      	bics	r3, r2
     de2:	061b      	lsls	r3, r3, #24
		if(FIO1PIN & (1 << (ADC_DOUT)))
     de4:	043f      	lsls	r7, r7, #16
			dat &= ~(1 << (i - 1));
     de6:	0e1b      	lsrs	r3, r3, #24
		if(FIO1PIN & (1 << (ADC_DOUT)))
     de8:	423e      	tst	r6, r7
     dea:	d003      	beq.n	df4 <SPI_ADC_data_transfers_8bit+0x58>
			dat |= 1 << (i - 1);
     dec:	0013      	movs	r3, r2
     dee:	4323      	orrs	r3, r4
     df0:	061b      	lsls	r3, r3, #24
     df2:	0e1b      	lsrs	r3, r3, #24
	for(i = 8;  i > 0 ; i--)
     df4:	3901      	subs	r1, #1
     df6:	d2d5      	bcs.n	da4 <SPI_ADC_data_transfers_8bit+0x8>

	}  
	return dat;
}
     df8:	0018      	movs	r0, r3
     dfa:	bcf0      	pop	{r4, r5, r6, r7}
     dfc:	bc02      	pop	{r1}
     dfe:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     e00:	6814      	ldr	r4, [r2, #0]
     e02:	4e03      	ldr	r6, [pc, #12]	; (e10 <SPI_ADC_data_transfers_8bit+0x74>)
     e04:	4034      	ands	r4, r6
     e06:	e7da      	b.n	dbe <SPI_ADC_data_transfers_8bit+0x22>
     e08:	3fffc034 	.word	0x3fffc034
     e0c:	ffefffff 	.word	0xffefffff
     e10:	feffffff 	.word	0xfeffffff

00000e14 <SPI_DAC_data_transfers_16bit>:
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     e14:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t dat = 0;
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
     e16:	2480      	movs	r4, #128	; 0x80
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
		if(data & mask)
			FIO1PIN |= 1 << ADC_DIN;
     e18:	2780      	movs	r7, #128	; 0x80
{
     e1a:	210f      	movs	r1, #15
	uint16_t dat = 0;
     e1c:	2300      	movs	r3, #0
	mask = 0x8000;
     e1e:	0224      	lsls	r4, r4, #8
			FIO1PIN |= 1 << ADC_DIN;
     e20:	047f      	lsls	r7, r7, #17
		FIO1PIN |= 1 << ADC_SCLK;
     e22:	2680      	movs	r6, #128	; 0x80
     e24:	4a13      	ldr	r2, [pc, #76]	; (e74 <SPI_DAC_data_transfers_16bit+0x60>)
     e26:	6815      	ldr	r5, [r2, #0]
     e28:	0376      	lsls	r6, r6, #13
     e2a:	4335      	orrs	r5, r6
     e2c:	6015      	str	r5, [r2, #0]
			FIO1PIN |= 1 << ADC_DIN;
     e2e:	6815      	ldr	r5, [r2, #0]
		if(data & mask)
     e30:	4204      	tst	r4, r0
     e32:	d01a      	beq.n	e6a <SPI_DAC_data_transfers_16bit+0x56>
			FIO1PIN |= 1 << ADC_DIN;
     e34:	433d      	orrs	r5, r7
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     e36:	6015      	str	r5, [r2, #0]

		//SCLK
		mask = mask >> 1;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     e38:	4e0f      	ldr	r6, [pc, #60]	; (e78 <SPI_DAC_data_transfers_16bit+0x64>)
     e3a:	6815      	ldr	r5, [r2, #0]
     e3c:	4035      	ands	r5, r6
     e3e:	6015      	str	r5, [r2, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e40:	6815      	ldr	r5, [r2, #0]
     e42:	2201      	movs	r2, #1
     e44:	2680      	movs	r6, #128	; 0x80
     e46:	408a      	lsls	r2, r1
     e48:	041b      	lsls	r3, r3, #16
     e4a:	0412      	lsls	r2, r2, #16
     e4c:	0436      	lsls	r6, r6, #16
		mask = mask >> 1;
     e4e:	0864      	lsrs	r4, r4, #1
     e50:	1412      	asrs	r2, r2, #16
     e52:	141b      	asrs	r3, r3, #16
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e54:	4235      	tst	r5, r6
     e56:	d00b      	beq.n	e70 <SPI_DAC_data_transfers_16bit+0x5c>
			dat |= 1 << (i - 1);
     e58:	4313      	orrs	r3, r2
		else
			dat &= ~(1 << (i - 1));
     e5a:	041b      	lsls	r3, r3, #16
     e5c:	0c1b      	lsrs	r3, r3, #16
	for(i = 16;  i > 0 ; i--)
     e5e:	3901      	subs	r1, #1
     e60:	d2df      	bcs.n	e22 <SPI_DAC_data_transfers_16bit+0xe>

	}  
	return dat;
}
     e62:	0018      	movs	r0, r3
     e64:	bcf0      	pop	{r4, r5, r6, r7}
     e66:	bc02      	pop	{r1}
     e68:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     e6a:	4e04      	ldr	r6, [pc, #16]	; (e7c <SPI_DAC_data_transfers_16bit+0x68>)
     e6c:	4035      	ands	r5, r6
     e6e:	e7e2      	b.n	e36 <SPI_DAC_data_transfers_16bit+0x22>
			dat &= ~(1 << (i - 1));
     e70:	4393      	bics	r3, r2
     e72:	e7f2      	b.n	e5a <SPI_DAC_data_transfers_16bit+0x46>
     e74:	3fffc034 	.word	0x3fffc034
     e78:	ffefffff 	.word	0xffefffff
     e7c:	feffffff 	.word	0xfeffffff

00000e80 <SPI0_send_2_byte>:
{
     e80:	b510      	push	{r4, lr}
	if (slave == ADC )
     e82:	2912      	cmp	r1, #18
     e84:	d106      	bne.n	e94 <SPI0_send_2_byte+0x14>
	dat = SPI_ADC_data_transfers_16bit(data);
     e86:	f7ff ff51 	bl	d2c <SPI_ADC_data_transfers_16bit>
	dat = SPI_DAC_data_transfers_16bit(data);
     e8a:	0003      	movs	r3, r0
}
     e8c:	0018      	movs	r0, r3
     e8e:	bc10      	pop	{r4}
     e90:	bc02      	pop	{r1}
     e92:	4708      	bx	r1
	}else if (slave == DAC)
     e94:	291d      	cmp	r1, #29
     e96:	d1f9      	bne.n	e8c <SPI0_send_2_byte+0xc>
	dat = SPI_DAC_data_transfers_16bit(data);
     e98:	f7ff ffbc 	bl	e14 <SPI_DAC_data_transfers_16bit>
     e9c:	e7f5      	b.n	e8a <SPI0_send_2_byte+0xa>

00000e9e <SPI_DAC_data_transfers_8bit>:

unsigned char SPI_DAC_data_transfers_8bit (unsigned char data)
{
     e9e:	b5f0      	push	{r4, r5, r6, r7, lr}
     ea0:	2107      	movs	r1, #7
	unsigned char dat = 0;
     ea2:	2300      	movs	r3, #0
	char i, j;

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
     ea4:	2501      	movs	r5, #1
     ea6:	0004      	movs	r4, r0
     ea8:	410c      	asrs	r4, r1
     eaa:	4a18      	ldr	r2, [pc, #96]	; (f0c <VIC_VectAddr+0xc>)
     eac:	422c      	tst	r4, r5
     eae:	d028      	beq.n	f02 <VIC_VectAddr+0x2>
			FIO1PIN |= 1 << ADC_DIN;
     eb0:	2680      	movs	r6, #128	; 0x80
     eb2:	6814      	ldr	r4, [r2, #0]
     eb4:	0476      	lsls	r6, r6, #17
     eb6:	4334      	orrs	r4, r6
		else
			FIO1PIN &= ~(1 << ADC_DIN);

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     eb8:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     eba:	6014      	str	r4, [r2, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     ebc:	6814      	ldr	r4, [r2, #0]
     ebe:	0376      	lsls	r6, r6, #13
     ec0:	4334      	orrs	r4, r6
     ec2:	6014      	str	r4, [r2, #0]
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     ec4:	4e12      	ldr	r6, [pc, #72]	; (f10 <VIC_VectAddr+0x10>)
     ec6:	6814      	ldr	r4, [r2, #0]
     ec8:	4034      	ands	r4, r6
     eca:	6014      	str	r4, [r2, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     ecc:	6812      	ldr	r2, [r2, #0]
     ece:	4694      	mov	ip, r2
     ed0:	002a      	movs	r2, r5
     ed2:	061b      	lsls	r3, r3, #24
     ed4:	408a      	lsls	r2, r1
     ed6:	161c      	asrs	r4, r3, #24
			dat |= 1 << (i - 1);
		else
			dat &= ~(1 << (i - 1));
     ed8:	0023      	movs	r3, r4
		if(FIO1PIN & (1 << (ADC_DOUT)))
     eda:	2780      	movs	r7, #128	; 0x80
     edc:	4666      	mov	r6, ip
     ede:	0612      	lsls	r2, r2, #24
     ee0:	1612      	asrs	r2, r2, #24
			dat &= ~(1 << (i - 1));
     ee2:	4393      	bics	r3, r2
     ee4:	061b      	lsls	r3, r3, #24
		if(FIO1PIN & (1 << (ADC_DOUT)))
     ee6:	043f      	lsls	r7, r7, #16
			dat &= ~(1 << (i - 1));
     ee8:	0e1b      	lsrs	r3, r3, #24
		if(FIO1PIN & (1 << (ADC_DOUT)))
     eea:	423e      	tst	r6, r7
     eec:	d003      	beq.n	ef6 <SPI_DAC_data_transfers_8bit+0x58>
			dat |= 1 << (i - 1);
     eee:	0013      	movs	r3, r2
     ef0:	4323      	orrs	r3, r4
     ef2:	061b      	lsls	r3, r3, #24
     ef4:	0e1b      	lsrs	r3, r3, #24
	for(i = 8;  i > 0 ; i--)
     ef6:	3901      	subs	r1, #1
     ef8:	d2d5      	bcs.n	ea6 <SPI_DAC_data_transfers_8bit+0x8>

	}  
	return dat;
}
     efa:	0018      	movs	r0, r3
     efc:	bcf0      	pop	{r4, r5, r6, r7}
     efe:	bc02      	pop	{r1}
     f00:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     f02:	6814      	ldr	r4, [r2, #0]
     f04:	4e03      	ldr	r6, [pc, #12]	; (f14 <VIC_VectAddr+0x14>)
     f06:	4034      	ands	r4, r6
     f08:	e7d6      	b.n	eb8 <SPI_DAC_data_transfers_8bit+0x1a>
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	3fffc034 	.word	0x3fffc034
     f10:	ffefffff 	.word	0xffefffff
     f14:	feffffff 	.word	0xfeffffff

00000f18 <SPI0_send_1_byte>:
{
     f18:	b510      	push	{r4, lr}
	if (slave == ADC )
     f1a:	2912      	cmp	r1, #18
     f1c:	d106      	bne.n	f2c <SPI0_send_1_byte+0x14>
	dat = SPI_ADC_data_transfers_8bit(data);
     f1e:	f7ff ff3d 	bl	d9c <SPI_ADC_data_transfers_8bit>
	dat = SPI_DAC_data_transfers_8bit(data);
     f22:	0003      	movs	r3, r0
}
     f24:	0018      	movs	r0, r3
     f26:	bc10      	pop	{r4}
     f28:	bc02      	pop	{r1}
     f2a:	4708      	bx	r1
	uint8_t dat = 0;
     f2c:	2300      	movs	r3, #0
	}else if (slave == DAC)
     f2e:	291d      	cmp	r1, #29
     f30:	d1f8      	bne.n	f24 <SPI0_send_1_byte+0xc>
	dat = SPI_DAC_data_transfers_8bit(data);
     f32:	f7ff ffb4 	bl	e9e <SPI_DAC_data_transfers_8bit>
     f36:	e7f4      	b.n	f22 <SPI0_send_1_byte+0xa>

00000f38 <Delay>:
{
	int i, j;
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
     f38:	4770      	bx	lr

00000f3a <adc_init>:
void adc_init(void)
{
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
     f3a:	2380      	movs	r3, #128	; 0x80
{
     f3c:	b570      	push	{r4, r5, r6, lr}
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
     f3e:	2680      	movs	r6, #128	; 0x80
	FIO1PIN |= (1 << ADC_SCLK);
     f40:	4a24      	ldr	r2, [pc, #144]	; (fd4 <adc_init+0x9a>)
     f42:	6811      	ldr	r1, [r2, #0]
     f44:	035b      	lsls	r3, r3, #13
     f46:	430b      	orrs	r3, r1
     f48:	6013      	str	r3, [r2, #0]
	FIO1CLR |= 1 << ADC;
     f4a:	4d23      	ldr	r5, [pc, #140]	; (fd8 <adc_init+0x9e>)
     f4c:	682b      	ldr	r3, [r5, #0]
     f4e:	02f6      	lsls	r6, r6, #11
     f50:	4333      	orrs	r3, r6
     f52:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(0xFF, ADC);
     f54:	2112      	movs	r1, #18
     f56:	20ff      	movs	r0, #255	; 0xff
     f58:	f7ff ffde 	bl	f18 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f5c:	2112      	movs	r1, #18
     f5e:	20ff      	movs	r0, #255	; 0xff
	SPI0_send_1_byte(0xFF, ADC);
	SPI0_send_1_byte(0xFF, ADC);
	FIO1SET |= 1 << ADC;
     f60:	4c1e      	ldr	r4, [pc, #120]	; (fdc <adc_init+0xa2>)
	SPI0_send_1_byte(0xFF, ADC);
     f62:	f7ff ffd9 	bl	f18 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f66:	2112      	movs	r1, #18
     f68:	20ff      	movs	r0, #255	; 0xff
     f6a:	f7ff ffd5 	bl	f18 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f6e:	2112      	movs	r1, #18
     f70:	20ff      	movs	r0, #255	; 0xff
     f72:	f7ff ffd1 	bl	f18 <SPI0_send_1_byte>
	FIO1SET |= 1 << ADC;
     f76:	6823      	ldr	r3, [r4, #0]
     f78:	4333      	orrs	r3, r6
     f7a:	6023      	str	r3, [r4, #0]

	/* Delay because adc needs 500us after reset sequence */
	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     f7c:	682b      	ldr	r3, [r5, #0]
     f7e:	4333      	orrs	r3, r6
     f80:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     f82:	2112      	movs	r1, #18
     f84:	2010      	movs	r0, #16
     f86:	f7ff ffc7 	bl	f18 <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
     f8a:	2112      	movs	r1, #18
     f8c:	4814      	ldr	r0, [pc, #80]	; (fe0 <adc_init+0xa6>)
     f8e:	f7ff ff77 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     f92:	6823      	ldr	r3, [r4, #0]
     f94:	4333      	orrs	r3, r6
     f96:	6023      	str	r3, [r4, #0]

	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     f98:	682b      	ldr	r3, [r5, #0]
     f9a:	4333      	orrs	r3, r6
     f9c:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     f9e:	2112      	movs	r1, #18
     fa0:	2008      	movs	r0, #8
     fa2:	f7ff ffb9 	bl	f18 <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
     fa6:	2112      	movs	r1, #18
     fa8:	2001      	movs	r0, #1
     faa:	f7ff ff69 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     fae:	6823      	ldr	r3, [r4, #0]
     fb0:	431e      	orrs	r6, r3
     fb2:	6026      	str	r6, [r4, #0]

	FIO1CLR |= 1 << DAC;
     fb4:	2680      	movs	r6, #128	; 0x80
     fb6:	682b      	ldr	r3, [r5, #0]
     fb8:	05b6      	lsls	r6, r6, #22
     fba:	4333      	orrs	r3, r6
     fbc:	602b      	str	r3, [r5, #0]
	SPI0_send_2_byte((0x1000 | 578), DAC);
     fbe:	211d      	movs	r1, #29
     fc0:	4808      	ldr	r0, [pc, #32]	; (fe4 <adc_init+0xaa>)
     fc2:	f7ff ff5d 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     fc6:	6823      	ldr	r3, [r4, #0]
     fc8:	431e      	orrs	r6, r3
     fca:	6026      	str	r6, [r4, #0]


	/* Switch on green led to indicate successful  initialization */
	//led_set(LED1);

}
     fcc:	bc70      	pop	{r4, r5, r6}
     fce:	bc01      	pop	{r0}
     fd0:	4700      	bx	r0
     fd2:	46c0      	nop			; (mov r8, r8)
     fd4:	3fffc034 	.word	0x3fffc034
     fd8:	3fffc03c 	.word	0x3fffc03c
     fdc:	3fffc038 	.word	0x3fffc038
     fe0:	00001001 	.word	0x00001001
     fe4:	00001242 	.word	0x00001242

00000fe8 <dac_set_voltage>:

void dac_set_voltage(uint16_t voltage)
{
     fe8:	b510      	push	{r4, lr}
	/* SPI0_send_2_byte((voltage | DAC_LOAD_CMD)); */
	FIO1CLR |= 1 << DAC;
     fea:	2480      	movs	r4, #128	; 0x80
     fec:	4a08      	ldr	r2, [pc, #32]	; (1010 <dac_set_voltage+0x28>)
     fee:	6813      	ldr	r3, [r2, #0]
     ff0:	05a4      	lsls	r4, r4, #22
     ff2:	4323      	orrs	r3, r4
     ff4:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((0x1000 | voltage), DAC);
     ff6:	2380      	movs	r3, #128	; 0x80
     ff8:	015b      	lsls	r3, r3, #5
     ffa:	4318      	orrs	r0, r3
     ffc:	211d      	movs	r1, #29
     ffe:	f7ff ff3f 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
    1002:	4b04      	ldr	r3, [pc, #16]	; (1014 <dac_set_voltage+0x2c>)
    1004:	681a      	ldr	r2, [r3, #0]
    1006:	4314      	orrs	r4, r2
    1008:	601c      	str	r4, [r3, #0]
}
    100a:	bc10      	pop	{r4}
    100c:	bc01      	pop	{r0}
    100e:	4700      	bx	r0
    1010:	3fffc03c 	.word	0x3fffc03c
    1014:	3fffc038 	.word	0x3fffc038

00001018 <adc_read_current>:

uint16_t adc_read_current(void)
{
    1018:	b570      	push	{r4, r5, r6, lr}
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
    101a:	2480      	movs	r4, #128	; 0x80
    101c:	4e11      	ldr	r6, [pc, #68]	; (1064 <adc_read_current+0x4c>)
    101e:	6833      	ldr	r3, [r6, #0]
    1020:	02e4      	lsls	r4, r4, #11
    1022:	4323      	orrs	r3, r4
    1024:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1026:	2112      	movs	r1, #18
    1028:	2010      	movs	r0, #16
    102a:	f7ff ff75 	bl	f18 <SPI0_send_1_byte>
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
    102e:	2080      	movs	r0, #128	; 0x80
	FIO1SET |= 1 << ADC;
    1030:	4d0d      	ldr	r5, [pc, #52]	; (1068 <adc_read_current+0x50>)
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
    1032:	2112      	movs	r1, #18
    1034:	0140      	lsls	r0, r0, #5
    1036:	f7ff ff23 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    103a:	682b      	ldr	r3, [r5, #0]
    103c:	4323      	orrs	r3, r4
    103e:	602b      	str	r3, [r5, #0]

	for (current = 0; current < 200; current++);
	FIO1CLR |= 1 << ADC;
    1040:	6833      	ldr	r3, [r6, #0]
    1042:	4323      	orrs	r3, r4
    1044:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
    1046:	2112      	movs	r1, #18
    1048:	2058      	movs	r0, #88	; 0x58
    104a:	f7ff ff65 	bl	f18 <SPI0_send_1_byte>
	current = SPI0_send_2_byte(0xFFFF, ADC);
    104e:	2112      	movs	r1, #18
    1050:	4806      	ldr	r0, [pc, #24]	; (106c <adc_read_current+0x54>)
    1052:	f7ff ff15 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    1056:	682b      	ldr	r3, [r5, #0]
    1058:	431c      	orrs	r4, r3
    105a:	602c      	str	r4, [r5, #0]

	return current;
}
    105c:	bc70      	pop	{r4, r5, r6}
    105e:	bc02      	pop	{r1}
    1060:	4708      	bx	r1
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	3fffc03c 	.word	0x3fffc03c
    1068:	3fffc038 	.word	0x3fffc038
    106c:	0000ffff 	.word	0x0000ffff

00001070 <adc_read_voltage>:

uint16_t adc_read_voltage(void)
{
    1070:	b570      	push	{r4, r5, r6, lr}
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
    1072:	2480      	movs	r4, #128	; 0x80
    1074:	4e10      	ldr	r6, [pc, #64]	; (10b8 <adc_read_voltage+0x48>)
    1076:	6833      	ldr	r3, [r6, #0]
    1078:	02e4      	lsls	r4, r4, #11
    107a:	4323      	orrs	r3, r4
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
	FIO1SET |= 1 << ADC;
    107c:	4d0f      	ldr	r5, [pc, #60]	; (10bc <adc_read_voltage+0x4c>)
	FIO1CLR |= 1 << ADC;
    107e:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1080:	2112      	movs	r1, #18
    1082:	2010      	movs	r0, #16
    1084:	f7ff ff48 	bl	f18 <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
    1088:	2112      	movs	r1, #18
    108a:	480d      	ldr	r0, [pc, #52]	; (10c0 <adc_read_voltage+0x50>)
    108c:	f7ff fef8 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    1090:	682b      	ldr	r3, [r5, #0]
    1092:	4323      	orrs	r3, r4
    1094:	602b      	str	r3, [r5, #0]
	for (voltage = 0; voltage < 200; voltage ++);

	FIO1CLR |= 1 << ADC;
    1096:	6833      	ldr	r3, [r6, #0]
    1098:	4323      	orrs	r3, r4
    109a:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
    109c:	2112      	movs	r1, #18
    109e:	2058      	movs	r0, #88	; 0x58
    10a0:	f7ff ff3a 	bl	f18 <SPI0_send_1_byte>
	voltage = SPI0_send_2_byte(0xFFFF, ADC);
    10a4:	2112      	movs	r1, #18
    10a6:	4807      	ldr	r0, [pc, #28]	; (10c4 <adc_read_voltage+0x54>)
    10a8:	f7ff feea 	bl	e80 <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    10ac:	682b      	ldr	r3, [r5, #0]
    10ae:	431c      	orrs	r4, r3
    10b0:	602c      	str	r4, [r5, #0]

	return voltage;

}
    10b2:	bc70      	pop	{r4, r5, r6}
    10b4:	bc02      	pop	{r1}
    10b6:	4708      	bx	r1
    10b8:	3fffc03c 	.word	0x3fffc03c
    10bc:	3fffc038 	.word	0x3fffc038
    10c0:	00001001 	.word	0x00001001
    10c4:	0000ffff 	.word	0x0000ffff

000010c8 <read_volt>:
		}
	}
	VICVectAddr = 0;
}
void read_volt(void)
{
    10c8:	b510      	push	{r4, lr}
		volts = adc_read_voltage();
    10ca:	f7ff ffd1 	bl	1070 <adc_read_voltage>
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    10ce:	2480      	movs	r4, #128	; 0x80
    10d0:	4a0b      	ldr	r2, [pc, #44]	; (1100 <read_volt+0x38>)
		volts = adc_read_voltage();
    10d2:	4b0c      	ldr	r3, [pc, #48]	; (1104 <read_volt+0x3c>)
    10d4:	8018      	strh	r0, [r3, #0]
		FIO1CLR |= 1 << ADC;
    10d6:	6813      	ldr	r3, [r2, #0]
    10d8:	02e4      	lsls	r4, r4, #11
    10da:	4323      	orrs	r3, r4
    10dc:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    10de:	2112      	movs	r1, #18
    10e0:	2010      	movs	r0, #16
    10e2:	f7ff ff19 	bl	f18 <SPI0_send_1_byte>
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
    10e6:	2080      	movs	r0, #128	; 0x80
    10e8:	2112      	movs	r1, #18
    10ea:	0140      	lsls	r0, r0, #5
    10ec:	f7ff fec8 	bl	e80 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    10f0:	4b05      	ldr	r3, [pc, #20]	; (1108 <read_volt+0x40>)
    10f2:	681a      	ldr	r2, [r3, #0]
    10f4:	4314      	orrs	r4, r2
    10f6:	601c      	str	r4, [r3, #0]
}
    10f8:	bc10      	pop	{r4}
    10fa:	bc01      	pop	{r0}
    10fc:	4700      	bx	r0
    10fe:	46c0      	nop			; (mov r8, r8)
    1100:	3fffc03c 	.word	0x3fffc03c
    1104:	400006c2 	.word	0x400006c2
    1108:	3fffc038 	.word	0x3fffc038

0000110c <read_curr>:
void read_curr(void){
    110c:	b510      	push	{r4, lr}
			curr = adc_read_current();
    110e:	f7ff ff83 	bl	1018 <adc_read_current>
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    1112:	2480      	movs	r4, #128	; 0x80
    1114:	4a0a      	ldr	r2, [pc, #40]	; (1140 <read_curr+0x34>)
			curr = adc_read_current();
    1116:	4b0b      	ldr	r3, [pc, #44]	; (1144 <read_curr+0x38>)
    1118:	8018      	strh	r0, [r3, #0]
		FIO1CLR |= 1 << ADC;
    111a:	6813      	ldr	r3, [r2, #0]
    111c:	02e4      	lsls	r4, r4, #11
    111e:	4323      	orrs	r3, r4
    1120:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1122:	2112      	movs	r1, #18
    1124:	2010      	movs	r0, #16
    1126:	f7ff fef7 	bl	f18 <SPI0_send_1_byte>
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
    112a:	2112      	movs	r1, #18
    112c:	4806      	ldr	r0, [pc, #24]	; (1148 <read_curr+0x3c>)
    112e:	f7ff fea7 	bl	e80 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    1132:	4b06      	ldr	r3, [pc, #24]	; (114c <read_curr+0x40>)
    1134:	681a      	ldr	r2, [r3, #0]
    1136:	4314      	orrs	r4, r2
    1138:	601c      	str	r4, [r3, #0]
}
    113a:	bc10      	pop	{r4}
    113c:	bc01      	pop	{r0}
    113e:	4700      	bx	r0
    1140:	3fffc03c 	.word	0x3fffc03c
    1144:	400006c0 	.word	0x400006c0
    1148:	00001001 	.word	0x00001001
    114c:	3fffc038 	.word	0x3fffc038

00001150 <timer0_set_freq>:
void timer0_set_freq(uint8_t hz){
	T0TCR = 0;	/* Disable tim0 */
    1150:	2200      	movs	r2, #0
    1152:	4b0b      	ldr	r3, [pc, #44]	; (1180 <timer0_set_freq+0x30>)
void timer0_set_freq(uint8_t hz){
    1154:	b570      	push	{r4, r5, r6, lr}
	T0TCR = 0;	/* Disable tim0 */
    1156:	601a      	str	r2, [r3, #0]
    1158:	4d0a      	ldr	r5, [pc, #40]	; (1184 <timer0_set_freq+0x34>)
    115a:	4c0b      	ldr	r4, [pc, #44]	; (1188 <timer0_set_freq+0x38>)
	if (hz == 100)
    115c:	2864      	cmp	r0, #100	; 0x64
    115e:	d107      	bne.n	1170 <timer0_set_freq+0x20>
	{
		T0PR = 250;	/* Prescaler */
    1160:	23fa      	movs	r3, #250	; 0xfa
    1162:	602b      	str	r3, [r5, #0]
		//T0MR0 = 28800;	/* Top value (100 Hz) */
		T0MR0 = 720;	/* Top value (100 Hz) */
    1164:	33d7      	adds	r3, #215	; 0xd7
    1166:	33ff      	adds	r3, #255	; 0xff
	}else{
		//T0MR0 = 72000;	/* Top value (40 Hz) */
		UART0_send("100hz\n", 6);
		T0PR = 250;	/* Prescaler */
		T0MR0 = 36000;	/* Top value (1 Hz) */
    1168:	6023      	str	r3, [r4, #0]
	}
}
    116a:	bc70      	pop	{r4, r5, r6}
    116c:	bc01      	pop	{r0}
    116e:	4700      	bx	r0
		UART0_send("100hz\n", 6);
    1170:	2106      	movs	r1, #6
    1172:	4806      	ldr	r0, [pc, #24]	; (118c <timer0_set_freq+0x3c>)
    1174:	f7ff fc3a 	bl	9ec <UART0_send>
		T0PR = 250;	/* Prescaler */
    1178:	23fa      	movs	r3, #250	; 0xfa
    117a:	602b      	str	r3, [r5, #0]
		T0MR0 = 36000;	/* Top value (1 Hz) */
    117c:	4b04      	ldr	r3, [pc, #16]	; (1190 <timer0_set_freq+0x40>)
    117e:	e7f3      	b.n	1168 <timer0_set_freq+0x18>
    1180:	e0004004 	.word	0xe0004004
    1184:	e000400c 	.word	0xe000400c
    1188:	e0004018 	.word	0xe0004018
    118c:	00002fb2 	.word	0x00002fb2
    1190:	00008ca0 	.word	0x00008ca0

00001194 <timer0_init>:

		}
}
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
    1194:	2302      	movs	r3, #2
    1196:	4a0f      	ldr	r2, [pc, #60]	; (11d4 <timer0_init+0x40>)
    1198:	6811      	ldr	r1, [r2, #0]
    119a:	430b      	orrs	r3, r1
{
    119c:	b510      	push	{r4, lr}
	PCONP |= (1 << 1);	/* Power on tim0 */
    119e:	6013      	str	r3, [r2, #0]
	T0TCR = 0;	/* Disable tim0 */
    11a0:	2300      	movs	r3, #0

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    11a2:	2101      	movs	r1, #1
	T0TCR = 0;	/* Disable tim0 */
    11a4:	4a0c      	ldr	r2, [pc, #48]	; (11d8 <timer0_init+0x44>)
    11a6:	6013      	str	r3, [r2, #0]
	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    11a8:	4a0c      	ldr	r2, [pc, #48]	; (11dc <timer0_init+0x48>)
    11aa:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
    11ac:	4a0c      	ldr	r2, [pc, #48]	; (11e0 <timer0_init+0x4c>)
    11ae:	3102      	adds	r1, #2
    11b0:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
    11b2:	4a0c      	ldr	r2, [pc, #48]	; (11e4 <timer0_init+0x50>)
    11b4:	6013      	str	r3, [r2, #0]
	T0PR = 25;	/* Prescaler */
    11b6:	2219      	movs	r2, #25
    11b8:	4b0b      	ldr	r3, [pc, #44]	; (11e8 <timer0_init+0x54>)
    11ba:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
    11bc:	4b0b      	ldr	r3, [pc, #44]	; (11ec <timer0_init+0x58>)
    11be:	4a0c      	ldr	r2, [pc, #48]	; (11f0 <timer0_init+0x5c>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    11c0:	490c      	ldr	r1, [pc, #48]	; (11f4 <timer0_init+0x60>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
    11c2:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    11c4:	2004      	movs	r0, #4
    11c6:	220f      	movs	r2, #15
    11c8:	f7ff fb10 	bl	7ec <RegisterIrq>
}
    11cc:	bc10      	pop	{r4}
    11ce:	bc01      	pop	{r0}
    11d0:	4700      	bx	r0
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	e01fc0c4 	.word	0xe01fc0c4
    11d8:	e0004004 	.word	0xe0004004
    11dc:	e0004000 	.word	0xe0004000
    11e0:	e0004014 	.word	0xe0004014
    11e4:	e0004070 	.word	0xe0004070
    11e8:	e000400c 	.word	0xe000400c
    11ec:	e0004018 	.word	0xe0004018
    11f0:	00011940 	.word	0x00011940
    11f4:	00001419 	.word	0x00001419

000011f8 <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
    11f8:	2301      	movs	r3, #1
    11fa:	4a06      	ldr	r2, [pc, #24]	; (1214 <timer0_start+0x1c>)
{
    11fc:	b510      	push	{r4, lr}
	T0TCR |= 1;
    11fe:	6811      	ldr	r1, [r2, #0]
    1200:	430b      	orrs	r3, r1
    1202:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
    1204:	210d      	movs	r1, #13
    1206:	2002      	movs	r0, #2
    1208:	f7ff fa4c 	bl	6a4 <gpio_set>
}
    120c:	bc10      	pop	{r4}
    120e:	bc01      	pop	{r0}
    1210:	4700      	bx	r0
    1212:	46c0      	nop			; (mov r8, r8)
    1214:	e0004004 	.word	0xe0004004

00001218 <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
    1218:	2101      	movs	r1, #1
    121a:	4a06      	ldr	r2, [pc, #24]	; (1234 <timer0_stop+0x1c>)
{
    121c:	b510      	push	{r4, lr}
	T0TCR &= ~1;
    121e:	6813      	ldr	r3, [r2, #0]
    1220:	438b      	bics	r3, r1
    1222:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
    1224:	310c      	adds	r1, #12
    1226:	2002      	movs	r0, #2
    1228:	f7ff fa58 	bl	6dc <gpio_clear>
}
    122c:	bc10      	pop	{r4}
    122e:	bc01      	pop	{r0}
    1230:	4700      	bx	r0
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	e0004004 	.word	0xe0004004

00001238 <ftoa>:
	}
	strcat(str, decimal);
}
*/
void ftoa(float num, char *str)
{
    1238:	b570      	push	{r4, r5, r6, lr}
    123a:	b086      	sub	sp, #24
    123c:	000c      	movs	r4, r1
    123e:	1c05      	adds	r5, r0, #0
    int intpart = num;
    1240:	f001 fdf0 	bl	2e24 <____aeabi_f2iz_from_thumb>
    int intdecimal;
    int i;
    float decimal_part;
    char decimal[20];

    memset(str, 0x0, 20);
    1244:	2100      	movs	r1, #0
    int intpart = num;
    1246:	0006      	movs	r6, r0
    memset(str, 0x0, 20);
    1248:	2214      	movs	r2, #20
    124a:	0020      	movs	r0, r4
    124c:	f000 f9a0 	bl	1590 <memset>
    if (num > (-1) && num < (0))
    1250:	4922      	ldr	r1, [pc, #136]	; (12dc <ftoa+0xa4>)
    1252:	1c28      	adds	r0, r5, #0
    1254:	f001 fdee 	bl	2e34 <____aeabi_fcmpgt_from_thumb>
    1258:	2800      	cmp	r0, #0
    125a:	d035      	beq.n	12c8 <ftoa+0x90>
    125c:	2100      	movs	r1, #0
    125e:	1c28      	adds	r0, r5, #0
    1260:	f001 fe10 	bl	2e84 <____aeabi_fcmplt_from_thumb>
    1264:	2800      	cmp	r0, #0
    1266:	d02f      	beq.n	12c8 <ftoa+0x90>
    {
        strcat(str, "-");
    1268:	491d      	ldr	r1, [pc, #116]	; (12e0 <ftoa+0xa8>)
    126a:	0020      	movs	r0, r4
    126c:	f000 f9e2 	bl	1634 <strcat>
        itoa(num, str+1, 10);
    1270:	220a      	movs	r2, #10
    1272:	1c61      	adds	r1, r4, #1
    }else{
        itoa(num, str, 10);
    1274:	0030      	movs	r0, r6
    1276:	f000 f985 	bl	1584 <itoa>
    }
    strcat(str, ".");
    127a:	491a      	ldr	r1, [pc, #104]	; (12e4 <ftoa+0xac>)
    127c:	0020      	movs	r0, r4
    127e:	f000 f9d9 	bl	1634 <strcat>

    decimal_part = num - intpart;
    1282:	0030      	movs	r0, r6
    1284:	f001 fdee 	bl	2e64 <____aeabi_i2f_from_thumb>
    1288:	1c01      	adds	r1, r0, #0
    128a:	1c28      	adds	r0, r5, #0
    128c:	f001 fdf6 	bl	2e7c <____aeabi_fsub_from_thumb>
    intdecimal = decimal_part * 1000000;
    1290:	4915      	ldr	r1, [pc, #84]	; (12e8 <ftoa+0xb0>)
    1292:	f001 fdb1 	bl	2df8 <____aeabi_fmul_from_thumb>
    1296:	f001 fdc5 	bl	2e24 <____aeabi_f2iz_from_thumb>

    if(intdecimal < 0)
    {
        intdecimal = -intdecimal;
    }
    itoa(intdecimal, decimal, 10);
    129a:	17c3      	asrs	r3, r0, #31
    129c:	18c0      	adds	r0, r0, r3
    129e:	4058      	eors	r0, r3
    12a0:	220a      	movs	r2, #10
    12a2:	a901      	add	r1, sp, #4
    12a4:	f000 f96e 	bl	1584 <itoa>
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    12a8:	2500      	movs	r5, #0
    12aa:	2606      	movs	r6, #6
    12ac:	a801      	add	r0, sp, #4
    12ae:	f000 f9f3 	bl	1698 <strlen>
    12b2:	1a30      	subs	r0, r6, r0
    12b4:	42a8      	cmp	r0, r5
    12b6:	d80a      	bhi.n	12ce <ftoa+0x96>
    {
        strcat(str, "0");
    }
    strcat(str, decimal);
    12b8:	a901      	add	r1, sp, #4
    12ba:	0020      	movs	r0, r4
    12bc:	f000 f9ba 	bl	1634 <strcat>
}
    12c0:	b006      	add	sp, #24
    12c2:	bc70      	pop	{r4, r5, r6}
    12c4:	bc01      	pop	{r0}
    12c6:	4700      	bx	r0
        itoa(num, str, 10);
    12c8:	220a      	movs	r2, #10
    12ca:	0021      	movs	r1, r4
    12cc:	e7d2      	b.n	1274 <ftoa+0x3c>
        strcat(str, "0");
    12ce:	4907      	ldr	r1, [pc, #28]	; (12ec <ftoa+0xb4>)
    12d0:	0020      	movs	r0, r4
    12d2:	f000 f9af 	bl	1634 <strcat>
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    12d6:	3501      	adds	r5, #1
    12d8:	e7e8      	b.n	12ac <ftoa+0x74>
    12da:	46c0      	nop			; (mov r8, r8)
    12dc:	bf800000 	.word	0xbf800000
    12e0:	00002fb9 	.word	0x00002fb9
    12e4:	00002fbb 	.word	0x00002fbb
    12e8:	49742400 	.word	0x49742400
    12ec:	00002fbd 	.word	0x00002fbd

000012f0 <send_results>:
void send_results(void){
    12f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (native == 1)
    12f2:	4b39      	ldr	r3, [pc, #228]	; (13d8 <send_results+0xe8>)
    12f4:	781d      	ldrb	r5, [r3, #0]
void send_results(void){
    12f6:	b0e5      	sub	sp, #404	; 0x194
    12f8:	4c38      	ldr	r4, [pc, #224]	; (13dc <send_results+0xec>)
    12fa:	4f39      	ldr	r7, [pc, #228]	; (13e0 <send_results+0xf0>)
	if (native == 1)
    12fc:	2d01      	cmp	r5, #1
    12fe:	d138      	bne.n	1372 <send_results+0x82>
			UART0_send("\n\nVoltage, V  : ",16 );
    1300:	4838      	ldr	r0, [pc, #224]	; (13e4 <send_results+0xf4>)
    1302:	2110      	movs	r1, #16
    1304:	f7ff fb72 	bl	9ec <UART0_send>
			if (volts < 10000)
    1308:	4e37      	ldr	r6, [pc, #220]	; (13e8 <send_results+0xf8>)
    130a:	8820      	ldrh	r0, [r4, #0]
	uint8_t num = 5;
    130c:	2405      	movs	r4, #5
			if (volts < 10000)
    130e:	42b0      	cmp	r0, r6
    1310:	d80b      	bhi.n	132a <send_results+0x3a>
			if (volts < 1000)
    1312:	4b36      	ldr	r3, [pc, #216]	; (13ec <send_results+0xfc>)
				num = 4;
    1314:	3c01      	subs	r4, #1
			if (volts < 1000)
    1316:	4298      	cmp	r0, r3
    1318:	d807      	bhi.n	132a <send_results+0x3a>
				num = 3;
    131a:	3c01      	subs	r4, #1
			if (volts < 100)
    131c:	2863      	cmp	r0, #99	; 0x63
    131e:	d804      	bhi.n	132a <send_results+0x3a>
				num = 1;
    1320:	3406      	adds	r4, #6
    1322:	4284      	cmp	r4, r0
    1324:	41a4      	sbcs	r4, r4
    1326:	4264      	negs	r4, r4
    1328:	3401      	adds	r4, #1
			UART0_send(itoa(volts, volt_ascii,10), num);
    132a:	220a      	movs	r2, #10
    132c:	4669      	mov	r1, sp
    132e:	f000 f929 	bl	1584 <itoa>
    1332:	0021      	movs	r1, r4
    1334:	f7ff fb5a 	bl	9ec <UART0_send>
			UART0_send("\nCurrent, mkA: ",15 );
    1338:	482d      	ldr	r0, [pc, #180]	; (13f0 <send_results+0x100>)
    133a:	210f      	movs	r1, #15
    133c:	f7ff fb56 	bl	9ec <UART0_send>
			if (curr < 10000)
    1340:	8838      	ldrh	r0, [r7, #0]
    1342:	42b0      	cmp	r0, r6
    1344:	d80a      	bhi.n	135c <send_results+0x6c>
			if (curr < 1000)
    1346:	4b29      	ldr	r3, [pc, #164]	; (13ec <send_results+0xfc>)
				num = 4;
    1348:	2404      	movs	r4, #4
			if (curr < 1000)
    134a:	4298      	cmp	r0, r3
    134c:	d806      	bhi.n	135c <send_results+0x6c>
				num = 3;
    134e:	3c01      	subs	r4, #1
			if (curr < 100)
    1350:	2863      	cmp	r0, #99	; 0x63
    1352:	d803      	bhi.n	135c <send_results+0x6c>
				num = 2;
    1354:	3c01      	subs	r4, #1
			if (curr < 10)
    1356:	2809      	cmp	r0, #9
    1358:	d800      	bhi.n	135c <send_results+0x6c>
				num = 1;
    135a:	002c      	movs	r4, r5
			UART0_send(itoa(curr, curr_ascii,10), num);
    135c:	a932      	add	r1, sp, #200	; 0xc8
    135e:	220a      	movs	r2, #10
    1360:	f000 f910 	bl	1584 <itoa>
    1364:	0021      	movs	r1, r4
			UART0_send("\n", 1);
    1366:	f7ff fb41 	bl	9ec <UART0_send>
}
    136a:	b065      	add	sp, #404	; 0x194
    136c:	bcf0      	pop	{r4, r5, r6, r7}
    136e:	bc01      	pop	{r0}
    1370:	4700      	bx	r0
			fvolts = (volts - 9211)/1065.2;
    1372:	8820      	ldrh	r0, [r4, #0]
    1374:	4b1f      	ldr	r3, [pc, #124]	; (13f4 <send_results+0x104>)
    1376:	18c0      	adds	r0, r0, r3
    1378:	f001 fd42 	bl	2e00 <____aeabi_i2d_from_thumb>
    137c:	4a1e      	ldr	r2, [pc, #120]	; (13f8 <send_results+0x108>)
    137e:	4b1f      	ldr	r3, [pc, #124]	; (13fc <send_results+0x10c>)
    1380:	f001 fd62 	bl	2e48 <____aeabi_ddiv_from_thumb>
    1384:	f001 fd52 	bl	2e2c <____aeabi_d2f_from_thumb>
			fcurr = (curr - 6037)/0.7927817;
    1388:	4b1d      	ldr	r3, [pc, #116]	; (1400 <send_results+0x110>)
			fvolts = (volts - 9211)/1065.2;
    138a:	1c04      	adds	r4, r0, #0
			fcurr = (curr - 6037)/0.7927817;
    138c:	8838      	ldrh	r0, [r7, #0]
    138e:	18c0      	adds	r0, r0, r3
    1390:	f001 fd36 	bl	2e00 <____aeabi_i2d_from_thumb>
    1394:	4a1b      	ldr	r2, [pc, #108]	; (1404 <send_results+0x114>)
    1396:	4b1c      	ldr	r3, [pc, #112]	; (1408 <send_results+0x118>)
    1398:	f001 fd56 	bl	2e48 <____aeabi_ddiv_from_thumb>
    139c:	f001 fd46 	bl	2e2c <____aeabi_d2f_from_thumb>
			UART0_send("V", 1);
    13a0:	2101      	movs	r1, #1
			fcurr = (curr - 6037)/0.7927817;
    13a2:	1c05      	adds	r5, r0, #0
			UART0_send("V", 1);
    13a4:	4819      	ldr	r0, [pc, #100]	; (140c <send_results+0x11c>)
    13a6:	f7ff fb21 	bl	9ec <UART0_send>
			ftoa(fvolts, volt_ascii);
    13aa:	4669      	mov	r1, sp
    13ac:	1c20      	adds	r0, r4, #0
    13ae:	f7ff ff43 	bl	1238 <ftoa>
			UART0_send(volt_ascii, 6);
    13b2:	2106      	movs	r1, #6
    13b4:	4668      	mov	r0, sp
    13b6:	f7ff fb19 	bl	9ec <UART0_send>
			UART0_send("C", 1);
    13ba:	2101      	movs	r1, #1
    13bc:	4814      	ldr	r0, [pc, #80]	; (1410 <send_results+0x120>)
    13be:	f7ff fb15 	bl	9ec <UART0_send>
			ftoa(fcurr, curr_ascii);
    13c2:	a932      	add	r1, sp, #200	; 0xc8
    13c4:	1c28      	adds	r0, r5, #0
    13c6:	f7ff ff37 	bl	1238 <ftoa>
			UART0_send(curr_ascii, 6);
    13ca:	2106      	movs	r1, #6
    13cc:	a832      	add	r0, sp, #200	; 0xc8
    13ce:	f7ff fb0d 	bl	9ec <UART0_send>
			UART0_send("\n", 1);
    13d2:	2101      	movs	r1, #1
    13d4:	480f      	ldr	r0, [pc, #60]	; (1414 <send_results+0x124>)
    13d6:	e7c6      	b.n	1366 <send_results+0x76>
    13d8:	400005a1 	.word	0x400005a1
    13dc:	400006c2 	.word	0x400006c2
    13e0:	400006c0 	.word	0x400006c0
    13e4:	00002fbf 	.word	0x00002fbf
    13e8:	0000270f 	.word	0x0000270f
    13ec:	000003e7 	.word	0x000003e7
    13f0:	00002fd0 	.word	0x00002fd0
    13f4:	ffffdc05 	.word	0xffffdc05
    13f8:	cccccccd 	.word	0xcccccccd
    13fc:	4090a4cc 	.word	0x4090a4cc
    1400:	ffffe86b 	.word	0xffffe86b
    1404:	ba4bc0c9 	.word	0xba4bc0c9
    1408:	3fe95e77 	.word	0x3fe95e77
    140c:	00002fe0 	.word	0x00002fe0
    1410:	00002fe2 	.word	0x00002fe2
    1414:	00002f9a 	.word	0x00002f9a

00001418 <Isr_TIM0>:
	T0IR = 0x3F;
    1418:	223f      	movs	r2, #63	; 0x3f
{
    141a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	T0IR = 0x3F;
    141c:	4b3c      	ldr	r3, [pc, #240]	; (1510 <Isr_TIM0+0xf8>)
    141e:	601a      	str	r2, [r3, #0]
	FIO1PIN |= (1 << ADC_SCLK);
    1420:	2380      	movs	r3, #128	; 0x80
    1422:	4a3c      	ldr	r2, [pc, #240]	; (1514 <Isr_TIM0+0xfc>)
    1424:	6811      	ldr	r1, [r2, #0]
    1426:	035b      	lsls	r3, r3, #13
    1428:	430b      	orrs	r3, r1
    142a:	6013      	str	r3, [r2, #0]
	if (getflag == 0){
    142c:	4f3a      	ldr	r7, [pc, #232]	; (1518 <Isr_TIM0+0x100>)
    142e:	783d      	ldrb	r5, [r7, #0]
    1430:	2d00      	cmp	r5, #0
    1432:	d115      	bne.n	1460 <Isr_TIM0+0x48>
		if (channel == 1)
    1434:	4c39      	ldr	r4, [pc, #228]	; (151c <Isr_TIM0+0x104>)
    1436:	7823      	ldrb	r3, [r4, #0]
    1438:	2b01      	cmp	r3, #1
    143a:	d10a      	bne.n	1452 <Isr_TIM0+0x3a>
			read_volt();
    143c:	f7ff fe44 	bl	10c8 <read_volt>
			channel = 0;
    1440:	7025      	strb	r5, [r4, #0]
			send_results();
    1442:	f7ff ff55 	bl	12f0 <send_results>
	VICVectAddr = 0;
    1446:	2200      	movs	r2, #0
    1448:	4b35      	ldr	r3, [pc, #212]	; (1520 <Isr_TIM0+0x108>)
    144a:	601a      	str	r2, [r3, #0]
}
    144c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    144e:	bc01      	pop	{r0}
    1450:	4700      	bx	r0
		}else if (channel == 0)
    1452:	2b00      	cmp	r3, #0
    1454:	d1f7      	bne.n	1446 <Isr_TIM0+0x2e>
			read_curr();
    1456:	f7ff fe59 	bl	110c <read_curr>
			channel = 1;
    145a:	2301      	movs	r3, #1
    145c:	7023      	strb	r3, [r4, #0]
    145e:	e7f2      	b.n	1446 <Isr_TIM0+0x2e>
		if (conv_number == 101) {
    1460:	4e30      	ldr	r6, [pc, #192]	; (1524 <Isr_TIM0+0x10c>)
    1462:	7834      	ldrb	r4, [r6, #0]
    1464:	2c65      	cmp	r4, #101	; 0x65
    1466:	d119      	bne.n	149c <Isr_TIM0+0x84>
			conv_number--;
    1468:	2364      	movs	r3, #100	; 0x64
    146a:	7033      	strb	r3, [r6, #0]
			volts = adc_read_voltage();
    146c:	f7ff fe00 	bl	1070 <adc_read_voltage>
		FIO1CLR |= 1 << ADC;
    1470:	2480      	movs	r4, #128	; 0x80
    1472:	4a2d      	ldr	r2, [pc, #180]	; (1528 <Isr_TIM0+0x110>)
			volts = adc_read_voltage();
    1474:	4b2d      	ldr	r3, [pc, #180]	; (152c <Isr_TIM0+0x114>)
    1476:	8018      	strh	r0, [r3, #0]
		FIO1CLR |= 1 << ADC;
    1478:	6813      	ldr	r3, [r2, #0]
    147a:	02e4      	lsls	r4, r4, #11
    147c:	4323      	orrs	r3, r4
    147e:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1480:	2112      	movs	r1, #18
    1482:	2010      	movs	r0, #16
    1484:	f7ff fd48 	bl	f18 <SPI0_send_1_byte>
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
    1488:	2080      	movs	r0, #128	; 0x80
    148a:	2112      	movs	r1, #18
    148c:	0140      	lsls	r0, r0, #5
    148e:	f7ff fcf7 	bl	e80 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    1492:	4b27      	ldr	r3, [pc, #156]	; (1530 <Isr_TIM0+0x118>)
    1494:	681a      	ldr	r2, [r3, #0]
    1496:	4314      	orrs	r4, r2
    1498:	601c      	str	r4, [r3, #0]
    149a:	e7d4      	b.n	1446 <Isr_TIM0+0x2e>
    149c:	4d25      	ldr	r5, [pc, #148]	; (1534 <Isr_TIM0+0x11c>)
		}else if (conv_number != 0){
    149e:	2c00      	cmp	r4, #0
    14a0:	d00c      	beq.n	14bc <Isr_TIM0+0xa4>
			conv_number--;
    14a2:	3c01      	subs	r4, #1
    14a4:	7034      	strb	r4, [r6, #0]
			curr_big += adc_read_current();
    14a6:	f7ff fdb7 	bl	1018 <adc_read_current>
    14aa:	2300      	movs	r3, #0
    14ac:	0002      	movs	r2, r0
    14ae:	6828      	ldr	r0, [r5, #0]
    14b0:	6869      	ldr	r1, [r5, #4]
    14b2:	1812      	adds	r2, r2, r0
    14b4:	414b      	adcs	r3, r1
    14b6:	602a      	str	r2, [r5, #0]
    14b8:	606b      	str	r3, [r5, #4]
    14ba:	e7c4      	b.n	1446 <Isr_TIM0+0x2e>
			curr = (curr_big/100);
    14bc:	6828      	ldr	r0, [r5, #0]
    14be:	6869      	ldr	r1, [r5, #4]
    14c0:	2264      	movs	r2, #100	; 0x64
    14c2:	2300      	movs	r3, #0
    14c4:	f001 fcca 	bl	2e5c <____aeabi_uldivmod_from_thumb>
    14c8:	4b1b      	ldr	r3, [pc, #108]	; (1538 <Isr_TIM0+0x120>)
    14ca:	8018      	strh	r0, [r3, #0]
			conv_number = 101;
    14cc:	2365      	movs	r3, #101	; 0x65
    14ce:	7033      	strb	r3, [r6, #0]
		FIO1CLR |= 1 << ADC;
    14d0:	2680      	movs	r6, #128	; 0x80
    14d2:	4a15      	ldr	r2, [pc, #84]	; (1528 <Isr_TIM0+0x110>)
			getflag = 0;
    14d4:	703c      	strb	r4, [r7, #0]
		FIO1CLR |= 1 << ADC;
    14d6:	6813      	ldr	r3, [r2, #0]
    14d8:	02f6      	lsls	r6, r6, #11
    14da:	4333      	orrs	r3, r6
    14dc:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    14de:	2112      	movs	r1, #18
    14e0:	2010      	movs	r0, #16
    14e2:	f7ff fd19 	bl	f18 <SPI0_send_1_byte>
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
    14e6:	2112      	movs	r1, #18
    14e8:	4814      	ldr	r0, [pc, #80]	; (153c <Isr_TIM0+0x124>)
    14ea:	f7ff fcc9 	bl	e80 <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    14ee:	4b10      	ldr	r3, [pc, #64]	; (1530 <Isr_TIM0+0x118>)
    14f0:	681a      	ldr	r2, [r3, #0]
    14f2:	4316      	orrs	r6, r2
    14f4:	601e      	str	r6, [r3, #0]
		curr_big = 0;
    14f6:	2200      	movs	r2, #0
    14f8:	2300      	movs	r3, #0
    14fa:	602a      	str	r2, [r5, #0]
    14fc:	606b      	str	r3, [r5, #4]
		send_results();
    14fe:	f7ff fef7 	bl	12f0 <send_results>
		timer0_stop();
    1502:	f7ff fe89 	bl	1218 <timer0_stop>
		led_clear(LED1);
    1506:	0020      	movs	r0, r4
    1508:	f7ff f8c2 	bl	690 <led_clear>
    150c:	e79b      	b.n	1446 <Isr_TIM0+0x2e>
    150e:	46c0      	nop			; (mov r8, r8)
    1510:	e0004000 	.word	0xe0004000
    1514:	3fffc034 	.word	0x3fffc034
    1518:	400005a0 	.word	0x400005a0
    151c:	40000001 	.word	0x40000001
    1520:	ffffff00 	.word	0xffffff00
    1524:	40000000 	.word	0x40000000
    1528:	3fffc03c 	.word	0x3fffc03c
    152c:	400006c2 	.word	0x400006c2
    1530:	3fffc038 	.word	0x3fffc038
    1534:	400006b8 	.word	0x400006b8
    1538:	400006c0 	.word	0x400006c0
    153c:	00001001 	.word	0x00001001

00001540 <atoi>:
    1540:	b510      	push	{r4, lr}
    1542:	220a      	movs	r2, #10
    1544:	2100      	movs	r1, #0
    1546:	f000 f9c5 	bl	18d4 <strtol>
    154a:	bc10      	pop	{r4}
    154c:	bc02      	pop	{r1}
    154e:	4708      	bx	r1

00001550 <__itoa>:
    1550:	1e93      	subs	r3, r2, #2
    1552:	b510      	push	{r4, lr}
    1554:	000c      	movs	r4, r1
    1556:	2b22      	cmp	r3, #34	; 0x22
    1558:	d80f      	bhi.n	157a <__itoa+0x2a>
    155a:	2a0a      	cmp	r2, #10
    155c:	d10b      	bne.n	1576 <__itoa+0x26>
    155e:	2800      	cmp	r0, #0
    1560:	da09      	bge.n	1576 <__itoa+0x26>
    1562:	232d      	movs	r3, #45	; 0x2d
    1564:	4240      	negs	r0, r0
    1566:	700b      	strb	r3, [r1, #0]
    1568:	3101      	adds	r1, #1
    156a:	f000 f9cb 	bl	1904 <__utoa>
    156e:	0020      	movs	r0, r4
    1570:	bc10      	pop	{r4}
    1572:	bc02      	pop	{r1}
    1574:	4708      	bx	r1
    1576:	0021      	movs	r1, r4
    1578:	e7f7      	b.n	156a <__itoa+0x1a>
    157a:	2300      	movs	r3, #0
    157c:	2000      	movs	r0, #0
    157e:	700b      	strb	r3, [r1, #0]
    1580:	e7f6      	b.n	1570 <__itoa+0x20>
    1582:	46c0      	nop			; (mov r8, r8)

00001584 <itoa>:
    1584:	b510      	push	{r4, lr}
    1586:	f7ff ffe3 	bl	1550 <__itoa>
    158a:	bc10      	pop	{r4}
    158c:	bc02      	pop	{r1}
    158e:	4708      	bx	r1

00001590 <memset>:
    1590:	b5f0      	push	{r4, r5, r6, r7, lr}
    1592:	0783      	lsls	r3, r0, #30
    1594:	d04a      	beq.n	162c <memset+0x9c>
    1596:	1e54      	subs	r4, r2, #1
    1598:	2a00      	cmp	r2, #0
    159a:	d044      	beq.n	1626 <memset+0x96>
    159c:	060d      	lsls	r5, r1, #24
    159e:	0e2d      	lsrs	r5, r5, #24
    15a0:	0002      	movs	r2, r0
    15a2:	2603      	movs	r6, #3
    15a4:	e002      	b.n	15ac <memset+0x1c>
    15a6:	001a      	movs	r2, r3
    15a8:	3c01      	subs	r4, #1
    15aa:	d33c      	bcc.n	1626 <memset+0x96>
    15ac:	1c53      	adds	r3, r2, #1
    15ae:	7015      	strb	r5, [r2, #0]
    15b0:	4233      	tst	r3, r6
    15b2:	d1f8      	bne.n	15a6 <memset+0x16>
    15b4:	2c03      	cmp	r4, #3
    15b6:	d92d      	bls.n	1614 <memset+0x84>
    15b8:	22ff      	movs	r2, #255	; 0xff
    15ba:	400a      	ands	r2, r1
    15bc:	0215      	lsls	r5, r2, #8
    15be:	4315      	orrs	r5, r2
    15c0:	042a      	lsls	r2, r5, #16
    15c2:	4315      	orrs	r5, r2
    15c4:	2c0f      	cmp	r4, #15
    15c6:	d916      	bls.n	15f6 <memset+0x66>
    15c8:	0027      	movs	r7, r4
    15ca:	3f10      	subs	r7, #16
    15cc:	093f      	lsrs	r7, r7, #4
    15ce:	013e      	lsls	r6, r7, #4
    15d0:	46b4      	mov	ip, r6
    15d2:	001e      	movs	r6, r3
    15d4:	001a      	movs	r2, r3
    15d6:	3610      	adds	r6, #16
    15d8:	4466      	add	r6, ip
    15da:	6015      	str	r5, [r2, #0]
    15dc:	6055      	str	r5, [r2, #4]
    15de:	6095      	str	r5, [r2, #8]
    15e0:	60d5      	str	r5, [r2, #12]
    15e2:	3210      	adds	r2, #16
    15e4:	42b2      	cmp	r2, r6
    15e6:	d1f8      	bne.n	15da <memset+0x4a>
    15e8:	220f      	movs	r2, #15
    15ea:	3701      	adds	r7, #1
    15ec:	013f      	lsls	r7, r7, #4
    15ee:	19db      	adds	r3, r3, r7
    15f0:	4014      	ands	r4, r2
    15f2:	2c03      	cmp	r4, #3
    15f4:	d90e      	bls.n	1614 <memset+0x84>
    15f6:	1f26      	subs	r6, r4, #4
    15f8:	08b6      	lsrs	r6, r6, #2
    15fa:	00b7      	lsls	r7, r6, #2
    15fc:	46bc      	mov	ip, r7
    15fe:	001a      	movs	r2, r3
    1600:	1d1f      	adds	r7, r3, #4
    1602:	4467      	add	r7, ip
    1604:	c220      	stmia	r2!, {r5}
    1606:	42ba      	cmp	r2, r7
    1608:	d1fc      	bne.n	1604 <memset+0x74>
    160a:	2203      	movs	r2, #3
    160c:	3601      	adds	r6, #1
    160e:	00b6      	lsls	r6, r6, #2
    1610:	199b      	adds	r3, r3, r6
    1612:	4014      	ands	r4, r2
    1614:	2c00      	cmp	r4, #0
    1616:	d006      	beq.n	1626 <memset+0x96>
    1618:	0609      	lsls	r1, r1, #24
    161a:	191c      	adds	r4, r3, r4
    161c:	0e09      	lsrs	r1, r1, #24
    161e:	7019      	strb	r1, [r3, #0]
    1620:	3301      	adds	r3, #1
    1622:	429c      	cmp	r4, r3
    1624:	d1fb      	bne.n	161e <memset+0x8e>
    1626:	bcf0      	pop	{r4, r5, r6, r7}
    1628:	bc02      	pop	{r1}
    162a:	4708      	bx	r1
    162c:	0014      	movs	r4, r2
    162e:	0003      	movs	r3, r0
    1630:	e7c0      	b.n	15b4 <memset+0x24>
    1632:	46c0      	nop			; (mov r8, r8)

00001634 <strcat>:
    1634:	b570      	push	{r4, r5, r6, lr}
    1636:	0004      	movs	r4, r0
    1638:	0783      	lsls	r3, r0, #30
    163a:	d117      	bne.n	166c <strcat+0x38>
    163c:	6802      	ldr	r2, [r0, #0]
    163e:	4b10      	ldr	r3, [pc, #64]	; (1680 <strcat+0x4c>)
    1640:	18d3      	adds	r3, r2, r3
    1642:	4393      	bics	r3, r2
    1644:	4a0f      	ldr	r2, [pc, #60]	; (1684 <strcat+0x50>)
    1646:	0015      	movs	r5, r2
    1648:	4213      	tst	r3, r2
    164a:	d10f      	bne.n	166c <strcat+0x38>
    164c:	3004      	adds	r0, #4
    164e:	6802      	ldr	r2, [r0, #0]
    1650:	4b0b      	ldr	r3, [pc, #44]	; (1680 <strcat+0x4c>)
    1652:	18d3      	adds	r3, r2, r3
    1654:	4393      	bics	r3, r2
    1656:	422b      	tst	r3, r5
    1658:	d108      	bne.n	166c <strcat+0x38>
    165a:	3004      	adds	r0, #4
    165c:	6802      	ldr	r2, [r0, #0]
    165e:	4b08      	ldr	r3, [pc, #32]	; (1680 <strcat+0x4c>)
    1660:	18d3      	adds	r3, r2, r3
    1662:	4393      	bics	r3, r2
    1664:	422b      	tst	r3, r5
    1666:	d0f1      	beq.n	164c <strcat+0x18>
    1668:	e000      	b.n	166c <strcat+0x38>
    166a:	3001      	adds	r0, #1
    166c:	7803      	ldrb	r3, [r0, #0]
    166e:	2b00      	cmp	r3, #0
    1670:	d1fb      	bne.n	166a <strcat+0x36>
    1672:	f000 f809 	bl	1688 <strcpy>
    1676:	0020      	movs	r0, r4
    1678:	bc70      	pop	{r4, r5, r6}
    167a:	bc02      	pop	{r1}
    167c:	4708      	bx	r1
    167e:	46c0      	nop			; (mov r8, r8)
    1680:	fefefeff 	.word	0xfefefeff
    1684:	80808080 	.word	0x80808080

00001688 <strcpy>:
    1688:	0003      	movs	r3, r0
    168a:	780a      	ldrb	r2, [r1, #0]
    168c:	3101      	adds	r1, #1
    168e:	701a      	strb	r2, [r3, #0]
    1690:	3301      	adds	r3, #1
    1692:	2a00      	cmp	r2, #0
    1694:	d1f9      	bne.n	168a <strcpy+0x2>
    1696:	4770      	bx	lr

00001698 <strlen>:
    1698:	b510      	push	{r4, lr}
    169a:	0004      	movs	r4, r0
    169c:	0783      	lsls	r3, r0, #30
    169e:	d00a      	beq.n	16b6 <strlen+0x1e>
    16a0:	7803      	ldrb	r3, [r0, #0]
    16a2:	2b00      	cmp	r3, #0
    16a4:	d025      	beq.n	16f2 <strlen+0x5a>
    16a6:	2203      	movs	r2, #3
    16a8:	e002      	b.n	16b0 <strlen+0x18>
    16aa:	7803      	ldrb	r3, [r0, #0]
    16ac:	2b00      	cmp	r3, #0
    16ae:	d01c      	beq.n	16ea <strlen+0x52>
    16b0:	3001      	adds	r0, #1
    16b2:	4210      	tst	r0, r2
    16b4:	d1f9      	bne.n	16aa <strlen+0x12>
    16b6:	6802      	ldr	r2, [r0, #0]
    16b8:	4b0f      	ldr	r3, [pc, #60]	; (16f8 <strlen+0x60>)
    16ba:	4910      	ldr	r1, [pc, #64]	; (16fc <strlen+0x64>)
    16bc:	18d3      	adds	r3, r2, r3
    16be:	4393      	bics	r3, r2
    16c0:	420b      	tst	r3, r1
    16c2:	d10f      	bne.n	16e4 <strlen+0x4c>
    16c4:	3004      	adds	r0, #4
    16c6:	6802      	ldr	r2, [r0, #0]
    16c8:	4b0b      	ldr	r3, [pc, #44]	; (16f8 <strlen+0x60>)
    16ca:	18d3      	adds	r3, r2, r3
    16cc:	4393      	bics	r3, r2
    16ce:	420b      	tst	r3, r1
    16d0:	d108      	bne.n	16e4 <strlen+0x4c>
    16d2:	3004      	adds	r0, #4
    16d4:	6802      	ldr	r2, [r0, #0]
    16d6:	4b08      	ldr	r3, [pc, #32]	; (16f8 <strlen+0x60>)
    16d8:	18d3      	adds	r3, r2, r3
    16da:	4393      	bics	r3, r2
    16dc:	420b      	tst	r3, r1
    16de:	d0f1      	beq.n	16c4 <strlen+0x2c>
    16e0:	e000      	b.n	16e4 <strlen+0x4c>
    16e2:	3001      	adds	r0, #1
    16e4:	7803      	ldrb	r3, [r0, #0]
    16e6:	2b00      	cmp	r3, #0
    16e8:	d1fb      	bne.n	16e2 <strlen+0x4a>
    16ea:	1b00      	subs	r0, r0, r4
    16ec:	bc10      	pop	{r4}
    16ee:	bc02      	pop	{r1}
    16f0:	4708      	bx	r1
    16f2:	2000      	movs	r0, #0
    16f4:	e7fa      	b.n	16ec <strlen+0x54>
    16f6:	46c0      	nop			; (mov r8, r8)
    16f8:	fefefeff 	.word	0xfefefeff
    16fc:	80808080 	.word	0x80808080

00001700 <strncmp>:
    1700:	b570      	push	{r4, r5, r6, lr}
    1702:	2300      	movs	r3, #0
    1704:	2a00      	cmp	r2, #0
    1706:	d03b      	beq.n	1780 <strncmp+0x80>
    1708:	0004      	movs	r4, r0
    170a:	430c      	orrs	r4, r1
    170c:	07a4      	lsls	r4, r4, #30
    170e:	d120      	bne.n	1752 <strncmp+0x52>
    1710:	2a03      	cmp	r2, #3
    1712:	d91e      	bls.n	1752 <strncmp+0x52>
    1714:	6804      	ldr	r4, [r0, #0]
    1716:	680d      	ldr	r5, [r1, #0]
    1718:	42ac      	cmp	r4, r5
    171a:	d11a      	bne.n	1752 <strncmp+0x52>
    171c:	3a04      	subs	r2, #4
    171e:	2a00      	cmp	r2, #0
    1720:	d02e      	beq.n	1780 <strncmp+0x80>
    1722:	4d1a      	ldr	r5, [pc, #104]	; (178c <strncmp+0x8c>)
    1724:	1965      	adds	r5, r4, r5
    1726:	43a5      	bics	r5, r4
    1728:	002c      	movs	r4, r5
    172a:	4d19      	ldr	r5, [pc, #100]	; (1790 <strncmp+0x90>)
    172c:	422c      	tst	r4, r5
    172e:	d00c      	beq.n	174a <strncmp+0x4a>
    1730:	e026      	b.n	1780 <strncmp+0x80>
    1732:	6803      	ldr	r3, [r0, #0]
    1734:	680c      	ldr	r4, [r1, #0]
    1736:	42a3      	cmp	r3, r4
    1738:	d10b      	bne.n	1752 <strncmp+0x52>
    173a:	3a04      	subs	r2, #4
    173c:	2a00      	cmp	r2, #0
    173e:	d01e      	beq.n	177e <strncmp+0x7e>
    1740:	4c12      	ldr	r4, [pc, #72]	; (178c <strncmp+0x8c>)
    1742:	191c      	adds	r4, r3, r4
    1744:	439c      	bics	r4, r3
    1746:	422c      	tst	r4, r5
    1748:	d119      	bne.n	177e <strncmp+0x7e>
    174a:	3004      	adds	r0, #4
    174c:	3104      	adds	r1, #4
    174e:	2a03      	cmp	r2, #3
    1750:	d8ef      	bhi.n	1732 <strncmp+0x32>
    1752:	7803      	ldrb	r3, [r0, #0]
    1754:	780d      	ldrb	r5, [r1, #0]
    1756:	3a01      	subs	r2, #1
    1758:	429d      	cmp	r5, r3
    175a:	d115      	bne.n	1788 <strncmp+0x88>
    175c:	2d00      	cmp	r5, #0
    175e:	d00e      	beq.n	177e <strncmp+0x7e>
    1760:	2a00      	cmp	r2, #0
    1762:	d00c      	beq.n	177e <strncmp+0x7e>
    1764:	2401      	movs	r4, #1
    1766:	5d03      	ldrb	r3, [r0, r4]
    1768:	5d0d      	ldrb	r5, [r1, r4]
    176a:	42ab      	cmp	r3, r5
    176c:	d10c      	bne.n	1788 <strncmp+0x88>
    176e:	425d      	negs	r5, r3
    1770:	416b      	adcs	r3, r5
    1772:	1b15      	subs	r5, r2, r4
    1774:	426e      	negs	r6, r5
    1776:	4175      	adcs	r5, r6
    1778:	3401      	adds	r4, #1
    177a:	432b      	orrs	r3, r5
    177c:	d0f3      	beq.n	1766 <strncmp+0x66>
    177e:	2300      	movs	r3, #0
    1780:	0018      	movs	r0, r3
    1782:	bc70      	pop	{r4, r5, r6}
    1784:	bc02      	pop	{r1}
    1786:	4708      	bx	r1
    1788:	1b5b      	subs	r3, r3, r5
    178a:	e7f9      	b.n	1780 <strncmp+0x80>
    178c:	fefefeff 	.word	0xfefefeff
    1790:	80808080 	.word	0x80808080

00001794 <_strtol_l.isra.0>:
    1794:	b5f0      	push	{r4, r5, r6, r7, lr}
    1796:	464e      	mov	r6, r9
    1798:	4645      	mov	r5, r8
    179a:	46de      	mov	lr, fp
    179c:	4657      	mov	r7, sl
    179e:	b5e0      	push	{r5, r6, r7, lr}
    17a0:	001d      	movs	r5, r3
    17a2:	2308      	movs	r3, #8
    17a4:	b083      	sub	sp, #12
    17a6:	4683      	mov	fp, r0
    17a8:	468a      	mov	sl, r1
    17aa:	4690      	mov	r8, r2
    17ac:	000e      	movs	r6, r1
    17ae:	4699      	mov	r9, r3
    17b0:	e000      	b.n	17b4 <_strtol_l.isra.0+0x20>
    17b2:	003e      	movs	r6, r7
    17b4:	980c      	ldr	r0, [sp, #48]	; 0x30
    17b6:	7834      	ldrb	r4, [r6, #0]
    17b8:	f000 f8de 	bl	1978 <__locale_ctype_ptr_l>
    17bc:	464a      	mov	r2, r9
    17be:	1900      	adds	r0, r0, r4
    17c0:	7843      	ldrb	r3, [r0, #1]
    17c2:	1c77      	adds	r7, r6, #1
    17c4:	421a      	tst	r2, r3
    17c6:	d1f4      	bne.n	17b2 <_strtol_l.isra.0+0x1e>
    17c8:	2c2d      	cmp	r4, #45	; 0x2d
    17ca:	d069      	beq.n	18a0 <_strtol_l.isra.0+0x10c>
    17cc:	2c2b      	cmp	r4, #43	; 0x2b
    17ce:	d00d      	beq.n	17ec <_strtol_l.isra.0+0x58>
    17d0:	2300      	movs	r3, #0
    17d2:	4699      	mov	r9, r3
    17d4:	2310      	movs	r3, #16
    17d6:	002a      	movs	r2, r5
    17d8:	439a      	bics	r2, r3
    17da:	d10c      	bne.n	17f6 <_strtol_l.isra.0+0x62>
    17dc:	2c30      	cmp	r4, #48	; 0x30
    17de:	d064      	beq.n	18aa <_strtol_l.isra.0+0x116>
    17e0:	2d00      	cmp	r5, #0
    17e2:	d108      	bne.n	17f6 <_strtol_l.isra.0+0x62>
    17e4:	230a      	movs	r3, #10
    17e6:	250a      	movs	r5, #10
    17e8:	9300      	str	r3, [sp, #0]
    17ea:	e005      	b.n	17f8 <_strtol_l.isra.0+0x64>
    17ec:	1cb7      	adds	r7, r6, #2
    17ee:	7874      	ldrb	r4, [r6, #1]
    17f0:	e7ee      	b.n	17d0 <_strtol_l.isra.0+0x3c>
    17f2:	2d00      	cmp	r5, #0
    17f4:	d068      	beq.n	18c8 <_strtol_l.isra.0+0x134>
    17f6:	9500      	str	r5, [sp, #0]
    17f8:	4b35      	ldr	r3, [pc, #212]	; (18d0 <_strtol_l.isra.0+0x13c>)
    17fa:	444b      	add	r3, r9
    17fc:	9900      	ldr	r1, [sp, #0]
    17fe:	0018      	movs	r0, r3
    1800:	9301      	str	r3, [sp, #4]
    1802:	f001 fb33 	bl	2e6c <____aeabi_uidivmod_from_thumb>
    1806:	2200      	movs	r2, #0
    1808:	0006      	movs	r6, r0
    180a:	2000      	movs	r0, #0
    180c:	e011      	b.n	1832 <_strtol_l.isra.0+0x9e>
    180e:	001c      	movs	r4, r3
    1810:	42a5      	cmp	r5, r4
    1812:	dd19      	ble.n	1848 <_strtol_l.isra.0+0xb4>
    1814:	2a00      	cmp	r2, #0
    1816:	db08      	blt.n	182a <_strtol_l.isra.0+0x96>
    1818:	4286      	cmp	r6, r0
    181a:	d306      	bcc.n	182a <_strtol_l.isra.0+0x96>
    181c:	d131      	bne.n	1882 <_strtol_l.isra.0+0xee>
    181e:	2201      	movs	r2, #1
    1820:	42a1      	cmp	r1, r4
    1822:	db00      	blt.n	1826 <_strtol_l.isra.0+0x92>
    1824:	2200      	movs	r2, #0
    1826:	0612      	lsls	r2, r2, #24
    1828:	d02b      	beq.n	1882 <_strtol_l.isra.0+0xee>
    182a:	2201      	movs	r2, #1
    182c:	4252      	negs	r2, r2
    182e:	783c      	ldrb	r4, [r7, #0]
    1830:	3701      	adds	r7, #1
    1832:	0023      	movs	r3, r4
    1834:	3b30      	subs	r3, #48	; 0x30
    1836:	2b09      	cmp	r3, #9
    1838:	d9e9      	bls.n	180e <_strtol_l.isra.0+0x7a>
    183a:	0023      	movs	r3, r4
    183c:	3b41      	subs	r3, #65	; 0x41
    183e:	2b19      	cmp	r3, #25
    1840:	d819      	bhi.n	1876 <_strtol_l.isra.0+0xe2>
    1842:	3c37      	subs	r4, #55	; 0x37
    1844:	42a5      	cmp	r5, r4
    1846:	dce5      	bgt.n	1814 <_strtol_l.isra.0+0x80>
    1848:	1c53      	adds	r3, r2, #1
    184a:	d01f      	beq.n	188c <_strtol_l.isra.0+0xf8>
    184c:	464b      	mov	r3, r9
    184e:	2b00      	cmp	r3, #0
    1850:	d000      	beq.n	1854 <_strtol_l.isra.0+0xc0>
    1852:	4240      	negs	r0, r0
    1854:	4643      	mov	r3, r8
    1856:	2b00      	cmp	r3, #0
    1858:	d004      	beq.n	1864 <_strtol_l.isra.0+0xd0>
    185a:	2a00      	cmp	r2, #0
    185c:	d130      	bne.n	18c0 <_strtol_l.isra.0+0x12c>
    185e:	4643      	mov	r3, r8
    1860:	4652      	mov	r2, sl
    1862:	601a      	str	r2, [r3, #0]
    1864:	b003      	add	sp, #12
    1866:	bc3c      	pop	{r2, r3, r4, r5}
    1868:	4690      	mov	r8, r2
    186a:	4699      	mov	r9, r3
    186c:	46a2      	mov	sl, r4
    186e:	46ab      	mov	fp, r5
    1870:	bcf0      	pop	{r4, r5, r6, r7}
    1872:	bc02      	pop	{r1}
    1874:	4708      	bx	r1
    1876:	0023      	movs	r3, r4
    1878:	3b61      	subs	r3, #97	; 0x61
    187a:	2b19      	cmp	r3, #25
    187c:	d8e4      	bhi.n	1848 <_strtol_l.isra.0+0xb4>
    187e:	3c57      	subs	r4, #87	; 0x57
    1880:	e7c6      	b.n	1810 <_strtol_l.isra.0+0x7c>
    1882:	9b00      	ldr	r3, [sp, #0]
    1884:	4343      	muls	r3, r0
    1886:	2201      	movs	r2, #1
    1888:	18e0      	adds	r0, r4, r3
    188a:	e7d0      	b.n	182e <_strtol_l.isra.0+0x9a>
    188c:	2322      	movs	r3, #34	; 0x22
    188e:	465a      	mov	r2, fp
    1890:	6013      	str	r3, [r2, #0]
    1892:	4643      	mov	r3, r8
    1894:	2b00      	cmp	r3, #0
    1896:	d015      	beq.n	18c4 <_strtol_l.isra.0+0x130>
    1898:	1e7b      	subs	r3, r7, #1
    189a:	469a      	mov	sl, r3
    189c:	9801      	ldr	r0, [sp, #4]
    189e:	e7de      	b.n	185e <_strtol_l.isra.0+0xca>
    18a0:	2301      	movs	r3, #1
    18a2:	1cb7      	adds	r7, r6, #2
    18a4:	7874      	ldrb	r4, [r6, #1]
    18a6:	4699      	mov	r9, r3
    18a8:	e794      	b.n	17d4 <_strtol_l.isra.0+0x40>
    18aa:	2220      	movs	r2, #32
    18ac:	783b      	ldrb	r3, [r7, #0]
    18ae:	4393      	bics	r3, r2
    18b0:	2b58      	cmp	r3, #88	; 0x58
    18b2:	d19e      	bne.n	17f2 <_strtol_l.isra.0+0x5e>
    18b4:	3b48      	subs	r3, #72	; 0x48
    18b6:	787c      	ldrb	r4, [r7, #1]
    18b8:	9300      	str	r3, [sp, #0]
    18ba:	3702      	adds	r7, #2
    18bc:	2510      	movs	r5, #16
    18be:	e79b      	b.n	17f8 <_strtol_l.isra.0+0x64>
    18c0:	9001      	str	r0, [sp, #4]
    18c2:	e7e9      	b.n	1898 <_strtol_l.isra.0+0x104>
    18c4:	9801      	ldr	r0, [sp, #4]
    18c6:	e7cd      	b.n	1864 <_strtol_l.isra.0+0xd0>
    18c8:	2308      	movs	r3, #8
    18ca:	2508      	movs	r5, #8
    18cc:	9300      	str	r3, [sp, #0]
    18ce:	e793      	b.n	17f8 <_strtol_l.isra.0+0x64>
    18d0:	7fffffff 	.word	0x7fffffff

000018d4 <strtol>:
    18d4:	0013      	movs	r3, r2
    18d6:	4a09      	ldr	r2, [pc, #36]	; (18fc <strtol+0x28>)
    18d8:	b530      	push	{r4, r5, lr}
    18da:	0005      	movs	r5, r0
    18dc:	6810      	ldr	r0, [r2, #0]
    18de:	6b44      	ldr	r4, [r0, #52]	; 0x34
    18e0:	b083      	sub	sp, #12
    18e2:	2c00      	cmp	r4, #0
    18e4:	d100      	bne.n	18e8 <strtol+0x14>
    18e6:	4c06      	ldr	r4, [pc, #24]	; (1900 <strtol+0x2c>)
    18e8:	000a      	movs	r2, r1
    18ea:	9400      	str	r4, [sp, #0]
    18ec:	0029      	movs	r1, r5
    18ee:	f7ff ff51 	bl	1794 <_strtol_l.isra.0>
    18f2:	b003      	add	sp, #12
    18f4:	bc30      	pop	{r4, r5}
    18f6:	bc02      	pop	{r1}
    18f8:	4708      	bx	r1
    18fa:	46c0      	nop			; (mov r8, r8)
    18fc:	40000004 	.word	0x40000004
    1900:	40000430 	.word	0x40000430

00001904 <__utoa>:
    1904:	b5f0      	push	{r4, r5, r6, r7, lr}
    1906:	46c6      	mov	lr, r8
    1908:	b500      	push	{lr}
    190a:	b08a      	sub	sp, #40	; 0x28
    190c:	46e8      	mov	r8, sp
    190e:	0017      	movs	r7, r2
    1910:	4642      	mov	r2, r8
    1912:	000d      	movs	r5, r1
    1914:	4b17      	ldr	r3, [pc, #92]	; (1974 <__utoa+0x70>)
    1916:	cb52      	ldmia	r3!, {r1, r4, r6}
    1918:	c252      	stmia	r2!, {r1, r4, r6}
    191a:	cb52      	ldmia	r3!, {r1, r4, r6}
    191c:	c252      	stmia	r2!, {r1, r4, r6}
    191e:	cb52      	ldmia	r3!, {r1, r4, r6}
    1920:	c252      	stmia	r2!, {r1, r4, r6}
    1922:	781b      	ldrb	r3, [r3, #0]
    1924:	7013      	strb	r3, [r2, #0]
    1926:	1ebb      	subs	r3, r7, #2
    1928:	002e      	movs	r6, r5
    192a:	2400      	movs	r4, #0
    192c:	2b22      	cmp	r3, #34	; 0x22
    192e:	d901      	bls.n	1934 <__utoa+0x30>
    1930:	e01d      	b.n	196e <__utoa+0x6a>
    1932:	001c      	movs	r4, r3
    1934:	0039      	movs	r1, r7
    1936:	f001 fa99 	bl	2e6c <____aeabi_uidivmod_from_thumb>
    193a:	4642      	mov	r2, r8
    193c:	5c52      	ldrb	r2, [r2, r1]
    193e:	1c63      	adds	r3, r4, #1
    1940:	7032      	strb	r2, [r6, #0]
    1942:	3601      	adds	r6, #1
    1944:	2800      	cmp	r0, #0
    1946:	d1f4      	bne.n	1932 <__utoa+0x2e>
    1948:	54e8      	strb	r0, [r5, r3]
    194a:	2c00      	cmp	r4, #0
    194c:	d008      	beq.n	1960 <__utoa+0x5c>
    194e:	2300      	movs	r3, #0
    1950:	5cea      	ldrb	r2, [r5, r3]
    1952:	5d29      	ldrb	r1, [r5, r4]
    1954:	54e9      	strb	r1, [r5, r3]
    1956:	552a      	strb	r2, [r5, r4]
    1958:	3301      	adds	r3, #1
    195a:	3c01      	subs	r4, #1
    195c:	42a3      	cmp	r3, r4
    195e:	dbf7      	blt.n	1950 <__utoa+0x4c>
    1960:	0028      	movs	r0, r5
    1962:	b00a      	add	sp, #40	; 0x28
    1964:	bc04      	pop	{r2}
    1966:	4690      	mov	r8, r2
    1968:	bcf0      	pop	{r4, r5, r6, r7}
    196a:	bc02      	pop	{r1}
    196c:	4708      	bx	r1
    196e:	702c      	strb	r4, [r5, #0]
    1970:	2000      	movs	r0, #0
    1972:	e7f6      	b.n	1962 <__utoa+0x5e>
    1974:	00002fe4 	.word	0x00002fe4

00001978 <__locale_ctype_ptr_l>:
    1978:	23ec      	movs	r3, #236	; 0xec
    197a:	58c0      	ldr	r0, [r0, r3]
    197c:	4770      	bx	lr
    197e:	46c0      	nop			; (mov r8, r8)

00001980 <__ascii_mbtowc>:
    1980:	b082      	sub	sp, #8
    1982:	2900      	cmp	r1, #0
    1984:	d00a      	beq.n	199c <__ascii_mbtowc+0x1c>
    1986:	2a00      	cmp	r2, #0
    1988:	d00b      	beq.n	19a2 <__ascii_mbtowc+0x22>
    198a:	2b00      	cmp	r3, #0
    198c:	d00b      	beq.n	19a6 <__ascii_mbtowc+0x26>
    198e:	7813      	ldrb	r3, [r2, #0]
    1990:	600b      	str	r3, [r1, #0]
    1992:	7810      	ldrb	r0, [r2, #0]
    1994:	1e43      	subs	r3, r0, #1
    1996:	4198      	sbcs	r0, r3
    1998:	b002      	add	sp, #8
    199a:	4770      	bx	lr
    199c:	a901      	add	r1, sp, #4
    199e:	2a00      	cmp	r2, #0
    19a0:	d1f3      	bne.n	198a <__ascii_mbtowc+0xa>
    19a2:	2000      	movs	r0, #0
    19a4:	e7f8      	b.n	1998 <__ascii_mbtowc+0x18>
    19a6:	2002      	movs	r0, #2
    19a8:	4240      	negs	r0, r0
    19aa:	e7f5      	b.n	1998 <__ascii_mbtowc+0x18>

000019ac <__ascii_wctomb>:
    19ac:	2900      	cmp	r1, #0
    19ae:	d004      	beq.n	19ba <__ascii_wctomb+0xe>
    19b0:	2aff      	cmp	r2, #255	; 0xff
    19b2:	d804      	bhi.n	19be <__ascii_wctomb+0x12>
    19b4:	2001      	movs	r0, #1
    19b6:	700a      	strb	r2, [r1, #0]
    19b8:	4770      	bx	lr
    19ba:	2000      	movs	r0, #0
    19bc:	e7fc      	b.n	19b8 <__ascii_wctomb+0xc>
    19be:	238a      	movs	r3, #138	; 0x8a
    19c0:	6003      	str	r3, [r0, #0]
    19c2:	2001      	movs	r0, #1
    19c4:	4240      	negs	r0, r0
    19c6:	e7f7      	b.n	19b8 <__ascii_wctomb+0xc>

000019c8 <__udivsi3>:
    19c8:	e2512001 	subs	r2, r1, #1
    19cc:	012fff1e 	bxeq	lr
    19d0:	3a000036 	bcc	1ab0 <__udivsi3+0xe8>
    19d4:	e1500001 	cmp	r0, r1
    19d8:	9a000022 	bls	1a68 <__udivsi3+0xa0>
    19dc:	e1110002 	tst	r1, r2
    19e0:	0a000023 	beq	1a74 <__udivsi3+0xac>
    19e4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    19e8:	01a01181 	lsleq	r1, r1, #3
    19ec:	03a03008 	moveq	r3, #8
    19f0:	13a03001 	movne	r3, #1
    19f4:	e3510201 	cmp	r1, #268435456	; 0x10000000
    19f8:	31510000 	cmpcc	r1, r0
    19fc:	31a01201 	lslcc	r1, r1, #4
    1a00:	31a03203 	lslcc	r3, r3, #4
    1a04:	3afffffa 	bcc	19f4 <__udivsi3+0x2c>
    1a08:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1a0c:	31510000 	cmpcc	r1, r0
    1a10:	31a01081 	lslcc	r1, r1, #1
    1a14:	31a03083 	lslcc	r3, r3, #1
    1a18:	3afffffa 	bcc	1a08 <__udivsi3+0x40>
    1a1c:	e3a02000 	mov	r2, #0
    1a20:	e1500001 	cmp	r0, r1
    1a24:	20400001 	subcs	r0, r0, r1
    1a28:	21822003 	orrcs	r2, r2, r3
    1a2c:	e15000a1 	cmp	r0, r1, lsr #1
    1a30:	204000a1 	subcs	r0, r0, r1, lsr #1
    1a34:	218220a3 	orrcs	r2, r2, r3, lsr #1
    1a38:	e1500121 	cmp	r0, r1, lsr #2
    1a3c:	20400121 	subcs	r0, r0, r1, lsr #2
    1a40:	21822123 	orrcs	r2, r2, r3, lsr #2
    1a44:	e15001a1 	cmp	r0, r1, lsr #3
    1a48:	204001a1 	subcs	r0, r0, r1, lsr #3
    1a4c:	218221a3 	orrcs	r2, r2, r3, lsr #3
    1a50:	e3500000 	cmp	r0, #0
    1a54:	11b03223 	lsrsne	r3, r3, #4
    1a58:	11a01221 	lsrne	r1, r1, #4
    1a5c:	1affffef 	bne	1a20 <__udivsi3+0x58>
    1a60:	e1a00002 	mov	r0, r2
    1a64:	e12fff1e 	bx	lr
    1a68:	03a00001 	moveq	r0, #1
    1a6c:	13a00000 	movne	r0, #0
    1a70:	e12fff1e 	bx	lr
    1a74:	e3510801 	cmp	r1, #65536	; 0x10000
    1a78:	21a01821 	lsrcs	r1, r1, #16
    1a7c:	23a02010 	movcs	r2, #16
    1a80:	33a02000 	movcc	r2, #0
    1a84:	e3510c01 	cmp	r1, #256	; 0x100
    1a88:	21a01421 	lsrcs	r1, r1, #8
    1a8c:	22822008 	addcs	r2, r2, #8
    1a90:	e3510010 	cmp	r1, #16
    1a94:	21a01221 	lsrcs	r1, r1, #4
    1a98:	22822004 	addcs	r2, r2, #4
    1a9c:	e3510004 	cmp	r1, #4
    1aa0:	82822003 	addhi	r2, r2, #3
    1aa4:	908220a1 	addls	r2, r2, r1, lsr #1
    1aa8:	e1a00230 	lsr	r0, r0, r2
    1aac:	e12fff1e 	bx	lr
    1ab0:	e12fff1f 	bx	pc
    1ab4:	e1a00000 	nop			; (mov r0, r0)
    1ab8:	e3500000 	cmp	r0, #0
    1abc:	13e00000 	mvnne	r0, #0
    1ac0:	ea0004d2 	b	2e10 <____aeabi_idiv0_from_arm>

00001ac4 <__aeabi_uidivmod>:
    1ac4:	e3510000 	cmp	r1, #0
    1ac8:	0afffff8 	beq	1ab0 <__udivsi3+0xe8>
    1acc:	e92d4003 	push	{r0, r1, lr}
    1ad0:	ebffffbc 	bl	19c8 <__udivsi3>
    1ad4:	e8bd4006 	pop	{r1, r2, lr}
    1ad8:	e0030092 	mul	r3, r2, r0
    1adc:	e0411003 	sub	r1, r1, r3
    1ae0:	e12fff1e 	bx	lr

00001ae4 <__aeabi_idiv0>:
    1ae4:	4770      	bx	lr
    1ae6:	46c0      	nop			; (mov r8, r8)

00001ae8 <__aeabi_drsub>:
    1ae8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1aec:	ea000000 	b	1af4 <__adddf3>

00001af0 <__aeabi_dsub>:
    1af0:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001af4 <__adddf3>:
    1af4:	e92d4030 	push	{r4, r5, lr}
    1af8:	e1a04081 	lsl	r4, r1, #1
    1afc:	e1a05083 	lsl	r5, r3, #1
    1b00:	e1340005 	teq	r4, r5
    1b04:	01300002 	teqeq	r0, r2
    1b08:	1194c000 	orrsne	ip, r4, r0
    1b0c:	1195c002 	orrsne	ip, r5, r2
    1b10:	11f0cac4 	mvnsne	ip, r4, asr #21
    1b14:	11f0cac5 	mvnsne	ip, r5, asr #21
    1b18:	0a00008c 	beq	1d50 <__adddf3+0x25c>
    1b1c:	e1a04aa4 	lsr	r4, r4, #21
    1b20:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1b24:	b2655000 	rsblt	r5, r5, #0
    1b28:	da000006 	ble	1b48 <__adddf3+0x54>
    1b2c:	e0844005 	add	r4, r4, r5
    1b30:	e0202002 	eor	r2, r0, r2
    1b34:	e0213003 	eor	r3, r1, r3
    1b38:	e0220000 	eor	r0, r2, r0
    1b3c:	e0231001 	eor	r1, r3, r1
    1b40:	e0202002 	eor	r2, r0, r2
    1b44:	e0213003 	eor	r3, r1, r3
    1b48:	e3550036 	cmp	r5, #54	; 0x36
    1b4c:	88bd4030 	pophi	{r4, r5, lr}
    1b50:	812fff1e 	bxhi	lr
    1b54:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1b58:	e1a01601 	lsl	r1, r1, #12
    1b5c:	e3a0c601 	mov	ip, #1048576	; 0x100000
    1b60:	e18c1621 	orr	r1, ip, r1, lsr #12
    1b64:	0a000001 	beq	1b70 <__adddf3+0x7c>
    1b68:	e2700000 	rsbs	r0, r0, #0
    1b6c:	e2e11000 	rsc	r1, r1, #0
    1b70:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1b74:	e1a03603 	lsl	r3, r3, #12
    1b78:	e18c3623 	orr	r3, ip, r3, lsr #12
    1b7c:	0a000001 	beq	1b88 <__adddf3+0x94>
    1b80:	e2722000 	rsbs	r2, r2, #0
    1b84:	e2e33000 	rsc	r3, r3, #0
    1b88:	e1340005 	teq	r4, r5
    1b8c:	0a000069 	beq	1d38 <__adddf3+0x244>
    1b90:	e2444001 	sub	r4, r4, #1
    1b94:	e275e020 	rsbs	lr, r5, #32
    1b98:	ba000005 	blt	1bb4 <__adddf3+0xc0>
    1b9c:	e1a0ce12 	lsl	ip, r2, lr
    1ba0:	e0900532 	adds	r0, r0, r2, lsr r5
    1ba4:	e2a11000 	adc	r1, r1, #0
    1ba8:	e0900e13 	adds	r0, r0, r3, lsl lr
    1bac:	e0b11553 	adcs	r1, r1, r3, asr r5
    1bb0:	ea000006 	b	1bd0 <__adddf3+0xdc>
    1bb4:	e2455020 	sub	r5, r5, #32
    1bb8:	e28ee020 	add	lr, lr, #32
    1bbc:	e3520001 	cmp	r2, #1
    1bc0:	e1a0ce13 	lsl	ip, r3, lr
    1bc4:	238cc002 	orrcs	ip, ip, #2
    1bc8:	e0900553 	adds	r0, r0, r3, asr r5
    1bcc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1bd0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1bd4:	5a000002 	bpl	1be4 <__adddf3+0xf0>
    1bd8:	e27cc000 	rsbs	ip, ip, #0
    1bdc:	e2f00000 	rscs	r0, r0, #0
    1be0:	e2e11000 	rsc	r1, r1, #0
    1be4:	e3510601 	cmp	r1, #1048576	; 0x100000
    1be8:	3a00000f 	bcc	1c2c <__adddf3+0x138>
    1bec:	e3510602 	cmp	r1, #2097152	; 0x200000
    1bf0:	3a000006 	bcc	1c10 <__adddf3+0x11c>
    1bf4:	e1b010a1 	lsrs	r1, r1, #1
    1bf8:	e1b00060 	rrxs	r0, r0
    1bfc:	e1a0c06c 	rrx	ip, ip
    1c00:	e2844001 	add	r4, r4, #1
    1c04:	e1a02a84 	lsl	r2, r4, #21
    1c08:	e3720501 	cmn	r2, #4194304	; 0x400000
    1c0c:	2a00006b 	bcs	1dc0 <__adddf3+0x2cc>
    1c10:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    1c14:	01b0c0a0 	lsrseq	ip, r0, #1
    1c18:	e2b00000 	adcs	r0, r0, #0
    1c1c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1c20:	e1811005 	orr	r1, r1, r5
    1c24:	e8bd4030 	pop	{r4, r5, lr}
    1c28:	e12fff1e 	bx	lr
    1c2c:	e1b0c08c 	lsls	ip, ip, #1
    1c30:	e0b00000 	adcs	r0, r0, r0
    1c34:	e0a11001 	adc	r1, r1, r1
    1c38:	e3110601 	tst	r1, #1048576	; 0x100000
    1c3c:	e2444001 	sub	r4, r4, #1
    1c40:	1afffff2 	bne	1c10 <__adddf3+0x11c>
    1c44:	e3310000 	teq	r1, #0
    1c48:	13a03014 	movne	r3, #20
    1c4c:	03a03034 	moveq	r3, #52	; 0x34
    1c50:	01a01000 	moveq	r1, r0
    1c54:	03a00000 	moveq	r0, #0
    1c58:	e1a02001 	mov	r2, r1
    1c5c:	e3520801 	cmp	r2, #65536	; 0x10000
    1c60:	21a02822 	lsrcs	r2, r2, #16
    1c64:	22433010 	subcs	r3, r3, #16
    1c68:	e3520c01 	cmp	r2, #256	; 0x100
    1c6c:	21a02422 	lsrcs	r2, r2, #8
    1c70:	22433008 	subcs	r3, r3, #8
    1c74:	e3520010 	cmp	r2, #16
    1c78:	21a02222 	lsrcs	r2, r2, #4
    1c7c:	22433004 	subcs	r3, r3, #4
    1c80:	e3520004 	cmp	r2, #4
    1c84:	22433002 	subcs	r3, r3, #2
    1c88:	304330a2 	subcc	r3, r3, r2, lsr #1
    1c8c:	e04331a2 	sub	r3, r3, r2, lsr #3
    1c90:	e2532020 	subs	r2, r3, #32
    1c94:	aa000007 	bge	1cb8 <__adddf3+0x1c4>
    1c98:	e292200c 	adds	r2, r2, #12
    1c9c:	da000004 	ble	1cb4 <__adddf3+0x1c0>
    1ca0:	e282c014 	add	ip, r2, #20
    1ca4:	e262200c 	rsb	r2, r2, #12
    1ca8:	e1a00c11 	lsl	r0, r1, ip
    1cac:	e1a01231 	lsr	r1, r1, r2
    1cb0:	ea000004 	b	1cc8 <__adddf3+0x1d4>
    1cb4:	e2822014 	add	r2, r2, #20
    1cb8:	d262c020 	rsble	ip, r2, #32
    1cbc:	e1a01211 	lsl	r1, r1, r2
    1cc0:	d1811c30 	orrle	r1, r1, r0, lsr ip
    1cc4:	d1a00210 	lslle	r0, r0, r2
    1cc8:	e0544003 	subs	r4, r4, r3
    1ccc:	a0811a04 	addge	r1, r1, r4, lsl #20
    1cd0:	a1811005 	orrge	r1, r1, r5
    1cd4:	a8bd4030 	popge	{r4, r5, lr}
    1cd8:	a12fff1e 	bxge	lr
    1cdc:	e1e04004 	mvn	r4, r4
    1ce0:	e254401f 	subs	r4, r4, #31
    1ce4:	aa00000f 	bge	1d28 <__adddf3+0x234>
    1ce8:	e294400c 	adds	r4, r4, #12
    1cec:	ca000006 	bgt	1d0c <__adddf3+0x218>
    1cf0:	e2844014 	add	r4, r4, #20
    1cf4:	e2642020 	rsb	r2, r4, #32
    1cf8:	e1a00430 	lsr	r0, r0, r4
    1cfc:	e1800211 	orr	r0, r0, r1, lsl r2
    1d00:	e1851431 	orr	r1, r5, r1, lsr r4
    1d04:	e8bd4030 	pop	{r4, r5, lr}
    1d08:	e12fff1e 	bx	lr
    1d0c:	e264400c 	rsb	r4, r4, #12
    1d10:	e2642020 	rsb	r2, r4, #32
    1d14:	e1a00230 	lsr	r0, r0, r2
    1d18:	e1800411 	orr	r0, r0, r1, lsl r4
    1d1c:	e1a01005 	mov	r1, r5
    1d20:	e8bd4030 	pop	{r4, r5, lr}
    1d24:	e12fff1e 	bx	lr
    1d28:	e1a00431 	lsr	r0, r1, r4
    1d2c:	e1a01005 	mov	r1, r5
    1d30:	e8bd4030 	pop	{r4, r5, lr}
    1d34:	e12fff1e 	bx	lr
    1d38:	e3340000 	teq	r4, #0
    1d3c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1d40:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1d44:	02844001 	addeq	r4, r4, #1
    1d48:	12455001 	subne	r5, r5, #1
    1d4c:	eaffff8f 	b	1b90 <__adddf3+0x9c>
    1d50:	e1f0cac4 	mvns	ip, r4, asr #21
    1d54:	11f0cac5 	mvnsne	ip, r5, asr #21
    1d58:	0a00001d 	beq	1dd4 <__adddf3+0x2e0>
    1d5c:	e1340005 	teq	r4, r5
    1d60:	01300002 	teqeq	r0, r2
    1d64:	0a000004 	beq	1d7c <__adddf3+0x288>
    1d68:	e194c000 	orrs	ip, r4, r0
    1d6c:	01a01003 	moveq	r1, r3
    1d70:	01a00002 	moveq	r0, r2
    1d74:	e8bd4030 	pop	{r4, r5, lr}
    1d78:	e12fff1e 	bx	lr
    1d7c:	e1310003 	teq	r1, r3
    1d80:	13a01000 	movne	r1, #0
    1d84:	13a00000 	movne	r0, #0
    1d88:	18bd4030 	popne	{r4, r5, lr}
    1d8c:	112fff1e 	bxne	lr
    1d90:	e1b0caa4 	lsrs	ip, r4, #21
    1d94:	1a000004 	bne	1dac <__adddf3+0x2b8>
    1d98:	e1b00080 	lsls	r0, r0, #1
    1d9c:	e0b11001 	adcs	r1, r1, r1
    1da0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1da4:	e8bd4030 	pop	{r4, r5, lr}
    1da8:	e12fff1e 	bx	lr
    1dac:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1db0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1db4:	38bd4030 	popcc	{r4, r5, lr}
    1db8:	312fff1e 	bxcc	lr
    1dbc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1dc0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1dc4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1dc8:	e3a00000 	mov	r0, #0
    1dcc:	e8bd4030 	pop	{r4, r5, lr}
    1dd0:	e12fff1e 	bx	lr
    1dd4:	e1f0cac4 	mvns	ip, r4, asr #21
    1dd8:	11a01003 	movne	r1, r3
    1ddc:	11a00002 	movne	r0, r2
    1de0:	01f0cac5 	mvnseq	ip, r5, asr #21
    1de4:	11a03001 	movne	r3, r1
    1de8:	11a02000 	movne	r2, r0
    1dec:	e1904601 	orrs	r4, r0, r1, lsl #12
    1df0:	01925603 	orrseq	r5, r2, r3, lsl #12
    1df4:	01310003 	teqeq	r1, r3
    1df8:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1dfc:	e8bd4030 	pop	{r4, r5, lr}
    1e00:	e12fff1e 	bx	lr

00001e04 <__aeabi_ui2d>:
    1e04:	e3300000 	teq	r0, #0
    1e08:	03a01000 	moveq	r1, #0
    1e0c:	012fff1e 	bxeq	lr
    1e10:	e92d4030 	push	{r4, r5, lr}
    1e14:	e3a04b01 	mov	r4, #1024	; 0x400
    1e18:	e2844032 	add	r4, r4, #50	; 0x32
    1e1c:	e3a05000 	mov	r5, #0
    1e20:	e3a01000 	mov	r1, #0
    1e24:	eaffff86 	b	1c44 <__adddf3+0x150>

00001e28 <__aeabi_i2d>:
    1e28:	e3300000 	teq	r0, #0
    1e2c:	03a01000 	moveq	r1, #0
    1e30:	012fff1e 	bxeq	lr
    1e34:	e92d4030 	push	{r4, r5, lr}
    1e38:	e3a04b01 	mov	r4, #1024	; 0x400
    1e3c:	e2844032 	add	r4, r4, #50	; 0x32
    1e40:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1e44:	42600000 	rsbmi	r0, r0, #0
    1e48:	e3a01000 	mov	r1, #0
    1e4c:	eaffff7c 	b	1c44 <__adddf3+0x150>

00001e50 <__aeabi_f2d>:
    1e50:	e1b02080 	lsls	r2, r0, #1
    1e54:	e1a011c2 	asr	r1, r2, #3
    1e58:	e1a01061 	rrx	r1, r1
    1e5c:	e1a00e02 	lsl	r0, r2, #28
    1e60:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1e64:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1e68:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1e6c:	112fff1e 	bxne	lr
    1e70:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
    1e74:	012fff1e 	bxeq	lr
    1e78:	e33304ff 	teq	r3, #-16777216	; 0xff000000
    1e7c:	03811702 	orreq	r1, r1, #524288	; 0x80000
    1e80:	012fff1e 	bxeq	lr
    1e84:	e92d4030 	push	{r4, r5, lr}
    1e88:	e3a04d0e 	mov	r4, #896	; 0x380
    1e8c:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1e90:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1e94:	eaffff6a 	b	1c44 <__adddf3+0x150>

00001e98 <__aeabi_ul2d>:
    1e98:	e1902001 	orrs	r2, r0, r1
    1e9c:	012fff1e 	bxeq	lr
    1ea0:	e92d4030 	push	{r4, r5, lr}
    1ea4:	e3a05000 	mov	r5, #0
    1ea8:	ea000006 	b	1ec8 <__aeabi_l2d+0x1c>

00001eac <__aeabi_l2d>:
    1eac:	e1902001 	orrs	r2, r0, r1
    1eb0:	012fff1e 	bxeq	lr
    1eb4:	e92d4030 	push	{r4, r5, lr}
    1eb8:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1ebc:	5a000001 	bpl	1ec8 <__aeabi_l2d+0x1c>
    1ec0:	e2700000 	rsbs	r0, r0, #0
    1ec4:	e2e11000 	rsc	r1, r1, #0
    1ec8:	e3a04b01 	mov	r4, #1024	; 0x400
    1ecc:	e2844032 	add	r4, r4, #50	; 0x32
    1ed0:	e1b0cb21 	lsrs	ip, r1, #22
    1ed4:	0affff42 	beq	1be4 <__adddf3+0xf0>
    1ed8:	e3a02003 	mov	r2, #3
    1edc:	e1b0c1ac 	lsrs	ip, ip, #3
    1ee0:	12822003 	addne	r2, r2, #3
    1ee4:	e1b0c1ac 	lsrs	ip, ip, #3
    1ee8:	12822003 	addne	r2, r2, #3
    1eec:	e08221ac 	add	r2, r2, ip, lsr #3
    1ef0:	e2623020 	rsb	r3, r2, #32
    1ef4:	e1a0c310 	lsl	ip, r0, r3
    1ef8:	e1a00230 	lsr	r0, r0, r2
    1efc:	e1800311 	orr	r0, r0, r1, lsl r3
    1f00:	e1a01231 	lsr	r1, r1, r2
    1f04:	e0844002 	add	r4, r4, r2
    1f08:	eaffff35 	b	1be4 <__adddf3+0xf0>

00001f0c <__aeabi_dmul>:
    1f0c:	e92d4070 	push	{r4, r5, r6, lr}
    1f10:	e3a0c0ff 	mov	ip, #255	; 0xff
    1f14:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    1f18:	e01c4a21 	ands	r4, ip, r1, lsr #20
    1f1c:	101c5a23 	andsne	r5, ip, r3, lsr #20
    1f20:	1134000c 	teqne	r4, ip
    1f24:	1135000c 	teqne	r5, ip
    1f28:	0b000075 	bleq	2104 <__aeabi_dmul+0x1f8>
    1f2c:	e0844005 	add	r4, r4, r5
    1f30:	e0216003 	eor	r6, r1, r3
    1f34:	e1c11a8c 	bic	r1, r1, ip, lsl #21
    1f38:	e1c33a8c 	bic	r3, r3, ip, lsl #21
    1f3c:	e1905601 	orrs	r5, r0, r1, lsl #12
    1f40:	11925603 	orrsne	r5, r2, r3, lsl #12
    1f44:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1f48:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1f4c:	0a00001d 	beq	1fc8 <__aeabi_dmul+0xbc>
    1f50:	e08ec290 	umull	ip, lr, r0, r2
    1f54:	e3a05000 	mov	r5, #0
    1f58:	e0a5e291 	umlal	lr, r5, r1, r2
    1f5c:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1f60:	e0a5e390 	umlal	lr, r5, r0, r3
    1f64:	e3a06000 	mov	r6, #0
    1f68:	e0a65391 	umlal	r5, r6, r1, r3
    1f6c:	e33c0000 	teq	ip, #0
    1f70:	138ee001 	orrne	lr, lr, #1
    1f74:	e24440ff 	sub	r4, r4, #255	; 0xff
    1f78:	e3560c02 	cmp	r6, #512	; 0x200
    1f7c:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1f80:	2a000002 	bcs	1f90 <__aeabi_dmul+0x84>
    1f84:	e1b0e08e 	lsls	lr, lr, #1
    1f88:	e0b55005 	adcs	r5, r5, r5
    1f8c:	e0a66006 	adc	r6, r6, r6
    1f90:	e1821586 	orr	r1, r2, r6, lsl #11
    1f94:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1f98:	e1a00585 	lsl	r0, r5, #11
    1f9c:	e1800aae 	orr	r0, r0, lr, lsr #21
    1fa0:	e1a0e58e 	lsl	lr, lr, #11
    1fa4:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    1fa8:	835c0c07 	cmphi	ip, #1792	; 0x700
    1fac:	8a000011 	bhi	1ff8 <__aeabi_dmul+0xec>
    1fb0:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1fb4:	01b0e0a0 	lsrseq	lr, r0, #1
    1fb8:	e2b00000 	adcs	r0, r0, #0
    1fbc:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1fc0:	e8bd4070 	pop	{r4, r5, r6, lr}
    1fc4:	e12fff1e 	bx	lr
    1fc8:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1fcc:	e1861001 	orr	r1, r6, r1
    1fd0:	e1800002 	orr	r0, r0, r2
    1fd4:	e0211003 	eor	r1, r1, r3
    1fd8:	e05440ac 	subs	r4, r4, ip, lsr #1
    1fdc:	c074500c 	rsbsgt	r5, r4, ip
    1fe0:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1fe4:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1fe8:	c12fff1e 	bxgt	lr
    1fec:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1ff0:	e3a0e000 	mov	lr, #0
    1ff4:	e2544001 	subs	r4, r4, #1
    1ff8:	ca00005d 	bgt	2174 <__aeabi_dmul+0x268>
    1ffc:	e3740036 	cmn	r4, #54	; 0x36
    2000:	d3a00000 	movle	r0, #0
    2004:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    2008:	d8bd4070 	pople	{r4, r5, r6, lr}
    200c:	d12fff1e 	bxle	lr
    2010:	e2644000 	rsb	r4, r4, #0
    2014:	e2544020 	subs	r4, r4, #32
    2018:	aa00001a 	bge	2088 <__aeabi_dmul+0x17c>
    201c:	e294400c 	adds	r4, r4, #12
    2020:	ca00000c 	bgt	2058 <__aeabi_dmul+0x14c>
    2024:	e2844014 	add	r4, r4, #20
    2028:	e2645020 	rsb	r5, r4, #32
    202c:	e1a03510 	lsl	r3, r0, r5
    2030:	e1a00430 	lsr	r0, r0, r4
    2034:	e1800511 	orr	r0, r0, r1, lsl r5
    2038:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    203c:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2040:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2044:	e0a21431 	adc	r1, r2, r1, lsr r4
    2048:	e19ee083 	orrs	lr, lr, r3, lsl #1
    204c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2050:	e8bd4070 	pop	{r4, r5, r6, lr}
    2054:	e12fff1e 	bx	lr
    2058:	e264400c 	rsb	r4, r4, #12
    205c:	e2645020 	rsb	r5, r4, #32
    2060:	e1a03410 	lsl	r3, r0, r4
    2064:	e1a00530 	lsr	r0, r0, r5
    2068:	e1800411 	orr	r0, r0, r1, lsl r4
    206c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2070:	e0900fa3 	adds	r0, r0, r3, lsr #31
    2074:	e2a11000 	adc	r1, r1, #0
    2078:	e19ee083 	orrs	lr, lr, r3, lsl #1
    207c:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2080:	e8bd4070 	pop	{r4, r5, r6, lr}
    2084:	e12fff1e 	bx	lr
    2088:	e2645020 	rsb	r5, r4, #32
    208c:	e18ee510 	orr	lr, lr, r0, lsl r5
    2090:	e1a03430 	lsr	r3, r0, r4
    2094:	e1833511 	orr	r3, r3, r1, lsl r5
    2098:	e1a00431 	lsr	r0, r1, r4
    209c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    20a0:	e1c00431 	bic	r0, r0, r1, lsr r4
    20a4:	e0800fa3 	add	r0, r0, r3, lsr #31
    20a8:	e19ee083 	orrs	lr, lr, r3, lsl #1
    20ac:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    20b0:	e8bd4070 	pop	{r4, r5, r6, lr}
    20b4:	e12fff1e 	bx	lr
    20b8:	e3340000 	teq	r4, #0
    20bc:	1a000008 	bne	20e4 <__aeabi_dmul+0x1d8>
    20c0:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    20c4:	e1b00080 	lsls	r0, r0, #1
    20c8:	e0a11001 	adc	r1, r1, r1
    20cc:	e3110601 	tst	r1, #1048576	; 0x100000
    20d0:	02444001 	subeq	r4, r4, #1
    20d4:	0afffffa 	beq	20c4 <__aeabi_dmul+0x1b8>
    20d8:	e1811006 	orr	r1, r1, r6
    20dc:	e3350000 	teq	r5, #0
    20e0:	112fff1e 	bxne	lr
    20e4:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    20e8:	e1b02082 	lsls	r2, r2, #1
    20ec:	e0a33003 	adc	r3, r3, r3
    20f0:	e3130601 	tst	r3, #1048576	; 0x100000
    20f4:	02455001 	subeq	r5, r5, #1
    20f8:	0afffffa 	beq	20e8 <__aeabi_dmul+0x1dc>
    20fc:	e1833006 	orr	r3, r3, r6
    2100:	e12fff1e 	bx	lr
    2104:	e134000c 	teq	r4, ip
    2108:	e00c5a23 	and	r5, ip, r3, lsr #20
    210c:	1135000c 	teqne	r5, ip
    2110:	0a000007 	beq	2134 <__aeabi_dmul+0x228>
    2114:	e1906081 	orrs	r6, r0, r1, lsl #1
    2118:	11926083 	orrsne	r6, r2, r3, lsl #1
    211c:	1affffe5 	bne	20b8 <__aeabi_dmul+0x1ac>
    2120:	e0211003 	eor	r1, r1, r3
    2124:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2128:	e3a00000 	mov	r0, #0
    212c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2130:	e12fff1e 	bx	lr
    2134:	e1906081 	orrs	r6, r0, r1, lsl #1
    2138:	01a00002 	moveq	r0, r2
    213c:	01a01003 	moveq	r1, r3
    2140:	11926083 	orrsne	r6, r2, r3, lsl #1
    2144:	0a000010 	beq	218c <__aeabi_dmul+0x280>
    2148:	e134000c 	teq	r4, ip
    214c:	1a000001 	bne	2158 <__aeabi_dmul+0x24c>
    2150:	e1906601 	orrs	r6, r0, r1, lsl #12
    2154:	1a00000c 	bne	218c <__aeabi_dmul+0x280>
    2158:	e135000c 	teq	r5, ip
    215c:	1a000003 	bne	2170 <__aeabi_dmul+0x264>
    2160:	e1926603 	orrs	r6, r2, r3, lsl #12
    2164:	11a00002 	movne	r0, r2
    2168:	11a01003 	movne	r1, r3
    216c:	1a000006 	bne	218c <__aeabi_dmul+0x280>
    2170:	e0211003 	eor	r1, r1, r3
    2174:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2178:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    217c:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2180:	e3a00000 	mov	r0, #0
    2184:	e8bd4070 	pop	{r4, r5, r6, lr}
    2188:	e12fff1e 	bx	lr
    218c:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2190:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    2194:	e8bd4070 	pop	{r4, r5, r6, lr}
    2198:	e12fff1e 	bx	lr

0000219c <__aeabi_ddiv>:
    219c:	e92d4070 	push	{r4, r5, r6, lr}
    21a0:	e3a0c0ff 	mov	ip, #255	; 0xff
    21a4:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    21a8:	e01c4a21 	ands	r4, ip, r1, lsr #20
    21ac:	101c5a23 	andsne	r5, ip, r3, lsr #20
    21b0:	1134000c 	teqne	r4, ip
    21b4:	1135000c 	teqne	r5, ip
    21b8:	0b00005e 	bleq	2338 <__aeabi_ddiv+0x19c>
    21bc:	e0444005 	sub	r4, r4, r5
    21c0:	e021e003 	eor	lr, r1, r3
    21c4:	e1925603 	orrs	r5, r2, r3, lsl #12
    21c8:	e1a01601 	lsl	r1, r1, #12
    21cc:	0a00004c 	beq	2304 <__aeabi_ddiv+0x168>
    21d0:	e1a03603 	lsl	r3, r3, #12
    21d4:	e3a05201 	mov	r5, #268435456	; 0x10000000
    21d8:	e1853223 	orr	r3, r5, r3, lsr #4
    21dc:	e1833c22 	orr	r3, r3, r2, lsr #24
    21e0:	e1a02402 	lsl	r2, r2, #8
    21e4:	e1855221 	orr	r5, r5, r1, lsr #4
    21e8:	e1855c20 	orr	r5, r5, r0, lsr #24
    21ec:	e1a06400 	lsl	r6, r0, #8
    21f0:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    21f4:	e1550003 	cmp	r5, r3
    21f8:	01560002 	cmpeq	r6, r2
    21fc:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    2200:	e2844c03 	add	r4, r4, #768	; 0x300
    2204:	2a000001 	bcs	2210 <__aeabi_ddiv+0x74>
    2208:	e1b030a3 	lsrs	r3, r3, #1
    220c:	e1a02062 	rrx	r2, r2
    2210:	e0566002 	subs	r6, r6, r2
    2214:	e0c55003 	sbc	r5, r5, r3
    2218:	e1b030a3 	lsrs	r3, r3, #1
    221c:	e1a02062 	rrx	r2, r2
    2220:	e3a00601 	mov	r0, #1048576	; 0x100000
    2224:	e3a0c702 	mov	ip, #524288	; 0x80000
    2228:	e056e002 	subs	lr, r6, r2
    222c:	e0d5e003 	sbcs	lr, r5, r3
    2230:	20466002 	subcs	r6, r6, r2
    2234:	21a0500e 	movcs	r5, lr
    2238:	2180000c 	orrcs	r0, r0, ip
    223c:	e1b030a3 	lsrs	r3, r3, #1
    2240:	e1a02062 	rrx	r2, r2
    2244:	e056e002 	subs	lr, r6, r2
    2248:	e0d5e003 	sbcs	lr, r5, r3
    224c:	20466002 	subcs	r6, r6, r2
    2250:	21a0500e 	movcs	r5, lr
    2254:	218000ac 	orrcs	r0, r0, ip, lsr #1
    2258:	e1b030a3 	lsrs	r3, r3, #1
    225c:	e1a02062 	rrx	r2, r2
    2260:	e056e002 	subs	lr, r6, r2
    2264:	e0d5e003 	sbcs	lr, r5, r3
    2268:	20466002 	subcs	r6, r6, r2
    226c:	21a0500e 	movcs	r5, lr
    2270:	2180012c 	orrcs	r0, r0, ip, lsr #2
    2274:	e1b030a3 	lsrs	r3, r3, #1
    2278:	e1a02062 	rrx	r2, r2
    227c:	e056e002 	subs	lr, r6, r2
    2280:	e0d5e003 	sbcs	lr, r5, r3
    2284:	20466002 	subcs	r6, r6, r2
    2288:	21a0500e 	movcs	r5, lr
    228c:	218001ac 	orrcs	r0, r0, ip, lsr #3
    2290:	e195e006 	orrs	lr, r5, r6
    2294:	0a00000d 	beq	22d0 <__aeabi_ddiv+0x134>
    2298:	e1a05205 	lsl	r5, r5, #4
    229c:	e1855e26 	orr	r5, r5, r6, lsr #28
    22a0:	e1a06206 	lsl	r6, r6, #4
    22a4:	e1a03183 	lsl	r3, r3, #3
    22a8:	e1833ea2 	orr	r3, r3, r2, lsr #29
    22ac:	e1a02182 	lsl	r2, r2, #3
    22b0:	e1b0c22c 	lsrs	ip, ip, #4
    22b4:	1affffdb 	bne	2228 <__aeabi_ddiv+0x8c>
    22b8:	e3110601 	tst	r1, #1048576	; 0x100000
    22bc:	1a000006 	bne	22dc <__aeabi_ddiv+0x140>
    22c0:	e1811000 	orr	r1, r1, r0
    22c4:	e3a00000 	mov	r0, #0
    22c8:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    22cc:	eaffffd5 	b	2228 <__aeabi_ddiv+0x8c>
    22d0:	e3110601 	tst	r1, #1048576	; 0x100000
    22d4:	01811000 	orreq	r1, r1, r0
    22d8:	03a00000 	moveq	r0, #0
    22dc:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    22e0:	835c0c07 	cmphi	ip, #1792	; 0x700
    22e4:	8affff43 	bhi	1ff8 <__aeabi_dmul+0xec>
    22e8:	e055c003 	subs	ip, r5, r3
    22ec:	0056c002 	subseq	ip, r6, r2
    22f0:	01b0c0a0 	lsrseq	ip, r0, #1
    22f4:	e2b00000 	adcs	r0, r0, #0
    22f8:	e0a11a04 	adc	r1, r1, r4, lsl #20
    22fc:	e8bd4070 	pop	{r4, r5, r6, lr}
    2300:	e12fff1e 	bx	lr
    2304:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    2308:	e18e1621 	orr	r1, lr, r1, lsr #12
    230c:	e09440ac 	adds	r4, r4, ip, lsr #1
    2310:	c074500c 	rsbsgt	r5, r4, ip
    2314:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2318:	c8bd4070 	popgt	{r4, r5, r6, lr}
    231c:	c12fff1e 	bxgt	lr
    2320:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2324:	e3a0e000 	mov	lr, #0
    2328:	e2544001 	subs	r4, r4, #1
    232c:	eaffff31 	b	1ff8 <__aeabi_dmul+0xec>
    2330:	e185e006 	orr	lr, r5, r6
    2334:	eaffff2f 	b	1ff8 <__aeabi_dmul+0xec>
    2338:	e00c5a23 	and	r5, ip, r3, lsr #20
    233c:	e134000c 	teq	r4, ip
    2340:	0135000c 	teqeq	r5, ip
    2344:	0affff90 	beq	218c <__aeabi_dmul+0x280>
    2348:	e134000c 	teq	r4, ip
    234c:	1a000006 	bne	236c <__aeabi_ddiv+0x1d0>
    2350:	e1904601 	orrs	r4, r0, r1, lsl #12
    2354:	1affff8c 	bne	218c <__aeabi_dmul+0x280>
    2358:	e135000c 	teq	r5, ip
    235c:	1affff83 	bne	2170 <__aeabi_dmul+0x264>
    2360:	e1a00002 	mov	r0, r2
    2364:	e1a01003 	mov	r1, r3
    2368:	eaffff87 	b	218c <__aeabi_dmul+0x280>
    236c:	e135000c 	teq	r5, ip
    2370:	1a000004 	bne	2388 <__aeabi_ddiv+0x1ec>
    2374:	e1925603 	orrs	r5, r2, r3, lsl #12
    2378:	0affff68 	beq	2120 <__aeabi_dmul+0x214>
    237c:	e1a00002 	mov	r0, r2
    2380:	e1a01003 	mov	r1, r3
    2384:	eaffff80 	b	218c <__aeabi_dmul+0x280>
    2388:	e1906081 	orrs	r6, r0, r1, lsl #1
    238c:	11926083 	orrsne	r6, r2, r3, lsl #1
    2390:	1affff48 	bne	20b8 <__aeabi_dmul+0x1ac>
    2394:	e1904081 	orrs	r4, r0, r1, lsl #1
    2398:	1affff74 	bne	2170 <__aeabi_dmul+0x264>
    239c:	e1925083 	orrs	r5, r2, r3, lsl #1
    23a0:	1affff5e 	bne	2120 <__aeabi_dmul+0x214>
    23a4:	eaffff78 	b	218c <__aeabi_dmul+0x280>

000023a8 <__aeabi_d2iz>:
    23a8:	e1a02081 	lsl	r2, r1, #1
    23ac:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    23b0:	2a00000c 	bcs	23e8 <__aeabi_d2iz+0x40>
    23b4:	5a000009 	bpl	23e0 <__aeabi_d2iz+0x38>
    23b8:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    23bc:	e0532ac2 	subs	r2, r3, r2, asr #21
    23c0:	9a00000a 	bls	23f0 <__aeabi_d2iz+0x48>
    23c4:	e1a03581 	lsl	r3, r1, #11
    23c8:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    23cc:	e1833aa0 	orr	r3, r3, r0, lsr #21
    23d0:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    23d4:	e1a00233 	lsr	r0, r3, r2
    23d8:	12600000 	rsbne	r0, r0, #0
    23dc:	e12fff1e 	bx	lr
    23e0:	e3a00000 	mov	r0, #0
    23e4:	e12fff1e 	bx	lr
    23e8:	e1900601 	orrs	r0, r0, r1, lsl #12
    23ec:	1a000002 	bne	23fc <__aeabi_d2iz+0x54>
    23f0:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    23f4:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    23f8:	e12fff1e 	bx	lr
    23fc:	e3a00000 	mov	r0, #0
    2400:	e12fff1e 	bx	lr

00002404 <__aeabi_d2f>:
    2404:	e1a02081 	lsl	r2, r1, #1
    2408:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    240c:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
    2410:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    2414:	9a000006 	bls	2434 <__aeabi_d2f+0x30>
    2418:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    241c:	e1a02180 	lsl	r2, r0, #3
    2420:	e18c0ea0 	orr	r0, ip, r0, lsr #29
    2424:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    2428:	e0a00103 	adc	r0, r0, r3, lsl #2
    242c:	03c00001 	biceq	r0, r0, #1
    2430:	e12fff1e 	bx	lr
    2434:	e3110101 	tst	r1, #1073741824	; 0x40000000
    2438:	1a00000f 	bne	247c <__aeabi_d2f+0x78>
    243c:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    2440:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    2444:	b12fff1e 	bxlt	lr
    2448:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    244c:	e1a02aa2 	lsr	r2, r2, #21
    2450:	e2622018 	rsb	r2, r2, #24
    2454:	e262c020 	rsb	ip, r2, #32
    2458:	e1b03c10 	lsls	r3, r0, ip
    245c:	e1a00230 	lsr	r0, r0, r2
    2460:	13800001 	orrne	r0, r0, #1
    2464:	e1a03581 	lsl	r3, r1, #11
    2468:	e1a035a3 	lsr	r3, r3, #11
    246c:	e1800c13 	orr	r0, r0, r3, lsl ip
    2470:	e1a03233 	lsr	r3, r3, r2
    2474:	e1a03083 	lsl	r3, r3, #1
    2478:	eaffffe6 	b	2418 <__aeabi_d2f+0x14>
    247c:	e1f03ac2 	mvns	r3, r2, asr #21
    2480:	1a000003 	bne	2494 <__aeabi_d2f+0x90>
    2484:	e1903601 	orrs	r3, r0, r1, lsl #12
    2488:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    248c:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    2490:	112fff1e 	bxne	lr
    2494:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    2498:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    249c:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    24a0:	e12fff1e 	bx	lr

000024a4 <__aeabi_frsub>:
    24a4:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    24a8:	ea000000 	b	24b0 <__addsf3>

000024ac <__aeabi_fsub>:
    24ac:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

000024b0 <__addsf3>:
    24b0:	e1b02080 	lsls	r2, r0, #1
    24b4:	11b03081 	lslsne	r3, r1, #1
    24b8:	11320003 	teqne	r2, r3
    24bc:	11f0cc42 	mvnsne	ip, r2, asr #24
    24c0:	11f0cc43 	mvnsne	ip, r3, asr #24
    24c4:	0a000047 	beq	25e8 <__addsf3+0x138>
    24c8:	e1a02c22 	lsr	r2, r2, #24
    24cc:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    24d0:	c0822003 	addgt	r2, r2, r3
    24d4:	c0201001 	eorgt	r1, r0, r1
    24d8:	c0210000 	eorgt	r0, r1, r0
    24dc:	c0201001 	eorgt	r1, r0, r1
    24e0:	b2633000 	rsblt	r3, r3, #0
    24e4:	e3530019 	cmp	r3, #25
    24e8:	812fff1e 	bxhi	lr
    24ec:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    24f0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    24f4:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    24f8:	12600000 	rsbne	r0, r0, #0
    24fc:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2500:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    2504:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2508:	12611000 	rsbne	r1, r1, #0
    250c:	e1320003 	teq	r2, r3
    2510:	0a00002e 	beq	25d0 <__addsf3+0x120>
    2514:	e2422001 	sub	r2, r2, #1
    2518:	e0900351 	adds	r0, r0, r1, asr r3
    251c:	e2633020 	rsb	r3, r3, #32
    2520:	e1a01311 	lsl	r1, r1, r3
    2524:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2528:	5a000001 	bpl	2534 <__addsf3+0x84>
    252c:	e2711000 	rsbs	r1, r1, #0
    2530:	e2e00000 	rsc	r0, r0, #0
    2534:	e3500502 	cmp	r0, #8388608	; 0x800000
    2538:	3a00000b 	bcc	256c <__addsf3+0xbc>
    253c:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2540:	3a000004 	bcc	2558 <__addsf3+0xa8>
    2544:	e1b000a0 	lsrs	r0, r0, #1
    2548:	e1a01061 	rrx	r1, r1
    254c:	e2822001 	add	r2, r2, #1
    2550:	e35200fe 	cmp	r2, #254	; 0xfe
    2554:	2a000038 	bcs	263c <__addsf3+0x18c>
    2558:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    255c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2560:	03c00001 	biceq	r0, r0, #1
    2564:	e1800003 	orr	r0, r0, r3
    2568:	e12fff1e 	bx	lr
    256c:	e1b01081 	lsls	r1, r1, #1
    2570:	e0a00000 	adc	r0, r0, r0
    2574:	e3100502 	tst	r0, #8388608	; 0x800000
    2578:	e2422001 	sub	r2, r2, #1
    257c:	1afffff5 	bne	2558 <__addsf3+0xa8>
    2580:	e1b0c620 	lsrs	ip, r0, #12
    2584:	01a00600 	lsleq	r0, r0, #12
    2588:	0242200c 	subeq	r2, r2, #12
    258c:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2590:	01a00400 	lsleq	r0, r0, #8
    2594:	02422008 	subeq	r2, r2, #8
    2598:	e310060f 	tst	r0, #15728640	; 0xf00000
    259c:	01a00200 	lsleq	r0, r0, #4
    25a0:	02422004 	subeq	r2, r2, #4
    25a4:	e3100503 	tst	r0, #12582912	; 0xc00000
    25a8:	01a00100 	lsleq	r0, r0, #2
    25ac:	02422002 	subeq	r2, r2, #2
    25b0:	e3500502 	cmp	r0, #8388608	; 0x800000
    25b4:	31a00080 	lslcc	r0, r0, #1
    25b8:	e2d22000 	sbcs	r2, r2, #0
    25bc:	a0800b82 	addge	r0, r0, r2, lsl #23
    25c0:	b2622000 	rsblt	r2, r2, #0
    25c4:	a1800003 	orrge	r0, r0, r3
    25c8:	b1830230 	orrlt	r0, r3, r0, lsr r2
    25cc:	e12fff1e 	bx	lr
    25d0:	e3320000 	teq	r2, #0
    25d4:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    25d8:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    25dc:	02822001 	addeq	r2, r2, #1
    25e0:	12433001 	subne	r3, r3, #1
    25e4:	eaffffca 	b	2514 <__addsf3+0x64>
    25e8:	e1a03081 	lsl	r3, r1, #1
    25ec:	e1f0cc42 	mvns	ip, r2, asr #24
    25f0:	11f0cc43 	mvnsne	ip, r3, asr #24
    25f4:	0a000013 	beq	2648 <__addsf3+0x198>
    25f8:	e1320003 	teq	r2, r3
    25fc:	0a000002 	beq	260c <__addsf3+0x15c>
    2600:	e3320000 	teq	r2, #0
    2604:	01a00001 	moveq	r0, r1
    2608:	e12fff1e 	bx	lr
    260c:	e1300001 	teq	r0, r1
    2610:	13a00000 	movne	r0, #0
    2614:	112fff1e 	bxne	lr
    2618:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    261c:	1a000002 	bne	262c <__addsf3+0x17c>
    2620:	e1b00080 	lsls	r0, r0, #1
    2624:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2628:	e12fff1e 	bx	lr
    262c:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2630:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    2634:	312fff1e 	bxcc	lr
    2638:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    263c:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2640:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    2644:	e12fff1e 	bx	lr
    2648:	e1f02c42 	mvns	r2, r2, asr #24
    264c:	11a00001 	movne	r0, r1
    2650:	01f03c43 	mvnseq	r3, r3, asr #24
    2654:	11a01000 	movne	r1, r0
    2658:	e1b02480 	lsls	r2, r0, #9
    265c:	01b03481 	lslseq	r3, r1, #9
    2660:	01300001 	teqeq	r0, r1
    2664:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    2668:	e12fff1e 	bx	lr

0000266c <__aeabi_ui2f>:
    266c:	e3a03000 	mov	r3, #0
    2670:	ea000001 	b	267c <__aeabi_i2f+0x8>

00002674 <__aeabi_i2f>:
    2674:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    2678:	42600000 	rsbmi	r0, r0, #0
    267c:	e1b0c000 	movs	ip, r0
    2680:	012fff1e 	bxeq	lr
    2684:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    2688:	e1a01000 	mov	r1, r0
    268c:	e3a00000 	mov	r0, #0
    2690:	ea00000f 	b	26d4 <__aeabi_l2f+0x30>

00002694 <__aeabi_ul2f>:
    2694:	e1902001 	orrs	r2, r0, r1
    2698:	012fff1e 	bxeq	lr
    269c:	e3a03000 	mov	r3, #0
    26a0:	ea000005 	b	26bc <__aeabi_l2f+0x18>

000026a4 <__aeabi_l2f>:
    26a4:	e1902001 	orrs	r2, r0, r1
    26a8:	012fff1e 	bxeq	lr
    26ac:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    26b0:	5a000001 	bpl	26bc <__aeabi_l2f+0x18>
    26b4:	e2700000 	rsbs	r0, r0, #0
    26b8:	e2e11000 	rsc	r1, r1, #0
    26bc:	e1b0c001 	movs	ip, r1
    26c0:	01a0c000 	moveq	ip, r0
    26c4:	01a01000 	moveq	r1, r0
    26c8:	03a00000 	moveq	r0, #0
    26cc:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    26d0:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    26d4:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    26d8:	e3a02017 	mov	r2, #23
    26dc:	e35c0801 	cmp	ip, #65536	; 0x10000
    26e0:	21a0c82c 	lsrcs	ip, ip, #16
    26e4:	22422010 	subcs	r2, r2, #16
    26e8:	e35c0c01 	cmp	ip, #256	; 0x100
    26ec:	21a0c42c 	lsrcs	ip, ip, #8
    26f0:	22422008 	subcs	r2, r2, #8
    26f4:	e35c0010 	cmp	ip, #16
    26f8:	21a0c22c 	lsrcs	ip, ip, #4
    26fc:	22422004 	subcs	r2, r2, #4
    2700:	e35c0004 	cmp	ip, #4
    2704:	22422002 	subcs	r2, r2, #2
    2708:	304220ac 	subcc	r2, r2, ip, lsr #1
    270c:	e05221ac 	subs	r2, r2, ip, lsr #3
    2710:	e0433b82 	sub	r3, r3, r2, lsl #23
    2714:	ba000006 	blt	2734 <__aeabi_l2f+0x90>
    2718:	e0833211 	add	r3, r3, r1, lsl r2
    271c:	e1a0c210 	lsl	ip, r0, r2
    2720:	e2622020 	rsb	r2, r2, #32
    2724:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    2728:	e0a30230 	adc	r0, r3, r0, lsr r2
    272c:	03c00001 	biceq	r0, r0, #1
    2730:	e12fff1e 	bx	lr
    2734:	e2822020 	add	r2, r2, #32
    2738:	e1a0c211 	lsl	ip, r1, r2
    273c:	e2622020 	rsb	r2, r2, #32
    2740:	e190008c 	orrs	r0, r0, ip, lsl #1
    2744:	e0a30231 	adc	r0, r3, r1, lsr r2
    2748:	01c00fac 	biceq	r0, r0, ip, lsr #31
    274c:	e12fff1e 	bx	lr

00002750 <__aeabi_fmul>:
    2750:	e3a0c0ff 	mov	ip, #255	; 0xff
    2754:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    2758:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    275c:	1132000c 	teqne	r2, ip
    2760:	1133000c 	teqne	r3, ip
    2764:	0a00003e 	beq	2864 <__aeabi_fmul+0x114>
    2768:	e0822003 	add	r2, r2, r3
    276c:	e020c001 	eor	ip, r0, r1
    2770:	e1b00480 	lsls	r0, r0, #9
    2774:	11b01481 	lslsne	r1, r1, #9
    2778:	0a000010 	beq	27c0 <__aeabi_fmul+0x70>
    277c:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2780:	e18302a0 	orr	r0, r3, r0, lsr #5
    2784:	e18312a1 	orr	r1, r3, r1, lsr #5
    2788:	e0813190 	umull	r3, r1, r0, r1
    278c:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    2790:	e3510502 	cmp	r1, #8388608	; 0x800000
    2794:	31a01081 	lslcc	r1, r1, #1
    2798:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    279c:	31a03083 	lslcc	r3, r3, #1
    27a0:	e1800001 	orr	r0, r0, r1
    27a4:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    27a8:	e35200fd 	cmp	r2, #253	; 0xfd
    27ac:	8a00000f 	bhi	27f0 <__aeabi_fmul+0xa0>
    27b0:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    27b4:	e0a00b82 	adc	r0, r0, r2, lsl #23
    27b8:	03c00001 	biceq	r0, r0, #1
    27bc:	e12fff1e 	bx	lr
    27c0:	e3300000 	teq	r0, #0
    27c4:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    27c8:	01a01481 	lsleq	r1, r1, #9
    27cc:	e18c04a0 	orr	r0, ip, r0, lsr #9
    27d0:	e18004a1 	orr	r0, r0, r1, lsr #9
    27d4:	e252207f 	subs	r2, r2, #127	; 0x7f
    27d8:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    27dc:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    27e0:	c12fff1e 	bxgt	lr
    27e4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    27e8:	e3a03000 	mov	r3, #0
    27ec:	e2522001 	subs	r2, r2, #1
    27f0:	ca000035 	bgt	28cc <__aeabi_fmul+0x17c>
    27f4:	e3720019 	cmn	r2, #25
    27f8:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    27fc:	d12fff1e 	bxle	lr
    2800:	e2622000 	rsb	r2, r2, #0
    2804:	e1b01080 	lsls	r1, r0, #1
    2808:	e1a01231 	lsr	r1, r1, r2
    280c:	e2622020 	rsb	r2, r2, #32
    2810:	e1a0c210 	lsl	ip, r0, r2
    2814:	e1b00061 	rrxs	r0, r1
    2818:	e2a00000 	adc	r0, r0, #0
    281c:	e193308c 	orrs	r3, r3, ip, lsl #1
    2820:	01c00fac 	biceq	r0, r0, ip, lsr #31
    2824:	e12fff1e 	bx	lr
    2828:	e3320000 	teq	r2, #0
    282c:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    2830:	01a00080 	lsleq	r0, r0, #1
    2834:	03100502 	tsteq	r0, #8388608	; 0x800000
    2838:	02422001 	subeq	r2, r2, #1
    283c:	0afffffb 	beq	2830 <__aeabi_fmul+0xe0>
    2840:	e180000c 	orr	r0, r0, ip
    2844:	e3330000 	teq	r3, #0
    2848:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    284c:	01a01081 	lsleq	r1, r1, #1
    2850:	03110502 	tsteq	r1, #8388608	; 0x800000
    2854:	02433001 	subeq	r3, r3, #1
    2858:	0afffffb 	beq	284c <__aeabi_fmul+0xfc>
    285c:	e181100c 	orr	r1, r1, ip
    2860:	eaffffc0 	b	2768 <__aeabi_fmul+0x18>
    2864:	e00c3ba1 	and	r3, ip, r1, lsr #23
    2868:	e132000c 	teq	r2, ip
    286c:	1133000c 	teqne	r3, ip
    2870:	0a000005 	beq	288c <__aeabi_fmul+0x13c>
    2874:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    2878:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    287c:	1affffe9 	bne	2828 <__aeabi_fmul+0xd8>
    2880:	e0200001 	eor	r0, r0, r1
    2884:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2888:	e12fff1e 	bx	lr
    288c:	e3300000 	teq	r0, #0
    2890:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    2894:	01a00001 	moveq	r0, r1
    2898:	13310000 	teqne	r1, #0
    289c:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    28a0:	0a00000d 	beq	28dc <__aeabi_fmul+0x18c>
    28a4:	e132000c 	teq	r2, ip
    28a8:	1a000001 	bne	28b4 <__aeabi_fmul+0x164>
    28ac:	e1b02480 	lsls	r2, r0, #9
    28b0:	1a000009 	bne	28dc <__aeabi_fmul+0x18c>
    28b4:	e133000c 	teq	r3, ip
    28b8:	1a000002 	bne	28c8 <__aeabi_fmul+0x178>
    28bc:	e1b03481 	lsls	r3, r1, #9
    28c0:	11a00001 	movne	r0, r1
    28c4:	1a000004 	bne	28dc <__aeabi_fmul+0x18c>
    28c8:	e0200001 	eor	r0, r0, r1
    28cc:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    28d0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    28d4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    28d8:	e12fff1e 	bx	lr
    28dc:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    28e0:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    28e4:	e12fff1e 	bx	lr

000028e8 <__aeabi_fdiv>:
    28e8:	e3a0c0ff 	mov	ip, #255	; 0xff
    28ec:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    28f0:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    28f4:	1132000c 	teqne	r2, ip
    28f8:	1133000c 	teqne	r3, ip
    28fc:	0a00003a 	beq	29ec <__aeabi_fdiv+0x104>
    2900:	e0422003 	sub	r2, r2, r3
    2904:	e020c001 	eor	ip, r0, r1
    2908:	e1b01481 	lsls	r1, r1, #9
    290c:	e1a00480 	lsl	r0, r0, #9
    2910:	0a00001c 	beq	2988 <__aeabi_fdiv+0xa0>
    2914:	e3a03201 	mov	r3, #268435456	; 0x10000000
    2918:	e1831221 	orr	r1, r3, r1, lsr #4
    291c:	e1833220 	orr	r3, r3, r0, lsr #4
    2920:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    2924:	e1530001 	cmp	r3, r1
    2928:	31a03083 	lslcc	r3, r3, #1
    292c:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2930:	e3a0c502 	mov	ip, #8388608	; 0x800000
    2934:	e1530001 	cmp	r3, r1
    2938:	20433001 	subcs	r3, r3, r1
    293c:	2180000c 	orrcs	r0, r0, ip
    2940:	e15300a1 	cmp	r3, r1, lsr #1
    2944:	204330a1 	subcs	r3, r3, r1, lsr #1
    2948:	218000ac 	orrcs	r0, r0, ip, lsr #1
    294c:	e1530121 	cmp	r3, r1, lsr #2
    2950:	20433121 	subcs	r3, r3, r1, lsr #2
    2954:	2180012c 	orrcs	r0, r0, ip, lsr #2
    2958:	e15301a1 	cmp	r3, r1, lsr #3
    295c:	204331a1 	subcs	r3, r3, r1, lsr #3
    2960:	218001ac 	orrcs	r0, r0, ip, lsr #3
    2964:	e1b03203 	lsls	r3, r3, #4
    2968:	11b0c22c 	lsrsne	ip, ip, #4
    296c:	1afffff0 	bne	2934 <__aeabi_fdiv+0x4c>
    2970:	e35200fd 	cmp	r2, #253	; 0xfd
    2974:	8affff9d 	bhi	27f0 <__aeabi_fmul+0xa0>
    2978:	e1530001 	cmp	r3, r1
    297c:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2980:	03c00001 	biceq	r0, r0, #1
    2984:	e12fff1e 	bx	lr
    2988:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    298c:	e18c04a0 	orr	r0, ip, r0, lsr #9
    2990:	e292207f 	adds	r2, r2, #127	; 0x7f
    2994:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    2998:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    299c:	c12fff1e 	bxgt	lr
    29a0:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    29a4:	e3a03000 	mov	r3, #0
    29a8:	e2522001 	subs	r2, r2, #1
    29ac:	eaffff8f 	b	27f0 <__aeabi_fmul+0xa0>
    29b0:	e3320000 	teq	r2, #0
    29b4:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    29b8:	01a00080 	lsleq	r0, r0, #1
    29bc:	03100502 	tsteq	r0, #8388608	; 0x800000
    29c0:	02422001 	subeq	r2, r2, #1
    29c4:	0afffffb 	beq	29b8 <__aeabi_fdiv+0xd0>
    29c8:	e180000c 	orr	r0, r0, ip
    29cc:	e3330000 	teq	r3, #0
    29d0:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    29d4:	01a01081 	lsleq	r1, r1, #1
    29d8:	03110502 	tsteq	r1, #8388608	; 0x800000
    29dc:	02433001 	subeq	r3, r3, #1
    29e0:	0afffffb 	beq	29d4 <__aeabi_fdiv+0xec>
    29e4:	e181100c 	orr	r1, r1, ip
    29e8:	eaffffc4 	b	2900 <__aeabi_fdiv+0x18>
    29ec:	e00c3ba1 	and	r3, ip, r1, lsr #23
    29f0:	e132000c 	teq	r2, ip
    29f4:	1a000005 	bne	2a10 <__aeabi_fdiv+0x128>
    29f8:	e1b02480 	lsls	r2, r0, #9
    29fc:	1affffb6 	bne	28dc <__aeabi_fmul+0x18c>
    2a00:	e133000c 	teq	r3, ip
    2a04:	1affffaf 	bne	28c8 <__aeabi_fmul+0x178>
    2a08:	e1a00001 	mov	r0, r1
    2a0c:	eaffffb2 	b	28dc <__aeabi_fmul+0x18c>
    2a10:	e133000c 	teq	r3, ip
    2a14:	1a000003 	bne	2a28 <__aeabi_fdiv+0x140>
    2a18:	e1b03481 	lsls	r3, r1, #9
    2a1c:	0affff97 	beq	2880 <__aeabi_fmul+0x130>
    2a20:	e1a00001 	mov	r0, r1
    2a24:	eaffffac 	b	28dc <__aeabi_fmul+0x18c>
    2a28:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    2a2c:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    2a30:	1affffde 	bne	29b0 <__aeabi_fdiv+0xc8>
    2a34:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    2a38:	1affffa2 	bne	28c8 <__aeabi_fmul+0x178>
    2a3c:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2a40:	1affff8e 	bne	2880 <__aeabi_fmul+0x130>
    2a44:	eaffffa4 	b	28dc <__aeabi_fmul+0x18c>

00002a48 <__gesf2>:
    2a48:	e3e0c000 	mvn	ip, #0
    2a4c:	ea000002 	b	2a5c <__cmpsf2+0x4>

00002a50 <__lesf2>:
    2a50:	e3a0c001 	mov	ip, #1
    2a54:	ea000000 	b	2a5c <__cmpsf2+0x4>

00002a58 <__cmpsf2>:
    2a58:	e3a0c001 	mov	ip, #1
    2a5c:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    2a60:	e1a02080 	lsl	r2, r0, #1
    2a64:	e1a03081 	lsl	r3, r1, #1
    2a68:	e1f0cc42 	mvns	ip, r2, asr #24
    2a6c:	11f0cc43 	mvnsne	ip, r3, asr #24
    2a70:	0a000007 	beq	2a94 <__cmpsf2+0x3c>
    2a74:	e28dd004 	add	sp, sp, #4
    2a78:	e192c0a3 	orrs	ip, r2, r3, lsr #1
    2a7c:	11300001 	teqne	r0, r1
    2a80:	50520003 	subspl	r0, r2, r3
    2a84:	81a00fc1 	asrhi	r0, r1, #31
    2a88:	31e00fc1 	mvncc	r0, r1, asr #31
    2a8c:	13800001 	orrne	r0, r0, #1
    2a90:	e12fff1e 	bx	lr
    2a94:	e1f0cc42 	mvns	ip, r2, asr #24
    2a98:	1a000001 	bne	2aa4 <__cmpsf2+0x4c>
    2a9c:	e1b0c480 	lsls	ip, r0, #9
    2aa0:	1a000003 	bne	2ab4 <__cmpsf2+0x5c>
    2aa4:	e1f0cc43 	mvns	ip, r3, asr #24
    2aa8:	1afffff1 	bne	2a74 <__cmpsf2+0x1c>
    2aac:	e1b0c481 	lsls	ip, r1, #9
    2ab0:	0affffef 	beq	2a74 <__cmpsf2+0x1c>
    2ab4:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    2ab8:	e12fff1e 	bx	lr

00002abc <__aeabi_cfrcmple>:
    2abc:	e1a0c000 	mov	ip, r0
    2ac0:	e1a00001 	mov	r0, r1
    2ac4:	e1a0100c 	mov	r1, ip
    2ac8:	eaffffff 	b	2acc <__aeabi_cfcmpeq>

00002acc <__aeabi_cfcmpeq>:
    2acc:	e92d400f 	push	{r0, r1, r2, r3, lr}
    2ad0:	ebffffe0 	bl	2a58 <__cmpsf2>
    2ad4:	e3500000 	cmp	r0, #0
    2ad8:	43700000 	cmnmi	r0, #0
    2adc:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    2ae0:	e12fff1e 	bx	lr

00002ae4 <__aeabi_fcmpeq>:
    2ae4:	e52de008 	str	lr, [sp, #-8]!
    2ae8:	ebfffff7 	bl	2acc <__aeabi_cfcmpeq>
    2aec:	03a00001 	moveq	r0, #1
    2af0:	13a00000 	movne	r0, #0
    2af4:	e49de008 	ldr	lr, [sp], #8
    2af8:	e12fff1e 	bx	lr

00002afc <__aeabi_fcmplt>:
    2afc:	e52de008 	str	lr, [sp, #-8]!
    2b00:	ebfffff1 	bl	2acc <__aeabi_cfcmpeq>
    2b04:	33a00001 	movcc	r0, #1
    2b08:	23a00000 	movcs	r0, #0
    2b0c:	e49de008 	ldr	lr, [sp], #8
    2b10:	e12fff1e 	bx	lr

00002b14 <__aeabi_fcmple>:
    2b14:	e52de008 	str	lr, [sp, #-8]!
    2b18:	ebffffeb 	bl	2acc <__aeabi_cfcmpeq>
    2b1c:	93a00001 	movls	r0, #1
    2b20:	83a00000 	movhi	r0, #0
    2b24:	e49de008 	ldr	lr, [sp], #8
    2b28:	e12fff1e 	bx	lr

00002b2c <__aeabi_fcmpge>:
    2b2c:	e52de008 	str	lr, [sp, #-8]!
    2b30:	ebffffe1 	bl	2abc <__aeabi_cfrcmple>
    2b34:	93a00001 	movls	r0, #1
    2b38:	83a00000 	movhi	r0, #0
    2b3c:	e49de008 	ldr	lr, [sp], #8
    2b40:	e12fff1e 	bx	lr

00002b44 <__aeabi_fcmpgt>:
    2b44:	e52de008 	str	lr, [sp, #-8]!
    2b48:	ebffffdb 	bl	2abc <__aeabi_cfrcmple>
    2b4c:	33a00001 	movcc	r0, #1
    2b50:	23a00000 	movcs	r0, #0
    2b54:	e49de008 	ldr	lr, [sp], #8
    2b58:	e12fff1e 	bx	lr

00002b5c <__aeabi_f2iz>:
    2b5c:	e1a02080 	lsl	r2, r0, #1
    2b60:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2b64:	3a000008 	bcc	2b8c <__aeabi_f2iz+0x30>
    2b68:	e3a0309e 	mov	r3, #158	; 0x9e
    2b6c:	e0532c22 	subs	r2, r3, r2, lsr #24
    2b70:	9a000007 	bls	2b94 <__aeabi_f2iz+0x38>
    2b74:	e1a03400 	lsl	r3, r0, #8
    2b78:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2b7c:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2b80:	e1a00233 	lsr	r0, r3, r2
    2b84:	12600000 	rsbne	r0, r0, #0
    2b88:	e12fff1e 	bx	lr
    2b8c:	e3a00000 	mov	r0, #0
    2b90:	e12fff1e 	bx	lr
    2b94:	e3720061 	cmn	r2, #97	; 0x61
    2b98:	1a000001 	bne	2ba4 <__aeabi_f2iz+0x48>
    2b9c:	e1b02480 	lsls	r2, r0, #9
    2ba0:	1a000002 	bne	2bb0 <__aeabi_f2iz+0x54>
    2ba4:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2ba8:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2bac:	e12fff1e 	bx	lr
    2bb0:	e3a00000 	mov	r0, #0
    2bb4:	e12fff1e 	bx	lr

00002bb8 <__aeabi_uldivmod>:
    2bb8:	e3530000 	cmp	r3, #0
    2bbc:	03520000 	cmpeq	r2, #0
    2bc0:	1a000004 	bne	2bd8 <__aeabi_uldivmod+0x20>
    2bc4:	e3510000 	cmp	r1, #0
    2bc8:	03500000 	cmpeq	r0, #0
    2bcc:	13e01000 	mvnne	r1, #0
    2bd0:	13e00000 	mvnne	r0, #0
    2bd4:	ea000098 	b	2e3c <____aeabi_ldiv0_from_arm>
    2bd8:	e24dd008 	sub	sp, sp, #8
    2bdc:	e92d6000 	push	{sp, lr}
    2be0:	eb00009a 	bl	2e50 <____udivmoddi4_from_arm>
    2be4:	e59de004 	ldr	lr, [sp, #4]
    2be8:	e28dd008 	add	sp, sp, #8
    2bec:	e8bd000c 	pop	{r2, r3}
    2bf0:	e12fff1e 	bx	lr

00002bf4 <__udivmoddi4>:
    2bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bf6:	464f      	mov	r7, r9
    2bf8:	4646      	mov	r6, r8
    2bfa:	46d6      	mov	lr, sl
    2bfc:	b5c0      	push	{r6, r7, lr}
    2bfe:	0004      	movs	r4, r0
    2c00:	b082      	sub	sp, #8
    2c02:	000d      	movs	r5, r1
    2c04:	4691      	mov	r9, r2
    2c06:	4698      	mov	r8, r3
    2c08:	428b      	cmp	r3, r1
    2c0a:	d82f      	bhi.n	2c6c <__udivmoddi4+0x78>
    2c0c:	d02c      	beq.n	2c68 <__udivmoddi4+0x74>
    2c0e:	4641      	mov	r1, r8
    2c10:	4648      	mov	r0, r9
    2c12:	f000 f8ed 	bl	2df0 <____clzdi2_from_thumb>
    2c16:	0029      	movs	r1, r5
    2c18:	0006      	movs	r6, r0
    2c1a:	0020      	movs	r0, r4
    2c1c:	f000 f8e8 	bl	2df0 <____clzdi2_from_thumb>
    2c20:	1a33      	subs	r3, r6, r0
    2c22:	469c      	mov	ip, r3
    2c24:	3b20      	subs	r3, #32
    2c26:	469a      	mov	sl, r3
    2c28:	d500      	bpl.n	2c2c <__udivmoddi4+0x38>
    2c2a:	e078      	b.n	2d1e <__udivmoddi4+0x12a>
    2c2c:	464b      	mov	r3, r9
    2c2e:	4652      	mov	r2, sl
    2c30:	4093      	lsls	r3, r2
    2c32:	001f      	movs	r7, r3
    2c34:	464b      	mov	r3, r9
    2c36:	4662      	mov	r2, ip
    2c38:	4093      	lsls	r3, r2
    2c3a:	001e      	movs	r6, r3
    2c3c:	42af      	cmp	r7, r5
    2c3e:	d82a      	bhi.n	2c96 <__udivmoddi4+0xa2>
    2c40:	d027      	beq.n	2c92 <__udivmoddi4+0x9e>
    2c42:	4653      	mov	r3, sl
    2c44:	1ba4      	subs	r4, r4, r6
    2c46:	41bd      	sbcs	r5, r7
    2c48:	2b00      	cmp	r3, #0
    2c4a:	da00      	bge.n	2c4e <__udivmoddi4+0x5a>
    2c4c:	e07d      	b.n	2d4a <__udivmoddi4+0x156>
    2c4e:	2200      	movs	r2, #0
    2c50:	2300      	movs	r3, #0
    2c52:	9200      	str	r2, [sp, #0]
    2c54:	9301      	str	r3, [sp, #4]
    2c56:	2301      	movs	r3, #1
    2c58:	4652      	mov	r2, sl
    2c5a:	4093      	lsls	r3, r2
    2c5c:	9301      	str	r3, [sp, #4]
    2c5e:	2301      	movs	r3, #1
    2c60:	4662      	mov	r2, ip
    2c62:	4093      	lsls	r3, r2
    2c64:	9300      	str	r3, [sp, #0]
    2c66:	e01a      	b.n	2c9e <__udivmoddi4+0xaa>
    2c68:	4282      	cmp	r2, r0
    2c6a:	d9d0      	bls.n	2c0e <__udivmoddi4+0x1a>
    2c6c:	2200      	movs	r2, #0
    2c6e:	2300      	movs	r3, #0
    2c70:	9200      	str	r2, [sp, #0]
    2c72:	9301      	str	r3, [sp, #4]
    2c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2c76:	2b00      	cmp	r3, #0
    2c78:	d001      	beq.n	2c7e <__udivmoddi4+0x8a>
    2c7a:	601c      	str	r4, [r3, #0]
    2c7c:	605d      	str	r5, [r3, #4]
    2c7e:	9800      	ldr	r0, [sp, #0]
    2c80:	9901      	ldr	r1, [sp, #4]
    2c82:	b002      	add	sp, #8
    2c84:	bc1c      	pop	{r2, r3, r4}
    2c86:	4690      	mov	r8, r2
    2c88:	4699      	mov	r9, r3
    2c8a:	46a2      	mov	sl, r4
    2c8c:	bcf0      	pop	{r4, r5, r6, r7}
    2c8e:	bc04      	pop	{r2}
    2c90:	4710      	bx	r2
    2c92:	42a3      	cmp	r3, r4
    2c94:	d9d5      	bls.n	2c42 <__udivmoddi4+0x4e>
    2c96:	2200      	movs	r2, #0
    2c98:	2300      	movs	r3, #0
    2c9a:	9200      	str	r2, [sp, #0]
    2c9c:	9301      	str	r3, [sp, #4]
    2c9e:	4663      	mov	r3, ip
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	d0e7      	beq.n	2c74 <__udivmoddi4+0x80>
    2ca4:	07fb      	lsls	r3, r7, #31
    2ca6:	4698      	mov	r8, r3
    2ca8:	4641      	mov	r1, r8
    2caa:	0872      	lsrs	r2, r6, #1
    2cac:	430a      	orrs	r2, r1
    2cae:	087b      	lsrs	r3, r7, #1
    2cb0:	4666      	mov	r6, ip
    2cb2:	e00e      	b.n	2cd2 <__udivmoddi4+0xde>
    2cb4:	42ab      	cmp	r3, r5
    2cb6:	d101      	bne.n	2cbc <__udivmoddi4+0xc8>
    2cb8:	42a2      	cmp	r2, r4
    2cba:	d80c      	bhi.n	2cd6 <__udivmoddi4+0xe2>
    2cbc:	1aa4      	subs	r4, r4, r2
    2cbe:	419d      	sbcs	r5, r3
    2cc0:	2001      	movs	r0, #1
    2cc2:	1924      	adds	r4, r4, r4
    2cc4:	416d      	adcs	r5, r5
    2cc6:	2100      	movs	r1, #0
    2cc8:	3e01      	subs	r6, #1
    2cca:	1824      	adds	r4, r4, r0
    2ccc:	414d      	adcs	r5, r1
    2cce:	2e00      	cmp	r6, #0
    2cd0:	d006      	beq.n	2ce0 <__udivmoddi4+0xec>
    2cd2:	42ab      	cmp	r3, r5
    2cd4:	d9ee      	bls.n	2cb4 <__udivmoddi4+0xc0>
    2cd6:	3e01      	subs	r6, #1
    2cd8:	1924      	adds	r4, r4, r4
    2cda:	416d      	adcs	r5, r5
    2cdc:	2e00      	cmp	r6, #0
    2cde:	d1f8      	bne.n	2cd2 <__udivmoddi4+0xde>
    2ce0:	4653      	mov	r3, sl
    2ce2:	9800      	ldr	r0, [sp, #0]
    2ce4:	9901      	ldr	r1, [sp, #4]
    2ce6:	1900      	adds	r0, r0, r4
    2ce8:	4169      	adcs	r1, r5
    2cea:	2b00      	cmp	r3, #0
    2cec:	db23      	blt.n	2d36 <__udivmoddi4+0x142>
    2cee:	002b      	movs	r3, r5
    2cf0:	4652      	mov	r2, sl
    2cf2:	40d3      	lsrs	r3, r2
    2cf4:	002a      	movs	r2, r5
    2cf6:	4664      	mov	r4, ip
    2cf8:	40e2      	lsrs	r2, r4
    2cfa:	001c      	movs	r4, r3
    2cfc:	4653      	mov	r3, sl
    2cfe:	0015      	movs	r5, r2
    2d00:	2b00      	cmp	r3, #0
    2d02:	db2d      	blt.n	2d60 <__udivmoddi4+0x16c>
    2d04:	0026      	movs	r6, r4
    2d06:	4657      	mov	r7, sl
    2d08:	40be      	lsls	r6, r7
    2d0a:	0033      	movs	r3, r6
    2d0c:	0026      	movs	r6, r4
    2d0e:	4667      	mov	r7, ip
    2d10:	40be      	lsls	r6, r7
    2d12:	0032      	movs	r2, r6
    2d14:	1a80      	subs	r0, r0, r2
    2d16:	4199      	sbcs	r1, r3
    2d18:	9000      	str	r0, [sp, #0]
    2d1a:	9101      	str	r1, [sp, #4]
    2d1c:	e7aa      	b.n	2c74 <__udivmoddi4+0x80>
    2d1e:	4662      	mov	r2, ip
    2d20:	2320      	movs	r3, #32
    2d22:	1a9b      	subs	r3, r3, r2
    2d24:	464a      	mov	r2, r9
    2d26:	40da      	lsrs	r2, r3
    2d28:	4661      	mov	r1, ip
    2d2a:	0013      	movs	r3, r2
    2d2c:	4642      	mov	r2, r8
    2d2e:	408a      	lsls	r2, r1
    2d30:	0017      	movs	r7, r2
    2d32:	431f      	orrs	r7, r3
    2d34:	e77e      	b.n	2c34 <__udivmoddi4+0x40>
    2d36:	4662      	mov	r2, ip
    2d38:	2320      	movs	r3, #32
    2d3a:	1a9b      	subs	r3, r3, r2
    2d3c:	002a      	movs	r2, r5
    2d3e:	4666      	mov	r6, ip
    2d40:	409a      	lsls	r2, r3
    2d42:	0023      	movs	r3, r4
    2d44:	40f3      	lsrs	r3, r6
    2d46:	4313      	orrs	r3, r2
    2d48:	e7d4      	b.n	2cf4 <__udivmoddi4+0x100>
    2d4a:	4662      	mov	r2, ip
    2d4c:	2320      	movs	r3, #32
    2d4e:	2100      	movs	r1, #0
    2d50:	1a9b      	subs	r3, r3, r2
    2d52:	2200      	movs	r2, #0
    2d54:	9100      	str	r1, [sp, #0]
    2d56:	9201      	str	r2, [sp, #4]
    2d58:	2201      	movs	r2, #1
    2d5a:	40da      	lsrs	r2, r3
    2d5c:	9201      	str	r2, [sp, #4]
    2d5e:	e77e      	b.n	2c5e <__udivmoddi4+0x6a>
    2d60:	2320      	movs	r3, #32
    2d62:	4662      	mov	r2, ip
    2d64:	0026      	movs	r6, r4
    2d66:	1a9b      	subs	r3, r3, r2
    2d68:	40de      	lsrs	r6, r3
    2d6a:	002f      	movs	r7, r5
    2d6c:	46b0      	mov	r8, r6
    2d6e:	4666      	mov	r6, ip
    2d70:	40b7      	lsls	r7, r6
    2d72:	4646      	mov	r6, r8
    2d74:	003b      	movs	r3, r7
    2d76:	4333      	orrs	r3, r6
    2d78:	e7c8      	b.n	2d0c <__udivmoddi4+0x118>
    2d7a:	46c0      	nop			; (mov r8, r8)

00002d7c <__clzdi2>:
    2d7c:	e92d4010 	push	{r4, lr}
    2d80:	e3510000 	cmp	r1, #0
    2d84:	1a000002 	bne	2d94 <__clzdi2+0x18>
    2d88:	eb000005 	bl	2da4 <__clzsi2>
    2d8c:	e2800020 	add	r0, r0, #32
    2d90:	ea000001 	b	2d9c <__clzdi2+0x20>
    2d94:	e1a00001 	mov	r0, r1
    2d98:	eb000001 	bl	2da4 <__clzsi2>
    2d9c:	e8bd4010 	pop	{r4, lr}
    2da0:	e12fff1e 	bx	lr

00002da4 <__clzsi2>:
    2da4:	e3a0101c 	mov	r1, #28
    2da8:	e3500801 	cmp	r0, #65536	; 0x10000
    2dac:	21a00820 	lsrcs	r0, r0, #16
    2db0:	22411010 	subcs	r1, r1, #16
    2db4:	e3500c01 	cmp	r0, #256	; 0x100
    2db8:	21a00420 	lsrcs	r0, r0, #8
    2dbc:	22411008 	subcs	r1, r1, #8
    2dc0:	e3500010 	cmp	r0, #16
    2dc4:	21a00220 	lsrcs	r0, r0, #4
    2dc8:	22411004 	subcs	r1, r1, #4
    2dcc:	e28f2008 	add	r2, pc, #8
    2dd0:	e7d20000 	ldrb	r0, [r2, r0]
    2dd4:	e0800001 	add	r0, r0, r1
    2dd8:	e12fff1e 	bx	lr
    2ddc:	02020304 	.word	0x02020304
    2de0:	01010101 	.word	0x01010101
	...

00002df0 <____clzdi2_from_thumb>:
    2df0:	4778      	bx	pc
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	eaffffe0 	b	2d7c <__clzdi2>

00002df8 <____aeabi_fmul_from_thumb>:
    2df8:	4778      	bx	pc
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	eafffe53 	b	2750 <__aeabi_fmul>

00002e00 <____aeabi_i2d_from_thumb>:
    2e00:	4778      	bx	pc
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	eafffc07 	b	1e28 <__aeabi_i2d>

00002e08 <____aeabi_dadd_from_thumb>:
    2e08:	4778      	bx	pc
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	eafffb38 	b	1af4 <__adddf3>

00002e10 <____aeabi_idiv0_from_arm>:
    2e10:	e59fc000 	ldr	ip, [pc]	; 2e18 <____aeabi_idiv0_from_arm+0x8>
    2e14:	e12fff1c 	bx	ip
    2e18:	00001ae5 	.word	0x00001ae5

00002e1c <____aeabi_dmul_from_thumb>:
    2e1c:	4778      	bx	pc
    2e1e:	46c0      	nop			; (mov r8, r8)
    2e20:	eafffc39 	b	1f0c <__aeabi_dmul>

00002e24 <____aeabi_f2iz_from_thumb>:
    2e24:	4778      	bx	pc
    2e26:	46c0      	nop			; (mov r8, r8)
    2e28:	eaffff4b 	b	2b5c <__aeabi_f2iz>

00002e2c <____aeabi_d2f_from_thumb>:
    2e2c:	4778      	bx	pc
    2e2e:	46c0      	nop			; (mov r8, r8)
    2e30:	eafffd73 	b	2404 <__aeabi_d2f>

00002e34 <____aeabi_fcmpgt_from_thumb>:
    2e34:	4778      	bx	pc
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	eaffff41 	b	2b44 <__aeabi_fcmpgt>

00002e3c <____aeabi_ldiv0_from_arm>:
    2e3c:	e59fc000 	ldr	ip, [pc]	; 2e44 <____aeabi_ldiv0_from_arm+0x8>
    2e40:	e12fff1c 	bx	ip
    2e44:	00001ae5 	.word	0x00001ae5

00002e48 <____aeabi_ddiv_from_thumb>:
    2e48:	4778      	bx	pc
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	eafffcd2 	b	219c <__aeabi_ddiv>

00002e50 <____udivmoddi4_from_arm>:
    2e50:	e59fc000 	ldr	ip, [pc]	; 2e58 <____udivmoddi4_from_arm+0x8>
    2e54:	e12fff1c 	bx	ip
    2e58:	00002bf5 	.word	0x00002bf5

00002e5c <____aeabi_uldivmod_from_thumb>:
    2e5c:	4778      	bx	pc
    2e5e:	46c0      	nop			; (mov r8, r8)
    2e60:	eaffff54 	b	2bb8 <__aeabi_uldivmod>

00002e64 <____aeabi_i2f_from_thumb>:
    2e64:	4778      	bx	pc
    2e66:	46c0      	nop			; (mov r8, r8)
    2e68:	eafffe01 	b	2674 <__aeabi_i2f>

00002e6c <____aeabi_uidivmod_from_thumb>:
    2e6c:	4778      	bx	pc
    2e6e:	46c0      	nop			; (mov r8, r8)
    2e70:	eafffb13 	b	1ac4 <__aeabi_uidivmod>

00002e74 <____aeabi_d2iz_from_thumb>:
    2e74:	4778      	bx	pc
    2e76:	46c0      	nop			; (mov r8, r8)
    2e78:	eafffd4a 	b	23a8 <__aeabi_d2iz>

00002e7c <____aeabi_fsub_from_thumb>:
    2e7c:	4778      	bx	pc
    2e7e:	46c0      	nop			; (mov r8, r8)
    2e80:	eafffd89 	b	24ac <__aeabi_fsub>

00002e84 <____aeabi_fcmplt_from_thumb>:
    2e84:	4778      	bx	pc
    2e86:	46c0      	nop			; (mov r8, r8)
    2e88:	eaffff1b 	b	2afc <__aeabi_fcmplt>
	...

00002e98 <help_msg>:
    2e98:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
    2ea8:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
    2eb8:	20202020 72617473 202d2074 72617473         start - star
    2ec8:	656d2074 72757361 6e656d65 200a7374     t measurements. 
    2ed8:	73202020 20706f74 6966202d 6873696e        stop - finish
    2ee8:	61656d20 65727573 746e656d 20200a73      measurements.  
    2ef8:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
    2f08:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
    2f18:	75746573 20200a70 616e2020 65766974     setup.    native
    2f28:	6e202d20 662d6e6f 616d726f 20646574      - non-formated 
    2f38:	7074756f 200a7475 61202020 69696373     output.    ascii
    2f48:	6f202d20 75707475 6e692074 63736120      - output in asc
    2f58:	70206969 65736572 7461746e 0a6e6f69     ii presentation.
    2f68:	504c0a00 6e692043 61697469 657a696c     ..LPC initialize
    2f78:	5a000a64 7473003f 00747261 6174530a     d..Z?.start..Sta
    2f88:	64657472 7473000a 7300706f 0a007465     rted..stop.set..
    2f98:	000a4b4f 00746567 706c6568 74616e00     OK..get.help.nat
    2fa8:	00657669 69637361 30310069 0a7a6830     ive.ascii.100hz.
    2fb8:	2e002d00 0a003000 6c6f560a 65676174     .-...0...Voltage
    2fc8:	2056202c 00203a20 7275430a 746e6572     , V  : ..Current
    2fd8:	6b6d202c 00203a41 00430056 33323130     , mkA: .V.C.0123
    2fe8:	37363534 62613938 66656463 6a696867     456789abcdefghij
    2ff8:	6e6d6c6b 7271706f 76757473 7a797877     klmnopqrstuvwxyz
    3008:	00000000 00000043 49534f50 00000058     ....C...POSIX...
    3018:	0000002e                                ....

0000301c <_ctype_>:
    301c:	20202000 20202020 28282020 20282828     .         ((((( 
    302c:	20202020 20202020 20202020 20202020                     
    303c:	10108820 10101010 10101010 10101010      ...............
    304c:	04040410 04040404 10040404 10101010     ................
    305c:	41411010 41414141 01010101 01010101     ..AAAAAA........
    306c:	01010101 01010101 01010101 10101010     ................
    307c:	42421010 42424242 02020202 02020202     ..BBBBBB........
    308c:	02020202 02020202 02020202 10101010     ................
    309c:	00000020 00000000 00000000 00000000      ...............
	...
