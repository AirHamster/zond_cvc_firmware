
obj/zond_cvc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003121  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.excep    00000008  00003124  00003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         0000059c  40000000  0000312c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000158  400005a0  000036d0  000205a0  2**3
                  ALLOC
  4 .stack        00000a10  400006f8  400006f8  0002059c  2**2
                  CONTENTS
  5 .usbram       00000000  7fd00000  7fd00000  00020fac  2**0
                  CONTENTS
  6 .etherram     00000000  7fe00000  7fe00000  00020fac  2**0
                  CONTENTS
  7 .batteryram   00000000  e0084000  e0084000  00020fac  2**0
                  CONTENTS
  8 .comment      000000b7  00000000  00000000  00020fac  2**0
                  CONTENTS, READONLY
  9 .ARM.attributes 0000002e  00000000  00000000  00021063  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000110  00000000  00000000  00021098  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000041bf  00000000  00000000  000211a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000cf8  00000000  00000000  00025367  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000c30  00000000  00000000  0002605f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000ae4  00000000  00000000  00026c90  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000981  00000000  00000000  00027774  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00001082  00000000  00000000  000280f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000098  00000000  00000000  00029178  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <reset_handler-0x300>:
       0:	e59ff018 	ldr	pc, [pc, #24]	; 20 <B_Thumb>
       4:	e59ff018 	ldr	pc, [pc, #24]	; 24 <VIC_SWPriorityMask>
       8:	e59ff018 	ldr	pc, [pc, #24]	; 28 <VIC_SWPriorityMask+0x4>
       c:	e59ff010 	ldr	pc, [pc, #16]	; 24 <VIC_SWPriorityMask>
      10:	e59ff00c 	ldr	pc, [pc, #12]	; 24 <VIC_SWPriorityMask>
      14:	00000000 	.word	0x00000000
      18:	e59ff00c 	ldr	pc, [pc, #12]	; 2c <VIC_SWPriorityMask+0x8>
      1c:	e59ff00c 	ldr	pc, [pc, #12]	; 30 <VIC_SWPriorityMask+0xc>
      20:	00000300 	.word	0x00000300
      24:	0000038c 	.word	0x0000038c
      28:	000003fc 	.word	0x000003fc
      2c:	000003ac 	.word	0x000003ac
      30:	000003f4 	.word	0x000003f4
	...

00000300 <reset_handler>:
     300:	e59f0088 	ldr	r0, [pc, #136]	; 390 <trap+0x4>
     304:	e321f0db 	msr	CPSR_c, #219	; 0xdb
     308:	e1a0d000 	mov	sp, r0
     30c:	e2400000 	sub	r0, r0, #0
     310:	e321f0d7 	msr	CPSR_c, #215	; 0xd7
     314:	e1a0d000 	mov	sp, r0
     318:	e2400000 	sub	r0, r0, #0
     31c:	e321f0d1 	msr	CPSR_c, #209	; 0xd1
     320:	e1a0d000 	mov	sp, r0
     324:	e2400010 	sub	r0, r0, #16
     328:	e321f0d2 	msr	CPSR_c, #210	; 0xd2
     32c:	e1a0d000 	mov	sp, r0
     330:	e2400c01 	sub	r0, r0, #256	; 0x100
     334:	e321f0d3 	msr	CPSR_c, #211	; 0xd3
     338:	e1a0d000 	mov	sp, r0
     33c:	e2400c01 	sub	r0, r0, #256	; 0x100
     340:	e321f0d0 	msr	CPSR_c, #208	; 0xd0
     344:	e1a0d000 	mov	sp, r0
     348:	e24dab02 	sub	sl, sp, #2048	; 0x800
     34c:	e59f1040 	ldr	r1, [pc, #64]	; 394 <trap+0x8>
     350:	e59f2040 	ldr	r2, [pc, #64]	; 398 <trap+0xc>
     354:	e59f3040 	ldr	r3, [pc, #64]	; 39c <trap+0x10>
     358:	e1520003 	cmp	r2, r3
     35c:	34910004 	ldrcc	r0, [r1], #4
     360:	34820004 	strcc	r0, [r2], #4
     364:	3afffffb 	bcc	358 <reset_handler+0x58>
     368:	e3a00000 	mov	r0, #0
     36c:	e59f102c 	ldr	r1, [pc, #44]	; 3a0 <trap+0x14>
     370:	e59f202c 	ldr	r2, [pc, #44]	; 3a4 <trap+0x18>
     374:	e1510002 	cmp	r1, r2
     378:	34810004 	strcc	r0, [r1], #4
     37c:	3afffffc 	bcc	374 <reset_handler+0x74>
     380:	e59f0020 	ldr	r0, [pc, #32]	; 3a8 <trap+0x1c>
     384:	e1a0e00f 	mov	lr, pc
     388:	e12fff10 	bx	r0

0000038c <trap>:
     38c:	eafffffe 	b	38c <trap>
     390:	40001108 	.word	0x40001108
     394:	0000312c 	.word	0x0000312c
     398:	40000000 	.word	0x40000000
     39c:	4000059c 	.word	0x4000059c
     3a0:	400005a0 	.word	0x400005a0
     3a4:	400006f8 	.word	0x400006f8
     3a8:	000007bd 	.word	0x000007bd

000003ac <irq_handler>:
     3ac:	e24ee004 	sub	lr, lr, #4
     3b0:	e92d4000 	stmfd	sp!, {lr}
     3b4:	e14fe000 	mrs	lr, SPSR
     3b8:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
     3bc:	e59f002c 	ldr	r0, [pc, #44]	; 3f0 <irq_handler+0x44>
     3c0:	e5900f00 	ldr	r0, [r0, #3840]	; 0xf00
     3c4:	e321f013 	msr	CPSR_c, #19
     3c8:	e92d4000 	stmfd	sp!, {lr}
     3cc:	e1a0e00f 	mov	lr, pc
     3d0:	e12fff10 	bx	r0
     3d4:	e8bd4000 	ldmfd	sp!, {lr}
     3d8:	e321f092 	msr	CPSR_c, #146	; 0x92
     3dc:	e8bd500f 	pop	{r0, r1, r2, r3, ip, lr}
     3e0:	e16ff00e 	msr	SPSR_fsxc, lr
     3e4:	e59fe004 	ldr	lr, [pc, #4]	; 3f0 <irq_handler+0x44>
     3e8:	e58eef00 	str	lr, [lr, #3840]	; 0xf00
     3ec:	e8fd8000 	ldm	sp!, {pc}^
     3f0:	fffff000 	.word	0xfffff000

000003f4 <fiq_handler>:
     3f4:	e24ee004 	sub	lr, lr, #4
     3f8:	e1b0f00e 	movs	pc, lr

000003fc <swi_handler>:
     3fc:	e14fc000 	mrs	ip, SPSR
     400:	e31c0020 	tst	ip, #32
     404:	115ec0b2 	ldrhne	ip, [lr, #-2]
     408:	051ec004 	ldreq	ip, [lr, #-4]
     40c:	e20cc0ff 	and	ip, ip, #255	; 0xff
     410:	e35c0007 	cmp	ip, #7
     414:	379ff10c 	ldrcc	pc, [pc, ip, lsl #2]
     418:	e1b0f00e 	movs	pc, lr
     41c:	00000438 	.word	0x00000438
     420:	00000448 	.word	0x00000448
     424:	00000458 	.word	0x00000458
     428:	0000047c 	.word	0x0000047c
     42c:	000004b4 	.word	0x000004b4
     430:	000004d4 	.word	0x000004d4
     434:	000004e4 	.word	0x000004e4

00000438 <irq_disable>:
     438:	e14f0000 	mrs	r0, SPSR
     43c:	e38000c0 	orr	r0, r0, #192	; 0xc0
     440:	e161f000 	msr	SPSR_c, r0
     444:	e1b0f00e 	movs	pc, lr

00000448 <irq_enable>:
     448:	e14f0000 	mrs	r0, SPSR
     44c:	e3c000c0 	bic	r0, r0, #192	; 0xc0
     450:	e161f000 	msr	SPSR_c, r0
     454:	e1b0f00e 	movs	pc, lr

00000458 <clear_vect>:
     458:	e59fc094 	ldr	ip, [pc, #148]	; 4f4 <store_fiq+0x10>
     45c:	e3e00000 	mvn	r0, #0
     460:	e58c0014 	str	r0, [ip, #20]
     464:	e1a00820 	lsr	r0, r0, #16
     468:	e58c0024 	str	r0, [ip, #36]	; 0x24
     46c:	e3a00001 	mov	r0, #1
     470:	e58c0020 	str	r0, [ip, #32]
     474:	e58c0f00 	str	r0, [ip, #3840]	; 0xf00
     478:	e1b0f00e 	movs	pc, lr

0000047c <reg_irq>:
     47c:	e3500020 	cmp	r0, #32
     480:	21b0f00e 	movscs	pc, lr
     484:	e59fc06c 	ldr	ip, [pc, #108]	; 4f8 <store_fiq+0x14>
     488:	e78c1100 	str	r1, [ip, r0, lsl #2]
     48c:	e59fc068 	ldr	ip, [pc, #104]	; 4fc <store_fiq+0x18>
     490:	e78c2100 	str	r2, [ip, r0, lsl #2]
     494:	e3a01001 	mov	r1, #1
     498:	e1a01011 	lsl	r1, r1, r0
     49c:	e59fc050 	ldr	ip, [pc, #80]	; 4f4 <store_fiq+0x10>
     4a0:	e59c200c 	ldr	r2, [ip, #12]
     4a4:	e1c22001 	bic	r2, r2, r1
     4a8:	e58c200c 	str	r2, [ip, #12]
     4ac:	e58c1010 	str	r1, [ip, #16]
     4b0:	e1b0f00e 	movs	pc, lr

000004b4 <sel_fiq>:
     4b4:	e3500020 	cmp	r0, #32
     4b8:	21b0f00e 	movscs	pc, lr
     4bc:	e59fc030 	ldr	ip, [pc, #48]	; 4f4 <store_fiq+0x10>
     4c0:	e3a01001 	mov	r1, #1
     4c4:	e1a01011 	lsl	r1, r1, r0
     4c8:	e58c100c 	str	r1, [ip, #12]
     4cc:	e58c1010 	str	r1, [ip, #16]
     4d0:	e1b0f00e 	movs	pc, lr

000004d4 <load_fiq>:
     4d4:	e321f051 	msr	CPSR_c, #81	; 0x51
     4d8:	e8b01f00 	ldm	r0!, {r8, r9, sl, fp, ip}
     4dc:	e321f013 	msr	CPSR_c, #19
     4e0:	e1b0f00e 	movs	pc, lr

000004e4 <store_fiq>:
     4e4:	e321f051 	msr	CPSR_c, #81	; 0x51
     4e8:	e8a01f00 	stmia	r0!, {r8, r9, sl, fp, ip}
     4ec:	e321f013 	msr	CPSR_c, #19
     4f0:	e1b0f00e 	movs	pc, lr
     4f4:	fffff000 	.word	0xfffff000
     4f8:	fffff100 	.word	0xfffff100
     4fc:	fffff200 	.word	0xfffff200

00000500 <Copy_un2al>:
     500:	e92d01f0 	push	{r4, r5, r6, r7, r8}
     504:	e211c003 	ands	ip, r1, #3
     508:	0a000012 	beq	558 <lb_align>
     50c:	e3c11003 	bic	r1, r1, #3
     510:	e1a0c18c 	lsl	ip, ip, #3
     514:	e26c8020 	rsb	r8, ip, #32
     518:	e8b10080 	ldm	r1!, {r7}
     51c:	e1a03007 	mov	r3, r7
     520:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
     524:	e1a03c33 	lsr	r3, r3, ip
     528:	e1833814 	orr	r3, r3, r4, lsl r8
     52c:	e1a04c34 	lsr	r4, r4, ip
     530:	e1844815 	orr	r4, r4, r5, lsl r8
     534:	e1a05c35 	lsr	r5, r5, ip
     538:	e1855816 	orr	r5, r5, r6, lsl r8
     53c:	e1a06c36 	lsr	r6, r6, ip
     540:	e1866817 	orr	r6, r6, r7, lsl r8
     544:	e2522010 	subs	r2, r2, #16
     548:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     54c:	1afffff2 	bne	51c <Copy_un2al+0x1c>
     550:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     554:	e12fff1e 	bx	lr

00000558 <lb_align>:
     558:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
     55c:	e2522010 	subs	r2, r2, #16
     560:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     564:	1afffffb 	bne	558 <lb_align>
     568:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     56c:	e12fff1e 	bx	lr

00000570 <Copy_al2un>:
     570:	e92d01f0 	push	{r4, r5, r6, r7, r8}
     574:	e210c003 	ands	ip, r0, #3
     578:	0a000021 	beq	604 <sb_align>
     57c:	e1a0c18c 	lsl	ip, ip, #3
     580:	e26c8020 	rsb	r8, ip, #32
     584:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
     588:	e4c04001 	strb	r4, [r0], #1
     58c:	e1a04424 	lsr	r4, r4, #8
     590:	e3100003 	tst	r0, #3
     594:	1afffffb 	bne	588 <Copy_al2un+0x18>
     598:	e1844c15 	orr	r4, r4, r5, lsl ip
     59c:	e1a05835 	lsr	r5, r5, r8
     5a0:	e1855c16 	orr	r5, r5, r6, lsl ip
     5a4:	e1a06836 	lsr	r6, r6, r8
     5a8:	e1866c17 	orr	r6, r6, r7, lsl ip
     5ac:	e2522010 	subs	r2, r2, #16
     5b0:	e8a00070 	stmia	r0!, {r4, r5, r6}
     5b4:	e1a03007 	mov	r3, r7
     5b8:	e8b100f0 	ldm	r1!, {r4, r5, r6, r7}
     5bc:	e1a03833 	lsr	r3, r3, r8
     5c0:	e1833c14 	orr	r3, r3, r4, lsl ip
     5c4:	e1a04834 	lsr	r4, r4, r8
     5c8:	e1844c15 	orr	r4, r4, r5, lsl ip
     5cc:	e1a05835 	lsr	r5, r5, r8
     5d0:	e1855c16 	orr	r5, r5, r6, lsl ip
     5d4:	e1a06836 	lsr	r6, r6, r8
     5d8:	e1866c17 	orr	r6, r6, r7, lsl ip
     5dc:	e2522010 	subs	r2, r2, #16
     5e0:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     5e4:	1afffff2 	bne	5b4 <Copy_al2un+0x44>
     5e8:	e1a07837 	lsr	r7, r7, r8
     5ec:	e25cc008 	subs	ip, ip, #8
     5f0:	e4c07001 	strb	r7, [r0], #1
     5f4:	e1a07427 	lsr	r7, r7, #8
     5f8:	1afffffb 	bne	5ec <Copy_al2un+0x7c>
     5fc:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     600:	e12fff1e 	bx	lr

00000604 <sb_align>:
     604:	e8b10078 	ldm	r1!, {r3, r4, r5, r6}
     608:	e2522010 	subs	r2, r2, #16
     60c:	e8a00078 	stmia	r0!, {r3, r4, r5, r6}
     610:	1afffffb 	bne	604 <sb_align>
     614:	e8bd01f0 	pop	{r4, r5, r6, r7, r8}
     618:	e12fff1e 	bx	lr

0000061c <gpio_init>:
uint8_t getflag =0;
uint64_t curr_big;
uint16_t volts, curr;
void gpio_init (void)
{	
	SCS |= 1;
     61c:	2301      	movs	r3, #1
     61e:	4a0e      	ldr	r2, [pc, #56]	; (658 <gpio_init+0x3c>)
     620:	6811      	ldr	r1, [r2, #0]
     622:	430b      	orrs	r3, r1
     624:	6013      	str	r3, [r2, #0]
	FIO2MASK = 0;
     626:	2200      	movs	r2, #0
     628:	4b0c      	ldr	r3, [pc, #48]	; (65c <gpio_init+0x40>)
     62a:	601a      	str	r2, [r3, #0]
	/* Leds to output */
	FIO2DIR |= (1 << LED1) | (1 << LED2);
     62c:	2303      	movs	r3, #3
     62e:	490c      	ldr	r1, [pc, #48]	; (660 <gpio_init+0x44>)
     630:	6808      	ldr	r0, [r1, #0]
     632:	4303      	orrs	r3, r0
     634:	600b      	str	r3, [r1, #0]

	/* FIO1MASK = 0xFFFFFFFF & (0 << DAC) | (0 << ADC); */
	FIO1MASK = 0;
     636:	4b0b      	ldr	r3, [pc, #44]	; (664 <gpio_init+0x48>)
     638:	601a      	str	r2, [r3, #0]
	FIO1DIR |=  (1 << DAC) | (1 << ADC) | (1 << ADC_DIN) | (1 << ADC_SCLK);	/*  Slave select pins  */
     63a:	4b0b      	ldr	r3, [pc, #44]	; (668 <gpio_init+0x4c>)
     63c:	4a0b      	ldr	r2, [pc, #44]	; (66c <gpio_init+0x50>)
     63e:	6819      	ldr	r1, [r3, #0]
     640:	430a      	orrs	r2, r1
     642:	601a      	str	r2, [r3, #0]
	FIO1DIR &= ~(1 << ADC_DOUT);
     644:	490a      	ldr	r1, [pc, #40]	; (670 <gpio_init+0x54>)
     646:	681a      	ldr	r2, [r3, #0]
     648:	400a      	ands	r2, r1
     64a:	601a      	str	r2, [r3, #0]
	/* FIO1DIR |=  (1 << DAC) | (1 << ADC);[> 	Slave select pins  <] */
	FIO1SET |= (1 << ADC) | (1 << DAC) | (1 << ADC_SCLK);	 /*  Set hight level  */
     64c:	4a09      	ldr	r2, [pc, #36]	; (674 <gpio_init+0x58>)
     64e:	4b0a      	ldr	r3, [pc, #40]	; (678 <gpio_init+0x5c>)
     650:	6811      	ldr	r1, [r2, #0]
     652:	430b      	orrs	r3, r1
     654:	6013      	str	r3, [r2, #0]
}
     656:	4770      	bx	lr
     658:	e01fc1a0 	.word	0xe01fc1a0
     65c:	3fffc050 	.word	0x3fffc050
     660:	3fffc040 	.word	0x3fffc040
     664:	3fffc030 	.word	0x3fffc030
     668:	3fffc020 	.word	0x3fffc020
     66c:	21140000 	.word	0x21140000
     670:	ff7fffff 	.word	0xff7fffff
     674:	3fffc038 	.word	0x3fffc038
     678:	20140000 	.word	0x20140000

0000067c <led_set>:
void led_set(uint8_t led)
{
	FIO2SET |= (1 << led);
     67c:	2301      	movs	r3, #1
     67e:	4083      	lsls	r3, r0
     680:	4a02      	ldr	r2, [pc, #8]	; (68c <led_set+0x10>)
     682:	6811      	ldr	r1, [r2, #0]
     684:	430b      	orrs	r3, r1
     686:	6013      	str	r3, [r2, #0]
}
     688:	4770      	bx	lr
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	3fffc058 	.word	0x3fffc058

00000690 <led_clear>:
void led_clear(uint8_t led)
{
	FIO2CLR |= (1 << led);
     690:	2301      	movs	r3, #1
     692:	4083      	lsls	r3, r0
     694:	4a02      	ldr	r2, [pc, #8]	; (6a0 <led_clear+0x10>)
     696:	6811      	ldr	r1, [r2, #0]
     698:	430b      	orrs	r3, r1
     69a:	6013      	str	r3, [r2, #0]
}
     69c:	4770      	bx	lr
     69e:	46c0      	nop			; (mov r8, r8)
     6a0:	3fffc05c 	.word	0x3fffc05c

000006a4 <gpio_set>:
void gpio_set(uint8_t port, uint8_t pin)
{
	switch (port)
     6a4:	2801      	cmp	r0, #1
     6a6:	d00b      	beq.n	6c0 <gpio_set+0x1c>
     6a8:	2800      	cmp	r0, #0
     6aa:	d002      	beq.n	6b2 <gpio_set+0xe>
     6ac:	2802      	cmp	r0, #2
     6ae:	d00d      	beq.n	6cc <gpio_set+0x28>
			FIO2SET |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6b0:	4770      	bx	lr
			FIO0SET |= (1 << pin);
     6b2:	4a07      	ldr	r2, [pc, #28]	; (6d0 <gpio_set+0x2c>)
			FIO2SET |= (1 << pin);
     6b4:	2301      	movs	r3, #1
     6b6:	408b      	lsls	r3, r1
     6b8:	6810      	ldr	r0, [r2, #0]
     6ba:	4303      	orrs	r3, r0
     6bc:	6013      	str	r3, [r2, #0]
}
     6be:	e7f7      	b.n	6b0 <gpio_set+0xc>
			FIO1SET |= (1 << pin);
     6c0:	4088      	lsls	r0, r1
     6c2:	4b04      	ldr	r3, [pc, #16]	; (6d4 <gpio_set+0x30>)
     6c4:	681a      	ldr	r2, [r3, #0]
     6c6:	4310      	orrs	r0, r2
     6c8:	6018      	str	r0, [r3, #0]
			break;
     6ca:	e7f1      	b.n	6b0 <gpio_set+0xc>
			FIO2SET |= (1 << pin);
     6cc:	4a02      	ldr	r2, [pc, #8]	; (6d8 <gpio_set+0x34>)
     6ce:	e7f1      	b.n	6b4 <gpio_set+0x10>
     6d0:	3fffc018 	.word	0x3fffc018
     6d4:	3fffc038 	.word	0x3fffc038
     6d8:	3fffc058 	.word	0x3fffc058

000006dc <gpio_clear>:
void gpio_clear(uint8_t port, uint8_t pin)
{
	switch (port)
     6dc:	2801      	cmp	r0, #1
     6de:	d00b      	beq.n	6f8 <gpio_clear+0x1c>
     6e0:	2800      	cmp	r0, #0
     6e2:	d002      	beq.n	6ea <gpio_clear+0xe>
     6e4:	2802      	cmp	r0, #2
     6e6:	d00d      	beq.n	704 <gpio_clear+0x28>
			FIO2CLR |= (1 << pin);
			break;
		default:
			break;	
	}
}
     6e8:	4770      	bx	lr
			FIO0CLR |= (1 << pin);
     6ea:	4a07      	ldr	r2, [pc, #28]	; (708 <gpio_clear+0x2c>)
			FIO2CLR |= (1 << pin);
     6ec:	2301      	movs	r3, #1
     6ee:	408b      	lsls	r3, r1
     6f0:	6810      	ldr	r0, [r2, #0]
     6f2:	4303      	orrs	r3, r0
     6f4:	6013      	str	r3, [r2, #0]
}
     6f6:	e7f7      	b.n	6e8 <gpio_clear+0xc>
			FIO1CLR |= (1 << pin);
     6f8:	4088      	lsls	r0, r1
     6fa:	4b04      	ldr	r3, [pc, #16]	; (70c <gpio_clear+0x30>)
     6fc:	681a      	ldr	r2, [r3, #0]
     6fe:	4310      	orrs	r0, r2
     700:	6018      	str	r0, [r3, #0]
			break;
     702:	e7f1      	b.n	6e8 <gpio_clear+0xc>
			FIO2CLR |= (1 << pin);
     704:	4a02      	ldr	r2, [pc, #8]	; (710 <gpio_clear+0x34>)
     706:	e7f1      	b.n	6ec <gpio_clear+0x10>
     708:	3fffc01c 	.word	0x3fffc01c
     70c:	3fffc03c 	.word	0x3fffc03c
     710:	3fffc05c 	.word	0x3fffc05c

00000714 <pll_init>:
void pll_init(void)
{
	// 1. Init OSC
	SCS = (1 << 5);
     714:	2220      	movs	r2, #32
     716:	4b1f      	ldr	r3, [pc, #124]	; (794 <pll_init+0x80>)
{
     718:	b570      	push	{r4, r5, r6, lr}
	SCS = (1 << 5);
     71a:	601a      	str	r2, [r3, #0]
	// 2.  Wait for OSC ready
	while (!(SCS & 0x40)); //	[>Osc stabilization procedure<] 
     71c:	1892      	adds	r2, r2, r2
     71e:	6819      	ldr	r1, [r3, #0]
     720:	4211      	tst	r1, r2
     722:	d0fc      	beq.n	71e <pll_init+0xa>
	// 3. Disconnect PLL
	PLLCON = 1; 
	PLLFEED = 0xAA;
     724:	24aa      	movs	r4, #170	; 0xaa
	PLLFEED = 0x55;
     726:	2055      	movs	r0, #85	; 0x55
	PLLCON = 1; 
     728:	2101      	movs	r1, #1
	// 4. Disable PLL
	PLLCON = 0;
     72a:	2500      	movs	r5, #0
	PLLFEED = 0xAA;
     72c:	4b1a      	ldr	r3, [pc, #104]	; (798 <pll_init+0x84>)
	PLLCON = 1; 
     72e:	4a1b      	ldr	r2, [pc, #108]	; (79c <pll_init+0x88>)
     730:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     732:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     734:	6018      	str	r0, [r3, #0]
	PLLCON = 0;
     736:	6015      	str	r5, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 5. Select source clock for PLL
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     738:	4d19      	ldr	r5, [pc, #100]	; (7a0 <pll_init+0x8c>)
	PLLFEED = 0xAA;
     73a:	601c      	str	r4, [r3, #0]
	// 6. Set PLL settings 288 MHz
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     73c:	4e19      	ldr	r6, [pc, #100]	; (7a4 <pll_init+0x90>)
	PLLFEED = 0x55;
     73e:	6018      	str	r0, [r3, #0]
	CLKSRCSEL = 1;			/* Select external as the PLL clock source */
     740:	6029      	str	r1, [r5, #0]
	PLLCFG = ((2 - 1) << 16) | (24 - 1);	/* Re-configure PLL */
     742:	4d19      	ldr	r5, [pc, #100]	; (7a8 <pll_init+0x94>)
     744:	602e      	str	r6, [r5, #0]
	PLLFEED = 0xAA;
     746:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     748:	6018      	str	r0, [r3, #0]
	// 7. Enable PLL
	PLLCON |= 1 << 0; 
     74a:	6815      	ldr	r5, [r2, #0]
     74c:	4329      	orrs	r1, r5
     74e:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
	PLLFEED = 0x55;
	// 8. Wait for the PLL to achieve lock
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     750:	2180      	movs	r1, #128	; 0x80
	PLLFEED = 0xAA;
     752:	601c      	str	r4, [r3, #0]
	PLLFEED = 0x55;
     754:	6018      	str	r0, [r3, #0]
	while ((PLLSTAT & (1 << 26)) == 0);	/* Wait for PLL locked */
     756:	4c15      	ldr	r4, [pc, #84]	; (7ac <pll_init+0x98>)
     758:	04c9      	lsls	r1, r1, #19
     75a:	6820      	ldr	r0, [r4, #0]
     75c:	4208      	tst	r0, r1
     75e:	d0fc      	beq.n	75a <pll_init+0x46>
	// 9. Set clk divider settings
	CCLKCFG   = 4-1;            // 1/4 Fpll - 72 MHz; 1/5 - 60
     760:	2003      	movs	r0, #3
     762:	4913      	ldr	r1, [pc, #76]	; (7b0 <pll_init+0x9c>)
     764:	6008      	str	r0, [r1, #0]
	//USBCLKCFG = 6-1;            // 1/6 Fpll - 48 MHz
	PCLKSEL0 = PCLKSEL1 = 0;    // other peripherals
     766:	2000      	movs	r0, #0
     768:	4912      	ldr	r1, [pc, #72]	; (7b4 <pll_init+0xa0>)
     76a:	4c13      	ldr	r4, [pc, #76]	; (7b8 <pll_init+0xa4>)
     76c:	6008      	str	r0, [r1, #0]
     76e:	6020      	str	r0, [r4, #0]


	PCLKSEL1 = 1 << 2;	//GPIO: 0 - 1/4; 1 - 1; 2 - 1/2; 3 - 1/8
     770:	3004      	adds	r0, #4
     772:	6008      	str	r0, [r1, #0]

	// 10. Connect the PLL
	PLLCON |= 1 << 1;
     774:	2102      	movs	r1, #2
     776:	6810      	ldr	r0, [r2, #0]
     778:	4301      	orrs	r1, r0
     77a:	6011      	str	r1, [r2, #0]
	PLLFEED = 0xAA;
     77c:	22aa      	movs	r2, #170	; 0xaa
     77e:	601a      	str	r2, [r3, #0]
	PLLFEED = 0x55;
     780:	3a55      	subs	r2, #85	; 0x55
     782:	601a      	str	r2, [r3, #0]

	ClearVector();			/* Initialie VIC */
     784:	f000 f830 	bl	7e8 <ClearVector>
	/* GPIOInit(); */
	IrqEnable();			/* Enable Irq */
     788:	f000 f82c 	bl	7e4 <IrqEnable>

}
     78c:	bc70      	pop	{r4, r5, r6}
     78e:	bc01      	pop	{r0}
     790:	4700      	bx	r0
     792:	46c0      	nop			; (mov r8, r8)
     794:	e01fc1a0 	.word	0xe01fc1a0
     798:	e01fc08c 	.word	0xe01fc08c
     79c:	e01fc080 	.word	0xe01fc080
     7a0:	e01fc10c 	.word	0xe01fc10c
     7a4:	00010017 	.word	0x00010017
     7a8:	e01fc084 	.word	0xe01fc084
     7ac:	e01fc088 	.word	0xe01fc088
     7b0:	e01fc104 	.word	0xe01fc104
     7b4:	e01fc1ac 	.word	0xe01fc1ac
     7b8:	e01fc1a8 	.word	0xe01fc1a8

000007bc <main>:


int main (void)
{
     7bc:	b510      	push	{r4, lr}
	uint16_t i, j, rise; 
	pll_init();
     7be:	f7ff ffa9 	bl	714 <pll_init>
	uart0_init();	
     7c2:	f000 f89d 	bl	900 <uart0_init>
	/* SPI0_init(); */
	timer0_init();
     7c6:	f000 fcc3 	bl	1150 <timer0_init>
	gpio_init();
     7ca:	f7ff ff27 	bl	61c <gpio_init>
	adc_init();
     7ce:	f000 fba2 	bl	f16 <adc_init>
	UART0_send("\nLPC initialized\n", 17);
     7d2:	2111      	movs	r1, #17
     7d4:	4801      	ldr	r0, [pc, #4]	; (7dc <main+0x20>)
     7d6:	f000 f90b 	bl	9f0 <UART0_send>
     7da:	e7fe      	b.n	7da <main+0x1e>
     7dc:	00002f71 	.word	0x00002f71

000007e0 <IrqDisable>:
     7e0:	df00      	svc	0
     7e2:	4770      	bx	lr

000007e4 <IrqEnable>:
     7e4:	df01      	svc	1
     7e6:	4770      	bx	lr

000007e8 <ClearVector>:
     7e8:	df02      	svc	2
     7ea:	4770      	bx	lr

000007ec <RegisterIrq>:
     7ec:	df03      	svc	3
     7ee:	4770      	bx	lr

000007f0 <SelectFiq>:
     7f0:	df04      	svc	4
     7f2:	4770      	bx	lr

000007f4 <LoadFiqRegs>:
     7f4:	df05      	svc	5
     7f6:	4770      	bx	lr

000007f8 <StoreFiqRegs>:
     7f8:	df06      	svc	6
     7fa:	4770      	bx	lr

000007fc <Isr_UART0>:
{

	uint8_t iir, d;
	int i;

	iir = U0LSR;		/* 	[> [> Get interrupt ID <] <] */
     7fc:	4b14      	ldr	r3, [pc, #80]	; (850 <USR_Stack_Size+0x50>)
     7fe:	681a      	ldr	r2, [r3, #0]
     800:	4b14      	ldr	r3, [pc, #80]	; (854 <USR_Stack_Size+0x54>)
	if(iir & 1 != 0)
	{	
		d = U0RBR;
     802:	681b      	ldr	r3, [r3, #0]
     804:	061b      	lsls	r3, r3, #24
{
     806:	b570      	push	{r4, r5, r6, lr}
		d = U0RBR;
     808:	0e1b      	lsrs	r3, r3, #24
	if(iir & 1 != 0)
     80a:	07d2      	lsls	r2, r2, #31
     80c:	d515      	bpl.n	83a <USR_Stack_Size+0x3a>
     80e:	4c12      	ldr	r4, [pc, #72]	; (858 <USR_Stack_Size+0x58>)
     810:	4812      	ldr	r0, [pc, #72]	; (85c <USR_Stack_Size+0x5c>)
		if (d == '\n')
     812:	2b0a      	cmp	r3, #10
     814:	d10d      	bne.n	832 <USR_Stack_Size+0x32>
		{
			resiever[rec_len++] = 0;	/* Make null-terminated string */
     816:	2500      	movs	r5, #0
     818:	7823      	ldrb	r3, [r4, #0]
     81a:	1c5a      	adds	r2, r3, #1
     81c:	7022      	strb	r2, [r4, #0]
     81e:	54c5      	strb	r5, [r0, r3]
			process_command(resiever);
     820:	f000 f9a2 	bl	b68 <process_command>
			rec_len = 0;
     824:	7025      	strb	r5, [r4, #0]
	}else if (d == 'O')
	{
		FIO2CLR = (1 << LED1) | (1 << LED2);

	}
	VICVectAddr = 0;
     826:	2200      	movs	r2, #0
     828:	4b0d      	ldr	r3, [pc, #52]	; (860 <USR_Stack_Size+0x60>)
     82a:	601a      	str	r2, [r3, #0]

}
     82c:	bc70      	pop	{r4, r5, r6}
     82e:	bc01      	pop	{r0}
     830:	4700      	bx	r0
			resiever[rec_len++] = d;
     832:	7822      	ldrb	r2, [r4, #0]
     834:	1c51      	adds	r1, r2, #1
     836:	7021      	strb	r1, [r4, #0]
     838:	5483      	strb	r3, [r0, r2]
	if (d == 'L')
     83a:	2b4c      	cmp	r3, #76	; 0x4c
     83c:	d103      	bne.n	846 <USR_Stack_Size+0x46>
		FIO2SET = (1 << LED1) | (1 << LED2);
     83e:	2203      	movs	r2, #3
     840:	4b08      	ldr	r3, [pc, #32]	; (864 <USR_Stack_Size+0x64>)
		FIO2CLR = (1 << LED1) | (1 << LED2);
     842:	601a      	str	r2, [r3, #0]
     844:	e7ef      	b.n	826 <USR_Stack_Size+0x26>
	}else if (d == 'O')
     846:	2b4f      	cmp	r3, #79	; 0x4f
     848:	d1ed      	bne.n	826 <USR_Stack_Size+0x26>
		FIO2CLR = (1 << LED1) | (1 << LED2);
     84a:	2203      	movs	r2, #3
     84c:	4b06      	ldr	r3, [pc, #24]	; (868 <USR_Stack_Size+0x68>)
     84e:	e7f8      	b.n	842 <USR_Stack_Size+0x42>
     850:	e000c014 	.word	0xe000c014
     854:	e000c000 	.word	0xe000c000
     858:	400005a2 	.word	0x400005a2
     85c:	400006c4 	.word	0x400006c4
     860:	ffffff00 	.word	0xffffff00
     864:	3fffc058 	.word	0x3fffc058
     868:	3fffc05c 	.word	0x3fffc05c

0000086c <uart0_test>:


int uart0_test (void)
{
	return RxBuff0.ct;
     86c:	4b01      	ldr	r3, [pc, #4]	; (874 <uart0_test+0x8>)
     86e:	88d8      	ldrh	r0, [r3, #6]
}
     870:	4770      	bx	lr
     872:	46c0      	nop			; (mov r8, r8)
     874:	400005a2 	.word	0x400005a2

00000878 <uart0_getc>:
{
	uint8_t d;
	int i;

	/* Wait while Rx buffer is empty */
	while (!RxBuff0.ct) ;
     878:	4b0b      	ldr	r3, [pc, #44]	; (8a8 <uart0_getc+0x30>)
     87a:	3302      	adds	r3, #2
     87c:	889a      	ldrh	r2, [r3, #4]
     87e:	2a00      	cmp	r2, #0
     880:	d0fc      	beq.n	87c <uart0_getc+0x4>

	i = RxBuff0.ri;	/* Get a byte from Rx buffer */
     882:	881a      	ldrh	r2, [r3, #0]
	d = RxBuff0.buff[i++];
     884:	1899      	adds	r1, r3, r2
     886:	7988      	ldrb	r0, [r1, #6]
	RxBuff0.ri = i % UART0_RXB;
     888:	217f      	movs	r1, #127	; 0x7f
	d = RxBuff0.buff[i++];
     88a:	3201      	adds	r2, #1
	RxBuff0.ri = i % UART0_RXB;
     88c:	400a      	ands	r2, r1
     88e:	801a      	strh	r2, [r3, #0]
	U0IER = 0;		/* Disable interrupts */
     890:	2200      	movs	r2, #0
     892:	4906      	ldr	r1, [pc, #24]	; (8ac <uart0_getc+0x34>)
     894:	600a      	str	r2, [r1, #0]
	RxBuff0.ct--;
     896:	889a      	ldrh	r2, [r3, #4]
     898:	3a01      	subs	r2, #1
     89a:	0412      	lsls	r2, r2, #16
     89c:	0c12      	lsrs	r2, r2, #16
     89e:	809a      	strh	r2, [r3, #4]
	U0IER = 0x07;	/* Reenable interrupt */
     8a0:	2307      	movs	r3, #7
     8a2:	600b      	str	r3, [r1, #0]

	return d;
}
     8a4:	4770      	bx	lr
     8a6:	46c0      	nop			; (mov r8, r8)
     8a8:	400005a2 	.word	0x400005a2
     8ac:	e000c004 	.word	0xe000c004

000008b0 <uart0_putc>:


void uart0_putc (uint8_t d)
{
     8b0:	b510      	push	{r4, lr}
	int i;

	/* Wait for Tx buffer ready */
	while (TxBuff0.ct >= UART0_TXB) ;
     8b2:	4b10      	ldr	r3, [pc, #64]	; (8f4 <uart0_putc+0x44>)
     8b4:	899a      	ldrh	r2, [r3, #12]
     8b6:	2a7f      	cmp	r2, #127	; 0x7f
     8b8:	d8fc      	bhi.n	8b4 <uart0_putc+0x4>

	U0IER = 0x05;		/* Disable Tx Interrupt */
     8ba:	2205      	movs	r2, #5
     8bc:	490e      	ldr	r1, [pc, #56]	; (8f8 <uart0_putc+0x48>)
     8be:	600a      	str	r2, [r1, #0]
	if (TxBuff0.act) {
     8c0:	89da      	ldrh	r2, [r3, #14]
     8c2:	2a00      	cmp	r2, #0
     8c4:	d010      	beq.n	8e8 <uart0_putc+0x38>
		i = TxBuff0.wi;	/* Put a byte into Tx byffer */
     8c6:	895a      	ldrh	r2, [r3, #10]
		TxBuff0.buff[i++] = d;
     8c8:	189c      	adds	r4, r3, r2
     8ca:	7420      	strb	r0, [r4, #16]
		TxBuff0.wi = i % UART0_TXB;
     8cc:	207f      	movs	r0, #127	; 0x7f
		TxBuff0.buff[i++] = d;
     8ce:	3201      	adds	r2, #1
		TxBuff0.wi = i % UART0_TXB;
     8d0:	4002      	ands	r2, r0
     8d2:	815a      	strh	r2, [r3, #10]
		TxBuff0.ct++;
     8d4:	899a      	ldrh	r2, [r3, #12]
     8d6:	3201      	adds	r2, #1
     8d8:	0412      	lsls	r2, r2, #16
     8da:	0c12      	lsrs	r2, r2, #16
     8dc:	819a      	strh	r2, [r3, #12]
	} else {
		U0THR = d;		/* Trigger Tx sequense */
		TxBuff0.act = 1;
	}
	U0IER = 0x07;		/* Reenable Tx Interrupt */
     8de:	2307      	movs	r3, #7
     8e0:	600b      	str	r3, [r1, #0]
}
     8e2:	bc10      	pop	{r4}
     8e4:	bc01      	pop	{r0}
     8e6:	4700      	bx	r0
		U0THR = d;		/* Trigger Tx sequense */
     8e8:	4a04      	ldr	r2, [pc, #16]	; (8fc <uart0_putc+0x4c>)
     8ea:	6010      	str	r0, [r2, #0]
		TxBuff0.act = 1;
     8ec:	2201      	movs	r2, #1
     8ee:	81da      	strh	r2, [r3, #14]
     8f0:	e7f5      	b.n	8de <uart0_putc+0x2e>
     8f2:	46c0      	nop			; (mov r8, r8)
     8f4:	40000622 	.word	0x40000622
     8f8:	e000c004 	.word	0xe000c004
     8fc:	e000c000 	.word	0xe000c000

00000900 <uart0_init>:


void uart0_init (void)
{
	//UART0
	PCONP |= 1 << PCUART0; // Питание на UART0
     900:	2308      	movs	r3, #8
     902:	4a16      	ldr	r2, [pc, #88]	; (95c <uart0_init+0x5c>)
     904:	6811      	ldr	r1, [r2, #0]
     906:	430b      	orrs	r3, r1
{
     908:	b510      	push	{r4, lr}
	PCONP |= 1 << PCUART0; // Питание на UART0
     90a:	6013      	str	r3, [r2, #0]
	//PCLKSEL0 |= 1 << PINSEL_UART0_0;      // PCLK = CCLK

	//8 bit lenght word,1 stop bit,disable parity generation,disable breake transmission, enable access to Divisor Latches
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     90c:	2283      	movs	r2, #131	; 0x83
     90e:	4b14      	ldr	r3, [pc, #80]	; (960 <uart0_init+0x60>)
     910:	6819      	ldr	r1, [r3, #0]
     912:	430a      	orrs	r2, r1
	//f = 18 mGz,Baud = 115200.
	U0FDR = 0xC1;
     914:	21c1      	movs	r1, #193	; 0xc1
	U0LCR |= (1 << word_len_0)|(1 << word_len_1)|(1 << DLAB);
     916:	601a      	str	r2, [r3, #0]
	U0FDR = 0xC1;
     918:	4a12      	ldr	r2, [pc, #72]	; (964 <uart0_init+0x64>)
     91a:	6011      	str	r1, [r2, #0]
	U0DLL = 0x09;
     91c:	4a12      	ldr	r2, [pc, #72]	; (968 <uart0_init+0x68>)
     91e:	39b8      	subs	r1, #184	; 0xb8
     920:	6011      	str	r1, [r2, #0]
	U0DLM = 0x00;
     922:	2100      	movs	r1, #0
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     924:	2080      	movs	r0, #128	; 0x80
	U0DLM = 0x00;
     926:	4a11      	ldr	r2, [pc, #68]	; (96c <uart0_init+0x6c>)
     928:	6011      	str	r1, [r2, #0]
	U0LCR &= ~(1 << DLAB);//DLAB = 0
     92a:	6819      	ldr	r1, [r3, #0]
     92c:	4381      	bics	r1, r0
     92e:	6019      	str	r1, [r3, #0]

	//UART FIFO Нужно ли оно?
	U0FCR |= ((1 << FIFO_Enable )|(1 << RX_FIFO_Reset)|(1 << TX_FIFO_Reset));//Enable and reset TX and RX FIFO
     930:	2307      	movs	r3, #7
     932:	490f      	ldr	r1, [pc, #60]	; (970 <uart0_init+0x70>)
     934:	6808      	ldr	r0, [r1, #0]
     936:	4303      	orrs	r3, r0
     938:	600b      	str	r3, [r1, #0]

	//Настройка ножек мк: P0(2) - TxD,P0(3) - RxD.
	//P0.02,P0.03 - pull-up mode
	PINSEL0 |= (1 << 4)|(1 << 6);
     93a:	2350      	movs	r3, #80	; 0x50
     93c:	490d      	ldr	r1, [pc, #52]	; (974 <uart0_init+0x74>)
     93e:	6808      	ldr	r0, [r1, #0]
     940:	4303      	orrs	r3, r0
     942:	600b      	str	r3, [r1, #0]

	//Interrupts
	/* InstallIRQ( UART0_INT, (void *)UART0_INT_Handler, 0x0E); */
	/* U0IER |= ((1 << RBR_Enable )|(1 << THRE_Enable)|(1 << RLS_Enable));[> Enable UART0 interrupt <] */
	U0IER |= (1 << RBR_Enable );/* Enable UART0 interrupt */
     944:	2301      	movs	r3, #1
     946:	6811      	ldr	r1, [r2, #0]
     948:	430b      	orrs	r3, r1
     94a:	6013      	str	r3, [r2, #0]
	/* [> Enable Tx/Rx/Error interrupts <] */
	RegisterIrq(UART0_IRQn, (void *)Isr_UART0, PRI_LOWEST);
     94c:	490a      	ldr	r1, [pc, #40]	; (978 <uart0_init+0x78>)
     94e:	220f      	movs	r2, #15
     950:	2006      	movs	r0, #6
     952:	f7ff ff4b 	bl	7ec <RegisterIrq>

}
     956:	bc10      	pop	{r4}
     958:	bc01      	pop	{r0}
     95a:	4700      	bx	r0
     95c:	e01fc0c4 	.word	0xe01fc0c4
     960:	e000c00c 	.word	0xe000c00c
     964:	e000c028 	.word	0xe000c028
     968:	e000c000 	.word	0xe000c000
     96c:	e000c004 	.word	0xe000c004
     970:	e000c008 	.word	0xe000c008
     974:	e002c000 	.word	0xe002c000
     978:	000007fd 	.word	0x000007fd

0000097c <hex_to_int>:


uint16_t hex_to_int(uint8_t c){
	uint16_t first = c / 16 - 3;
	uint16_t second = c % 16;
	uint16_t result = first*10 + second;
     97c:	230a      	movs	r3, #10
	uint16_t first = c / 16 - 3;
     97e:	0902      	lsrs	r2, r0, #4
     980:	3a03      	subs	r2, #3
	uint16_t result = first*10 + second;
     982:	4353      	muls	r3, r2
	uint16_t second = c % 16;
     984:	220f      	movs	r2, #15
     986:	4010      	ands	r0, r2
	uint16_t result = first*10 + second;
     988:	18c0      	adds	r0, r0, r3
     98a:	0400      	lsls	r0, r0, #16
     98c:	0c00      	lsrs	r0, r0, #16
	if(result > 9) result--;
     98e:	2809      	cmp	r0, #9
     990:	d902      	bls.n	998 <hex_to_int+0x1c>
     992:	3801      	subs	r0, #1
     994:	0400      	lsls	r0, r0, #16
     996:	0c00      	lsrs	r0, r0, #16
	return result;
}
     998:	4770      	bx	lr

0000099a <hex_to_ascii>:

uint16_t hex_to_ascii(uint16_t c){
     99a:	b570      	push	{r4, r5, r6, lr}
     99c:	0004      	movs	r4, r0
	uint16_t high = hex_to_int(c >> 8) * 16;
     99e:	0a00      	lsrs	r0, r0, #8
     9a0:	f7ff ffec 	bl	97c <hex_to_int>
     9a4:	0005      	movs	r5, r0
	uint16_t low = hex_to_int(c & 0xFF);
     9a6:	0620      	lsls	r0, r4, #24
     9a8:	0e00      	lsrs	r0, r0, #24
     9aa:	f7ff ffe7 	bl	97c <hex_to_int>
	uint16_t high = hex_to_int(c >> 8) * 16;
     9ae:	012d      	lsls	r5, r5, #4
	return high+low;
     9b0:	1940      	adds	r0, r0, r5
     9b2:	0400      	lsls	r0, r0, #16
     9b4:	0c00      	lsrs	r0, r0, #16
}
     9b6:	bc70      	pop	{r4, r5, r6}
     9b8:	bc02      	pop	{r1}
     9ba:	4708      	bx	r1

000009bc <UART0_send_byte>:
#endif
}
void UART0_send_byte(uint8_t byte)
{

	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9bc:	2101      	movs	r1, #1
     9be:	4b09      	ldr	r3, [pc, #36]	; (9e4 <UART0_send_byte+0x28>)
     9c0:	681a      	ldr	r2, [r3, #0]
     9c2:	438a      	bics	r2, r1
{
     9c4:	b510      	push	{r4, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9c6:	601a      	str	r2, [r3, #0]
	while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     9c8:	2220      	movs	r2, #32
     9ca:	4c07      	ldr	r4, [pc, #28]	; (9e8 <UART0_send_byte+0x2c>)
     9cc:	6821      	ldr	r1, [r4, #0]
     9ce:	4211      	tst	r1, r2
     9d0:	d0fc      	beq.n	9cc <UART0_send_byte+0x10>
	U0THR = byte;
     9d2:	4a06      	ldr	r2, [pc, #24]	; (9ec <UART0_send_byte+0x30>)
     9d4:	6010      	str	r0, [r2, #0]
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     9d6:	2201      	movs	r2, #1
     9d8:	6819      	ldr	r1, [r3, #0]
     9da:	430a      	orrs	r2, r1
     9dc:	601a      	str	r2, [r3, #0]
}
     9de:	bc10      	pop	{r4}
     9e0:	bc01      	pop	{r0}
     9e2:	4700      	bx	r0
     9e4:	e000c004 	.word	0xe000c004
     9e8:	e000c014 	.word	0xe000c014
     9ec:	e000c000 	.word	0xe000c000

000009f0 <UART0_send>:
void UART0_send(unsigned char *BufferPtr, unsigned short Length )
{
     9f0:	b570      	push	{r4, r5, r6, lr}
	U0IER &= ~(1 << RBR_Enable );     // Disable RBR
     9f2:	2401      	movs	r4, #1
     9f4:	4b0d      	ldr	r3, [pc, #52]	; (a2c <Stack_Size+0x1c>)
     9f6:	681a      	ldr	r2, [r3, #0]
     9f8:	43a2      	bics	r2, r4
     9fa:	601a      	str	r2, [r3, #0]

	while ( Length != 0 )
	{
		// THRE status, contain valid data 
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     9fc:	4d0c      	ldr	r5, [pc, #48]	; (a30 <Stack_Size+0x20>)
     9fe:	001a      	movs	r2, r3
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a00:	4b0c      	ldr	r3, [pc, #48]	; (a34 <Stack_Size+0x24>)
     a02:	341f      	adds	r4, #31
	while ( Length != 0 )
     a04:	2900      	cmp	r1, #0
     a06:	d106      	bne.n	a16 <Stack_Size+0x6>
		BufferPtr++;
		Length--;
	}
	U0IER |= (1 << RBR_Enable );      // Re-enable RBR 
     a08:	2301      	movs	r3, #1
     a0a:	6811      	ldr	r1, [r2, #0]
     a0c:	430b      	orrs	r3, r1
     a0e:	6013      	str	r3, [r2, #0]

	return;
}
     a10:	bc70      	pop	{r4, r5, r6}
     a12:	bc01      	pop	{r0}
     a14:	4700      	bx	r0
		while ((U0LSR & (1 << 5)) == 0);//ждём пока освободиться регистр THR
     a16:	681e      	ldr	r6, [r3, #0]
     a18:	4226      	tst	r6, r4
     a1a:	d0fc      	beq.n	a16 <Stack_Size+0x6>
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a1c:	7806      	ldrb	r6, [r0, #0]
		Length--;
     a1e:	3901      	subs	r1, #1
     a20:	0409      	lsls	r1, r1, #16
		U0THR = *BufferPtr;// в сдвиговый регистр положить данные
     a22:	602e      	str	r6, [r5, #0]
		BufferPtr++;
     a24:	3001      	adds	r0, #1
		Length--;
     a26:	0c09      	lsrs	r1, r1, #16
     a28:	e7ec      	b.n	a04 <UART0_send+0x14>
     a2a:	46c0      	nop			; (mov r8, r8)
     a2c:	e000c004 	.word	0xe000c004
     a30:	e000c000 	.word	0xe000c000
     a34:	e000c014 	.word	0xe000c014

00000a38 <atof>:
	// This function stolen from either Rolf Neugebauer or Andrew Tolmach. 
	// Probably Rolf.
	double a = 0.0;
	int e = 0;
	int c;
	uint8_t neg_flag = 0;
     a38:	2200      	movs	r2, #0
{
     a3a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((c = *s) == '-')
     a3c:	7803      	ldrb	r3, [r0, #0]
{
     a3e:	b085      	sub	sp, #20
	uint8_t neg_flag = 0;
     a40:	9202      	str	r2, [sp, #8]
	if ((c = *s) == '-')
     a42:	2b2d      	cmp	r3, #45	; 0x2d
     a44:	d102      	bne.n	a4c <atof+0x14>
	{
		neg_flag = 1;
     a46:	3b2c      	subs	r3, #44	; 0x2c
     a48:	9302      	str	r3, [sp, #8]
		*s++;
     a4a:	3001      	adds	r0, #1
	uint8_t neg_flag = 0;
     a4c:	2700      	movs	r7, #0
     a4e:	003e      	movs	r6, r7
	}
	while ((c = *s++) != '\0' && isdigit(c)) {
     a50:	1c43      	adds	r3, r0, #1
     a52:	9301      	str	r3, [sp, #4]
     a54:	7803      	ldrb	r3, [r0, #0]
     a56:	2b00      	cmp	r3, #0
     a58:	d029      	beq.n	aae <atof+0x76>
     a5a:	001c      	movs	r4, r3
     a5c:	3c30      	subs	r4, #48	; 0x30
     a5e:	2c09      	cmp	r4, #9
     a60:	d931      	bls.n	ac6 <atof+0x8e>
		a = a*10.0 + (c - '0');
	}
	if (c == '.') {
     a62:	2b2e      	cmp	r3, #46	; 0x2e
     a64:	d155      	bne.n	b12 <atof+0xda>
	while ((c = *s++) != '\0' && isdigit(c)) {
     a66:	9b01      	ldr	r3, [sp, #4]
     a68:	9a01      	ldr	r2, [sp, #4]
     a6a:	1ad4      	subs	r4, r2, r3
		while ((c = *s++) != '\0' && isdigit(c)) {
     a6c:	781a      	ldrb	r2, [r3, #0]
     a6e:	1c5d      	adds	r5, r3, #1
     a70:	1e13      	subs	r3, r2, #0
     a72:	d01a      	beq.n	aaa <atof+0x72>
     a74:	3a30      	subs	r2, #48	; 0x30
     a76:	9203      	str	r2, [sp, #12]
     a78:	2a09      	cmp	r2, #9
     a7a:	d937      	bls.n	aec <atof+0xb4>
			a = a*10.0 + (c - '0');
			e = e-1;
		}
	}
	if (c == 'e' || c == 'E') {
     a7c:	2b65      	cmp	r3, #101	; 0x65
     a7e:	d001      	beq.n	a84 <atof+0x4c>
     a80:	2b45      	cmp	r3, #69	; 0x45
     a82:	d112      	bne.n	aaa <atof+0x72>
		int sign = 1;
		int i = 0;
		c = *s++;
     a84:	782b      	ldrb	r3, [r5, #0]
		if (c == '+')
     a86:	2b2b      	cmp	r3, #43	; 0x2b
     a88:	d146      	bne.n	b18 <atof+0xe0>
			c = *s++;
     a8a:	786b      	ldrb	r3, [r5, #1]
     a8c:	1caa      	adds	r2, r5, #2
		int sign = 1;
     a8e:	2001      	movs	r0, #1
     a90:	2100      	movs	r1, #0
		else if (c == '-') {
			c = *s++;
			sign = -1;
		}
		while (isdigit(c)) {
			i = i*10 + (c - '0');
     a92:	250a      	movs	r5, #10
		while (isdigit(c)) {
     a94:	3b30      	subs	r3, #48	; 0x30
     a96:	2b09      	cmp	r3, #9
     a98:	d947      	bls.n	b2a <atof+0xf2>
			c = *s++;
		}
		e += i*sign;
     a9a:	4341      	muls	r1, r0
     a9c:	190c      	adds	r4, r1, r4
     a9e:	0025      	movs	r5, r4
	}
	while (e > 0) {
     aa0:	2d00      	cmp	r5, #0
     aa2:	dc47      	bgt.n	b34 <atof+0xfc>
     aa4:	43e3      	mvns	r3, r4
     aa6:	17db      	asrs	r3, r3, #31
     aa8:	439c      	bics	r4, r3
		a *= 10.0;
		e--;
	}
	while (e < 0) {
     aaa:	2c00      	cmp	r4, #0
     aac:	d14c      	bne.n	b48 <atof+0x110>
		a *= 0.1;
		e++;
	}
	if (neg_flag == 1)
     aae:	9b02      	ldr	r3, [sp, #8]
     ab0:	2b01      	cmp	r3, #1
     ab2:	d102      	bne.n	aba <atof+0x82>
		a = a*(-1);
     ab4:	2380      	movs	r3, #128	; 0x80
     ab6:	061b      	lsls	r3, r3, #24
     ab8:	18f6      	adds	r6, r6, r3
	return a;
}
     aba:	0038      	movs	r0, r7
     abc:	0031      	movs	r1, r6
     abe:	b005      	add	sp, #20
     ac0:	bcf0      	pop	{r4, r5, r6, r7}
     ac2:	bc04      	pop	{r2}
     ac4:	4710      	bx	r2
		a = a*10.0 + (c - '0');
     ac6:	2200      	movs	r2, #0
     ac8:	4b24      	ldr	r3, [pc, #144]	; (b5c <atof+0x124>)
     aca:	0038      	movs	r0, r7
     acc:	0031      	movs	r1, r6
     ace:	f002 f9b9 	bl	2e44 <____aeabi_dmul_from_thumb>
     ad2:	0006      	movs	r6, r0
     ad4:	000f      	movs	r7, r1
     ad6:	0020      	movs	r0, r4
     ad8:	f002 f98a 	bl	2df0 <____aeabi_i2d_from_thumb>
     adc:	0032      	movs	r2, r6
     ade:	003b      	movs	r3, r7
     ae0:	f002 f9ac 	bl	2e3c <____aeabi_dadd_from_thumb>
     ae4:	0007      	movs	r7, r0
     ae6:	000e      	movs	r6, r1
	while ((c = *s++) != '\0' && isdigit(c)) {
     ae8:	9801      	ldr	r0, [sp, #4]
     aea:	e7b1      	b.n	a50 <atof+0x18>
			a = a*10.0 + (c - '0');
     aec:	2200      	movs	r2, #0
     aee:	4b1b      	ldr	r3, [pc, #108]	; (b5c <atof+0x124>)
     af0:	0038      	movs	r0, r7
     af2:	0031      	movs	r1, r6
     af4:	f002 f9a6 	bl	2e44 <____aeabi_dmul_from_thumb>
     af8:	0006      	movs	r6, r0
     afa:	000f      	movs	r7, r1
     afc:	9803      	ldr	r0, [sp, #12]
     afe:	f002 f977 	bl	2df0 <____aeabi_i2d_from_thumb>
     b02:	003b      	movs	r3, r7
     b04:	0032      	movs	r2, r6
     b06:	f002 f999 	bl	2e3c <____aeabi_dadd_from_thumb>
		while ((c = *s++) != '\0' && isdigit(c)) {
     b0a:	002b      	movs	r3, r5
			a = a*10.0 + (c - '0');
     b0c:	0007      	movs	r7, r0
     b0e:	000e      	movs	r6, r1
     b10:	e7aa      	b.n	a68 <atof+0x30>
	while ((c = *s++) != '\0' && isdigit(c)) {
     b12:	9d01      	ldr	r5, [sp, #4]
	int e = 0;
     b14:	2400      	movs	r4, #0
     b16:	e7b1      	b.n	a7c <atof+0x44>
		else if (c == '-') {
     b18:	2b2d      	cmp	r3, #45	; 0x2d
     b1a:	d001      	beq.n	b20 <atof+0xe8>
		c = *s++;
     b1c:	1c6a      	adds	r2, r5, #1
     b1e:	e7b6      	b.n	a8e <atof+0x56>
			sign = -1;
     b20:	2001      	movs	r0, #1
			c = *s++;
     b22:	1caa      	adds	r2, r5, #2
     b24:	786b      	ldrb	r3, [r5, #1]
			sign = -1;
     b26:	4240      	negs	r0, r0
     b28:	e7b2      	b.n	a90 <atof+0x58>
			i = i*10 + (c - '0');
     b2a:	4369      	muls	r1, r5
     b2c:	1859      	adds	r1, r3, r1
			c = *s++;
     b2e:	7813      	ldrb	r3, [r2, #0]
     b30:	3201      	adds	r2, #1
     b32:	e7af      	b.n	a94 <atof+0x5c>
		a *= 10.0;
     b34:	0038      	movs	r0, r7
     b36:	0031      	movs	r1, r6
     b38:	2200      	movs	r2, #0
     b3a:	4b08      	ldr	r3, [pc, #32]	; (b5c <atof+0x124>)
     b3c:	f002 f982 	bl	2e44 <____aeabi_dmul_from_thumb>
		e--;
     b40:	3d01      	subs	r5, #1
		a *= 10.0;
     b42:	0007      	movs	r7, r0
     b44:	000e      	movs	r6, r1
     b46:	e7ab      	b.n	aa0 <atof+0x68>
		a *= 0.1;
     b48:	0038      	movs	r0, r7
     b4a:	0031      	movs	r1, r6
     b4c:	4a04      	ldr	r2, [pc, #16]	; (b60 <atof+0x128>)
     b4e:	4b05      	ldr	r3, [pc, #20]	; (b64 <atof+0x12c>)
     b50:	f002 f978 	bl	2e44 <____aeabi_dmul_from_thumb>
		e++;
     b54:	3401      	adds	r4, #1
		a *= 0.1;
     b56:	0007      	movs	r7, r0
     b58:	000e      	movs	r6, r1
     b5a:	e7a6      	b.n	aaa <atof+0x72>
     b5c:	40240000 	.word	0x40240000
     b60:	9999999a 	.word	0x9999999a
     b64:	3fb99999 	.word	0x3fb99999

00000b68 <process_command>:
{
     b68:	b570      	push	{r4, r5, r6, lr}
		if(strncmp(cmd, "Z?", 2) == 0)
     b6a:	2202      	movs	r2, #2
     b6c:	495a      	ldr	r1, [pc, #360]	; (cd8 <process_command+0x170>)
{
     b6e:	0005      	movs	r5, r0
		if(strncmp(cmd, "Z?", 2) == 0)
     b70:	f000 fda0 	bl	16b4 <strncmp>
     b74:	2800      	cmp	r0, #0
     b76:	d106      	bne.n	b86 <process_command+0x1e>
		UART0_send("z\n", 2);
     b78:	4858      	ldr	r0, [pc, #352]	; (cdc <process_command+0x174>)
     b7a:	2102      	movs	r1, #2
     b7c:	f7ff ff38 	bl	9f0 <UART0_send>
		led_set(LED2);
     b80:	2001      	movs	r0, #1
     b82:	f7ff fd7b 	bl	67c <led_set>
	if(strncmp(cmd, "start", 5) == 0)
     b86:	2205      	movs	r2, #5
     b88:	4955      	ldr	r1, [pc, #340]	; (ce0 <process_command+0x178>)
     b8a:	0028      	movs	r0, r5
     b8c:	f000 fd92 	bl	16b4 <strncmp>
     b90:	1e04      	subs	r4, r0, #0
     b92:	d10c      	bne.n	bae <process_command+0x46>
		UART0_send("\nStarted\n", 9);
     b94:	2109      	movs	r1, #9
     b96:	4853      	ldr	r0, [pc, #332]	; (ce4 <process_command+0x17c>)
     b98:	f7ff ff2a 	bl	9f0 <UART0_send>
		gpio_set(OP_AMP_PORT, OP_AMP_PIN);
     b9c:	210d      	movs	r1, #13
     b9e:	2002      	movs	r0, #2
     ba0:	f7ff fd80 	bl	6a4 <gpio_set>
		led_set(LED1);
     ba4:	0020      	movs	r0, r4
     ba6:	f7ff fd69 	bl	67c <led_set>
		timer0_start();
     baa:	f000 fb03 	bl	11b4 <timer0_start>
	if(strncmp(cmd, "stop", 4) == 0)
     bae:	2204      	movs	r2, #4
     bb0:	494d      	ldr	r1, [pc, #308]	; (ce8 <process_command+0x180>)
     bb2:	0028      	movs	r0, r5
     bb4:	f000 fd7e 	bl	16b4 <strncmp>
     bb8:	1e04      	subs	r4, r0, #0
     bba:	d116      	bne.n	bea <process_command+0x82>
		gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
     bbc:	210d      	movs	r1, #13
     bbe:	2002      	movs	r0, #2
     bc0:	f7ff fd8c 	bl	6dc <gpio_clear>
		led_clear(LED1);
     bc4:	0020      	movs	r0, r4
		FIO1CLR |= 1 << DAC;
     bc6:	2480      	movs	r4, #128	; 0x80
		led_clear(LED1);
     bc8:	f7ff fd62 	bl	690 <led_clear>
		timer0_stop();
     bcc:	f000 fb02 	bl	11d4 <timer0_stop>
		FIO1CLR |= 1 << DAC;
     bd0:	4a46      	ldr	r2, [pc, #280]	; (cec <process_command+0x184>)
     bd2:	6813      	ldr	r3, [r2, #0]
     bd4:	05a4      	lsls	r4, r4, #22
     bd6:	4323      	orrs	r3, r4
     bd8:	6013      	str	r3, [r2, #0]
		SPI0_send_2_byte((0x1000 | 578), DAC);
     bda:	211d      	movs	r1, #29
     bdc:	4844      	ldr	r0, [pc, #272]	; (cf0 <process_command+0x188>)
     bde:	f000 f945 	bl	e6c <SPI0_send_2_byte>
		FIO1SET |= 1 << DAC;
     be2:	4b44      	ldr	r3, [pc, #272]	; (cf4 <process_command+0x18c>)
     be4:	681a      	ldr	r2, [r3, #0]
     be6:	4314      	orrs	r4, r2
     be8:	601c      	str	r4, [r3, #0]
	if(strncmp(cmd, "set", 3) == 0)
     bea:	2203      	movs	r2, #3
     bec:	4942      	ldr	r1, [pc, #264]	; (cf8 <process_command+0x190>)
     bee:	0028      	movs	r0, r5
     bf0:	f000 fd60 	bl	16b4 <strncmp>
     bf4:	2800      	cmp	r0, #0
     bf6:	d116      	bne.n	c26 <process_command+0xbe>
		if (native == 1)
     bf8:	4b40      	ldr	r3, [pc, #256]	; (cfc <process_command+0x194>)
     bfa:	781b      	ldrb	r3, [r3, #0]
		lenth = strlen(cmd+4)-1;
     bfc:	1d28      	adds	r0, r5, #4
		if (native == 1)
     bfe:	2b01      	cmp	r3, #1
     c00:	d14f      	bne.n	ca2 <process_command+0x13a>
		num = atoi(cmd + 4);
     c02:	f000 fc7d 	bl	1500 <atoi>
		num = (int)input;
     c06:	0404      	lsls	r4, r0, #16
     c08:	0c24      	lsrs	r4, r4, #16
		UART0_send("\nOK\n", 4);
     c0a:	2104      	movs	r1, #4
     c0c:	483c      	ldr	r0, [pc, #240]	; (d00 <process_command+0x198>)
     c0e:	f7ff feef 	bl	9f0 <UART0_send>
		UART0_send_byte(num >> 8);
     c12:	0a20      	lsrs	r0, r4, #8
     c14:	f7ff fed2 	bl	9bc <UART0_send_byte>
		UART0_send_byte(num);
     c18:	0620      	lsls	r0, r4, #24
     c1a:	0e00      	lsrs	r0, r0, #24
     c1c:	f7ff fece 	bl	9bc <UART0_send_byte>
		dac_set_voltage(num);
     c20:	0020      	movs	r0, r4
     c22:	f000 f9cf 	bl	fc4 <dac_set_voltage>
	if(strncmp(cmd, "get", 3) == 0)
     c26:	2203      	movs	r2, #3
     c28:	4936      	ldr	r1, [pc, #216]	; (d04 <process_command+0x19c>)
     c2a:	0028      	movs	r0, r5
     c2c:	f000 fd42 	bl	16b4 <strncmp>
     c30:	2800      	cmp	r0, #0
     c32:	d115      	bne.n	c60 <process_command+0xf8>
		if (native == 1)
     c34:	4b31      	ldr	r3, [pc, #196]	; (cfc <process_command+0x194>)
     c36:	781b      	ldrb	r3, [r3, #0]
		lenth = strlen(cmd+4)-1;
     c38:	1d28      	adds	r0, r5, #4
		if (native == 1)
     c3a:	2b01      	cmp	r3, #1
     c3c:	d13e      	bne.n	cbc <process_command+0x154>
		num = atoi(cmd + 4);
     c3e:	f000 fc5f 	bl	1500 <atoi>
		num = (int)input;
     c42:	0400      	lsls	r0, r0, #16
     c44:	0c00      	lsrs	r0, r0, #16
		dac_set_voltage(num);
     c46:	f000 f9bd 	bl	fc4 <dac_set_voltage>
		getflag = 1;
     c4a:	2201      	movs	r2, #1
     c4c:	4b2e      	ldr	r3, [pc, #184]	; (d08 <process_command+0x1a0>)
		timer0_set_freq(100);
     c4e:	2064      	movs	r0, #100	; 0x64
		getflag = 1;
     c50:	701a      	strb	r2, [r3, #0]
		timer0_set_freq(100);
     c52:	f000 fa6b 	bl	112c <timer0_set_freq>
		led_set(LED1);
     c56:	2000      	movs	r0, #0
     c58:	f7ff fd10 	bl	67c <led_set>
		timer0_start();
     c5c:	f000 faaa 	bl	11b4 <timer0_start>
	if(strncmp(cmd, "help", 4) == 0)
     c60:	2204      	movs	r2, #4
     c62:	492a      	ldr	r1, [pc, #168]	; (d0c <process_command+0x1a4>)
     c64:	0028      	movs	r0, r5
     c66:	f000 fd25 	bl	16b4 <strncmp>
     c6a:	2800      	cmp	r0, #0
     c6c:	d103      	bne.n	c76 <process_command+0x10e>
		UART0_send(help_msg, sizeof(help_msg)-1);
     c6e:	21d0      	movs	r1, #208	; 0xd0
     c70:	4827      	ldr	r0, [pc, #156]	; (d10 <process_command+0x1a8>)
     c72:	f7ff febd 	bl	9f0 <UART0_send>
	if (strncmp(cmd, "native", 6) == 0)
     c76:	2206      	movs	r2, #6
     c78:	4926      	ldr	r1, [pc, #152]	; (d14 <process_command+0x1ac>)
     c7a:	0028      	movs	r0, r5
     c7c:	f000 fd1a 	bl	16b4 <strncmp>
     c80:	2800      	cmp	r0, #0
     c82:	d102      	bne.n	c8a <process_command+0x122>
		native = 1;
     c84:	2201      	movs	r2, #1
     c86:	4b1d      	ldr	r3, [pc, #116]	; (cfc <process_command+0x194>)
     c88:	701a      	strb	r2, [r3, #0]
	if (strncmp(cmd, "ascii", 5) == 0)
     c8a:	2205      	movs	r2, #5
     c8c:	4922      	ldr	r1, [pc, #136]	; (d18 <process_command+0x1b0>)
     c8e:	0028      	movs	r0, r5
     c90:	f000 fd10 	bl	16b4 <strncmp>
     c94:	2800      	cmp	r0, #0
     c96:	d101      	bne.n	c9c <process_command+0x134>
		native = 0;
     c98:	4b18      	ldr	r3, [pc, #96]	; (cfc <process_command+0x194>)
     c9a:	7018      	strb	r0, [r3, #0]
}
     c9c:	bc70      	pop	{r4, r5, r6}
     c9e:	bc01      	pop	{r0}
     ca0:	4700      	bx	r0
		input = atof(cmd + 4);
     ca2:	f7ff fec9 	bl	a38 <atof>
		input = input/0.01445 +578;	
     ca6:	4a1d      	ldr	r2, [pc, #116]	; (d1c <process_command+0x1b4>)
     ca8:	4b1d      	ldr	r3, [pc, #116]	; (d20 <process_command+0x1b8>)
     caa:	f002 f8a9 	bl	2e00 <____aeabi_ddiv_from_thumb>
     cae:	2200      	movs	r2, #0
     cb0:	4b1c      	ldr	r3, [pc, #112]	; (d24 <process_command+0x1bc>)
     cb2:	f002 f8c3 	bl	2e3c <____aeabi_dadd_from_thumb>
		num = (int)input;
     cb6:	f002 f8df 	bl	2e78 <____aeabi_d2iz_from_thumb>
     cba:	e7a4      	b.n	c06 <process_command+0x9e>
		input = atof(cmd + 4);
     cbc:	f7ff febc 	bl	a38 <atof>
		input = input/0.01445 +578;	
     cc0:	4a16      	ldr	r2, [pc, #88]	; (d1c <process_command+0x1b4>)
     cc2:	4b17      	ldr	r3, [pc, #92]	; (d20 <process_command+0x1b8>)
     cc4:	f002 f89c 	bl	2e00 <____aeabi_ddiv_from_thumb>
     cc8:	2200      	movs	r2, #0
     cca:	4b16      	ldr	r3, [pc, #88]	; (d24 <process_command+0x1bc>)
     ccc:	f002 f8b6 	bl	2e3c <____aeabi_dadd_from_thumb>
		num = (int)input;
     cd0:	f002 f8d2 	bl	2e78 <____aeabi_d2iz_from_thumb>
     cd4:	e7b5      	b.n	c42 <process_command+0xda>
     cd6:	46c0      	nop			; (mov r8, r8)
     cd8:	00002f83 	.word	0x00002f83
     cdc:	00002f86 	.word	0x00002f86
     ce0:	00002f89 	.word	0x00002f89
     ce4:	00002f8f 	.word	0x00002f8f
     ce8:	00002f99 	.word	0x00002f99
     cec:	3fffc03c 	.word	0x3fffc03c
     cf0:	00001242 	.word	0x00001242
     cf4:	3fffc038 	.word	0x3fffc038
     cf8:	00002f9e 	.word	0x00002f9e
     cfc:	400005a1 	.word	0x400005a1
     d00:	00002fa2 	.word	0x00002fa2
     d04:	00002fa7 	.word	0x00002fa7
     d08:	400005a0 	.word	0x400005a0
     d0c:	00002fab 	.word	0x00002fab
     d10:	00002ea0 	.word	0x00002ea0
     d14:	00002fb0 	.word	0x00002fb0
     d18:	00002fb7 	.word	0x00002fb7
     d1c:	2b6ae7d5 	.word	0x2b6ae7d5
     d20:	3f8d97f6 	.word	0x3f8d97f6
     d24:	40821000 	.word	0x40821000

00000d28 <SPI_ADC_data_transfers_16bit>:
	}
	return dat;
}

uint16_t SPI_ADC_data_transfers_16bit (uint16_t data)
{
     d28:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		/* if(data & mask) */
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
     d2a:	2780      	movs	r7, #128	; 0x80
{
     d2c:	210f      	movs	r1, #15
	uint16_t dat = 0;
     d2e:	2200      	movs	r2, #0
		if(data & (1 << (i - 1)))
     d30:	2401      	movs	r4, #1
			FIO1PIN |= 1 << ADC_DIN;
     d32:	047f      	lsls	r7, r7, #17
		FIO1PIN &= ~(1 << ADC_SCLK);
     d34:	4b14      	ldr	r3, [pc, #80]	; (d88 <SPI_ADC_data_transfers_16bit+0x60>)
     d36:	4e15      	ldr	r6, [pc, #84]	; (d8c <SPI_ADC_data_transfers_16bit+0x64>)
     d38:	681d      	ldr	r5, [r3, #0]
     d3a:	4035      	ands	r5, r6
     d3c:	601d      	str	r5, [r3, #0]
		if(data & (1 << (i - 1)))
     d3e:	0005      	movs	r5, r0
     d40:	410d      	asrs	r5, r1
     d42:	4225      	tst	r5, r4
     d44:	d017      	beq.n	d76 <SPI_ADC_data_transfers_16bit+0x4e>
			FIO1PIN |= 1 << ADC_DIN;
     d46:	681d      	ldr	r5, [r3, #0]
     d48:	433d      	orrs	r5, r7
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     d4a:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     d4c:	601d      	str	r5, [r3, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     d4e:	681d      	ldr	r5, [r3, #0]
     d50:	0376      	lsls	r6, r6, #13
     d52:	4335      	orrs	r5, r6
     d54:	601d      	str	r5, [r3, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     d56:	2580      	movs	r5, #128	; 0x80
     d58:	681b      	ldr	r3, [r3, #0]
     d5a:	042d      	lsls	r5, r5, #16
     d5c:	422b      	tst	r3, r5
     d5e:	d00e      	beq.n	d7e <SPI_ADC_data_transfers_16bit+0x56>
			dat |= 1 << (i - 1);
     d60:	0023      	movs	r3, r4
     d62:	408b      	lsls	r3, r1
     d64:	431a      	orrs	r2, r3
     d66:	0412      	lsls	r2, r2, #16
     d68:	0c12      	lsrs	r2, r2, #16
	for(i = 16;  i > 0 ; i--)
     d6a:	3901      	subs	r1, #1
     d6c:	d2e2      	bcs.n	d34 <SPI_ADC_data_transfers_16bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     d6e:	0010      	movs	r0, r2
     d70:	bcf0      	pop	{r4, r5, r6, r7}
     d72:	bc02      	pop	{r1}
     d74:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     d76:	681d      	ldr	r5, [r3, #0]
     d78:	4e05      	ldr	r6, [pc, #20]	; (d90 <SPI_ADC_data_transfers_16bit+0x68>)
     d7a:	4035      	ands	r5, r6
     d7c:	e7e5      	b.n	d4a <SPI_ADC_data_transfers_16bit+0x22>
			dat &= ~(1 << (i - 1));
     d7e:	0023      	movs	r3, r4
     d80:	408b      	lsls	r3, r1
     d82:	439a      	bics	r2, r3
     d84:	e7f1      	b.n	d6a <SPI_ADC_data_transfers_16bit+0x42>
     d86:	46c0      	nop			; (mov r8, r8)
     d88:	3fffc034 	.word	0x3fffc034
     d8c:	ffefffff 	.word	0xffefffff
     d90:	feffffff 	.word	0xfeffffff

00000d94 <SPI_ADC_data_transfers_8bit>:

unsigned char SPI_ADC_data_transfers_8bit (unsigned char data)
{
     d94:	b5f0      	push	{r4, r5, r6, r7, lr}
	{
		//SCLK
		FIO1PIN &= ~(1 << ADC_SCLK);
		if(data & (1 << (i - 1)))
		/* if(data & mask) */
			FIO1PIN |= 1 << ADC_DIN;
     d96:	2780      	movs	r7, #128	; 0x80
{
     d98:	2107      	movs	r1, #7
	unsigned char dat = 0;
     d9a:	2200      	movs	r2, #0
		if(data & (1 << (i - 1)))
     d9c:	2401      	movs	r4, #1
			FIO1PIN |= 1 << ADC_DIN;
     d9e:	047f      	lsls	r7, r7, #17
		FIO1PIN &= ~(1 << ADC_SCLK);
     da0:	4b14      	ldr	r3, [pc, #80]	; (df4 <SPI_ADC_data_transfers_8bit+0x60>)
     da2:	4e15      	ldr	r6, [pc, #84]	; (df8 <SPI_ADC_data_transfers_8bit+0x64>)
     da4:	681d      	ldr	r5, [r3, #0]
     da6:	4035      	ands	r5, r6
     da8:	601d      	str	r5, [r3, #0]
		if(data & (1 << (i - 1)))
     daa:	0005      	movs	r5, r0
     dac:	410d      	asrs	r5, r1
     dae:	4225      	tst	r5, r4
     db0:	d017      	beq.n	de2 <SPI_ADC_data_transfers_8bit+0x4e>
			FIO1PIN |= 1 << ADC_DIN;
     db2:	681d      	ldr	r5, [r3, #0]
     db4:	433d      	orrs	r5, r7
			FIO1PIN &= ~(1 << ADC_DIN);

		mask = mask >> 1;

		for (j = 0; j < 6; j++);
		FIO1PIN |= 1 << ADC_SCLK;
     db6:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     db8:	601d      	str	r5, [r3, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     dba:	681d      	ldr	r5, [r3, #0]
     dbc:	0376      	lsls	r6, r6, #13
     dbe:	4335      	orrs	r5, r6
     dc0:	601d      	str	r5, [r3, #0]
		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     dc2:	2580      	movs	r5, #128	; 0x80
     dc4:	681b      	ldr	r3, [r3, #0]
     dc6:	042d      	lsls	r5, r5, #16
     dc8:	422b      	tst	r3, r5
     dca:	d00e      	beq.n	dea <SPI_ADC_data_transfers_8bit+0x56>
			dat |= 1 << (i - 1);
     dcc:	0023      	movs	r3, r4
     dce:	408b      	lsls	r3, r1
     dd0:	431a      	orrs	r2, r3
     dd2:	0612      	lsls	r2, r2, #24
     dd4:	0e12      	lsrs	r2, r2, #24
	for(i = 8;  i > 0 ; i--)
     dd6:	3901      	subs	r1, #1
     dd8:	d2e2      	bcs.n	da0 <SPI_ADC_data_transfers_8bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     dda:	0010      	movs	r0, r2
     ddc:	bcf0      	pop	{r4, r5, r6, r7}
     dde:	bc02      	pop	{r1}
     de0:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     de2:	681d      	ldr	r5, [r3, #0]
     de4:	4e05      	ldr	r6, [pc, #20]	; (dfc <SPI_ADC_data_transfers_8bit+0x68>)
     de6:	4035      	ands	r5, r6
     de8:	e7e5      	b.n	db6 <SPI_ADC_data_transfers_8bit+0x22>
			dat &= ~(1 << (i - 1));
     dea:	0023      	movs	r3, r4
     dec:	408b      	lsls	r3, r1
     dee:	439a      	bics	r2, r3
     df0:	e7f1      	b.n	dd6 <SPI_ADC_data_transfers_8bit+0x42>
     df2:	46c0      	nop			; (mov r8, r8)
     df4:	3fffc034 	.word	0x3fffc034
     df8:	ffefffff 	.word	0xffefffff
     dfc:	feffffff 	.word	0xfeffffff

00000e00 <SPI_DAC_data_transfers_16bit>:
uint16_t SPI_DAC_data_transfers_16bit (uint16_t data)
{
     e00:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint16_t dat = 0;
	uint16_t mask;
	char i, j;

	//Write
	mask = 0x8000;
     e02:	2480      	movs	r4, #128	; 0x80
{
     e04:	210f      	movs	r1, #15
	uint16_t dat = 0;
     e06:	2200      	movs	r2, #0
     e08:	2601      	movs	r6, #1
	mask = 0x8000;
     e0a:	0224      	lsls	r4, r4, #8
	for(i = 16;  i > 0 ; i--)
	{
		FIO1PIN |= 1 << ADC_SCLK;
     e0c:	2780      	movs	r7, #128	; 0x80
     e0e:	4b14      	ldr	r3, [pc, #80]	; (e60 <SPI_DAC_data_transfers_16bit+0x60>)
     e10:	681d      	ldr	r5, [r3, #0]
     e12:	037f      	lsls	r7, r7, #13
     e14:	433d      	orrs	r5, r7
     e16:	601d      	str	r5, [r3, #0]
		if(data & mask)
			FIO1PIN |= 1 << ADC_DIN;
     e18:	681d      	ldr	r5, [r3, #0]
		if(data & mask)
     e1a:	4204      	tst	r4, r0
     e1c:	d018      	beq.n	e50 <SPI_DAC_data_transfers_16bit+0x50>
			FIO1PIN |= 1 << ADC_DIN;
     e1e:	2780      	movs	r7, #128	; 0x80
     e20:	047f      	lsls	r7, r7, #17
     e22:	433d      	orrs	r5, r7
		else
			FIO1PIN &= ~(1 << ADC_DIN);
     e24:	601d      	str	r5, [r3, #0]

		//SCLK
		mask = mask >> 1;
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     e26:	4f0f      	ldr	r7, [pc, #60]	; (e64 <SPI_DAC_data_transfers_16bit+0x64>)
     e28:	681d      	ldr	r5, [r3, #0]
     e2a:	403d      	ands	r5, r7
     e2c:	601d      	str	r5, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e2e:	2580      	movs	r5, #128	; 0x80
     e30:	681b      	ldr	r3, [r3, #0]
     e32:	042d      	lsls	r5, r5, #16
		mask = mask >> 1;
     e34:	0864      	lsrs	r4, r4, #1
		if(FIO1PIN & (1 << (ADC_DOUT)))
     e36:	422b      	tst	r3, r5
     e38:	d00d      	beq.n	e56 <SPI_DAC_data_transfers_16bit+0x56>
			dat |= 1 << (i - 1);
     e3a:	0033      	movs	r3, r6
     e3c:	408b      	lsls	r3, r1
     e3e:	431a      	orrs	r2, r3
     e40:	0412      	lsls	r2, r2, #16
     e42:	0c12      	lsrs	r2, r2, #16
	for(i = 16;  i > 0 ; i--)
     e44:	3901      	subs	r1, #1
     e46:	d2e1      	bcs.n	e0c <SPI_DAC_data_transfers_16bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     e48:	0010      	movs	r0, r2
     e4a:	bcf0      	pop	{r4, r5, r6, r7}
     e4c:	bc02      	pop	{r1}
     e4e:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     e50:	4f05      	ldr	r7, [pc, #20]	; (e68 <SPI_DAC_data_transfers_16bit+0x68>)
     e52:	403d      	ands	r5, r7
     e54:	e7e6      	b.n	e24 <SPI_DAC_data_transfers_16bit+0x24>
			dat &= ~(1 << (i - 1));
     e56:	0033      	movs	r3, r6
     e58:	408b      	lsls	r3, r1
     e5a:	439a      	bics	r2, r3
     e5c:	e7f2      	b.n	e44 <SPI_DAC_data_transfers_16bit+0x44>
     e5e:	46c0      	nop			; (mov r8, r8)
     e60:	3fffc034 	.word	0x3fffc034
     e64:	ffefffff 	.word	0xffefffff
     e68:	feffffff 	.word	0xfeffffff

00000e6c <SPI0_send_2_byte>:
{
     e6c:	b510      	push	{r4, lr}
	if (slave == ADC )
     e6e:	2912      	cmp	r1, #18
     e70:	d106      	bne.n	e80 <SPI0_send_2_byte+0x14>
	dat = SPI_ADC_data_transfers_16bit(data);
     e72:	f7ff ff59 	bl	d28 <SPI_ADC_data_transfers_16bit>
	dat = SPI_DAC_data_transfers_16bit(data);
     e76:	0003      	movs	r3, r0
}
     e78:	0018      	movs	r0, r3
     e7a:	bc10      	pop	{r4}
     e7c:	bc02      	pop	{r1}
     e7e:	4708      	bx	r1
	}else if (slave == DAC)
     e80:	291d      	cmp	r1, #29
     e82:	d1f9      	bne.n	e78 <SPI0_send_2_byte+0xc>
	dat = SPI_DAC_data_transfers_16bit(data);
     e84:	f7ff ffbc 	bl	e00 <SPI_DAC_data_transfers_16bit>
     e88:	e7f5      	b.n	e76 <SPI0_send_2_byte+0xa>

00000e8a <SPI_DAC_data_transfers_8bit>:

unsigned char SPI_DAC_data_transfers_8bit (unsigned char data)
{
     e8a:	b5f0      	push	{r4, r5, r6, r7, lr}

	//Write
	for(i = 8;  i > 0 ; i--)
	{
		if(data & (1 << (i - 1)))
			FIO1PIN |= 1 << ADC_DIN;
     e8c:	2780      	movs	r7, #128	; 0x80
{
     e8e:	2107      	movs	r1, #7
	unsigned char dat = 0;
     e90:	2200      	movs	r2, #0
		if(data & (1 << (i - 1)))
     e92:	2401      	movs	r4, #1
			FIO1PIN |= 1 << ADC_DIN;
     e94:	047f      	lsls	r7, r7, #17
		if(data & (1 << (i - 1)))
     e96:	0005      	movs	r5, r0
     e98:	410d      	asrs	r5, r1
     e9a:	4b13      	ldr	r3, [pc, #76]	; (ee8 <SPI_DAC_data_transfers_8bit+0x5e>)
     e9c:	4225      	tst	r5, r4
     e9e:	d01b      	beq.n	ed8 <SPI_DAC_data_transfers_8bit+0x4e>
			FIO1PIN |= 1 << ADC_DIN;
     ea0:	681d      	ldr	r5, [r3, #0]
     ea2:	433d      	orrs	r5, r7
		else
			FIO1PIN &= ~(1 << ADC_DIN);

		//SCLK
		FIO1PIN |= 1 << ADC_SCLK;
     ea4:	2680      	movs	r6, #128	; 0x80
			FIO1PIN &= ~(1 << ADC_DIN);
     ea6:	601d      	str	r5, [r3, #0]
		FIO1PIN |= 1 << ADC_SCLK;
     ea8:	681d      	ldr	r5, [r3, #0]
     eaa:	0376      	lsls	r6, r6, #13
     eac:	4335      	orrs	r5, r6
     eae:	601d      	str	r5, [r3, #0]
		for (j = 0; j < 6; j++);
		FIO1PIN &= ~(1 << ADC_SCLK);
     eb0:	4e0e      	ldr	r6, [pc, #56]	; (eec <SPI_DAC_data_transfers_8bit+0x62>)
     eb2:	681d      	ldr	r5, [r3, #0]
     eb4:	4035      	ands	r5, r6
     eb6:	601d      	str	r5, [r3, #0]

		//read
		if(FIO1PIN & (1 << (ADC_DOUT)))
     eb8:	2580      	movs	r5, #128	; 0x80
     eba:	681b      	ldr	r3, [r3, #0]
     ebc:	042d      	lsls	r5, r5, #16
     ebe:	422b      	tst	r3, r5
     ec0:	d00e      	beq.n	ee0 <SPI_DAC_data_transfers_8bit+0x56>
			dat |= 1 << (i - 1);
     ec2:	0023      	movs	r3, r4
     ec4:	408b      	lsls	r3, r1
     ec6:	431a      	orrs	r2, r3
     ec8:	0612      	lsls	r2, r2, #24
     eca:	0e12      	lsrs	r2, r2, #24
	for(i = 8;  i > 0 ; i--)
     ecc:	3901      	subs	r1, #1
     ece:	d2e2      	bcs.n	e96 <SPI_DAC_data_transfers_8bit+0xc>
		else
			dat &= ~(1 << (i - 1));

	}  
	return dat;
}
     ed0:	0010      	movs	r0, r2
     ed2:	bcf0      	pop	{r4, r5, r6, r7}
     ed4:	bc02      	pop	{r1}
     ed6:	4708      	bx	r1
			FIO1PIN &= ~(1 << ADC_DIN);
     ed8:	681d      	ldr	r5, [r3, #0]
     eda:	4e05      	ldr	r6, [pc, #20]	; (ef0 <SPI_DAC_data_transfers_8bit+0x66>)
     edc:	4035      	ands	r5, r6
     ede:	e7e1      	b.n	ea4 <SPI_DAC_data_transfers_8bit+0x1a>
			dat &= ~(1 << (i - 1));
     ee0:	0023      	movs	r3, r4
     ee2:	408b      	lsls	r3, r1
     ee4:	439a      	bics	r2, r3
     ee6:	e7f1      	b.n	ecc <SPI_DAC_data_transfers_8bit+0x42>
     ee8:	3fffc034 	.word	0x3fffc034
     eec:	ffefffff 	.word	0xffefffff
     ef0:	feffffff 	.word	0xfeffffff

00000ef4 <SPI0_send_1_byte>:
{
     ef4:	b510      	push	{r4, lr}
	if (slave == ADC )
     ef6:	2912      	cmp	r1, #18
     ef8:	d106      	bne.n	f08 <VIC_VectAddr+0x8>
	dat = SPI_ADC_data_transfers_8bit(data);
     efa:	f7ff ff4b 	bl	d94 <SPI_ADC_data_transfers_8bit>
	dat = SPI_DAC_data_transfers_8bit(data);
     efe:	0003      	movs	r3, r0
}
     f00:	0018      	movs	r0, r3
     f02:	bc10      	pop	{r4}
     f04:	bc02      	pop	{r1}
     f06:	4708      	bx	r1
	uint8_t dat = 0;
     f08:	2300      	movs	r3, #0
	}else if (slave == DAC)
     f0a:	291d      	cmp	r1, #29
     f0c:	d1f8      	bne.n	f00 <VIC_VectAddr>
	dat = SPI_DAC_data_transfers_8bit(data);
     f0e:	f7ff ffbc 	bl	e8a <SPI_DAC_data_transfers_8bit>
     f12:	e7f4      	b.n	efe <SPI0_send_1_byte+0xa>

00000f14 <Delay>:
{
	int i, j;
	for(j = 0; j < value; j++)
		for(i = 0; i < 10; i++)
			i = i;
}
     f14:	4770      	bx	lr

00000f16 <adc_init>:
void adc_init(void)
{
	uint16_t dat = 0;
	/* ADC needs hight level at sclk in idle */
	FIO1PIN |= (1 << ADC_SCLK);
     f16:	2380      	movs	r3, #128	; 0x80
{
     f18:	b570      	push	{r4, r5, r6, lr}
	
	/* Reset ADC */
	FIO1CLR |= 1 << ADC;
     f1a:	2680      	movs	r6, #128	; 0x80
	FIO1PIN |= (1 << ADC_SCLK);
     f1c:	4a24      	ldr	r2, [pc, #144]	; (fb0 <adc_init+0x9a>)
     f1e:	6811      	ldr	r1, [r2, #0]
     f20:	035b      	lsls	r3, r3, #13
     f22:	430b      	orrs	r3, r1
     f24:	6013      	str	r3, [r2, #0]
	FIO1CLR |= 1 << ADC;
     f26:	4d23      	ldr	r5, [pc, #140]	; (fb4 <adc_init+0x9e>)
     f28:	682b      	ldr	r3, [r5, #0]
     f2a:	02f6      	lsls	r6, r6, #11
     f2c:	4333      	orrs	r3, r6
     f2e:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(0xFF, ADC);
     f30:	2112      	movs	r1, #18
     f32:	20ff      	movs	r0, #255	; 0xff
     f34:	f7ff ffde 	bl	ef4 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f38:	2112      	movs	r1, #18
     f3a:	20ff      	movs	r0, #255	; 0xff
	SPI0_send_1_byte(0xFF, ADC);
	SPI0_send_1_byte(0xFF, ADC);
	FIO1SET |= 1 << ADC;
     f3c:	4c1e      	ldr	r4, [pc, #120]	; (fb8 <adc_init+0xa2>)
	SPI0_send_1_byte(0xFF, ADC);
     f3e:	f7ff ffd9 	bl	ef4 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f42:	2112      	movs	r1, #18
     f44:	20ff      	movs	r0, #255	; 0xff
     f46:	f7ff ffd5 	bl	ef4 <SPI0_send_1_byte>
	SPI0_send_1_byte(0xFF, ADC);
     f4a:	2112      	movs	r1, #18
     f4c:	20ff      	movs	r0, #255	; 0xff
     f4e:	f7ff ffd1 	bl	ef4 <SPI0_send_1_byte>
	FIO1SET |= 1 << ADC;
     f52:	6823      	ldr	r3, [r4, #0]
     f54:	4333      	orrs	r3, r6
     f56:	6023      	str	r3, [r4, #0]

	/* Delay because adc needs 500us after reset sequence */
	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     f58:	682b      	ldr	r3, [r5, #0]
     f5a:	4333      	orrs	r3, r6
     f5c:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
     f5e:	2112      	movs	r1, #18
     f60:	2010      	movs	r0, #16
     f62:	f7ff ffc7 	bl	ef4 <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
     f66:	2112      	movs	r1, #18
     f68:	4814      	ldr	r0, [pc, #80]	; (fbc <adc_init+0xa6>)
     f6a:	f7ff ff7f 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     f6e:	6823      	ldr	r3, [r4, #0]
     f70:	4333      	orrs	r3, r6
     f72:	6023      	str	r3, [r4, #0]

	for (dat = 0; dat < 2000; dat++);

	FIO1CLR |= 1 << ADC;
     f74:	682b      	ldr	r3, [r5, #0]
     f76:	4333      	orrs	r3, r6
     f78:	602b      	str	r3, [r5, #0]
	SPI0_send_1_byte(WRITE_MODE_REG, ADC);
     f7a:	2112      	movs	r1, #18
     f7c:	2008      	movs	r0, #8
     f7e:	f7ff ffb9 	bl	ef4 <SPI0_send_1_byte>
	SPI0_send_2_byte(MODE_REG_VAL, ADC);
     f82:	2112      	movs	r1, #18
     f84:	2001      	movs	r0, #1
     f86:	f7ff ff71 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
     f8a:	6823      	ldr	r3, [r4, #0]
     f8c:	431e      	orrs	r6, r3
     f8e:	6026      	str	r6, [r4, #0]

	FIO1CLR |= 1 << DAC;
     f90:	2680      	movs	r6, #128	; 0x80
     f92:	682b      	ldr	r3, [r5, #0]
     f94:	05b6      	lsls	r6, r6, #22
     f96:	4333      	orrs	r3, r6
     f98:	602b      	str	r3, [r5, #0]
	SPI0_send_2_byte((0x1000 | 578), DAC);
     f9a:	211d      	movs	r1, #29
     f9c:	4808      	ldr	r0, [pc, #32]	; (fc0 <adc_init+0xaa>)
     f9e:	f7ff ff65 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     fa2:	6823      	ldr	r3, [r4, #0]
     fa4:	431e      	orrs	r6, r3
     fa6:	6026      	str	r6, [r4, #0]

	/* Switch on green led to indicate successful  initialization */
	//led_set(LED1);

}
     fa8:	bc70      	pop	{r4, r5, r6}
     faa:	bc01      	pop	{r0}
     fac:	4700      	bx	r0
     fae:	46c0      	nop			; (mov r8, r8)
     fb0:	3fffc034 	.word	0x3fffc034
     fb4:	3fffc03c 	.word	0x3fffc03c
     fb8:	3fffc038 	.word	0x3fffc038
     fbc:	00001001 	.word	0x00001001
     fc0:	00001242 	.word	0x00001242

00000fc4 <dac_set_voltage>:

void dac_set_voltage(uint16_t voltage)
{
     fc4:	b510      	push	{r4, lr}
	/* SPI0_send_2_byte((voltage | DAC_LOAD_CMD)); */
	FIO1CLR |= 1 << DAC;
     fc6:	2480      	movs	r4, #128	; 0x80
     fc8:	4a08      	ldr	r2, [pc, #32]	; (fec <dac_set_voltage+0x28>)
     fca:	6813      	ldr	r3, [r2, #0]
     fcc:	05a4      	lsls	r4, r4, #22
     fce:	4323      	orrs	r3, r4
     fd0:	6013      	str	r3, [r2, #0]
	SPI0_send_2_byte((0x1000 | voltage), DAC);
     fd2:	2380      	movs	r3, #128	; 0x80
     fd4:	015b      	lsls	r3, r3, #5
     fd6:	4318      	orrs	r0, r3
     fd8:	211d      	movs	r1, #29
     fda:	f7ff ff47 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << DAC;
     fde:	4b04      	ldr	r3, [pc, #16]	; (ff0 <dac_set_voltage+0x2c>)
     fe0:	681a      	ldr	r2, [r3, #0]
     fe2:	4314      	orrs	r4, r2
     fe4:	601c      	str	r4, [r3, #0]
}
     fe6:	bc10      	pop	{r4}
     fe8:	bc01      	pop	{r0}
     fea:	4700      	bx	r0
     fec:	3fffc03c 	.word	0x3fffc03c
     ff0:	3fffc038 	.word	0x3fffc038

00000ff4 <adc_read_current>:

uint16_t adc_read_current(void)
{
     ff4:	b570      	push	{r4, r5, r6, lr}
	uint16_t current;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
     ff6:	2480      	movs	r4, #128	; 0x80
     ff8:	4e11      	ldr	r6, [pc, #68]	; (1040 <adc_read_current+0x4c>)
     ffa:	6833      	ldr	r3, [r6, #0]
     ffc:	02e4      	lsls	r4, r4, #11
     ffe:	4323      	orrs	r3, r4
    1000:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1002:	2112      	movs	r1, #18
    1004:	2010      	movs	r0, #16
    1006:	f7ff ff75 	bl	ef4 <SPI0_send_1_byte>
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
    100a:	2080      	movs	r0, #128	; 0x80
	FIO1SET |= 1 << ADC;
    100c:	4d0d      	ldr	r5, [pc, #52]	; (1044 <adc_read_current+0x50>)
	SPI0_send_2_byte(CONF_REG_VAL, ADC);
    100e:	2112      	movs	r1, #18
    1010:	0140      	lsls	r0, r0, #5
    1012:	f7ff ff2b 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    1016:	682b      	ldr	r3, [r5, #0]
    1018:	4323      	orrs	r3, r4
    101a:	602b      	str	r3, [r5, #0]

	for (current = 0; current < 200; current++);
	FIO1CLR |= 1 << ADC;
    101c:	6833      	ldr	r3, [r6, #0]
    101e:	4323      	orrs	r3, r4
    1020:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
    1022:	2112      	movs	r1, #18
    1024:	2058      	movs	r0, #88	; 0x58
    1026:	f7ff ff65 	bl	ef4 <SPI0_send_1_byte>
	current = SPI0_send_2_byte(0xFFFF, ADC);
    102a:	2112      	movs	r1, #18
    102c:	4806      	ldr	r0, [pc, #24]	; (1048 <adc_read_current+0x54>)
    102e:	f7ff ff1d 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    1032:	682b      	ldr	r3, [r5, #0]
    1034:	431c      	orrs	r4, r3
    1036:	602c      	str	r4, [r5, #0]

	return current;
}
    1038:	bc70      	pop	{r4, r5, r6}
    103a:	bc02      	pop	{r1}
    103c:	4708      	bx	r1
    103e:	46c0      	nop			; (mov r8, r8)
    1040:	3fffc03c 	.word	0x3fffc03c
    1044:	3fffc038 	.word	0x3fffc038
    1048:	0000ffff 	.word	0x0000ffff

0000104c <adc_read_voltage>:

uint16_t adc_read_voltage(void)
{
    104c:	b570      	push	{r4, r5, r6, lr}
	uint16_t voltage;
	/* Need to select proper channel */
	FIO1CLR |= 1 << ADC;
    104e:	2480      	movs	r4, #128	; 0x80
    1050:	4e10      	ldr	r6, [pc, #64]	; (1094 <adc_read_voltage+0x48>)
    1052:	6833      	ldr	r3, [r6, #0]
    1054:	02e4      	lsls	r4, r4, #11
    1056:	4323      	orrs	r3, r4
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
	FIO1SET |= 1 << ADC;
    1058:	4d0f      	ldr	r5, [pc, #60]	; (1098 <adc_read_voltage+0x4c>)
	FIO1CLR |= 1 << ADC;
    105a:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    105c:	2112      	movs	r1, #18
    105e:	2010      	movs	r0, #16
    1060:	f7ff ff48 	bl	ef4 <SPI0_send_1_byte>
	SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);	// | 1 - select 2 channel
    1064:	2112      	movs	r1, #18
    1066:	480d      	ldr	r0, [pc, #52]	; (109c <adc_read_voltage+0x50>)
    1068:	f7ff ff00 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    106c:	682b      	ldr	r3, [r5, #0]
    106e:	4323      	orrs	r3, r4
    1070:	602b      	str	r3, [r5, #0]
	for (voltage = 0; voltage < 200; voltage ++);

	FIO1CLR |= 1 << ADC;
    1072:	6833      	ldr	r3, [r6, #0]
    1074:	4323      	orrs	r3, r4
    1076:	6033      	str	r3, [r6, #0]
	SPI0_send_1_byte(READ_DATA_REG, ADC);
    1078:	2112      	movs	r1, #18
    107a:	2058      	movs	r0, #88	; 0x58
    107c:	f7ff ff3a 	bl	ef4 <SPI0_send_1_byte>
	voltage = SPI0_send_2_byte(0xFFFF, ADC);
    1080:	2112      	movs	r1, #18
    1082:	4807      	ldr	r0, [pc, #28]	; (10a0 <adc_read_voltage+0x54>)
    1084:	f7ff fef2 	bl	e6c <SPI0_send_2_byte>
	FIO1SET |= 1 << ADC;
    1088:	682b      	ldr	r3, [r5, #0]
    108a:	431c      	orrs	r4, r3
    108c:	602c      	str	r4, [r5, #0]

	return voltage;

}
    108e:	bc70      	pop	{r4, r5, r6}
    1090:	bc02      	pop	{r1}
    1092:	4708      	bx	r1
    1094:	3fffc03c 	.word	0x3fffc03c
    1098:	3fffc038 	.word	0x3fffc038
    109c:	00001001 	.word	0x00001001
    10a0:	0000ffff 	.word	0x0000ffff

000010a4 <read_volt>:
		}
	}
	VICVectAddr = 0;
}
void read_volt(void)
{
    10a4:	b510      	push	{r4, lr}
		volts = adc_read_voltage();
    10a6:	f7ff ffd1 	bl	104c <adc_read_voltage>
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    10aa:	2480      	movs	r4, #128	; 0x80
    10ac:	4a0b      	ldr	r2, [pc, #44]	; (10dc <read_volt+0x38>)
		volts = adc_read_voltage();
    10ae:	4b0c      	ldr	r3, [pc, #48]	; (10e0 <read_volt+0x3c>)
    10b0:	8018      	strh	r0, [r3, #0]
		FIO1CLR |= 1 << ADC;
    10b2:	6813      	ldr	r3, [r2, #0]
    10b4:	02e4      	lsls	r4, r4, #11
    10b6:	4323      	orrs	r3, r4
    10b8:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    10ba:	2112      	movs	r1, #18
    10bc:	2010      	movs	r0, #16
    10be:	f7ff ff19 	bl	ef4 <SPI0_send_1_byte>
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
    10c2:	2080      	movs	r0, #128	; 0x80
    10c4:	2112      	movs	r1, #18
    10c6:	0140      	lsls	r0, r0, #5
    10c8:	f7ff fed0 	bl	e6c <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    10cc:	4b05      	ldr	r3, [pc, #20]	; (10e4 <read_volt+0x40>)
    10ce:	681a      	ldr	r2, [r3, #0]
    10d0:	4314      	orrs	r4, r2
    10d2:	601c      	str	r4, [r3, #0]
}
    10d4:	bc10      	pop	{r4}
    10d6:	bc01      	pop	{r0}
    10d8:	4700      	bx	r0
    10da:	46c0      	nop			; (mov r8, r8)
    10dc:	3fffc03c 	.word	0x3fffc03c
    10e0:	400006c2 	.word	0x400006c2
    10e4:	3fffc038 	.word	0x3fffc038

000010e8 <read_curr>:
void read_curr(void){
    10e8:	b510      	push	{r4, lr}
			curr = adc_read_current();
    10ea:	f7ff ff83 	bl	ff4 <adc_read_current>
		
		/* Need to select proper channel */
		FIO1CLR |= 1 << ADC;
    10ee:	2480      	movs	r4, #128	; 0x80
    10f0:	4a0a      	ldr	r2, [pc, #40]	; (111c <read_curr+0x34>)
			curr = adc_read_current();
    10f2:	4b0b      	ldr	r3, [pc, #44]	; (1120 <read_curr+0x38>)
    10f4:	8018      	strh	r0, [r3, #0]
		FIO1CLR |= 1 << ADC;
    10f6:	6813      	ldr	r3, [r2, #0]
    10f8:	02e4      	lsls	r4, r4, #11
    10fa:	4323      	orrs	r3, r4
    10fc:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    10fe:	2112      	movs	r1, #18
    1100:	2010      	movs	r0, #16
    1102:	f7ff fef7 	bl	ef4 <SPI0_send_1_byte>
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
    1106:	2112      	movs	r1, #18
    1108:	4806      	ldr	r0, [pc, #24]	; (1124 <read_curr+0x3c>)
    110a:	f7ff feaf 	bl	e6c <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    110e:	4b06      	ldr	r3, [pc, #24]	; (1128 <read_curr+0x40>)
    1110:	681a      	ldr	r2, [r3, #0]
    1112:	4314      	orrs	r4, r2
    1114:	601c      	str	r4, [r3, #0]
}
    1116:	bc10      	pop	{r4}
    1118:	bc01      	pop	{r0}
    111a:	4700      	bx	r0
    111c:	3fffc03c 	.word	0x3fffc03c
    1120:	400006c0 	.word	0x400006c0
    1124:	00001001 	.word	0x00001001
    1128:	3fffc038 	.word	0x3fffc038

0000112c <timer0_set_freq>:
void timer0_set_freq(uint8_t hz){
	T0TCR = 0;	/* Disable tim0 */
    112c:	2200      	movs	r2, #0
    112e:	4b05      	ldr	r3, [pc, #20]	; (1144 <timer0_set_freq+0x18>)
    1130:	601a      	str	r2, [r3, #0]
    1132:	4b05      	ldr	r3, [pc, #20]	; (1148 <timer0_set_freq+0x1c>)
	if (hz == 100)
    1134:	2864      	cmp	r0, #100	; 0x64
    1136:	d103      	bne.n	1140 <timer0_set_freq+0x14>
	{
		T0MR0 = 28800;	/* Top value (100 Hz) */
    1138:	22e1      	movs	r2, #225	; 0xe1
    113a:	01d2      	lsls	r2, r2, #7
	}else{
		T0MR0 = 72000;	/* Top value (40 Hz) */
    113c:	601a      	str	r2, [r3, #0]
	}
}
    113e:	4770      	bx	lr
		T0MR0 = 72000;	/* Top value (40 Hz) */
    1140:	4a02      	ldr	r2, [pc, #8]	; (114c <timer0_set_freq+0x20>)
    1142:	e7fb      	b.n	113c <timer0_set_freq+0x10>
    1144:	e0004004 	.word	0xe0004004
    1148:	e0004018 	.word	0xe0004018
    114c:	00011940 	.word	0x00011940

00001150 <timer0_init>:

		}
}
void timer0_init(void)
{
	PCONP |= (1 << 1);	/* Power on tim0 */
    1150:	2302      	movs	r3, #2
    1152:	4a0f      	ldr	r2, [pc, #60]	; (1190 <timer0_init+0x40>)
    1154:	6811      	ldr	r1, [r2, #0]
    1156:	430b      	orrs	r3, r1
{
    1158:	b510      	push	{r4, lr}
	PCONP |= (1 << 1);	/* Power on tim0 */
    115a:	6013      	str	r3, [r2, #0]
	T0TCR = 0;	/* Disable tim0 */
    115c:	2300      	movs	r3, #0

	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    115e:	2101      	movs	r1, #1
	T0TCR = 0;	/* Disable tim0 */
    1160:	4a0c      	ldr	r2, [pc, #48]	; (1194 <timer0_init+0x44>)
    1162:	6013      	str	r3, [r2, #0]
	T0IR = (1 << 0);	/* Channel 0 match interrupt */
    1164:	4a0c      	ldr	r2, [pc, #48]	; (1198 <timer0_init+0x48>)
    1166:	6011      	str	r1, [r2, #0]
	T0MCR = 3;
    1168:	4a0c      	ldr	r2, [pc, #48]	; (119c <timer0_init+0x4c>)
    116a:	3102      	adds	r1, #2
    116c:	6011      	str	r1, [r2, #0]
	T0CTCR = 0;
    116e:	4a0c      	ldr	r2, [pc, #48]	; (11a0 <timer0_init+0x50>)
    1170:	6013      	str	r3, [r2, #0]
	T0PR = 25;	/* Prescaler */
    1172:	2219      	movs	r2, #25
    1174:	4b0b      	ldr	r3, [pc, #44]	; (11a4 <timer0_init+0x54>)
    1176:	601a      	str	r2, [r3, #0]
	T0MR0 = 72000;	/* Top value (5 Hz) */
    1178:	4a0b      	ldr	r2, [pc, #44]	; (11a8 <timer0_init+0x58>)
    117a:	4b0c      	ldr	r3, [pc, #48]	; (11ac <timer0_init+0x5c>)
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    117c:	490c      	ldr	r1, [pc, #48]	; (11b0 <timer0_init+0x60>)
	T0MR0 = 72000;	/* Top value (5 Hz) */
    117e:	601a      	str	r2, [r3, #0]
	RegisterIrq(TIMER0_IRQn, (void *)Isr_TIM0, PRI_LOWEST);
    1180:	2004      	movs	r0, #4
    1182:	220f      	movs	r2, #15
    1184:	f7ff fb32 	bl	7ec <RegisterIrq>
}
    1188:	bc10      	pop	{r4}
    118a:	bc01      	pop	{r0}
    118c:	4700      	bx	r0
    118e:	46c0      	nop			; (mov r8, r8)
    1190:	e01fc0c4 	.word	0xe01fc0c4
    1194:	e0004004 	.word	0xe0004004
    1198:	e0004000 	.word	0xe0004000
    119c:	e0004014 	.word	0xe0004014
    11a0:	e0004070 	.word	0xe0004070
    11a4:	e000400c 	.word	0xe000400c
    11a8:	00011940 	.word	0x00011940
    11ac:	e0004018 	.word	0xe0004018
    11b0:	000013d9 	.word	0x000013d9

000011b4 <timer0_start>:

void timer0_start(void)
{
	T0TCR |= 1;
    11b4:	2301      	movs	r3, #1
    11b6:	4a06      	ldr	r2, [pc, #24]	; (11d0 <timer0_start+0x1c>)
{
    11b8:	b510      	push	{r4, lr}
	T0TCR |= 1;
    11ba:	6811      	ldr	r1, [r2, #0]
    11bc:	430b      	orrs	r3, r1
    11be:	6013      	str	r3, [r2, #0]
	gpio_set(OP_AMP_PORT, OP_AMP_PIN);
    11c0:	210d      	movs	r1, #13
    11c2:	2002      	movs	r0, #2
    11c4:	f7ff fa6e 	bl	6a4 <gpio_set>
}
    11c8:	bc10      	pop	{r4}
    11ca:	bc01      	pop	{r0}
    11cc:	4700      	bx	r0
    11ce:	46c0      	nop			; (mov r8, r8)
    11d0:	e0004004 	.word	0xe0004004

000011d4 <timer0_stop>:

void timer0_stop(void)
{
	T0TCR &= ~1;
    11d4:	2101      	movs	r1, #1
    11d6:	4a06      	ldr	r2, [pc, #24]	; (11f0 <timer0_stop+0x1c>)
{
    11d8:	b510      	push	{r4, lr}
	T0TCR &= ~1;
    11da:	6813      	ldr	r3, [r2, #0]
    11dc:	438b      	bics	r3, r1
    11de:	6013      	str	r3, [r2, #0]
	gpio_clear(OP_AMP_PORT, OP_AMP_PIN);
    11e0:	310c      	adds	r1, #12
    11e2:	2002      	movs	r0, #2
    11e4:	f7ff fa7a 	bl	6dc <gpio_clear>
}
    11e8:	bc10      	pop	{r4}
    11ea:	bc01      	pop	{r0}
    11ec:	4700      	bx	r0
    11ee:	46c0      	nop			; (mov r8, r8)
    11f0:	e0004004 	.word	0xe0004004

000011f4 <ftoa>:
	}
	strcat(str, decimal);
}
*/
void ftoa(float num, char *str)
{
    11f4:	b570      	push	{r4, r5, r6, lr}
    11f6:	b086      	sub	sp, #24
    11f8:	000c      	movs	r4, r1
    11fa:	1c05      	adds	r5, r0, #0
    int intpart = num;
    11fc:	f001 fe04 	bl	2e08 <____aeabi_f2iz_from_thumb>
    int intdecimal;
    int i;
    float decimal_part;
    char decimal[20];

    memset(str, 0x0, 20);
    1200:	2100      	movs	r1, #0
    int intpart = num;
    1202:	0006      	movs	r6, r0
    memset(str, 0x0, 20);
    1204:	2214      	movs	r2, #20
    1206:	0020      	movs	r0, r4
    1208:	f000 f9a2 	bl	1550 <memset>
    if (num > (-1) && num < (0))
    120c:	4922      	ldr	r1, [pc, #136]	; (1298 <ftoa+0xa4>)
    120e:	1c28      	adds	r0, r5, #0
    1210:	f001 fdf2 	bl	2df8 <____aeabi_fcmpgt_from_thumb>
    1214:	2800      	cmp	r0, #0
    1216:	d035      	beq.n	1284 <ftoa+0x90>
    1218:	2100      	movs	r1, #0
    121a:	1c28      	adds	r0, r5, #0
    121c:	f001 fe20 	bl	2e60 <____aeabi_fcmplt_from_thumb>
    1220:	2800      	cmp	r0, #0
    1222:	d02f      	beq.n	1284 <ftoa+0x90>
    {
        strcat(str, "-");
    1224:	491d      	ldr	r1, [pc, #116]	; (129c <ftoa+0xa8>)
    1226:	0020      	movs	r0, r4
    1228:	f000 f9e0 	bl	15ec <strcat>
        itoa(num, str+1, 10);
    122c:	220a      	movs	r2, #10
    122e:	1c61      	adds	r1, r4, #1
    }else{
        itoa(num, str, 10);
    1230:	0030      	movs	r0, r6
    1232:	f000 f987 	bl	1544 <itoa>
    }
    strcat(str, ".");
    1236:	491a      	ldr	r1, [pc, #104]	; (12a0 <ftoa+0xac>)
    1238:	0020      	movs	r0, r4
    123a:	f000 f9d7 	bl	15ec <strcat>

    decimal_part = num - intpart;
    123e:	0030      	movs	r0, r6
    1240:	f001 fe0a 	bl	2e58 <____aeabi_i2f_from_thumb>
    1244:	1c01      	adds	r1, r0, #0
    1246:	1c28      	adds	r0, r5, #0
    1248:	f001 fde6 	bl	2e18 <____aeabi_fsub_from_thumb>
    intdecimal = decimal_part * 1000000;
    124c:	4915      	ldr	r1, [pc, #84]	; (12a4 <ftoa+0xb0>)
    124e:	f001 fe1d 	bl	2e8c <____aeabi_fmul_from_thumb>
    1252:	f001 fdd9 	bl	2e08 <____aeabi_f2iz_from_thumb>

    if(intdecimal < 0)
    {
        intdecimal = -intdecimal;
    }
    itoa(intdecimal, decimal, 10);
    1256:	17c3      	asrs	r3, r0, #31
    1258:	18c0      	adds	r0, r0, r3
    125a:	4058      	eors	r0, r3
    125c:	220a      	movs	r2, #10
    125e:	a901      	add	r1, sp, #4
    1260:	f000 f970 	bl	1544 <itoa>
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    1264:	2500      	movs	r5, #0
    1266:	2606      	movs	r6, #6
    1268:	a801      	add	r0, sp, #4
    126a:	f000 f9ef 	bl	164c <strlen>
    126e:	1a30      	subs	r0, r6, r0
    1270:	42a8      	cmp	r0, r5
    1272:	d80a      	bhi.n	128a <ftoa+0x96>
    {
        strcat(str, "0");
    }
    strcat(str, decimal);
    1274:	a901      	add	r1, sp, #4
    1276:	0020      	movs	r0, r4
    1278:	f000 f9b8 	bl	15ec <strcat>
}
    127c:	b006      	add	sp, #24
    127e:	bc70      	pop	{r4, r5, r6}
    1280:	bc01      	pop	{r0}
    1282:	4700      	bx	r0
        itoa(num, str, 10);
    1284:	220a      	movs	r2, #10
    1286:	0021      	movs	r1, r4
    1288:	e7d2      	b.n	1230 <ftoa+0x3c>
        strcat(str, "0");
    128a:	4907      	ldr	r1, [pc, #28]	; (12a8 <ftoa+0xb4>)
    128c:	0020      	movs	r0, r4
    128e:	f000 f9ad 	bl	15ec <strcat>
    for(i =0;i < (PRECISION - strlen(decimal));i++)
    1292:	3501      	adds	r5, #1
    1294:	e7e8      	b.n	1268 <ftoa+0x74>
    1296:	46c0      	nop			; (mov r8, r8)
    1298:	bf800000 	.word	0xbf800000
    129c:	00002fbd 	.word	0x00002fbd
    12a0:	00002fbf 	.word	0x00002fbf
    12a4:	49742400 	.word	0x49742400
    12a8:	00002fc1 	.word	0x00002fc1

000012ac <send_results>:
void send_results(void){
    12ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (native == 1)
    12ae:	4b3a      	ldr	r3, [pc, #232]	; (1398 <send_results+0xec>)
    12b0:	781d      	ldrb	r5, [r3, #0]
void send_results(void){
    12b2:	b0e5      	sub	sp, #404	; 0x194
    12b4:	4c39      	ldr	r4, [pc, #228]	; (139c <send_results+0xf0>)
    12b6:	4f3a      	ldr	r7, [pc, #232]	; (13a0 <send_results+0xf4>)
	if (native == 1)
    12b8:	2d01      	cmp	r5, #1
    12ba:	d13a      	bne.n	1332 <send_results+0x86>
			UART0_send("\n\nVoltage, V  : ",16 );
    12bc:	4839      	ldr	r0, [pc, #228]	; (13a4 <send_results+0xf8>)
    12be:	2110      	movs	r1, #16
    12c0:	f7ff fb96 	bl	9f0 <UART0_send>
			if (volts < 10000)
    12c4:	4e38      	ldr	r6, [pc, #224]	; (13a8 <send_results+0xfc>)
    12c6:	8820      	ldrh	r0, [r4, #0]
	uint8_t num = 5;
    12c8:	2405      	movs	r4, #5
			if (volts < 10000)
    12ca:	42b0      	cmp	r0, r6
    12cc:	d80b      	bhi.n	12e6 <send_results+0x3a>
			if (volts < 1000)
    12ce:	4b37      	ldr	r3, [pc, #220]	; (13ac <send_results+0x100>)
				num = 4;
    12d0:	3c01      	subs	r4, #1
			if (volts < 1000)
    12d2:	4298      	cmp	r0, r3
    12d4:	d807      	bhi.n	12e6 <send_results+0x3a>
				num = 3;
    12d6:	3c01      	subs	r4, #1
			if (volts < 100)
    12d8:	2863      	cmp	r0, #99	; 0x63
    12da:	d804      	bhi.n	12e6 <send_results+0x3a>
				num = 1;
    12dc:	3406      	adds	r4, #6
    12de:	4284      	cmp	r4, r0
    12e0:	41a4      	sbcs	r4, r4
    12e2:	4264      	negs	r4, r4
    12e4:	3401      	adds	r4, #1
			UART0_send(itoa(volts, volt_ascii,10), num);
    12e6:	220a      	movs	r2, #10
    12e8:	4669      	mov	r1, sp
    12ea:	f000 f92b 	bl	1544 <itoa>
    12ee:	0421      	lsls	r1, r4, #16
    12f0:	0c09      	lsrs	r1, r1, #16
    12f2:	f7ff fb7d 	bl	9f0 <UART0_send>
			UART0_send("\nCurrent, mkA: ",15 );
    12f6:	482e      	ldr	r0, [pc, #184]	; (13b0 <send_results+0x104>)
    12f8:	210f      	movs	r1, #15
    12fa:	f7ff fb79 	bl	9f0 <UART0_send>
			if (curr < 10000)
    12fe:	8838      	ldrh	r0, [r7, #0]
    1300:	42b0      	cmp	r0, r6
    1302:	d80a      	bhi.n	131a <send_results+0x6e>
			if (curr < 1000)
    1304:	4b29      	ldr	r3, [pc, #164]	; (13ac <send_results+0x100>)
				num = 4;
    1306:	2404      	movs	r4, #4
			if (curr < 1000)
    1308:	4298      	cmp	r0, r3
    130a:	d806      	bhi.n	131a <send_results+0x6e>
				num = 3;
    130c:	3c01      	subs	r4, #1
			if (curr < 100)
    130e:	2863      	cmp	r0, #99	; 0x63
    1310:	d803      	bhi.n	131a <send_results+0x6e>
				num = 2;
    1312:	3c01      	subs	r4, #1
			if (curr < 10)
    1314:	2809      	cmp	r0, #9
    1316:	d800      	bhi.n	131a <send_results+0x6e>
				num = 1;
    1318:	002c      	movs	r4, r5
			UART0_send(itoa(curr, curr_ascii,10), num);
    131a:	a932      	add	r1, sp, #200	; 0xc8
    131c:	220a      	movs	r2, #10
    131e:	f000 f911 	bl	1544 <itoa>
    1322:	0421      	lsls	r1, r4, #16
    1324:	0c09      	lsrs	r1, r1, #16
			UART0_send("\n", 1);
    1326:	f7ff fb63 	bl	9f0 <UART0_send>
}
    132a:	b065      	add	sp, #404	; 0x194
    132c:	bcf0      	pop	{r4, r5, r6, r7}
    132e:	bc01      	pop	{r0}
    1330:	4700      	bx	r0
			fvolts = (volts - 9211)/1065.2;
    1332:	8820      	ldrh	r0, [r4, #0]
    1334:	4b1f      	ldr	r3, [pc, #124]	; (13b4 <send_results+0x108>)
    1336:	18c0      	adds	r0, r0, r3
    1338:	f001 fd5a 	bl	2df0 <____aeabi_i2d_from_thumb>
    133c:	4a1e      	ldr	r2, [pc, #120]	; (13b8 <send_results+0x10c>)
    133e:	4b1f      	ldr	r3, [pc, #124]	; (13bc <send_results+0x110>)
    1340:	f001 fd5e 	bl	2e00 <____aeabi_ddiv_from_thumb>
    1344:	f001 fd90 	bl	2e68 <____aeabi_d2f_from_thumb>
			fcurr = (curr - 6037)/0.7927817;
    1348:	4b1d      	ldr	r3, [pc, #116]	; (13c0 <send_results+0x114>)
			fvolts = (volts - 9211)/1065.2;
    134a:	1c04      	adds	r4, r0, #0
			fcurr = (curr - 6037)/0.7927817;
    134c:	8838      	ldrh	r0, [r7, #0]
    134e:	18c0      	adds	r0, r0, r3
    1350:	f001 fd4e 	bl	2df0 <____aeabi_i2d_from_thumb>
    1354:	4a1b      	ldr	r2, [pc, #108]	; (13c4 <send_results+0x118>)
    1356:	4b1c      	ldr	r3, [pc, #112]	; (13c8 <send_results+0x11c>)
    1358:	f001 fd52 	bl	2e00 <____aeabi_ddiv_from_thumb>
    135c:	f001 fd84 	bl	2e68 <____aeabi_d2f_from_thumb>
			UART0_send("V", 1);
    1360:	2101      	movs	r1, #1
			fcurr = (curr - 6037)/0.7927817;
    1362:	1c05      	adds	r5, r0, #0
			UART0_send("V", 1);
    1364:	4819      	ldr	r0, [pc, #100]	; (13cc <send_results+0x120>)
    1366:	f7ff fb43 	bl	9f0 <UART0_send>
			ftoa(fvolts, volt_ascii);
    136a:	4669      	mov	r1, sp
    136c:	1c20      	adds	r0, r4, #0
    136e:	f7ff ff41 	bl	11f4 <ftoa>
			UART0_send(volt_ascii, 6);
    1372:	2106      	movs	r1, #6
    1374:	4668      	mov	r0, sp
    1376:	f7ff fb3b 	bl	9f0 <UART0_send>
			UART0_send("C", 1);
    137a:	2101      	movs	r1, #1
    137c:	4814      	ldr	r0, [pc, #80]	; (13d0 <send_results+0x124>)
    137e:	f7ff fb37 	bl	9f0 <UART0_send>
			ftoa(fcurr, curr_ascii);
    1382:	a932      	add	r1, sp, #200	; 0xc8
    1384:	1c28      	adds	r0, r5, #0
    1386:	f7ff ff35 	bl	11f4 <ftoa>
			UART0_send(curr_ascii, 6);
    138a:	2106      	movs	r1, #6
    138c:	a832      	add	r0, sp, #200	; 0xc8
    138e:	f7ff fb2f 	bl	9f0 <UART0_send>
			UART0_send("\n", 1);
    1392:	2101      	movs	r1, #1
    1394:	480f      	ldr	r0, [pc, #60]	; (13d4 <send_results+0x128>)
    1396:	e7c6      	b.n	1326 <send_results+0x7a>
    1398:	400005a1 	.word	0x400005a1
    139c:	400006c2 	.word	0x400006c2
    13a0:	400006c0 	.word	0x400006c0
    13a4:	00002fc3 	.word	0x00002fc3
    13a8:	0000270f 	.word	0x0000270f
    13ac:	000003e7 	.word	0x000003e7
    13b0:	00002fd4 	.word	0x00002fd4
    13b4:	ffffdc05 	.word	0xffffdc05
    13b8:	cccccccd 	.word	0xcccccccd
    13bc:	4090a4cc 	.word	0x4090a4cc
    13c0:	ffffe86b 	.word	0xffffe86b
    13c4:	ba4bc0c9 	.word	0xba4bc0c9
    13c8:	3fe95e77 	.word	0x3fe95e77
    13cc:	00002fe4 	.word	0x00002fe4
    13d0:	00002fe6 	.word	0x00002fe6
    13d4:	00002fa5 	.word	0x00002fa5

000013d8 <Isr_TIM0>:
	T0IR = 0x3F;
    13d8:	223f      	movs	r2, #63	; 0x3f
{
    13da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	T0IR = 0x3F;
    13dc:	4b3c      	ldr	r3, [pc, #240]	; (14d0 <Isr_TIM0+0xf8>)
    13de:	601a      	str	r2, [r3, #0]
	FIO1PIN |= (1 << ADC_SCLK);
    13e0:	2380      	movs	r3, #128	; 0x80
    13e2:	4a3c      	ldr	r2, [pc, #240]	; (14d4 <Isr_TIM0+0xfc>)
    13e4:	6811      	ldr	r1, [r2, #0]
    13e6:	035b      	lsls	r3, r3, #13
    13e8:	430b      	orrs	r3, r1
    13ea:	6013      	str	r3, [r2, #0]
	if (getflag == 0){
    13ec:	4f3a      	ldr	r7, [pc, #232]	; (14d8 <Isr_TIM0+0x100>)
    13ee:	783d      	ldrb	r5, [r7, #0]
    13f0:	2d00      	cmp	r5, #0
    13f2:	d115      	bne.n	1420 <Isr_TIM0+0x48>
		if (channel == 1)
    13f4:	4c39      	ldr	r4, [pc, #228]	; (14dc <Isr_TIM0+0x104>)
    13f6:	7823      	ldrb	r3, [r4, #0]
    13f8:	2b01      	cmp	r3, #1
    13fa:	d10a      	bne.n	1412 <Isr_TIM0+0x3a>
			read_volt();
    13fc:	f7ff fe52 	bl	10a4 <read_volt>
			channel = 0;
    1400:	7025      	strb	r5, [r4, #0]
			send_results();
    1402:	f7ff ff53 	bl	12ac <send_results>
	VICVectAddr = 0;
    1406:	2200      	movs	r2, #0
    1408:	4b35      	ldr	r3, [pc, #212]	; (14e0 <Isr_TIM0+0x108>)
    140a:	601a      	str	r2, [r3, #0]
}
    140c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    140e:	bc01      	pop	{r0}
    1410:	4700      	bx	r0
		}else if (channel == 0)
    1412:	2b00      	cmp	r3, #0
    1414:	d1f7      	bne.n	1406 <Isr_TIM0+0x2e>
			read_curr();
    1416:	f7ff fe67 	bl	10e8 <read_curr>
			channel = 1;
    141a:	2301      	movs	r3, #1
    141c:	7023      	strb	r3, [r4, #0]
    141e:	e7f2      	b.n	1406 <Isr_TIM0+0x2e>
		if (conv_number == 11) {
    1420:	4e30      	ldr	r6, [pc, #192]	; (14e4 <Isr_TIM0+0x10c>)
    1422:	7834      	ldrb	r4, [r6, #0]
    1424:	2c0b      	cmp	r4, #11
    1426:	d119      	bne.n	145c <Isr_TIM0+0x84>
			conv_number--;
    1428:	230a      	movs	r3, #10
    142a:	7033      	strb	r3, [r6, #0]
			volts = adc_read_voltage();
    142c:	f7ff fe0e 	bl	104c <adc_read_voltage>
		FIO1CLR |= 1 << ADC;
    1430:	2480      	movs	r4, #128	; 0x80
    1432:	4a2d      	ldr	r2, [pc, #180]	; (14e8 <Isr_TIM0+0x110>)
			volts = adc_read_voltage();
    1434:	4b2d      	ldr	r3, [pc, #180]	; (14ec <Isr_TIM0+0x114>)
    1436:	8018      	strh	r0, [r3, #0]
		FIO1CLR |= 1 << ADC;
    1438:	6813      	ldr	r3, [r2, #0]
    143a:	02e4      	lsls	r4, r4, #11
    143c:	4323      	orrs	r3, r4
    143e:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    1440:	2112      	movs	r1, #18
    1442:	2010      	movs	r0, #16
    1444:	f7ff fd56 	bl	ef4 <SPI0_send_1_byte>
		SPI0_send_2_byte(CONF_REG_VAL, ADC);
    1448:	2080      	movs	r0, #128	; 0x80
    144a:	2112      	movs	r1, #18
    144c:	0140      	lsls	r0, r0, #5
    144e:	f7ff fd0d 	bl	e6c <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    1452:	4b27      	ldr	r3, [pc, #156]	; (14f0 <Isr_TIM0+0x118>)
    1454:	681a      	ldr	r2, [r3, #0]
    1456:	4314      	orrs	r4, r2
    1458:	601c      	str	r4, [r3, #0]
    145a:	e7d4      	b.n	1406 <Isr_TIM0+0x2e>
    145c:	4d25      	ldr	r5, [pc, #148]	; (14f4 <Isr_TIM0+0x11c>)
		}else if (conv_number != 0){
    145e:	2c00      	cmp	r4, #0
    1460:	d00c      	beq.n	147c <Isr_TIM0+0xa4>
			conv_number--;
    1462:	3c01      	subs	r4, #1
    1464:	7034      	strb	r4, [r6, #0]
			curr_big += adc_read_current();
    1466:	f7ff fdc5 	bl	ff4 <adc_read_current>
    146a:	2300      	movs	r3, #0
    146c:	0002      	movs	r2, r0
    146e:	6828      	ldr	r0, [r5, #0]
    1470:	6869      	ldr	r1, [r5, #4]
    1472:	1812      	adds	r2, r2, r0
    1474:	414b      	adcs	r3, r1
    1476:	602a      	str	r2, [r5, #0]
    1478:	606b      	str	r3, [r5, #4]
    147a:	e7c4      	b.n	1406 <Isr_TIM0+0x2e>
			curr = (curr_big/10);
    147c:	6828      	ldr	r0, [r5, #0]
    147e:	6869      	ldr	r1, [r5, #4]
    1480:	220a      	movs	r2, #10
    1482:	2300      	movs	r3, #0
    1484:	f001 fcc4 	bl	2e10 <____aeabi_uldivmod_from_thumb>
    1488:	4b1b      	ldr	r3, [pc, #108]	; (14f8 <Isr_TIM0+0x120>)
    148a:	8018      	strh	r0, [r3, #0]
			conv_number = 11;
    148c:	230b      	movs	r3, #11
    148e:	7033      	strb	r3, [r6, #0]
		FIO1CLR |= 1 << ADC;
    1490:	2680      	movs	r6, #128	; 0x80
    1492:	4a15      	ldr	r2, [pc, #84]	; (14e8 <Isr_TIM0+0x110>)
			getflag = 0;
    1494:	703c      	strb	r4, [r7, #0]
		FIO1CLR |= 1 << ADC;
    1496:	6813      	ldr	r3, [r2, #0]
    1498:	02f6      	lsls	r6, r6, #11
    149a:	4333      	orrs	r3, r6
    149c:	6013      	str	r3, [r2, #0]
		SPI0_send_1_byte(WRITE_CONF_REG, ADC);
    149e:	2112      	movs	r1, #18
    14a0:	2010      	movs	r0, #16
    14a2:	f7ff fd27 	bl	ef4 <SPI0_send_1_byte>
		SPI0_send_2_byte((CONF_REG_VAL | 1), ADC);
    14a6:	2112      	movs	r1, #18
    14a8:	4814      	ldr	r0, [pc, #80]	; (14fc <Isr_TIM0+0x124>)
    14aa:	f7ff fcdf 	bl	e6c <SPI0_send_2_byte>
		FIO1SET |= 1 << ADC;
    14ae:	4b10      	ldr	r3, [pc, #64]	; (14f0 <Isr_TIM0+0x118>)
    14b0:	681a      	ldr	r2, [r3, #0]
    14b2:	4316      	orrs	r6, r2
    14b4:	601e      	str	r6, [r3, #0]
		curr_big = 0;
    14b6:	2200      	movs	r2, #0
    14b8:	2300      	movs	r3, #0
    14ba:	602a      	str	r2, [r5, #0]
    14bc:	606b      	str	r3, [r5, #4]
		send_results();
    14be:	f7ff fef5 	bl	12ac <send_results>
		timer0_stop();
    14c2:	f7ff fe87 	bl	11d4 <timer0_stop>
		led_clear(LED1);
    14c6:	0020      	movs	r0, r4
    14c8:	f7ff f8e2 	bl	690 <led_clear>
    14cc:	e79b      	b.n	1406 <Isr_TIM0+0x2e>
    14ce:	46c0      	nop			; (mov r8, r8)
    14d0:	e0004000 	.word	0xe0004000
    14d4:	3fffc034 	.word	0x3fffc034
    14d8:	400005a0 	.word	0x400005a0
    14dc:	40000001 	.word	0x40000001
    14e0:	ffffff00 	.word	0xffffff00
    14e4:	40000000 	.word	0x40000000
    14e8:	3fffc03c 	.word	0x3fffc03c
    14ec:	400006c2 	.word	0x400006c2
    14f0:	3fffc038 	.word	0x3fffc038
    14f4:	400006b8 	.word	0x400006b8
    14f8:	400006c0 	.word	0x400006c0
    14fc:	00001001 	.word	0x00001001

00001500 <atoi>:
    1500:	b510      	push	{r4, lr}
    1502:	220a      	movs	r2, #10
    1504:	2100      	movs	r1, #0
    1506:	f000 f9df 	bl	18c8 <strtol>
    150a:	bc10      	pop	{r4}
    150c:	bc02      	pop	{r1}
    150e:	4708      	bx	r1

00001510 <__itoa>:
    1510:	1e93      	subs	r3, r2, #2
    1512:	b510      	push	{r4, lr}
    1514:	000c      	movs	r4, r1
    1516:	2b22      	cmp	r3, #34	; 0x22
    1518:	d810      	bhi.n	153c <__itoa+0x2c>
    151a:	2a0a      	cmp	r2, #10
    151c:	d10c      	bne.n	1538 <__itoa+0x28>
    151e:	2800      	cmp	r0, #0
    1520:	da0a      	bge.n	1538 <__itoa+0x28>
    1522:	232d      	movs	r3, #45	; 0x2d
    1524:	700b      	strb	r3, [r1, #0]
    1526:	2101      	movs	r1, #1
    1528:	4240      	negs	r0, r0
    152a:	1861      	adds	r1, r4, r1
    152c:	f000 f9e4 	bl	18f8 <__utoa>
    1530:	0020      	movs	r0, r4
    1532:	bc10      	pop	{r4}
    1534:	bc02      	pop	{r1}
    1536:	4708      	bx	r1
    1538:	2100      	movs	r1, #0
    153a:	e7f6      	b.n	152a <__itoa+0x1a>
    153c:	2300      	movs	r3, #0
    153e:	2000      	movs	r0, #0
    1540:	700b      	strb	r3, [r1, #0]
    1542:	e7f6      	b.n	1532 <__itoa+0x22>

00001544 <itoa>:
    1544:	b510      	push	{r4, lr}
    1546:	f7ff ffe3 	bl	1510 <__itoa>
    154a:	bc10      	pop	{r4}
    154c:	bc02      	pop	{r1}
    154e:	4708      	bx	r1

00001550 <memset>:
    1550:	b5f0      	push	{r4, r5, r6, r7, lr}
    1552:	0783      	lsls	r3, r0, #30
    1554:	d047      	beq.n	15e6 <memset+0x96>
    1556:	1e54      	subs	r4, r2, #1
    1558:	2a00      	cmp	r2, #0
    155a:	d041      	beq.n	15e0 <memset+0x90>
    155c:	060d      	lsls	r5, r1, #24
    155e:	0e2d      	lsrs	r5, r5, #24
    1560:	0002      	movs	r2, r0
    1562:	2603      	movs	r6, #3
    1564:	e002      	b.n	156c <memset+0x1c>
    1566:	001a      	movs	r2, r3
    1568:	3c01      	subs	r4, #1
    156a:	d339      	bcc.n	15e0 <memset+0x90>
    156c:	1c53      	adds	r3, r2, #1
    156e:	7015      	strb	r5, [r2, #0]
    1570:	4233      	tst	r3, r6
    1572:	d1f8      	bne.n	1566 <memset+0x16>
    1574:	2c03      	cmp	r4, #3
    1576:	d92a      	bls.n	15ce <memset+0x7e>
    1578:	22ff      	movs	r2, #255	; 0xff
    157a:	400a      	ands	r2, r1
    157c:	0215      	lsls	r5, r2, #8
    157e:	4315      	orrs	r5, r2
    1580:	042a      	lsls	r2, r5, #16
    1582:	4315      	orrs	r5, r2
    1584:	2c0f      	cmp	r4, #15
    1586:	d914      	bls.n	15b2 <memset+0x62>
    1588:	0027      	movs	r7, r4
    158a:	001a      	movs	r2, r3
    158c:	3f10      	subs	r7, #16
    158e:	093e      	lsrs	r6, r7, #4
    1590:	3601      	adds	r6, #1
    1592:	0136      	lsls	r6, r6, #4
    1594:	199e      	adds	r6, r3, r6
    1596:	6015      	str	r5, [r2, #0]
    1598:	6055      	str	r5, [r2, #4]
    159a:	6095      	str	r5, [r2, #8]
    159c:	60d5      	str	r5, [r2, #12]
    159e:	3210      	adds	r2, #16
    15a0:	4296      	cmp	r6, r2
    15a2:	d1f8      	bne.n	1596 <memset+0x46>
    15a4:	220f      	movs	r2, #15
    15a6:	4397      	bics	r7, r2
    15a8:	3710      	adds	r7, #16
    15aa:	19db      	adds	r3, r3, r7
    15ac:	4014      	ands	r4, r2
    15ae:	2c03      	cmp	r4, #3
    15b0:	d90d      	bls.n	15ce <memset+0x7e>
    15b2:	001a      	movs	r2, r3
    15b4:	1f27      	subs	r7, r4, #4
    15b6:	08be      	lsrs	r6, r7, #2
    15b8:	3601      	adds	r6, #1
    15ba:	00b6      	lsls	r6, r6, #2
    15bc:	199e      	adds	r6, r3, r6
    15be:	c220      	stmia	r2!, {r5}
    15c0:	42b2      	cmp	r2, r6
    15c2:	d1fc      	bne.n	15be <memset+0x6e>
    15c4:	2203      	movs	r2, #3
    15c6:	4397      	bics	r7, r2
    15c8:	3704      	adds	r7, #4
    15ca:	19db      	adds	r3, r3, r7
    15cc:	4014      	ands	r4, r2
    15ce:	2c00      	cmp	r4, #0
    15d0:	d006      	beq.n	15e0 <memset+0x90>
    15d2:	0609      	lsls	r1, r1, #24
    15d4:	191c      	adds	r4, r3, r4
    15d6:	0e09      	lsrs	r1, r1, #24
    15d8:	7019      	strb	r1, [r3, #0]
    15da:	3301      	adds	r3, #1
    15dc:	429c      	cmp	r4, r3
    15de:	d1fb      	bne.n	15d8 <memset+0x88>
    15e0:	bcf0      	pop	{r4, r5, r6, r7}
    15e2:	bc02      	pop	{r1}
    15e4:	4708      	bx	r1
    15e6:	0014      	movs	r4, r2
    15e8:	0003      	movs	r3, r0
    15ea:	e7c3      	b.n	1574 <memset+0x24>

000015ec <strcat>:
    15ec:	b570      	push	{r4, r5, r6, lr}
    15ee:	0005      	movs	r5, r0
    15f0:	0783      	lsls	r3, r0, #30
    15f2:	d116      	bne.n	1622 <strcat+0x36>
    15f4:	6802      	ldr	r2, [r0, #0]
    15f6:	4b0f      	ldr	r3, [pc, #60]	; (1634 <strcat+0x48>)
    15f8:	4c0f      	ldr	r4, [pc, #60]	; (1638 <strcat+0x4c>)
    15fa:	18d3      	adds	r3, r2, r3
    15fc:	4393      	bics	r3, r2
    15fe:	4223      	tst	r3, r4
    1600:	d10f      	bne.n	1622 <strcat+0x36>
    1602:	3004      	adds	r0, #4
    1604:	6802      	ldr	r2, [r0, #0]
    1606:	4b0b      	ldr	r3, [pc, #44]	; (1634 <strcat+0x48>)
    1608:	18d3      	adds	r3, r2, r3
    160a:	4393      	bics	r3, r2
    160c:	4223      	tst	r3, r4
    160e:	d108      	bne.n	1622 <strcat+0x36>
    1610:	3004      	adds	r0, #4
    1612:	6802      	ldr	r2, [r0, #0]
    1614:	4b07      	ldr	r3, [pc, #28]	; (1634 <strcat+0x48>)
    1616:	18d3      	adds	r3, r2, r3
    1618:	4393      	bics	r3, r2
    161a:	4223      	tst	r3, r4
    161c:	d0f1      	beq.n	1602 <strcat+0x16>
    161e:	e000      	b.n	1622 <strcat+0x36>
    1620:	3001      	adds	r0, #1
    1622:	7803      	ldrb	r3, [r0, #0]
    1624:	2b00      	cmp	r3, #0
    1626:	d1fb      	bne.n	1620 <strcat+0x34>
    1628:	f000 f808 	bl	163c <strcpy>
    162c:	0028      	movs	r0, r5
    162e:	bc70      	pop	{r4, r5, r6}
    1630:	bc02      	pop	{r1}
    1632:	4708      	bx	r1
    1634:	fefefeff 	.word	0xfefefeff
    1638:	80808080 	.word	0x80808080

0000163c <strcpy>:
    163c:	1c03      	adds	r3, r0, #0
    163e:	780a      	ldrb	r2, [r1, #0]
    1640:	3101      	adds	r1, #1
    1642:	701a      	strb	r2, [r3, #0]
    1644:	3301      	adds	r3, #1
    1646:	2a00      	cmp	r2, #0
    1648:	d1f9      	bne.n	163e <strcpy+0x2>
    164a:	4770      	bx	lr

0000164c <strlen>:
    164c:	b510      	push	{r4, lr}
    164e:	0783      	lsls	r3, r0, #30
    1650:	d027      	beq.n	16a2 <strlen+0x56>
    1652:	7803      	ldrb	r3, [r0, #0]
    1654:	2b00      	cmp	r3, #0
    1656:	d026      	beq.n	16a6 <strlen+0x5a>
    1658:	0003      	movs	r3, r0
    165a:	2103      	movs	r1, #3
    165c:	e002      	b.n	1664 <strlen+0x18>
    165e:	781a      	ldrb	r2, [r3, #0]
    1660:	2a00      	cmp	r2, #0
    1662:	d01c      	beq.n	169e <strlen+0x52>
    1664:	3301      	adds	r3, #1
    1666:	420b      	tst	r3, r1
    1668:	d1f9      	bne.n	165e <strlen+0x12>
    166a:	6819      	ldr	r1, [r3, #0]
    166c:	4a0f      	ldr	r2, [pc, #60]	; (16ac <strlen+0x60>)
    166e:	4c10      	ldr	r4, [pc, #64]	; (16b0 <strlen+0x64>)
    1670:	188a      	adds	r2, r1, r2
    1672:	438a      	bics	r2, r1
    1674:	4222      	tst	r2, r4
    1676:	d106      	bne.n	1686 <strlen+0x3a>
    1678:	3304      	adds	r3, #4
    167a:	6819      	ldr	r1, [r3, #0]
    167c:	4a0b      	ldr	r2, [pc, #44]	; (16ac <strlen+0x60>)
    167e:	188a      	adds	r2, r1, r2
    1680:	438a      	bics	r2, r1
    1682:	4222      	tst	r2, r4
    1684:	d0f8      	beq.n	1678 <strlen+0x2c>
    1686:	001a      	movs	r2, r3
    1688:	781b      	ldrb	r3, [r3, #0]
    168a:	2b00      	cmp	r3, #0
    168c:	d003      	beq.n	1696 <strlen+0x4a>
    168e:	3201      	adds	r2, #1
    1690:	7811      	ldrb	r1, [r2, #0]
    1692:	2900      	cmp	r1, #0
    1694:	d1fb      	bne.n	168e <strlen+0x42>
    1696:	1a10      	subs	r0, r2, r0
    1698:	bc10      	pop	{r4}
    169a:	bc02      	pop	{r1}
    169c:	4708      	bx	r1
    169e:	1a18      	subs	r0, r3, r0
    16a0:	e7fa      	b.n	1698 <strlen+0x4c>
    16a2:	0003      	movs	r3, r0
    16a4:	e7e1      	b.n	166a <strlen+0x1e>
    16a6:	2000      	movs	r0, #0
    16a8:	e7f6      	b.n	1698 <strlen+0x4c>
    16aa:	46c0      	nop			; (mov r8, r8)
    16ac:	fefefeff 	.word	0xfefefeff
    16b0:	80808080 	.word	0x80808080

000016b4 <strncmp>:
    16b4:	b530      	push	{r4, r5, lr}
    16b6:	2300      	movs	r3, #0
    16b8:	2a00      	cmp	r2, #0
    16ba:	d036      	beq.n	172a <strncmp+0x76>
    16bc:	0004      	movs	r4, r0
    16be:	430c      	orrs	r4, r1
    16c0:	07a4      	lsls	r4, r4, #30
    16c2:	d120      	bne.n	1706 <strncmp+0x52>
    16c4:	2a03      	cmp	r2, #3
    16c6:	d91e      	bls.n	1706 <strncmp+0x52>
    16c8:	6804      	ldr	r4, [r0, #0]
    16ca:	680d      	ldr	r5, [r1, #0]
    16cc:	42ac      	cmp	r4, r5
    16ce:	d11a      	bne.n	1706 <strncmp+0x52>
    16d0:	3a04      	subs	r2, #4
    16d2:	2a00      	cmp	r2, #0
    16d4:	d029      	beq.n	172a <strncmp+0x76>
    16d6:	4d1a      	ldr	r5, [pc, #104]	; (1740 <strncmp+0x8c>)
    16d8:	1965      	adds	r5, r4, r5
    16da:	43a5      	bics	r5, r4
    16dc:	002c      	movs	r4, r5
    16de:	4d19      	ldr	r5, [pc, #100]	; (1744 <strncmp+0x90>)
    16e0:	422c      	tst	r4, r5
    16e2:	d00c      	beq.n	16fe <strncmp+0x4a>
    16e4:	e021      	b.n	172a <strncmp+0x76>
    16e6:	6803      	ldr	r3, [r0, #0]
    16e8:	680c      	ldr	r4, [r1, #0]
    16ea:	42a3      	cmp	r3, r4
    16ec:	d10b      	bne.n	1706 <strncmp+0x52>
    16ee:	3a04      	subs	r2, #4
    16f0:	2a00      	cmp	r2, #0
    16f2:	d01e      	beq.n	1732 <strncmp+0x7e>
    16f4:	4c12      	ldr	r4, [pc, #72]	; (1740 <strncmp+0x8c>)
    16f6:	191c      	adds	r4, r3, r4
    16f8:	439c      	bics	r4, r3
    16fa:	422c      	tst	r4, r5
    16fc:	d119      	bne.n	1732 <strncmp+0x7e>
    16fe:	3004      	adds	r0, #4
    1700:	3104      	adds	r1, #4
    1702:	2a03      	cmp	r2, #3
    1704:	d8ef      	bhi.n	16e6 <strncmp+0x32>
    1706:	7804      	ldrb	r4, [r0, #0]
    1708:	780b      	ldrb	r3, [r1, #0]
    170a:	3a01      	subs	r2, #1
    170c:	42a3      	cmp	r3, r4
    170e:	d112      	bne.n	1736 <strncmp+0x82>
    1710:	2b00      	cmp	r3, #0
    1712:	d00e      	beq.n	1732 <strncmp+0x7e>
    1714:	2a00      	cmp	r2, #0
    1716:	d00c      	beq.n	1732 <strncmp+0x7e>
    1718:	3001      	adds	r0, #1
    171a:	3101      	adds	r1, #1
    171c:	7803      	ldrb	r3, [r0, #0]
    171e:	780c      	ldrb	r4, [r1, #0]
    1720:	3a01      	subs	r2, #1
    1722:	42a3      	cmp	r3, r4
    1724:	d0f4      	beq.n	1710 <strncmp+0x5c>
    1726:	0020      	movs	r0, r4
    1728:	1a1b      	subs	r3, r3, r0
    172a:	0018      	movs	r0, r3
    172c:	bc30      	pop	{r4, r5}
    172e:	bc02      	pop	{r1}
    1730:	4708      	bx	r1
    1732:	2300      	movs	r3, #0
    1734:	e7f9      	b.n	172a <strncmp+0x76>
    1736:	0018      	movs	r0, r3
    1738:	0023      	movs	r3, r4
    173a:	1a1b      	subs	r3, r3, r0
    173c:	e7f5      	b.n	172a <strncmp+0x76>
    173e:	46c0      	nop			; (mov r8, r8)
    1740:	fefefeff 	.word	0xfefefeff
    1744:	80808080 	.word	0x80808080

00001748 <_strtol_l.isra.0>:
    1748:	b5f0      	push	{r4, r5, r6, r7, lr}
    174a:	4645      	mov	r5, r8
    174c:	46de      	mov	lr, fp
    174e:	464e      	mov	r6, r9
    1750:	4657      	mov	r7, sl
    1752:	b5e0      	push	{r5, r6, r7, lr}
    1754:	001e      	movs	r6, r3
    1756:	2308      	movs	r3, #8
    1758:	b083      	sub	sp, #12
    175a:	9001      	str	r0, [sp, #4]
    175c:	9100      	str	r1, [sp, #0]
    175e:	4693      	mov	fp, r2
    1760:	000d      	movs	r5, r1
    1762:	4698      	mov	r8, r3
    1764:	e000      	b.n	1768 <_strtol_l.isra.0+0x20>
    1766:	003d      	movs	r5, r7
    1768:	980c      	ldr	r0, [sp, #48]	; 0x30
    176a:	782c      	ldrb	r4, [r5, #0]
    176c:	f000 f90c 	bl	1988 <__locale_ctype_ptr_l>
    1770:	4642      	mov	r2, r8
    1772:	1900      	adds	r0, r0, r4
    1774:	7843      	ldrb	r3, [r0, #1]
    1776:	1c6f      	adds	r7, r5, #1
    1778:	421a      	tst	r2, r3
    177a:	d1f4      	bne.n	1766 <_strtol_l.isra.0+0x1e>
    177c:	2c2d      	cmp	r4, #45	; 0x2d
    177e:	d05f      	beq.n	1840 <_strtol_l.isra.0+0xf8>
    1780:	2c2b      	cmp	r4, #43	; 0x2b
    1782:	d100      	bne.n	1786 <_strtol_l.isra.0+0x3e>
    1784:	e08e      	b.n	18a4 <_strtol_l.isra.0+0x15c>
    1786:	2310      	movs	r3, #16
    1788:	0032      	movs	r2, r6
    178a:	439a      	bics	r2, r3
    178c:	4691      	mov	r9, r2
    178e:	d100      	bne.n	1792 <_strtol_l.isra.0+0x4a>
    1790:	e078      	b.n	1884 <_strtol_l.isra.0+0x13c>
    1792:	2300      	movs	r3, #0
    1794:	4699      	mov	r9, r3
    1796:	4b4b      	ldr	r3, [pc, #300]	; (18c4 <_strtol_l.isra.0+0x17c>)
    1798:	46b0      	mov	r8, r6
    179a:	003d      	movs	r5, r7
    179c:	469a      	mov	sl, r3
    179e:	4641      	mov	r1, r8
    17a0:	4650      	mov	r0, sl
    17a2:	f001 fb47 	bl	2e34 <____aeabi_uidivmod_from_thumb>
    17a6:	4650      	mov	r0, sl
    17a8:	000f      	movs	r7, r1
    17aa:	4641      	mov	r1, r8
    17ac:	f001 fb38 	bl	2e20 <____aeabi_uidiv_from_thumb>
    17b0:	2300      	movs	r3, #0
    17b2:	0002      	movs	r2, r0
    17b4:	0021      	movs	r1, r4
    17b6:	2000      	movs	r0, #0
    17b8:	e012      	b.n	17e0 <_strtol_l.isra.0+0x98>
    17ba:	3937      	subs	r1, #55	; 0x37
    17bc:	000c      	movs	r4, r1
    17be:	42b4      	cmp	r4, r6
    17c0:	da1d      	bge.n	17fe <_strtol_l.isra.0+0xb6>
    17c2:	2b00      	cmp	r3, #0
    17c4:	db08      	blt.n	17d8 <_strtol_l.isra.0+0x90>
    17c6:	4282      	cmp	r2, r0
    17c8:	d306      	bcc.n	17d8 <_strtol_l.isra.0+0x90>
    17ca:	d12e      	bne.n	182a <_strtol_l.isra.0+0xe2>
    17cc:	2301      	movs	r3, #1
    17ce:	42a7      	cmp	r7, r4
    17d0:	db00      	blt.n	17d4 <_strtol_l.isra.0+0x8c>
    17d2:	2300      	movs	r3, #0
    17d4:	061b      	lsls	r3, r3, #24
    17d6:	d028      	beq.n	182a <_strtol_l.isra.0+0xe2>
    17d8:	2301      	movs	r3, #1
    17da:	425b      	negs	r3, r3
    17dc:	7829      	ldrb	r1, [r5, #0]
    17de:	3501      	adds	r5, #1
    17e0:	000c      	movs	r4, r1
    17e2:	3c30      	subs	r4, #48	; 0x30
    17e4:	2c09      	cmp	r4, #9
    17e6:	d9ea      	bls.n	17be <_strtol_l.isra.0+0x76>
    17e8:	3c11      	subs	r4, #17
    17ea:	2c19      	cmp	r4, #25
    17ec:	d9e5      	bls.n	17ba <_strtol_l.isra.0+0x72>
    17ee:	000c      	movs	r4, r1
    17f0:	3c61      	subs	r4, #97	; 0x61
    17f2:	2c19      	cmp	r4, #25
    17f4:	d803      	bhi.n	17fe <_strtol_l.isra.0+0xb6>
    17f6:	3957      	subs	r1, #87	; 0x57
    17f8:	000c      	movs	r4, r1
    17fa:	42b4      	cmp	r4, r6
    17fc:	dbe1      	blt.n	17c2 <_strtol_l.isra.0+0x7a>
    17fe:	1c5a      	adds	r2, r3, #1
    1800:	d038      	beq.n	1874 <_strtol_l.isra.0+0x12c>
    1802:	464a      	mov	r2, r9
    1804:	2a00      	cmp	r2, #0
    1806:	d115      	bne.n	1834 <_strtol_l.isra.0+0xec>
    1808:	465a      	mov	r2, fp
    180a:	2a00      	cmp	r2, #0
    180c:	d004      	beq.n	1818 <_strtol_l.isra.0+0xd0>
    180e:	9a00      	ldr	r2, [sp, #0]
    1810:	2b00      	cmp	r3, #0
    1812:	d111      	bne.n	1838 <_strtol_l.isra.0+0xf0>
    1814:	465b      	mov	r3, fp
    1816:	601a      	str	r2, [r3, #0]
    1818:	b003      	add	sp, #12
    181a:	bc3c      	pop	{r2, r3, r4, r5}
    181c:	4690      	mov	r8, r2
    181e:	4699      	mov	r9, r3
    1820:	46a2      	mov	sl, r4
    1822:	46ab      	mov	fp, r5
    1824:	bcf0      	pop	{r4, r5, r6, r7}
    1826:	bc02      	pop	{r1}
    1828:	4708      	bx	r1
    182a:	4643      	mov	r3, r8
    182c:	4343      	muls	r3, r0
    182e:	18e0      	adds	r0, r4, r3
    1830:	2301      	movs	r3, #1
    1832:	e7d3      	b.n	17dc <_strtol_l.isra.0+0x94>
    1834:	4240      	negs	r0, r0
    1836:	e7e7      	b.n	1808 <_strtol_l.isra.0+0xc0>
    1838:	4682      	mov	sl, r0
    183a:	1e6a      	subs	r2, r5, #1
    183c:	4650      	mov	r0, sl
    183e:	e7e9      	b.n	1814 <_strtol_l.isra.0+0xcc>
    1840:	4273      	negs	r3, r6
    1842:	4173      	adcs	r3, r6
    1844:	0031      	movs	r1, r6
    1846:	2210      	movs	r2, #16
    1848:	4391      	bics	r1, r2
    184a:	000a      	movs	r2, r1
    184c:	2101      	movs	r1, #1
    184e:	3502      	adds	r5, #2
    1850:	783c      	ldrb	r4, [r7, #0]
    1852:	4689      	mov	r9, r1
    1854:	2a00      	cmp	r2, #0
    1856:	d12e      	bne.n	18b6 <_strtol_l.isra.0+0x16e>
    1858:	2c30      	cmp	r4, #48	; 0x30
    185a:	d018      	beq.n	188e <_strtol_l.isra.0+0x146>
    185c:	2b00      	cmp	r3, #0
    185e:	d02f      	beq.n	18c0 <_strtol_l.isra.0+0x178>
    1860:	230a      	movs	r3, #10
    1862:	260a      	movs	r6, #10
    1864:	4698      	mov	r8, r3
    1866:	464b      	mov	r3, r9
    1868:	1e5a      	subs	r2, r3, #1
    186a:	4193      	sbcs	r3, r2
    186c:	4a15      	ldr	r2, [pc, #84]	; (18c4 <_strtol_l.isra.0+0x17c>)
    186e:	4692      	mov	sl, r2
    1870:	449a      	add	sl, r3
    1872:	e794      	b.n	179e <_strtol_l.isra.0+0x56>
    1874:	9a01      	ldr	r2, [sp, #4]
    1876:	3323      	adds	r3, #35	; 0x23
    1878:	6013      	str	r3, [r2, #0]
    187a:	465b      	mov	r3, fp
    187c:	4650      	mov	r0, sl
    187e:	2b00      	cmp	r3, #0
    1880:	d1db      	bne.n	183a <_strtol_l.isra.0+0xf2>
    1882:	e7c9      	b.n	1818 <_strtol_l.isra.0+0xd0>
    1884:	4273      	negs	r3, r6
    1886:	4173      	adcs	r3, r6
    1888:	003d      	movs	r5, r7
    188a:	2c30      	cmp	r4, #48	; 0x30
    188c:	d1e6      	bne.n	185c <_strtol_l.isra.0+0x114>
    188e:	2120      	movs	r1, #32
    1890:	782a      	ldrb	r2, [r5, #0]
    1892:	438a      	bics	r2, r1
    1894:	2a58      	cmp	r2, #88	; 0x58
    1896:	d108      	bne.n	18aa <_strtol_l.isra.0+0x162>
    1898:	2310      	movs	r3, #16
    189a:	786c      	ldrb	r4, [r5, #1]
    189c:	4698      	mov	r8, r3
    189e:	3502      	adds	r5, #2
    18a0:	2610      	movs	r6, #16
    18a2:	e7e0      	b.n	1866 <_strtol_l.isra.0+0x11e>
    18a4:	783c      	ldrb	r4, [r7, #0]
    18a6:	1caf      	adds	r7, r5, #2
    18a8:	e76d      	b.n	1786 <_strtol_l.isra.0+0x3e>
    18aa:	2b00      	cmp	r3, #0
    18ac:	d008      	beq.n	18c0 <_strtol_l.isra.0+0x178>
    18ae:	2308      	movs	r3, #8
    18b0:	2608      	movs	r6, #8
    18b2:	4698      	mov	r8, r3
    18b4:	e7d7      	b.n	1866 <_strtol_l.isra.0+0x11e>
    18b6:	2380      	movs	r3, #128	; 0x80
    18b8:	061b      	lsls	r3, r3, #24
    18ba:	46b0      	mov	r8, r6
    18bc:	469a      	mov	sl, r3
    18be:	e76e      	b.n	179e <_strtol_l.isra.0+0x56>
    18c0:	46b0      	mov	r8, r6
    18c2:	e7d0      	b.n	1866 <_strtol_l.isra.0+0x11e>
    18c4:	7fffffff 	.word	0x7fffffff

000018c8 <strtol>:
    18c8:	0013      	movs	r3, r2
    18ca:	4a09      	ldr	r2, [pc, #36]	; (18f0 <strtol+0x28>)
    18cc:	b530      	push	{r4, r5, lr}
    18ce:	0005      	movs	r5, r0
    18d0:	6810      	ldr	r0, [r2, #0]
    18d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
    18d4:	b083      	sub	sp, #12
    18d6:	2c00      	cmp	r4, #0
    18d8:	d008      	beq.n	18ec <strtol+0x24>
    18da:	000a      	movs	r2, r1
    18dc:	9400      	str	r4, [sp, #0]
    18de:	0029      	movs	r1, r5
    18e0:	f7ff ff32 	bl	1748 <_strtol_l.isra.0>
    18e4:	b003      	add	sp, #12
    18e6:	bc30      	pop	{r4, r5}
    18e8:	bc02      	pop	{r1}
    18ea:	4708      	bx	r1
    18ec:	4c01      	ldr	r4, [pc, #4]	; (18f4 <strtol+0x2c>)
    18ee:	e7f4      	b.n	18da <strtol+0x12>
    18f0:	40000004 	.word	0x40000004
    18f4:	40000430 	.word	0x40000430

000018f8 <__utoa>:
    18f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    18fa:	4646      	mov	r6, r8
    18fc:	46d6      	mov	lr, sl
    18fe:	464f      	mov	r7, r9
    1900:	b5c0      	push	{r6, r7, lr}
    1902:	b08a      	sub	sp, #40	; 0x28
    1904:	4690      	mov	r8, r2
    1906:	466a      	mov	r2, sp
    1908:	4b1e      	ldr	r3, [pc, #120]	; (1984 <__utoa+0x8c>)
    190a:	000d      	movs	r5, r1
    190c:	0006      	movs	r6, r0
    190e:	cb13      	ldmia	r3!, {r0, r1, r4}
    1910:	c213      	stmia	r2!, {r0, r1, r4}
    1912:	cb13      	ldmia	r3!, {r0, r1, r4}
    1914:	c213      	stmia	r2!, {r0, r1, r4}
    1916:	cb13      	ldmia	r3!, {r0, r1, r4}
    1918:	c213      	stmia	r2!, {r0, r1, r4}
    191a:	781b      	ldrb	r3, [r3, #0]
    191c:	7013      	strb	r3, [r2, #0]
    191e:	4643      	mov	r3, r8
    1920:	3b02      	subs	r3, #2
    1922:	46ea      	mov	sl, sp
    1924:	002f      	movs	r7, r5
    1926:	2400      	movs	r4, #0
    1928:	2b22      	cmp	r3, #34	; 0x22
    192a:	d901      	bls.n	1930 <__utoa+0x38>
    192c:	e026      	b.n	197c <__utoa+0x84>
    192e:	464c      	mov	r4, r9
    1930:	1c63      	adds	r3, r4, #1
    1932:	0030      	movs	r0, r6
    1934:	4641      	mov	r1, r8
    1936:	4699      	mov	r9, r3
    1938:	f001 fa7c 	bl	2e34 <____aeabi_uidivmod_from_thumb>
    193c:	4653      	mov	r3, sl
    193e:	5c5b      	ldrb	r3, [r3, r1]
    1940:	0030      	movs	r0, r6
    1942:	703b      	strb	r3, [r7, #0]
    1944:	4641      	mov	r1, r8
    1946:	f001 fa6b 	bl	2e20 <____aeabi_uidiv_from_thumb>
    194a:	3701      	adds	r7, #1
    194c:	1e06      	subs	r6, r0, #0
    194e:	d1ee      	bne.n	192e <__utoa+0x36>
    1950:	464b      	mov	r3, r9
    1952:	54e8      	strb	r0, [r5, r3]
    1954:	2300      	movs	r3, #0
    1956:	2c00      	cmp	r4, #0
    1958:	d007      	beq.n	196a <__utoa+0x72>
    195a:	5cea      	ldrb	r2, [r5, r3]
    195c:	5d29      	ldrb	r1, [r5, r4]
    195e:	54e9      	strb	r1, [r5, r3]
    1960:	552a      	strb	r2, [r5, r4]
    1962:	3301      	adds	r3, #1
    1964:	3c01      	subs	r4, #1
    1966:	42a3      	cmp	r3, r4
    1968:	dbf7      	blt.n	195a <__utoa+0x62>
    196a:	0028      	movs	r0, r5
    196c:	b00a      	add	sp, #40	; 0x28
    196e:	bc1c      	pop	{r2, r3, r4}
    1970:	4690      	mov	r8, r2
    1972:	4699      	mov	r9, r3
    1974:	46a2      	mov	sl, r4
    1976:	bcf0      	pop	{r4, r5, r6, r7}
    1978:	bc02      	pop	{r1}
    197a:	4708      	bx	r1
    197c:	702c      	strb	r4, [r5, #0]
    197e:	2000      	movs	r0, #0
    1980:	e7f4      	b.n	196c <__utoa+0x74>
    1982:	46c0      	nop			; (mov r8, r8)
    1984:	00002fe8 	.word	0x00002fe8

00001988 <__locale_ctype_ptr_l>:
    1988:	23ec      	movs	r3, #236	; 0xec
    198a:	58c0      	ldr	r0, [r0, r3]
    198c:	4770      	bx	lr
    198e:	46c0      	nop			; (mov r8, r8)

00001990 <__ascii_mbtowc>:
    1990:	b082      	sub	sp, #8
    1992:	2900      	cmp	r1, #0
    1994:	d00a      	beq.n	19ac <__ascii_mbtowc+0x1c>
    1996:	2a00      	cmp	r2, #0
    1998:	d00b      	beq.n	19b2 <__ascii_mbtowc+0x22>
    199a:	2b00      	cmp	r3, #0
    199c:	d00b      	beq.n	19b6 <__ascii_mbtowc+0x26>
    199e:	7813      	ldrb	r3, [r2, #0]
    19a0:	600b      	str	r3, [r1, #0]
    19a2:	7810      	ldrb	r0, [r2, #0]
    19a4:	1e43      	subs	r3, r0, #1
    19a6:	4198      	sbcs	r0, r3
    19a8:	b002      	add	sp, #8
    19aa:	4770      	bx	lr
    19ac:	a901      	add	r1, sp, #4
    19ae:	2a00      	cmp	r2, #0
    19b0:	d1f3      	bne.n	199a <__ascii_mbtowc+0xa>
    19b2:	2000      	movs	r0, #0
    19b4:	e7f8      	b.n	19a8 <__ascii_mbtowc+0x18>
    19b6:	2002      	movs	r0, #2
    19b8:	4240      	negs	r0, r0
    19ba:	e7f5      	b.n	19a8 <__ascii_mbtowc+0x18>

000019bc <__ascii_wctomb>:
    19bc:	2900      	cmp	r1, #0
    19be:	d004      	beq.n	19ca <__ascii_wctomb+0xe>
    19c0:	2aff      	cmp	r2, #255	; 0xff
    19c2:	d804      	bhi.n	19ce <__ascii_wctomb+0x12>
    19c4:	2001      	movs	r0, #1
    19c6:	700a      	strb	r2, [r1, #0]
    19c8:	4770      	bx	lr
    19ca:	2000      	movs	r0, #0
    19cc:	e7fc      	b.n	19c8 <__ascii_wctomb+0xc>
    19ce:	238a      	movs	r3, #138	; 0x8a
    19d0:	6003      	str	r3, [r0, #0]
    19d2:	2001      	movs	r0, #1
    19d4:	4240      	negs	r0, r0
    19d6:	e7f7      	b.n	19c8 <__ascii_wctomb+0xc>

000019d8 <__udivsi3>:
    19d8:	e2512001 	subs	r2, r1, #1
    19dc:	012fff1e 	bxeq	lr
    19e0:	3a000036 	bcc	1ac0 <__udivsi3+0xe8>
    19e4:	e1500001 	cmp	r0, r1
    19e8:	9a000022 	bls	1a78 <__udivsi3+0xa0>
    19ec:	e1110002 	tst	r1, r2
    19f0:	0a000023 	beq	1a84 <__udivsi3+0xac>
    19f4:	e311020e 	tst	r1, #-536870912	; 0xe0000000
    19f8:	01a01181 	lsleq	r1, r1, #3
    19fc:	03a03008 	moveq	r3, #8
    1a00:	13a03001 	movne	r3, #1
    1a04:	e3510201 	cmp	r1, #268435456	; 0x10000000
    1a08:	31510000 	cmpcc	r1, r0
    1a0c:	31a01201 	lslcc	r1, r1, #4
    1a10:	31a03203 	lslcc	r3, r3, #4
    1a14:	3afffffa 	bcc	1a04 <__udivsi3+0x2c>
    1a18:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    1a1c:	31510000 	cmpcc	r1, r0
    1a20:	31a01081 	lslcc	r1, r1, #1
    1a24:	31a03083 	lslcc	r3, r3, #1
    1a28:	3afffffa 	bcc	1a18 <__udivsi3+0x40>
    1a2c:	e3a02000 	mov	r2, #0
    1a30:	e1500001 	cmp	r0, r1
    1a34:	20400001 	subcs	r0, r0, r1
    1a38:	21822003 	orrcs	r2, r2, r3
    1a3c:	e15000a1 	cmp	r0, r1, lsr #1
    1a40:	204000a1 	subcs	r0, r0, r1, lsr #1
    1a44:	218220a3 	orrcs	r2, r2, r3, lsr #1
    1a48:	e1500121 	cmp	r0, r1, lsr #2
    1a4c:	20400121 	subcs	r0, r0, r1, lsr #2
    1a50:	21822123 	orrcs	r2, r2, r3, lsr #2
    1a54:	e15001a1 	cmp	r0, r1, lsr #3
    1a58:	204001a1 	subcs	r0, r0, r1, lsr #3
    1a5c:	218221a3 	orrcs	r2, r2, r3, lsr #3
    1a60:	e3500000 	cmp	r0, #0
    1a64:	11b03223 	lsrsne	r3, r3, #4
    1a68:	11a01221 	lsrne	r1, r1, #4
    1a6c:	1affffef 	bne	1a30 <__udivsi3+0x58>
    1a70:	e1a00002 	mov	r0, r2
    1a74:	e12fff1e 	bx	lr
    1a78:	03a00001 	moveq	r0, #1
    1a7c:	13a00000 	movne	r0, #0
    1a80:	e12fff1e 	bx	lr
    1a84:	e3510801 	cmp	r1, #65536	; 0x10000
    1a88:	21a01821 	lsrcs	r1, r1, #16
    1a8c:	23a02010 	movcs	r2, #16
    1a90:	33a02000 	movcc	r2, #0
    1a94:	e3510c01 	cmp	r1, #256	; 0x100
    1a98:	21a01421 	lsrcs	r1, r1, #8
    1a9c:	22822008 	addcs	r2, r2, #8
    1aa0:	e3510010 	cmp	r1, #16
    1aa4:	21a01221 	lsrcs	r1, r1, #4
    1aa8:	22822004 	addcs	r2, r2, #4
    1aac:	e3510004 	cmp	r1, #4
    1ab0:	82822003 	addhi	r2, r2, #3
    1ab4:	908220a1 	addls	r2, r2, r1, lsr #1
    1ab8:	e1a00230 	lsr	r0, r0, r2
    1abc:	e12fff1e 	bx	lr
    1ac0:	e12fff1f 	bx	pc
    1ac4:	e1a00000 	nop			; (mov r0, r0)
    1ac8:	e3500000 	cmp	r0, #0
    1acc:	13e00000 	mvnne	r0, #0
    1ad0:	ea0004dd 	b	2e4c <____aeabi_idiv0_from_arm>

00001ad4 <__aeabi_uidivmod>:
    1ad4:	e3510000 	cmp	r1, #0
    1ad8:	0afffff8 	beq	1ac0 <__udivsi3+0xe8>
    1adc:	e92d4003 	push	{r0, r1, lr}
    1ae0:	ebffffbc 	bl	19d8 <__udivsi3>
    1ae4:	e8bd4006 	pop	{r1, r2, lr}
    1ae8:	e0030092 	mul	r3, r2, r0
    1aec:	e0411003 	sub	r1, r1, r3
    1af0:	e12fff1e 	bx	lr

00001af4 <__aeabi_idiv0>:
    1af4:	4770      	bx	lr
    1af6:	46c0      	nop			; (mov r8, r8)

00001af8 <__aeabi_drsub>:
    1af8:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000
    1afc:	ea000000 	b	1b04 <__adddf3>

00001b00 <__aeabi_dsub>:
    1b00:	e2233102 	eor	r3, r3, #-2147483648	; 0x80000000

00001b04 <__adddf3>:
    1b04:	e92d4030 	push	{r4, r5, lr}
    1b08:	e1a04081 	lsl	r4, r1, #1
    1b0c:	e1a05083 	lsl	r5, r3, #1
    1b10:	e1340005 	teq	r4, r5
    1b14:	01300002 	teqeq	r0, r2
    1b18:	1194c000 	orrsne	ip, r4, r0
    1b1c:	1195c002 	orrsne	ip, r5, r2
    1b20:	11f0cac4 	mvnsne	ip, r4, asr #21
    1b24:	11f0cac5 	mvnsne	ip, r5, asr #21
    1b28:	0a00008c 	beq	1d60 <__adddf3+0x25c>
    1b2c:	e1a04aa4 	lsr	r4, r4, #21
    1b30:	e0745aa5 	rsbs	r5, r4, r5, lsr #21
    1b34:	b2655000 	rsblt	r5, r5, #0
    1b38:	da000006 	ble	1b58 <__adddf3+0x54>
    1b3c:	e0844005 	add	r4, r4, r5
    1b40:	e0202002 	eor	r2, r0, r2
    1b44:	e0213003 	eor	r3, r1, r3
    1b48:	e0220000 	eor	r0, r2, r0
    1b4c:	e0231001 	eor	r1, r3, r1
    1b50:	e0202002 	eor	r2, r0, r2
    1b54:	e0213003 	eor	r3, r1, r3
    1b58:	e3550036 	cmp	r5, #54	; 0x36
    1b5c:	88bd4030 	pophi	{r4, r5, lr}
    1b60:	812fff1e 	bxhi	lr
    1b64:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    1b68:	e1a01601 	lsl	r1, r1, #12
    1b6c:	e3a0c601 	mov	ip, #1048576	; 0x100000
    1b70:	e18c1621 	orr	r1, ip, r1, lsr #12
    1b74:	0a000001 	beq	1b80 <__adddf3+0x7c>
    1b78:	e2700000 	rsbs	r0, r0, #0
    1b7c:	e2e11000 	rsc	r1, r1, #0
    1b80:	e3130102 	tst	r3, #-2147483648	; 0x80000000
    1b84:	e1a03603 	lsl	r3, r3, #12
    1b88:	e18c3623 	orr	r3, ip, r3, lsr #12
    1b8c:	0a000001 	beq	1b98 <__adddf3+0x94>
    1b90:	e2722000 	rsbs	r2, r2, #0
    1b94:	e2e33000 	rsc	r3, r3, #0
    1b98:	e1340005 	teq	r4, r5
    1b9c:	0a000069 	beq	1d48 <__adddf3+0x244>
    1ba0:	e2444001 	sub	r4, r4, #1
    1ba4:	e275e020 	rsbs	lr, r5, #32
    1ba8:	ba000005 	blt	1bc4 <__adddf3+0xc0>
    1bac:	e1a0ce12 	lsl	ip, r2, lr
    1bb0:	e0900532 	adds	r0, r0, r2, lsr r5
    1bb4:	e2a11000 	adc	r1, r1, #0
    1bb8:	e0900e13 	adds	r0, r0, r3, lsl lr
    1bbc:	e0b11553 	adcs	r1, r1, r3, asr r5
    1bc0:	ea000006 	b	1be0 <__adddf3+0xdc>
    1bc4:	e2455020 	sub	r5, r5, #32
    1bc8:	e28ee020 	add	lr, lr, #32
    1bcc:	e3520001 	cmp	r2, #1
    1bd0:	e1a0ce13 	lsl	ip, r3, lr
    1bd4:	238cc002 	orrcs	ip, ip, #2
    1bd8:	e0900553 	adds	r0, r0, r3, asr r5
    1bdc:	e0b11fc3 	adcs	r1, r1, r3, asr #31
    1be0:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1be4:	5a000002 	bpl	1bf4 <__adddf3+0xf0>
    1be8:	e27cc000 	rsbs	ip, ip, #0
    1bec:	e2f00000 	rscs	r0, r0, #0
    1bf0:	e2e11000 	rsc	r1, r1, #0
    1bf4:	e3510601 	cmp	r1, #1048576	; 0x100000
    1bf8:	3a00000f 	bcc	1c3c <__adddf3+0x138>
    1bfc:	e3510602 	cmp	r1, #2097152	; 0x200000
    1c00:	3a000006 	bcc	1c20 <__adddf3+0x11c>
    1c04:	e1b010a1 	lsrs	r1, r1, #1
    1c08:	e1b00060 	rrxs	r0, r0
    1c0c:	e1a0c06c 	rrx	ip, ip
    1c10:	e2844001 	add	r4, r4, #1
    1c14:	e1a02a84 	lsl	r2, r4, #21
    1c18:	e3720501 	cmn	r2, #4194304	; 0x400000
    1c1c:	2a00006b 	bcs	1dd0 <__adddf3+0x2cc>
    1c20:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    1c24:	01b0c0a0 	lsrseq	ip, r0, #1
    1c28:	e2b00000 	adcs	r0, r0, #0
    1c2c:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1c30:	e1811005 	orr	r1, r1, r5
    1c34:	e8bd4030 	pop	{r4, r5, lr}
    1c38:	e12fff1e 	bx	lr
    1c3c:	e1b0c08c 	lsls	ip, ip, #1
    1c40:	e0b00000 	adcs	r0, r0, r0
    1c44:	e0a11001 	adc	r1, r1, r1
    1c48:	e3110601 	tst	r1, #1048576	; 0x100000
    1c4c:	e2444001 	sub	r4, r4, #1
    1c50:	1afffff2 	bne	1c20 <__adddf3+0x11c>
    1c54:	e3310000 	teq	r1, #0
    1c58:	13a03014 	movne	r3, #20
    1c5c:	03a03034 	moveq	r3, #52	; 0x34
    1c60:	01a01000 	moveq	r1, r0
    1c64:	03a00000 	moveq	r0, #0
    1c68:	e1a02001 	mov	r2, r1
    1c6c:	e3520801 	cmp	r2, #65536	; 0x10000
    1c70:	21a02822 	lsrcs	r2, r2, #16
    1c74:	22433010 	subcs	r3, r3, #16
    1c78:	e3520c01 	cmp	r2, #256	; 0x100
    1c7c:	21a02422 	lsrcs	r2, r2, #8
    1c80:	22433008 	subcs	r3, r3, #8
    1c84:	e3520010 	cmp	r2, #16
    1c88:	21a02222 	lsrcs	r2, r2, #4
    1c8c:	22433004 	subcs	r3, r3, #4
    1c90:	e3520004 	cmp	r2, #4
    1c94:	22433002 	subcs	r3, r3, #2
    1c98:	304330a2 	subcc	r3, r3, r2, lsr #1
    1c9c:	e04331a2 	sub	r3, r3, r2, lsr #3
    1ca0:	e2532020 	subs	r2, r3, #32
    1ca4:	aa000007 	bge	1cc8 <__adddf3+0x1c4>
    1ca8:	e292200c 	adds	r2, r2, #12
    1cac:	da000004 	ble	1cc4 <__adddf3+0x1c0>
    1cb0:	e282c014 	add	ip, r2, #20
    1cb4:	e262200c 	rsb	r2, r2, #12
    1cb8:	e1a00c11 	lsl	r0, r1, ip
    1cbc:	e1a01231 	lsr	r1, r1, r2
    1cc0:	ea000004 	b	1cd8 <__adddf3+0x1d4>
    1cc4:	e2822014 	add	r2, r2, #20
    1cc8:	d262c020 	rsble	ip, r2, #32
    1ccc:	e1a01211 	lsl	r1, r1, r2
    1cd0:	d1811c30 	orrle	r1, r1, r0, lsr ip
    1cd4:	d1a00210 	lslle	r0, r0, r2
    1cd8:	e0544003 	subs	r4, r4, r3
    1cdc:	a0811a04 	addge	r1, r1, r4, lsl #20
    1ce0:	a1811005 	orrge	r1, r1, r5
    1ce4:	a8bd4030 	popge	{r4, r5, lr}
    1ce8:	a12fff1e 	bxge	lr
    1cec:	e1e04004 	mvn	r4, r4
    1cf0:	e254401f 	subs	r4, r4, #31
    1cf4:	aa00000f 	bge	1d38 <__adddf3+0x234>
    1cf8:	e294400c 	adds	r4, r4, #12
    1cfc:	ca000006 	bgt	1d1c <__adddf3+0x218>
    1d00:	e2844014 	add	r4, r4, #20
    1d04:	e2642020 	rsb	r2, r4, #32
    1d08:	e1a00430 	lsr	r0, r0, r4
    1d0c:	e1800211 	orr	r0, r0, r1, lsl r2
    1d10:	e1851431 	orr	r1, r5, r1, lsr r4
    1d14:	e8bd4030 	pop	{r4, r5, lr}
    1d18:	e12fff1e 	bx	lr
    1d1c:	e264400c 	rsb	r4, r4, #12
    1d20:	e2642020 	rsb	r2, r4, #32
    1d24:	e1a00230 	lsr	r0, r0, r2
    1d28:	e1800411 	orr	r0, r0, r1, lsl r4
    1d2c:	e1a01005 	mov	r1, r5
    1d30:	e8bd4030 	pop	{r4, r5, lr}
    1d34:	e12fff1e 	bx	lr
    1d38:	e1a00431 	lsr	r0, r1, r4
    1d3c:	e1a01005 	mov	r1, r5
    1d40:	e8bd4030 	pop	{r4, r5, lr}
    1d44:	e12fff1e 	bx	lr
    1d48:	e3340000 	teq	r4, #0
    1d4c:	e2233601 	eor	r3, r3, #1048576	; 0x100000
    1d50:	02211601 	eoreq	r1, r1, #1048576	; 0x100000
    1d54:	02844001 	addeq	r4, r4, #1
    1d58:	12455001 	subne	r5, r5, #1
    1d5c:	eaffff8f 	b	1ba0 <__adddf3+0x9c>
    1d60:	e1f0cac4 	mvns	ip, r4, asr #21
    1d64:	11f0cac5 	mvnsne	ip, r5, asr #21
    1d68:	0a00001d 	beq	1de4 <__adddf3+0x2e0>
    1d6c:	e1340005 	teq	r4, r5
    1d70:	01300002 	teqeq	r0, r2
    1d74:	0a000004 	beq	1d8c <__adddf3+0x288>
    1d78:	e194c000 	orrs	ip, r4, r0
    1d7c:	01a01003 	moveq	r1, r3
    1d80:	01a00002 	moveq	r0, r2
    1d84:	e8bd4030 	pop	{r4, r5, lr}
    1d88:	e12fff1e 	bx	lr
    1d8c:	e1310003 	teq	r1, r3
    1d90:	13a01000 	movne	r1, #0
    1d94:	13a00000 	movne	r0, #0
    1d98:	18bd4030 	popne	{r4, r5, lr}
    1d9c:	112fff1e 	bxne	lr
    1da0:	e1b0caa4 	lsrs	ip, r4, #21
    1da4:	1a000004 	bne	1dbc <__adddf3+0x2b8>
    1da8:	e1b00080 	lsls	r0, r0, #1
    1dac:	e0b11001 	adcs	r1, r1, r1
    1db0:	23811102 	orrcs	r1, r1, #-2147483648	; 0x80000000
    1db4:	e8bd4030 	pop	{r4, r5, lr}
    1db8:	e12fff1e 	bx	lr
    1dbc:	e2944501 	adds	r4, r4, #4194304	; 0x400000
    1dc0:	32811601 	addcc	r1, r1, #1048576	; 0x100000
    1dc4:	38bd4030 	popcc	{r4, r5, lr}
    1dc8:	312fff1e 	bxcc	lr
    1dcc:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1dd0:	e385147f 	orr	r1, r5, #2130706432	; 0x7f000000
    1dd4:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    1dd8:	e3a00000 	mov	r0, #0
    1ddc:	e8bd4030 	pop	{r4, r5, lr}
    1de0:	e12fff1e 	bx	lr
    1de4:	e1f0cac4 	mvns	ip, r4, asr #21
    1de8:	11a01003 	movne	r1, r3
    1dec:	11a00002 	movne	r0, r2
    1df0:	01f0cac5 	mvnseq	ip, r5, asr #21
    1df4:	11a03001 	movne	r3, r1
    1df8:	11a02000 	movne	r2, r0
    1dfc:	e1904601 	orrs	r4, r0, r1, lsl #12
    1e00:	01925603 	orrseq	r5, r2, r3, lsl #12
    1e04:	01310003 	teqeq	r1, r3
    1e08:	13811702 	orrne	r1, r1, #524288	; 0x80000
    1e0c:	e8bd4030 	pop	{r4, r5, lr}
    1e10:	e12fff1e 	bx	lr

00001e14 <__aeabi_ui2d>:
    1e14:	e3300000 	teq	r0, #0
    1e18:	03a01000 	moveq	r1, #0
    1e1c:	012fff1e 	bxeq	lr
    1e20:	e92d4030 	push	{r4, r5, lr}
    1e24:	e3a04b01 	mov	r4, #1024	; 0x400
    1e28:	e2844032 	add	r4, r4, #50	; 0x32
    1e2c:	e3a05000 	mov	r5, #0
    1e30:	e3a01000 	mov	r1, #0
    1e34:	eaffff86 	b	1c54 <__adddf3+0x150>

00001e38 <__aeabi_i2d>:
    1e38:	e3300000 	teq	r0, #0
    1e3c:	03a01000 	moveq	r1, #0
    1e40:	012fff1e 	bxeq	lr
    1e44:	e92d4030 	push	{r4, r5, lr}
    1e48:	e3a04b01 	mov	r4, #1024	; 0x400
    1e4c:	e2844032 	add	r4, r4, #50	; 0x32
    1e50:	e2105102 	ands	r5, r0, #-2147483648	; 0x80000000
    1e54:	42600000 	rsbmi	r0, r0, #0
    1e58:	e3a01000 	mov	r1, #0
    1e5c:	eaffff7c 	b	1c54 <__adddf3+0x150>

00001e60 <__aeabi_f2d>:
    1e60:	e1b02080 	lsls	r2, r0, #1
    1e64:	e1a011c2 	asr	r1, r2, #3
    1e68:	e1a01061 	rrx	r1, r1
    1e6c:	e1a00e02 	lsl	r0, r2, #28
    1e70:	121234ff 	andsne	r3, r2, #-16777216	; 0xff000000
    1e74:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1e78:	1221130e 	eorne	r1, r1, #939524096	; 0x38000000
    1e7c:	112fff1e 	bxne	lr
    1e80:	e3320000 	teq	r2, #0
    1e84:	133304ff 	teqne	r3, #-16777216	; 0xff000000
    1e88:	012fff1e 	bxeq	lr
    1e8c:	e92d4030 	push	{r4, r5, lr}
    1e90:	e3a04d0e 	mov	r4, #896	; 0x380
    1e94:	e2015102 	and	r5, r1, #-2147483648	; 0x80000000
    1e98:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    1e9c:	eaffff6c 	b	1c54 <__adddf3+0x150>

00001ea0 <__aeabi_ul2d>:
    1ea0:	e1902001 	orrs	r2, r0, r1
    1ea4:	012fff1e 	bxeq	lr
    1ea8:	e92d4030 	push	{r4, r5, lr}
    1eac:	e3a05000 	mov	r5, #0
    1eb0:	ea000006 	b	1ed0 <__aeabi_l2d+0x1c>

00001eb4 <__aeabi_l2d>:
    1eb4:	e1902001 	orrs	r2, r0, r1
    1eb8:	012fff1e 	bxeq	lr
    1ebc:	e92d4030 	push	{r4, r5, lr}
    1ec0:	e2115102 	ands	r5, r1, #-2147483648	; 0x80000000
    1ec4:	5a000001 	bpl	1ed0 <__aeabi_l2d+0x1c>
    1ec8:	e2700000 	rsbs	r0, r0, #0
    1ecc:	e2e11000 	rsc	r1, r1, #0
    1ed0:	e3a04b01 	mov	r4, #1024	; 0x400
    1ed4:	e2844032 	add	r4, r4, #50	; 0x32
    1ed8:	e1b0cb21 	lsrs	ip, r1, #22
    1edc:	0affff44 	beq	1bf4 <__adddf3+0xf0>
    1ee0:	e3a02003 	mov	r2, #3
    1ee4:	e1b0c1ac 	lsrs	ip, ip, #3
    1ee8:	12822003 	addne	r2, r2, #3
    1eec:	e1b0c1ac 	lsrs	ip, ip, #3
    1ef0:	12822003 	addne	r2, r2, #3
    1ef4:	e08221ac 	add	r2, r2, ip, lsr #3
    1ef8:	e2623020 	rsb	r3, r2, #32
    1efc:	e1a0c310 	lsl	ip, r0, r3
    1f00:	e1a00230 	lsr	r0, r0, r2
    1f04:	e1800311 	orr	r0, r0, r1, lsl r3
    1f08:	e1a01231 	lsr	r1, r1, r2
    1f0c:	e0844002 	add	r4, r4, r2
    1f10:	eaffff37 	b	1bf4 <__adddf3+0xf0>

00001f14 <__aeabi_dmul>:
    1f14:	e92d4070 	push	{r4, r5, r6, lr}
    1f18:	e3a0c0ff 	mov	ip, #255	; 0xff
    1f1c:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    1f20:	e01c4a21 	ands	r4, ip, r1, lsr #20
    1f24:	101c5a23 	andsne	r5, ip, r3, lsr #20
    1f28:	1134000c 	teqne	r4, ip
    1f2c:	1135000c 	teqne	r5, ip
    1f30:	0b000075 	bleq	210c <__aeabi_dmul+0x1f8>
    1f34:	e0844005 	add	r4, r4, r5
    1f38:	e0216003 	eor	r6, r1, r3
    1f3c:	e1c11a8c 	bic	r1, r1, ip, lsl #21
    1f40:	e1c33a8c 	bic	r3, r3, ip, lsl #21
    1f44:	e1905601 	orrs	r5, r0, r1, lsl #12
    1f48:	11925603 	orrsne	r5, r2, r3, lsl #12
    1f4c:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1f50:	e3833601 	orr	r3, r3, #1048576	; 0x100000
    1f54:	0a00001d 	beq	1fd0 <__aeabi_dmul+0xbc>
    1f58:	e08ec290 	umull	ip, lr, r0, r2
    1f5c:	e3a05000 	mov	r5, #0
    1f60:	e0a5e291 	umlal	lr, r5, r1, r2
    1f64:	e2062102 	and	r2, r6, #-2147483648	; 0x80000000
    1f68:	e0a5e390 	umlal	lr, r5, r0, r3
    1f6c:	e3a06000 	mov	r6, #0
    1f70:	e0a65391 	umlal	r5, r6, r1, r3
    1f74:	e33c0000 	teq	ip, #0
    1f78:	138ee001 	orrne	lr, lr, #1
    1f7c:	e24440ff 	sub	r4, r4, #255	; 0xff
    1f80:	e3560c02 	cmp	r6, #512	; 0x200
    1f84:	e2c44c03 	sbc	r4, r4, #768	; 0x300
    1f88:	2a000002 	bcs	1f98 <__aeabi_dmul+0x84>
    1f8c:	e1b0e08e 	lsls	lr, lr, #1
    1f90:	e0b55005 	adcs	r5, r5, r5
    1f94:	e0a66006 	adc	r6, r6, r6
    1f98:	e1821586 	orr	r1, r2, r6, lsl #11
    1f9c:	e1811aa5 	orr	r1, r1, r5, lsr #21
    1fa0:	e1a00585 	lsl	r0, r5, #11
    1fa4:	e1800aae 	orr	r0, r0, lr, lsr #21
    1fa8:	e1a0e58e 	lsl	lr, lr, #11
    1fac:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    1fb0:	835c0c07 	cmphi	ip, #1792	; 0x700
    1fb4:	8a000011 	bhi	2000 <__aeabi_dmul+0xec>
    1fb8:	e35e0102 	cmp	lr, #-2147483648	; 0x80000000
    1fbc:	01b0e0a0 	lsrseq	lr, r0, #1
    1fc0:	e2b00000 	adcs	r0, r0, #0
    1fc4:	e0a11a04 	adc	r1, r1, r4, lsl #20
    1fc8:	e8bd4070 	pop	{r4, r5, r6, lr}
    1fcc:	e12fff1e 	bx	lr
    1fd0:	e2066102 	and	r6, r6, #-2147483648	; 0x80000000
    1fd4:	e1861001 	orr	r1, r6, r1
    1fd8:	e1800002 	orr	r0, r0, r2
    1fdc:	e0211003 	eor	r1, r1, r3
    1fe0:	e05440ac 	subs	r4, r4, ip, lsr #1
    1fe4:	c074500c 	rsbsgt	r5, r4, ip
    1fe8:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    1fec:	c8bd4070 	popgt	{r4, r5, r6, lr}
    1ff0:	c12fff1e 	bxgt	lr
    1ff4:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    1ff8:	e3a0e000 	mov	lr, #0
    1ffc:	e2544001 	subs	r4, r4, #1
    2000:	ca00005d 	bgt	217c <__aeabi_dmul+0x268>
    2004:	e3740036 	cmn	r4, #54	; 0x36
    2008:	d3a00000 	movle	r0, #0
    200c:	d2011102 	andle	r1, r1, #-2147483648	; 0x80000000
    2010:	d8bd4070 	pople	{r4, r5, r6, lr}
    2014:	d12fff1e 	bxle	lr
    2018:	e2644000 	rsb	r4, r4, #0
    201c:	e2544020 	subs	r4, r4, #32
    2020:	aa00001a 	bge	2090 <__aeabi_dmul+0x17c>
    2024:	e294400c 	adds	r4, r4, #12
    2028:	ca00000c 	bgt	2060 <__aeabi_dmul+0x14c>
    202c:	e2844014 	add	r4, r4, #20
    2030:	e2645020 	rsb	r5, r4, #32
    2034:	e1a03510 	lsl	r3, r0, r5
    2038:	e1a00430 	lsr	r0, r0, r4
    203c:	e1800511 	orr	r0, r0, r1, lsl r5
    2040:	e2012102 	and	r2, r1, #-2147483648	; 0x80000000
    2044:	e3c11102 	bic	r1, r1, #-2147483648	; 0x80000000
    2048:	e0900fa3 	adds	r0, r0, r3, lsr #31
    204c:	e0a21431 	adc	r1, r2, r1, lsr r4
    2050:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2054:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2058:	e8bd4070 	pop	{r4, r5, r6, lr}
    205c:	e12fff1e 	bx	lr
    2060:	e264400c 	rsb	r4, r4, #12
    2064:	e2645020 	rsb	r5, r4, #32
    2068:	e1a03410 	lsl	r3, r0, r4
    206c:	e1a00530 	lsr	r0, r0, r5
    2070:	e1800411 	orr	r0, r0, r1, lsl r4
    2074:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2078:	e0900fa3 	adds	r0, r0, r3, lsr #31
    207c:	e2a11000 	adc	r1, r1, #0
    2080:	e19ee083 	orrs	lr, lr, r3, lsl #1
    2084:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    2088:	e8bd4070 	pop	{r4, r5, r6, lr}
    208c:	e12fff1e 	bx	lr
    2090:	e2645020 	rsb	r5, r4, #32
    2094:	e18ee510 	orr	lr, lr, r0, lsl r5
    2098:	e1a03430 	lsr	r3, r0, r4
    209c:	e1833511 	orr	r3, r3, r1, lsl r5
    20a0:	e1a00431 	lsr	r0, r1, r4
    20a4:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    20a8:	e1c00431 	bic	r0, r0, r1, lsr r4
    20ac:	e0800fa3 	add	r0, r0, r3, lsr #31
    20b0:	e19ee083 	orrs	lr, lr, r3, lsl #1
    20b4:	01c00fa3 	biceq	r0, r0, r3, lsr #31
    20b8:	e8bd4070 	pop	{r4, r5, r6, lr}
    20bc:	e12fff1e 	bx	lr
    20c0:	e3340000 	teq	r4, #0
    20c4:	1a000008 	bne	20ec <__aeabi_dmul+0x1d8>
    20c8:	e2016102 	and	r6, r1, #-2147483648	; 0x80000000
    20cc:	e1b00080 	lsls	r0, r0, #1
    20d0:	e0a11001 	adc	r1, r1, r1
    20d4:	e3110601 	tst	r1, #1048576	; 0x100000
    20d8:	02444001 	subeq	r4, r4, #1
    20dc:	0afffffa 	beq	20cc <__aeabi_dmul+0x1b8>
    20e0:	e1811006 	orr	r1, r1, r6
    20e4:	e3350000 	teq	r5, #0
    20e8:	112fff1e 	bxne	lr
    20ec:	e2036102 	and	r6, r3, #-2147483648	; 0x80000000
    20f0:	e1b02082 	lsls	r2, r2, #1
    20f4:	e0a33003 	adc	r3, r3, r3
    20f8:	e3130601 	tst	r3, #1048576	; 0x100000
    20fc:	02455001 	subeq	r5, r5, #1
    2100:	0afffffa 	beq	20f0 <__aeabi_dmul+0x1dc>
    2104:	e1833006 	orr	r3, r3, r6
    2108:	e12fff1e 	bx	lr
    210c:	e134000c 	teq	r4, ip
    2110:	e00c5a23 	and	r5, ip, r3, lsr #20
    2114:	1135000c 	teqne	r5, ip
    2118:	0a000007 	beq	213c <__aeabi_dmul+0x228>
    211c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2120:	11926083 	orrsne	r6, r2, r3, lsl #1
    2124:	1affffe5 	bne	20c0 <__aeabi_dmul+0x1ac>
    2128:	e0211003 	eor	r1, r1, r3
    212c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2130:	e3a00000 	mov	r0, #0
    2134:	e8bd4070 	pop	{r4, r5, r6, lr}
    2138:	e12fff1e 	bx	lr
    213c:	e1906081 	orrs	r6, r0, r1, lsl #1
    2140:	01a00002 	moveq	r0, r2
    2144:	01a01003 	moveq	r1, r3
    2148:	11926083 	orrsne	r6, r2, r3, lsl #1
    214c:	0a000010 	beq	2194 <__aeabi_dmul+0x280>
    2150:	e134000c 	teq	r4, ip
    2154:	1a000001 	bne	2160 <__aeabi_dmul+0x24c>
    2158:	e1906601 	orrs	r6, r0, r1, lsl #12
    215c:	1a00000c 	bne	2194 <__aeabi_dmul+0x280>
    2160:	e135000c 	teq	r5, ip
    2164:	1a000003 	bne	2178 <__aeabi_dmul+0x264>
    2168:	e1926603 	orrs	r6, r2, r3, lsl #12
    216c:	11a00002 	movne	r0, r2
    2170:	11a01003 	movne	r1, r3
    2174:	1a000006 	bne	2194 <__aeabi_dmul+0x280>
    2178:	e0211003 	eor	r1, r1, r3
    217c:	e2011102 	and	r1, r1, #-2147483648	; 0x80000000
    2180:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2184:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
    2188:	e3a00000 	mov	r0, #0
    218c:	e8bd4070 	pop	{r4, r5, r6, lr}
    2190:	e12fff1e 	bx	lr
    2194:	e381147f 	orr	r1, r1, #2130706432	; 0x7f000000
    2198:	e381173e 	orr	r1, r1, #16252928	; 0xf80000
    219c:	e8bd4070 	pop	{r4, r5, r6, lr}
    21a0:	e12fff1e 	bx	lr

000021a4 <__aeabi_ddiv>:
    21a4:	e92d4070 	push	{r4, r5, r6, lr}
    21a8:	e3a0c0ff 	mov	ip, #255	; 0xff
    21ac:	e38ccc07 	orr	ip, ip, #1792	; 0x700
    21b0:	e01c4a21 	ands	r4, ip, r1, lsr #20
    21b4:	101c5a23 	andsne	r5, ip, r3, lsr #20
    21b8:	1134000c 	teqne	r4, ip
    21bc:	1135000c 	teqne	r5, ip
    21c0:	0b00005e 	bleq	2340 <__aeabi_ddiv+0x19c>
    21c4:	e0444005 	sub	r4, r4, r5
    21c8:	e021e003 	eor	lr, r1, r3
    21cc:	e1925603 	orrs	r5, r2, r3, lsl #12
    21d0:	e1a01601 	lsl	r1, r1, #12
    21d4:	0a00004c 	beq	230c <__aeabi_ddiv+0x168>
    21d8:	e1a03603 	lsl	r3, r3, #12
    21dc:	e3a05201 	mov	r5, #268435456	; 0x10000000
    21e0:	e1853223 	orr	r3, r5, r3, lsr #4
    21e4:	e1833c22 	orr	r3, r3, r2, lsr #24
    21e8:	e1a02402 	lsl	r2, r2, #8
    21ec:	e1855221 	orr	r5, r5, r1, lsr #4
    21f0:	e1855c20 	orr	r5, r5, r0, lsr #24
    21f4:	e1a06400 	lsl	r6, r0, #8
    21f8:	e20e1102 	and	r1, lr, #-2147483648	; 0x80000000
    21fc:	e1550003 	cmp	r5, r3
    2200:	01560002 	cmpeq	r6, r2
    2204:	e2a440fd 	adc	r4, r4, #253	; 0xfd
    2208:	e2844c03 	add	r4, r4, #768	; 0x300
    220c:	2a000001 	bcs	2218 <__aeabi_ddiv+0x74>
    2210:	e1b030a3 	lsrs	r3, r3, #1
    2214:	e1a02062 	rrx	r2, r2
    2218:	e0566002 	subs	r6, r6, r2
    221c:	e0c55003 	sbc	r5, r5, r3
    2220:	e1b030a3 	lsrs	r3, r3, #1
    2224:	e1a02062 	rrx	r2, r2
    2228:	e3a00601 	mov	r0, #1048576	; 0x100000
    222c:	e3a0c702 	mov	ip, #524288	; 0x80000
    2230:	e056e002 	subs	lr, r6, r2
    2234:	e0d5e003 	sbcs	lr, r5, r3
    2238:	20466002 	subcs	r6, r6, r2
    223c:	21a0500e 	movcs	r5, lr
    2240:	2180000c 	orrcs	r0, r0, ip
    2244:	e1b030a3 	lsrs	r3, r3, #1
    2248:	e1a02062 	rrx	r2, r2
    224c:	e056e002 	subs	lr, r6, r2
    2250:	e0d5e003 	sbcs	lr, r5, r3
    2254:	20466002 	subcs	r6, r6, r2
    2258:	21a0500e 	movcs	r5, lr
    225c:	218000ac 	orrcs	r0, r0, ip, lsr #1
    2260:	e1b030a3 	lsrs	r3, r3, #1
    2264:	e1a02062 	rrx	r2, r2
    2268:	e056e002 	subs	lr, r6, r2
    226c:	e0d5e003 	sbcs	lr, r5, r3
    2270:	20466002 	subcs	r6, r6, r2
    2274:	21a0500e 	movcs	r5, lr
    2278:	2180012c 	orrcs	r0, r0, ip, lsr #2
    227c:	e1b030a3 	lsrs	r3, r3, #1
    2280:	e1a02062 	rrx	r2, r2
    2284:	e056e002 	subs	lr, r6, r2
    2288:	e0d5e003 	sbcs	lr, r5, r3
    228c:	20466002 	subcs	r6, r6, r2
    2290:	21a0500e 	movcs	r5, lr
    2294:	218001ac 	orrcs	r0, r0, ip, lsr #3
    2298:	e195e006 	orrs	lr, r5, r6
    229c:	0a00000d 	beq	22d8 <__aeabi_ddiv+0x134>
    22a0:	e1a05205 	lsl	r5, r5, #4
    22a4:	e1855e26 	orr	r5, r5, r6, lsr #28
    22a8:	e1a06206 	lsl	r6, r6, #4
    22ac:	e1a03183 	lsl	r3, r3, #3
    22b0:	e1833ea2 	orr	r3, r3, r2, lsr #29
    22b4:	e1a02182 	lsl	r2, r2, #3
    22b8:	e1b0c22c 	lsrs	ip, ip, #4
    22bc:	1affffdb 	bne	2230 <__aeabi_ddiv+0x8c>
    22c0:	e3110601 	tst	r1, #1048576	; 0x100000
    22c4:	1a000006 	bne	22e4 <__aeabi_ddiv+0x140>
    22c8:	e1811000 	orr	r1, r1, r0
    22cc:	e3a00000 	mov	r0, #0
    22d0:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    22d4:	eaffffd5 	b	2230 <__aeabi_ddiv+0x8c>
    22d8:	e3110601 	tst	r1, #1048576	; 0x100000
    22dc:	01811000 	orreq	r1, r1, r0
    22e0:	03a00000 	moveq	r0, #0
    22e4:	e254c0fd 	subs	ip, r4, #253	; 0xfd
    22e8:	835c0c07 	cmphi	ip, #1792	; 0x700
    22ec:	8affff43 	bhi	2000 <__aeabi_dmul+0xec>
    22f0:	e055c003 	subs	ip, r5, r3
    22f4:	0056c002 	subseq	ip, r6, r2
    22f8:	01b0c0a0 	lsrseq	ip, r0, #1
    22fc:	e2b00000 	adcs	r0, r0, #0
    2300:	e0a11a04 	adc	r1, r1, r4, lsl #20
    2304:	e8bd4070 	pop	{r4, r5, r6, lr}
    2308:	e12fff1e 	bx	lr
    230c:	e20ee102 	and	lr, lr, #-2147483648	; 0x80000000
    2310:	e18e1621 	orr	r1, lr, r1, lsr #12
    2314:	e09440ac 	adds	r4, r4, ip, lsr #1
    2318:	c074500c 	rsbsgt	r5, r4, ip
    231c:	c1811a04 	orrgt	r1, r1, r4, lsl #20
    2320:	c8bd4070 	popgt	{r4, r5, r6, lr}
    2324:	c12fff1e 	bxgt	lr
    2328:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    232c:	e3a0e000 	mov	lr, #0
    2330:	e2544001 	subs	r4, r4, #1
    2334:	eaffff31 	b	2000 <__aeabi_dmul+0xec>
    2338:	e185e006 	orr	lr, r5, r6
    233c:	eaffff2f 	b	2000 <__aeabi_dmul+0xec>
    2340:	e00c5a23 	and	r5, ip, r3, lsr #20
    2344:	e134000c 	teq	r4, ip
    2348:	0135000c 	teqeq	r5, ip
    234c:	0affff90 	beq	2194 <__aeabi_dmul+0x280>
    2350:	e134000c 	teq	r4, ip
    2354:	1a000006 	bne	2374 <__aeabi_ddiv+0x1d0>
    2358:	e1904601 	orrs	r4, r0, r1, lsl #12
    235c:	1affff8c 	bne	2194 <__aeabi_dmul+0x280>
    2360:	e135000c 	teq	r5, ip
    2364:	1affff83 	bne	2178 <__aeabi_dmul+0x264>
    2368:	e1a00002 	mov	r0, r2
    236c:	e1a01003 	mov	r1, r3
    2370:	eaffff87 	b	2194 <__aeabi_dmul+0x280>
    2374:	e135000c 	teq	r5, ip
    2378:	1a000004 	bne	2390 <__aeabi_ddiv+0x1ec>
    237c:	e1925603 	orrs	r5, r2, r3, lsl #12
    2380:	0affff68 	beq	2128 <__aeabi_dmul+0x214>
    2384:	e1a00002 	mov	r0, r2
    2388:	e1a01003 	mov	r1, r3
    238c:	eaffff80 	b	2194 <__aeabi_dmul+0x280>
    2390:	e1906081 	orrs	r6, r0, r1, lsl #1
    2394:	11926083 	orrsne	r6, r2, r3, lsl #1
    2398:	1affff48 	bne	20c0 <__aeabi_dmul+0x1ac>
    239c:	e1904081 	orrs	r4, r0, r1, lsl #1
    23a0:	1affff74 	bne	2178 <__aeabi_dmul+0x264>
    23a4:	e1925083 	orrs	r5, r2, r3, lsl #1
    23a8:	1affff5e 	bne	2128 <__aeabi_dmul+0x214>
    23ac:	eaffff78 	b	2194 <__aeabi_dmul+0x280>

000023b0 <__aeabi_d2iz>:
    23b0:	e1a02081 	lsl	r2, r1, #1
    23b4:	e2922602 	adds	r2, r2, #2097152	; 0x200000
    23b8:	2a00000c 	bcs	23f0 <__aeabi_d2iz+0x40>
    23bc:	5a000009 	bpl	23e8 <__aeabi_d2iz+0x38>
    23c0:	e3e03e3e 	mvn	r3, #992	; 0x3e0
    23c4:	e0532ac2 	subs	r2, r3, r2, asr #21
    23c8:	9a00000a 	bls	23f8 <__aeabi_d2iz+0x48>
    23cc:	e1a03581 	lsl	r3, r1, #11
    23d0:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    23d4:	e1833aa0 	orr	r3, r3, r0, lsr #21
    23d8:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    23dc:	e1a00233 	lsr	r0, r3, r2
    23e0:	12600000 	rsbne	r0, r0, #0
    23e4:	e12fff1e 	bx	lr
    23e8:	e3a00000 	mov	r0, #0
    23ec:	e12fff1e 	bx	lr
    23f0:	e1900601 	orrs	r0, r0, r1, lsl #12
    23f4:	1a000002 	bne	2404 <__aeabi_d2iz+0x54>
    23f8:	e2110102 	ands	r0, r1, #-2147483648	; 0x80000000
    23fc:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2400:	e12fff1e 	bx	lr
    2404:	e3a00000 	mov	r0, #0
    2408:	e12fff1e 	bx	lr

0000240c <__aeabi_d2f>:
    240c:	e1a02081 	lsl	r2, r1, #1
    2410:	e2523207 	subs	r3, r2, #1879048192	; 0x70000000
    2414:	2253c602 	subscs	ip, r3, #2097152	; 0x200000
    2418:	227cc57f 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    241c:	9a000006 	bls	243c <__aeabi_d2f+0x30>
    2420:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    2424:	e1a02180 	lsl	r2, r0, #3
    2428:	e18c0ea0 	orr	r0, ip, r0, lsr #29
    242c:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
    2430:	e0a00103 	adc	r0, r0, r3, lsl #2
    2434:	03c00001 	biceq	r0, r0, #1
    2438:	e12fff1e 	bx	lr
    243c:	e3110101 	tst	r1, #1073741824	; 0x40000000
    2440:	1a00000f 	bne	2484 <__aeabi_d2f+0x78>
    2444:	e293262e 	adds	r2, r3, #48234496	; 0x2e00000
    2448:	b2010102 	andlt	r0, r1, #-2147483648	; 0x80000000
    244c:	b12fff1e 	bxlt	lr
    2450:	e3811601 	orr	r1, r1, #1048576	; 0x100000
    2454:	e1a02aa2 	lsr	r2, r2, #21
    2458:	e2622018 	rsb	r2, r2, #24
    245c:	e262c020 	rsb	ip, r2, #32
    2460:	e1b03c10 	lsls	r3, r0, ip
    2464:	e1a00230 	lsr	r0, r0, r2
    2468:	13800001 	orrne	r0, r0, #1
    246c:	e1a03581 	lsl	r3, r1, #11
    2470:	e1a035a3 	lsr	r3, r3, #11
    2474:	e1800c13 	orr	r0, r0, r3, lsl ip
    2478:	e1a03233 	lsr	r3, r3, r2
    247c:	e1a03083 	lsl	r3, r3, #1
    2480:	eaffffe6 	b	2420 <__aeabi_d2f+0x14>
    2484:	e1f03ac2 	mvns	r3, r2, asr #21
    2488:	1a000003 	bne	249c <__aeabi_d2f+0x90>
    248c:	e1903601 	orrs	r3, r0, r1, lsl #12
    2490:	13a0047f 	movne	r0, #2130706432	; 0x7f000000
    2494:	13800503 	orrne	r0, r0, #12582912	; 0xc00000
    2498:	112fff1e 	bxne	lr
    249c:	e2010102 	and	r0, r1, #-2147483648	; 0x80000000
    24a0:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    24a4:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    24a8:	e12fff1e 	bx	lr

000024ac <__aeabi_frsub>:
    24ac:	e2200102 	eor	r0, r0, #-2147483648	; 0x80000000
    24b0:	ea000000 	b	24b8 <__addsf3>

000024b4 <__aeabi_fsub>:
    24b4:	e2211102 	eor	r1, r1, #-2147483648	; 0x80000000

000024b8 <__addsf3>:
    24b8:	e1b02080 	lsls	r2, r0, #1
    24bc:	11b03081 	lslsne	r3, r1, #1
    24c0:	11320003 	teqne	r2, r3
    24c4:	11f0cc42 	mvnsne	ip, r2, asr #24
    24c8:	11f0cc43 	mvnsne	ip, r3, asr #24
    24cc:	0a000047 	beq	25f0 <__addsf3+0x138>
    24d0:	e1a02c22 	lsr	r2, r2, #24
    24d4:	e0723c23 	rsbs	r3, r2, r3, lsr #24
    24d8:	c0822003 	addgt	r2, r2, r3
    24dc:	c0201001 	eorgt	r1, r0, r1
    24e0:	c0210000 	eorgt	r0, r1, r0
    24e4:	c0201001 	eorgt	r1, r0, r1
    24e8:	b2633000 	rsblt	r3, r3, #0
    24ec:	e3530019 	cmp	r3, #25
    24f0:	812fff1e 	bxhi	lr
    24f4:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    24f8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    24fc:	e3c004ff 	bic	r0, r0, #-16777216	; 0xff000000
    2500:	12600000 	rsbne	r0, r0, #0
    2504:	e3110102 	tst	r1, #-2147483648	; 0x80000000
    2508:	e3811502 	orr	r1, r1, #8388608	; 0x800000
    250c:	e3c114ff 	bic	r1, r1, #-16777216	; 0xff000000
    2510:	12611000 	rsbne	r1, r1, #0
    2514:	e1320003 	teq	r2, r3
    2518:	0a00002e 	beq	25d8 <__addsf3+0x120>
    251c:	e2422001 	sub	r2, r2, #1
    2520:	e0900351 	adds	r0, r0, r1, asr r3
    2524:	e2633020 	rsb	r3, r3, #32
    2528:	e1a01311 	lsl	r1, r1, r3
    252c:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2530:	5a000001 	bpl	253c <__addsf3+0x84>
    2534:	e2711000 	rsbs	r1, r1, #0
    2538:	e2e00000 	rsc	r0, r0, #0
    253c:	e3500502 	cmp	r0, #8388608	; 0x800000
    2540:	3a00000b 	bcc	2574 <__addsf3+0xbc>
    2544:	e3500401 	cmp	r0, #16777216	; 0x1000000
    2548:	3a000004 	bcc	2560 <__addsf3+0xa8>
    254c:	e1b000a0 	lsrs	r0, r0, #1
    2550:	e1a01061 	rrx	r1, r1
    2554:	e2822001 	add	r2, r2, #1
    2558:	e35200fe 	cmp	r2, #254	; 0xfe
    255c:	2a000038 	bcs	2644 <__addsf3+0x18c>
    2560:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
    2564:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2568:	03c00001 	biceq	r0, r0, #1
    256c:	e1800003 	orr	r0, r0, r3
    2570:	e12fff1e 	bx	lr
    2574:	e1b01081 	lsls	r1, r1, #1
    2578:	e0a00000 	adc	r0, r0, r0
    257c:	e3100502 	tst	r0, #8388608	; 0x800000
    2580:	e2422001 	sub	r2, r2, #1
    2584:	1afffff5 	bne	2560 <__addsf3+0xa8>
    2588:	e1b0c620 	lsrs	ip, r0, #12
    258c:	01a00600 	lsleq	r0, r0, #12
    2590:	0242200c 	subeq	r2, r2, #12
    2594:	e31008ff 	tst	r0, #16711680	; 0xff0000
    2598:	01a00400 	lsleq	r0, r0, #8
    259c:	02422008 	subeq	r2, r2, #8
    25a0:	e310060f 	tst	r0, #15728640	; 0xf00000
    25a4:	01a00200 	lsleq	r0, r0, #4
    25a8:	02422004 	subeq	r2, r2, #4
    25ac:	e3100503 	tst	r0, #12582912	; 0xc00000
    25b0:	01a00100 	lsleq	r0, r0, #2
    25b4:	02422002 	subeq	r2, r2, #2
    25b8:	e3500502 	cmp	r0, #8388608	; 0x800000
    25bc:	31a00080 	lslcc	r0, r0, #1
    25c0:	e2d22000 	sbcs	r2, r2, #0
    25c4:	a0800b82 	addge	r0, r0, r2, lsl #23
    25c8:	b2622000 	rsblt	r2, r2, #0
    25cc:	a1800003 	orrge	r0, r0, r3
    25d0:	b1830230 	orrlt	r0, r3, r0, lsr r2
    25d4:	e12fff1e 	bx	lr
    25d8:	e3320000 	teq	r2, #0
    25dc:	e2211502 	eor	r1, r1, #8388608	; 0x800000
    25e0:	02200502 	eoreq	r0, r0, #8388608	; 0x800000
    25e4:	02822001 	addeq	r2, r2, #1
    25e8:	12433001 	subne	r3, r3, #1
    25ec:	eaffffca 	b	251c <__addsf3+0x64>
    25f0:	e1a03081 	lsl	r3, r1, #1
    25f4:	e1f0cc42 	mvns	ip, r2, asr #24
    25f8:	11f0cc43 	mvnsne	ip, r3, asr #24
    25fc:	0a000013 	beq	2650 <__addsf3+0x198>
    2600:	e1320003 	teq	r2, r3
    2604:	0a000002 	beq	2614 <__addsf3+0x15c>
    2608:	e3320000 	teq	r2, #0
    260c:	01a00001 	moveq	r0, r1
    2610:	e12fff1e 	bx	lr
    2614:	e1300001 	teq	r0, r1
    2618:	13a00000 	movne	r0, #0
    261c:	112fff1e 	bxne	lr
    2620:	e31204ff 	tst	r2, #-16777216	; 0xff000000
    2624:	1a000002 	bne	2634 <__addsf3+0x17c>
    2628:	e1b00080 	lsls	r0, r0, #1
    262c:	23800102 	orrcs	r0, r0, #-2147483648	; 0x80000000
    2630:	e12fff1e 	bx	lr
    2634:	e2922402 	adds	r2, r2, #33554432	; 0x2000000
    2638:	32800502 	addcc	r0, r0, #8388608	; 0x800000
    263c:	312fff1e 	bxcc	lr
    2640:	e2003102 	and	r3, r0, #-2147483648	; 0x80000000
    2644:	e383047f 	orr	r0, r3, #2130706432	; 0x7f000000
    2648:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    264c:	e12fff1e 	bx	lr
    2650:	e1f02c42 	mvns	r2, r2, asr #24
    2654:	11a00001 	movne	r0, r1
    2658:	01f03c43 	mvnseq	r3, r3, asr #24
    265c:	11a01000 	movne	r1, r0
    2660:	e1b02480 	lsls	r2, r0, #9
    2664:	01b03481 	lslseq	r3, r1, #9
    2668:	01300001 	teqeq	r0, r1
    266c:	13800501 	orrne	r0, r0, #4194304	; 0x400000
    2670:	e12fff1e 	bx	lr

00002674 <__aeabi_ui2f>:
    2674:	e3a03000 	mov	r3, #0
    2678:	ea000001 	b	2684 <__aeabi_i2f+0x8>

0000267c <__aeabi_i2f>:
    267c:	e2103102 	ands	r3, r0, #-2147483648	; 0x80000000
    2680:	42600000 	rsbmi	r0, r0, #0
    2684:	e1b0c000 	movs	ip, r0
    2688:	012fff1e 	bxeq	lr
    268c:	e383344b 	orr	r3, r3, #1258291200	; 0x4b000000
    2690:	e1a01000 	mov	r1, r0
    2694:	e3a00000 	mov	r0, #0
    2698:	ea00000f 	b	26dc <__aeabi_l2f+0x30>

0000269c <__aeabi_ul2f>:
    269c:	e1902001 	orrs	r2, r0, r1
    26a0:	012fff1e 	bxeq	lr
    26a4:	e3a03000 	mov	r3, #0
    26a8:	ea000005 	b	26c4 <__aeabi_l2f+0x18>

000026ac <__aeabi_l2f>:
    26ac:	e1902001 	orrs	r2, r0, r1
    26b0:	012fff1e 	bxeq	lr
    26b4:	e2113102 	ands	r3, r1, #-2147483648	; 0x80000000
    26b8:	5a000001 	bpl	26c4 <__aeabi_l2f+0x18>
    26bc:	e2700000 	rsbs	r0, r0, #0
    26c0:	e2e11000 	rsc	r1, r1, #0
    26c4:	e1b0c001 	movs	ip, r1
    26c8:	01a0c000 	moveq	ip, r0
    26cc:	01a01000 	moveq	r1, r0
    26d0:	03a00000 	moveq	r0, #0
    26d4:	e383345b 	orr	r3, r3, #1526726656	; 0x5b000000
    26d8:	02433201 	subeq	r3, r3, #268435456	; 0x10000000
    26dc:	e2433502 	sub	r3, r3, #8388608	; 0x800000
    26e0:	e3a02017 	mov	r2, #23
    26e4:	e35c0801 	cmp	ip, #65536	; 0x10000
    26e8:	21a0c82c 	lsrcs	ip, ip, #16
    26ec:	22422010 	subcs	r2, r2, #16
    26f0:	e35c0c01 	cmp	ip, #256	; 0x100
    26f4:	21a0c42c 	lsrcs	ip, ip, #8
    26f8:	22422008 	subcs	r2, r2, #8
    26fc:	e35c0010 	cmp	ip, #16
    2700:	21a0c22c 	lsrcs	ip, ip, #4
    2704:	22422004 	subcs	r2, r2, #4
    2708:	e35c0004 	cmp	ip, #4
    270c:	22422002 	subcs	r2, r2, #2
    2710:	304220ac 	subcc	r2, r2, ip, lsr #1
    2714:	e05221ac 	subs	r2, r2, ip, lsr #3
    2718:	e0433b82 	sub	r3, r3, r2, lsl #23
    271c:	ba000006 	blt	273c <__aeabi_l2f+0x90>
    2720:	e0833211 	add	r3, r3, r1, lsl r2
    2724:	e1a0c210 	lsl	ip, r0, r2
    2728:	e2622020 	rsb	r2, r2, #32
    272c:	e35c0102 	cmp	ip, #-2147483648	; 0x80000000
    2730:	e0a30230 	adc	r0, r3, r0, lsr r2
    2734:	03c00001 	biceq	r0, r0, #1
    2738:	e12fff1e 	bx	lr
    273c:	e2822020 	add	r2, r2, #32
    2740:	e1a0c211 	lsl	ip, r1, r2
    2744:	e2622020 	rsb	r2, r2, #32
    2748:	e190008c 	orrs	r0, r0, ip, lsl #1
    274c:	e0a30231 	adc	r0, r3, r1, lsr r2
    2750:	01c00fac 	biceq	r0, r0, ip, lsr #31
    2754:	e12fff1e 	bx	lr

00002758 <__aeabi_fmul>:
    2758:	e3a0c0ff 	mov	ip, #255	; 0xff
    275c:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    2760:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    2764:	1132000c 	teqne	r2, ip
    2768:	1133000c 	teqne	r3, ip
    276c:	0a00003e 	beq	286c <__aeabi_fmul+0x114>
    2770:	e0822003 	add	r2, r2, r3
    2774:	e020c001 	eor	ip, r0, r1
    2778:	e1b00480 	lsls	r0, r0, #9
    277c:	11b01481 	lslsne	r1, r1, #9
    2780:	0a000010 	beq	27c8 <__aeabi_fmul+0x70>
    2784:	e3a03302 	mov	r3, #134217728	; 0x8000000
    2788:	e18302a0 	orr	r0, r3, r0, lsr #5
    278c:	e18312a1 	orr	r1, r3, r1, lsr #5
    2790:	e0813190 	umull	r3, r1, r0, r1
    2794:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    2798:	e3510502 	cmp	r1, #8388608	; 0x800000
    279c:	31a01081 	lslcc	r1, r1, #1
    27a0:	31811fa3 	orrcc	r1, r1, r3, lsr #31
    27a4:	31a03083 	lslcc	r3, r3, #1
    27a8:	e1800001 	orr	r0, r0, r1
    27ac:	e2c2207f 	sbc	r2, r2, #127	; 0x7f
    27b0:	e35200fd 	cmp	r2, #253	; 0xfd
    27b4:	8a00000f 	bhi	27f8 <__aeabi_fmul+0xa0>
    27b8:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
    27bc:	e0a00b82 	adc	r0, r0, r2, lsl #23
    27c0:	03c00001 	biceq	r0, r0, #1
    27c4:	e12fff1e 	bx	lr
    27c8:	e3300000 	teq	r0, #0
    27cc:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    27d0:	01a01481 	lsleq	r1, r1, #9
    27d4:	e18c04a0 	orr	r0, ip, r0, lsr #9
    27d8:	e18004a1 	orr	r0, r0, r1, lsr #9
    27dc:	e252207f 	subs	r2, r2, #127	; 0x7f
    27e0:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    27e4:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    27e8:	c12fff1e 	bxgt	lr
    27ec:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    27f0:	e3a03000 	mov	r3, #0
    27f4:	e2522001 	subs	r2, r2, #1
    27f8:	ca000035 	bgt	28d4 <__aeabi_fmul+0x17c>
    27fc:	e3720019 	cmn	r2, #25
    2800:	d2000102 	andle	r0, r0, #-2147483648	; 0x80000000
    2804:	d12fff1e 	bxle	lr
    2808:	e2622000 	rsb	r2, r2, #0
    280c:	e1b01080 	lsls	r1, r0, #1
    2810:	e1a01231 	lsr	r1, r1, r2
    2814:	e2622020 	rsb	r2, r2, #32
    2818:	e1a0c210 	lsl	ip, r0, r2
    281c:	e1b00061 	rrxs	r0, r1
    2820:	e2a00000 	adc	r0, r0, #0
    2824:	e193308c 	orrs	r3, r3, ip, lsl #1
    2828:	01c00fac 	biceq	r0, r0, ip, lsr #31
    282c:	e12fff1e 	bx	lr
    2830:	e3320000 	teq	r2, #0
    2834:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    2838:	01a00080 	lsleq	r0, r0, #1
    283c:	03100502 	tsteq	r0, #8388608	; 0x800000
    2840:	02422001 	subeq	r2, r2, #1
    2844:	0afffffb 	beq	2838 <__aeabi_fmul+0xe0>
    2848:	e180000c 	orr	r0, r0, ip
    284c:	e3330000 	teq	r3, #0
    2850:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    2854:	01a01081 	lsleq	r1, r1, #1
    2858:	03110502 	tsteq	r1, #8388608	; 0x800000
    285c:	02433001 	subeq	r3, r3, #1
    2860:	0afffffb 	beq	2854 <__aeabi_fmul+0xfc>
    2864:	e181100c 	orr	r1, r1, ip
    2868:	eaffffc0 	b	2770 <__aeabi_fmul+0x18>
    286c:	e00c3ba1 	and	r3, ip, r1, lsr #23
    2870:	e132000c 	teq	r2, ip
    2874:	1133000c 	teqne	r3, ip
    2878:	0a000005 	beq	2894 <__aeabi_fmul+0x13c>
    287c:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    2880:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    2884:	1affffe9 	bne	2830 <__aeabi_fmul+0xd8>
    2888:	e0200001 	eor	r0, r0, r1
    288c:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    2890:	e12fff1e 	bx	lr
    2894:	e3300000 	teq	r0, #0
    2898:	13300102 	teqne	r0, #-2147483648	; 0x80000000
    289c:	01a00001 	moveq	r0, r1
    28a0:	13310000 	teqne	r1, #0
    28a4:	13310102 	teqne	r1, #-2147483648	; 0x80000000
    28a8:	0a00000d 	beq	28e4 <__aeabi_fmul+0x18c>
    28ac:	e132000c 	teq	r2, ip
    28b0:	1a000001 	bne	28bc <__aeabi_fmul+0x164>
    28b4:	e1b02480 	lsls	r2, r0, #9
    28b8:	1a000009 	bne	28e4 <__aeabi_fmul+0x18c>
    28bc:	e133000c 	teq	r3, ip
    28c0:	1a000002 	bne	28d0 <__aeabi_fmul+0x178>
    28c4:	e1b03481 	lsls	r3, r1, #9
    28c8:	11a00001 	movne	r0, r1
    28cc:	1a000004 	bne	28e4 <__aeabi_fmul+0x18c>
    28d0:	e0200001 	eor	r0, r0, r1
    28d4:	e2000102 	and	r0, r0, #-2147483648	; 0x80000000
    28d8:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    28dc:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    28e0:	e12fff1e 	bx	lr
    28e4:	e380047f 	orr	r0, r0, #2130706432	; 0x7f000000
    28e8:	e3800503 	orr	r0, r0, #12582912	; 0xc00000
    28ec:	e12fff1e 	bx	lr

000028f0 <__aeabi_fdiv>:
    28f0:	e3a0c0ff 	mov	ip, #255	; 0xff
    28f4:	e01c2ba0 	ands	r2, ip, r0, lsr #23
    28f8:	101c3ba1 	andsne	r3, ip, r1, lsr #23
    28fc:	1132000c 	teqne	r2, ip
    2900:	1133000c 	teqne	r3, ip
    2904:	0a00003a 	beq	29f4 <__aeabi_fdiv+0x104>
    2908:	e0422003 	sub	r2, r2, r3
    290c:	e020c001 	eor	ip, r0, r1
    2910:	e1b01481 	lsls	r1, r1, #9
    2914:	e1a00480 	lsl	r0, r0, #9
    2918:	0a00001c 	beq	2990 <__aeabi_fdiv+0xa0>
    291c:	e3a03201 	mov	r3, #268435456	; 0x10000000
    2920:	e1831221 	orr	r1, r3, r1, lsr #4
    2924:	e1833220 	orr	r3, r3, r0, lsr #4
    2928:	e20c0102 	and	r0, ip, #-2147483648	; 0x80000000
    292c:	e1530001 	cmp	r3, r1
    2930:	31a03083 	lslcc	r3, r3, #1
    2934:	e2a2207d 	adc	r2, r2, #125	; 0x7d
    2938:	e3a0c502 	mov	ip, #8388608	; 0x800000
    293c:	e1530001 	cmp	r3, r1
    2940:	20433001 	subcs	r3, r3, r1
    2944:	2180000c 	orrcs	r0, r0, ip
    2948:	e15300a1 	cmp	r3, r1, lsr #1
    294c:	204330a1 	subcs	r3, r3, r1, lsr #1
    2950:	218000ac 	orrcs	r0, r0, ip, lsr #1
    2954:	e1530121 	cmp	r3, r1, lsr #2
    2958:	20433121 	subcs	r3, r3, r1, lsr #2
    295c:	2180012c 	orrcs	r0, r0, ip, lsr #2
    2960:	e15301a1 	cmp	r3, r1, lsr #3
    2964:	204331a1 	subcs	r3, r3, r1, lsr #3
    2968:	218001ac 	orrcs	r0, r0, ip, lsr #3
    296c:	e1b03203 	lsls	r3, r3, #4
    2970:	11b0c22c 	lsrsne	ip, ip, #4
    2974:	1afffff0 	bne	293c <__aeabi_fdiv+0x4c>
    2978:	e35200fd 	cmp	r2, #253	; 0xfd
    297c:	8affff9d 	bhi	27f8 <__aeabi_fmul+0xa0>
    2980:	e1530001 	cmp	r3, r1
    2984:	e0a00b82 	adc	r0, r0, r2, lsl #23
    2988:	03c00001 	biceq	r0, r0, #1
    298c:	e12fff1e 	bx	lr
    2990:	e20cc102 	and	ip, ip, #-2147483648	; 0x80000000
    2994:	e18c04a0 	orr	r0, ip, r0, lsr #9
    2998:	e292207f 	adds	r2, r2, #127	; 0x7f
    299c:	c27230ff 	rsbsgt	r3, r2, #255	; 0xff
    29a0:	c1800b82 	orrgt	r0, r0, r2, lsl #23
    29a4:	c12fff1e 	bxgt	lr
    29a8:	e3800502 	orr	r0, r0, #8388608	; 0x800000
    29ac:	e3a03000 	mov	r3, #0
    29b0:	e2522001 	subs	r2, r2, #1
    29b4:	eaffff8f 	b	27f8 <__aeabi_fmul+0xa0>
    29b8:	e3320000 	teq	r2, #0
    29bc:	e200c102 	and	ip, r0, #-2147483648	; 0x80000000
    29c0:	01a00080 	lsleq	r0, r0, #1
    29c4:	03100502 	tsteq	r0, #8388608	; 0x800000
    29c8:	02422001 	subeq	r2, r2, #1
    29cc:	0afffffb 	beq	29c0 <__aeabi_fdiv+0xd0>
    29d0:	e180000c 	orr	r0, r0, ip
    29d4:	e3330000 	teq	r3, #0
    29d8:	e201c102 	and	ip, r1, #-2147483648	; 0x80000000
    29dc:	01a01081 	lsleq	r1, r1, #1
    29e0:	03110502 	tsteq	r1, #8388608	; 0x800000
    29e4:	02433001 	subeq	r3, r3, #1
    29e8:	0afffffb 	beq	29dc <__aeabi_fdiv+0xec>
    29ec:	e181100c 	orr	r1, r1, ip
    29f0:	eaffffc4 	b	2908 <__aeabi_fdiv+0x18>
    29f4:	e00c3ba1 	and	r3, ip, r1, lsr #23
    29f8:	e132000c 	teq	r2, ip
    29fc:	1a000005 	bne	2a18 <__aeabi_fdiv+0x128>
    2a00:	e1b02480 	lsls	r2, r0, #9
    2a04:	1affffb6 	bne	28e4 <__aeabi_fmul+0x18c>
    2a08:	e133000c 	teq	r3, ip
    2a0c:	1affffaf 	bne	28d0 <__aeabi_fmul+0x178>
    2a10:	e1a00001 	mov	r0, r1
    2a14:	eaffffb2 	b	28e4 <__aeabi_fmul+0x18c>
    2a18:	e133000c 	teq	r3, ip
    2a1c:	1a000003 	bne	2a30 <__aeabi_fdiv+0x140>
    2a20:	e1b03481 	lsls	r3, r1, #9
    2a24:	0affff97 	beq	2888 <__aeabi_fmul+0x130>
    2a28:	e1a00001 	mov	r0, r1
    2a2c:	eaffffac 	b	28e4 <__aeabi_fmul+0x18c>
    2a30:	e3d0c102 	bics	ip, r0, #-2147483648	; 0x80000000
    2a34:	13d1c102 	bicsne	ip, r1, #-2147483648	; 0x80000000
    2a38:	1affffde 	bne	29b8 <__aeabi_fdiv+0xc8>
    2a3c:	e3d02102 	bics	r2, r0, #-2147483648	; 0x80000000
    2a40:	1affffa2 	bne	28d0 <__aeabi_fmul+0x178>
    2a44:	e3d13102 	bics	r3, r1, #-2147483648	; 0x80000000
    2a48:	1affff8e 	bne	2888 <__aeabi_fmul+0x130>
    2a4c:	eaffffa4 	b	28e4 <__aeabi_fmul+0x18c>

00002a50 <__gesf2>:
    2a50:	e3e0c000 	mvn	ip, #0
    2a54:	ea000002 	b	2a64 <__cmpsf2+0x4>

00002a58 <__lesf2>:
    2a58:	e3a0c001 	mov	ip, #1
    2a5c:	ea000000 	b	2a64 <__cmpsf2+0x4>

00002a60 <__cmpsf2>:
    2a60:	e3a0c001 	mov	ip, #1
    2a64:	e52dc004 	push	{ip}		; (str ip, [sp, #-4]!)
    2a68:	e1a02080 	lsl	r2, r0, #1
    2a6c:	e1a03081 	lsl	r3, r1, #1
    2a70:	e1f0cc42 	mvns	ip, r2, asr #24
    2a74:	11f0cc43 	mvnsne	ip, r3, asr #24
    2a78:	0a000007 	beq	2a9c <__cmpsf2+0x3c>
    2a7c:	e28dd004 	add	sp, sp, #4
    2a80:	e192c0a3 	orrs	ip, r2, r3, lsr #1
    2a84:	11300001 	teqne	r0, r1
    2a88:	50520003 	subspl	r0, r2, r3
    2a8c:	81a00fc1 	asrhi	r0, r1, #31
    2a90:	31e00fc1 	mvncc	r0, r1, asr #31
    2a94:	13800001 	orrne	r0, r0, #1
    2a98:	e12fff1e 	bx	lr
    2a9c:	e1f0cc42 	mvns	ip, r2, asr #24
    2aa0:	1a000001 	bne	2aac <__cmpsf2+0x4c>
    2aa4:	e1b0c480 	lsls	ip, r0, #9
    2aa8:	1a000003 	bne	2abc <__cmpsf2+0x5c>
    2aac:	e1f0cc43 	mvns	ip, r3, asr #24
    2ab0:	1afffff1 	bne	2a7c <__cmpsf2+0x1c>
    2ab4:	e1b0c481 	lsls	ip, r1, #9
    2ab8:	0affffef 	beq	2a7c <__cmpsf2+0x1c>
    2abc:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    2ac0:	e12fff1e 	bx	lr

00002ac4 <__aeabi_cfrcmple>:
    2ac4:	e1a0c000 	mov	ip, r0
    2ac8:	e1a00001 	mov	r0, r1
    2acc:	e1a0100c 	mov	r1, ip
    2ad0:	eaffffff 	b	2ad4 <__aeabi_cfcmpeq>

00002ad4 <__aeabi_cfcmpeq>:
    2ad4:	e92d400f 	push	{r0, r1, r2, r3, lr}
    2ad8:	ebffffe0 	bl	2a60 <__cmpsf2>
    2adc:	e3500000 	cmp	r0, #0
    2ae0:	43700000 	cmnmi	r0, #0
    2ae4:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
    2ae8:	e12fff1e 	bx	lr

00002aec <__aeabi_fcmpeq>:
    2aec:	e52de008 	str	lr, [sp, #-8]!
    2af0:	ebfffff7 	bl	2ad4 <__aeabi_cfcmpeq>
    2af4:	03a00001 	moveq	r0, #1
    2af8:	13a00000 	movne	r0, #0
    2afc:	e49de008 	ldr	lr, [sp], #8
    2b00:	e12fff1e 	bx	lr

00002b04 <__aeabi_fcmplt>:
    2b04:	e52de008 	str	lr, [sp, #-8]!
    2b08:	ebfffff1 	bl	2ad4 <__aeabi_cfcmpeq>
    2b0c:	33a00001 	movcc	r0, #1
    2b10:	23a00000 	movcs	r0, #0
    2b14:	e49de008 	ldr	lr, [sp], #8
    2b18:	e12fff1e 	bx	lr

00002b1c <__aeabi_fcmple>:
    2b1c:	e52de008 	str	lr, [sp, #-8]!
    2b20:	ebffffeb 	bl	2ad4 <__aeabi_cfcmpeq>
    2b24:	93a00001 	movls	r0, #1
    2b28:	83a00000 	movhi	r0, #0
    2b2c:	e49de008 	ldr	lr, [sp], #8
    2b30:	e12fff1e 	bx	lr

00002b34 <__aeabi_fcmpge>:
    2b34:	e52de008 	str	lr, [sp, #-8]!
    2b38:	ebffffe1 	bl	2ac4 <__aeabi_cfrcmple>
    2b3c:	93a00001 	movls	r0, #1
    2b40:	83a00000 	movhi	r0, #0
    2b44:	e49de008 	ldr	lr, [sp], #8
    2b48:	e12fff1e 	bx	lr

00002b4c <__aeabi_fcmpgt>:
    2b4c:	e52de008 	str	lr, [sp, #-8]!
    2b50:	ebffffdb 	bl	2ac4 <__aeabi_cfrcmple>
    2b54:	33a00001 	movcc	r0, #1
    2b58:	23a00000 	movcs	r0, #0
    2b5c:	e49de008 	ldr	lr, [sp], #8
    2b60:	e12fff1e 	bx	lr

00002b64 <__aeabi_f2iz>:
    2b64:	e1a02080 	lsl	r2, r0, #1
    2b68:	e352047f 	cmp	r2, #2130706432	; 0x7f000000
    2b6c:	3a000008 	bcc	2b94 <__aeabi_f2iz+0x30>
    2b70:	e3a0309e 	mov	r3, #158	; 0x9e
    2b74:	e0532c22 	subs	r2, r3, r2, lsr #24
    2b78:	9a000007 	bls	2b9c <__aeabi_f2iz+0x38>
    2b7c:	e1a03400 	lsl	r3, r0, #8
    2b80:	e3833102 	orr	r3, r3, #-2147483648	; 0x80000000
    2b84:	e3100102 	tst	r0, #-2147483648	; 0x80000000
    2b88:	e1a00233 	lsr	r0, r3, r2
    2b8c:	12600000 	rsbne	r0, r0, #0
    2b90:	e12fff1e 	bx	lr
    2b94:	e3a00000 	mov	r0, #0
    2b98:	e12fff1e 	bx	lr
    2b9c:	e3720061 	cmn	r2, #97	; 0x61
    2ba0:	1a000001 	bne	2bac <__aeabi_f2iz+0x48>
    2ba4:	e1b02480 	lsls	r2, r0, #9
    2ba8:	1a000002 	bne	2bb8 <__aeabi_f2iz+0x54>
    2bac:	e2100102 	ands	r0, r0, #-2147483648	; 0x80000000
    2bb0:	03e00102 	mvneq	r0, #-2147483648	; 0x80000000
    2bb4:	e12fff1e 	bx	lr
    2bb8:	e3a00000 	mov	r0, #0
    2bbc:	e12fff1e 	bx	lr

00002bc0 <__aeabi_uldivmod>:
    2bc0:	e3530000 	cmp	r3, #0
    2bc4:	03520000 	cmpeq	r2, #0
    2bc8:	1a000004 	bne	2be0 <__aeabi_uldivmod+0x20>
    2bcc:	e3510000 	cmp	r1, #0
    2bd0:	03500000 	cmpeq	r0, #0
    2bd4:	13e01000 	mvnne	r1, #0
    2bd8:	13e00000 	mvnne	r0, #0
    2bdc:	ea000091 	b	2e28 <____aeabi_ldiv0_from_arm>
    2be0:	e24dd008 	sub	sp, sp, #8
    2be4:	e92d6000 	push	{sp, lr}
    2be8:	eb0000a4 	bl	2e80 <____udivmoddi4_from_arm>
    2bec:	e59de004 	ldr	lr, [sp, #4]
    2bf0:	e28dd008 	add	sp, sp, #8
    2bf4:	e8bd000c 	pop	{r2, r3}
    2bf8:	e12fff1e 	bx	lr

00002bfc <__udivmoddi4>:
    2bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2bfe:	4657      	mov	r7, sl
    2c00:	464e      	mov	r6, r9
    2c02:	4645      	mov	r5, r8
    2c04:	46de      	mov	lr, fp
    2c06:	b5e0      	push	{r5, r6, r7, lr}
    2c08:	0004      	movs	r4, r0
    2c0a:	b083      	sub	sp, #12
    2c0c:	000d      	movs	r5, r1
    2c0e:	4692      	mov	sl, r2
    2c10:	4699      	mov	r9, r3
    2c12:	428b      	cmp	r3, r1
    2c14:	d82f      	bhi.n	2c76 <__udivmoddi4+0x7a>
    2c16:	d02c      	beq.n	2c72 <__udivmoddi4+0x76>
    2c18:	4649      	mov	r1, r9
    2c1a:	4650      	mov	r0, sl
    2c1c:	f000 f928 	bl	2e70 <____clzdi2_from_thumb>
    2c20:	0029      	movs	r1, r5
    2c22:	0006      	movs	r6, r0
    2c24:	0020      	movs	r0, r4
    2c26:	f000 f923 	bl	2e70 <____clzdi2_from_thumb>
    2c2a:	1a33      	subs	r3, r6, r0
    2c2c:	4698      	mov	r8, r3
    2c2e:	3b20      	subs	r3, #32
    2c30:	469b      	mov	fp, r3
    2c32:	d500      	bpl.n	2c36 <__udivmoddi4+0x3a>
    2c34:	e076      	b.n	2d24 <__udivmoddi4+0x128>
    2c36:	4653      	mov	r3, sl
    2c38:	465a      	mov	r2, fp
    2c3a:	4093      	lsls	r3, r2
    2c3c:	001f      	movs	r7, r3
    2c3e:	4653      	mov	r3, sl
    2c40:	4642      	mov	r2, r8
    2c42:	4093      	lsls	r3, r2
    2c44:	001e      	movs	r6, r3
    2c46:	42af      	cmp	r7, r5
    2c48:	d82b      	bhi.n	2ca2 <__udivmoddi4+0xa6>
    2c4a:	d028      	beq.n	2c9e <__udivmoddi4+0xa2>
    2c4c:	465b      	mov	r3, fp
    2c4e:	1ba4      	subs	r4, r4, r6
    2c50:	41bd      	sbcs	r5, r7
    2c52:	2b00      	cmp	r3, #0
    2c54:	da00      	bge.n	2c58 <__udivmoddi4+0x5c>
    2c56:	e07b      	b.n	2d50 <__udivmoddi4+0x154>
    2c58:	2200      	movs	r2, #0
    2c5a:	2300      	movs	r3, #0
    2c5c:	9200      	str	r2, [sp, #0]
    2c5e:	9301      	str	r3, [sp, #4]
    2c60:	2301      	movs	r3, #1
    2c62:	465a      	mov	r2, fp
    2c64:	4093      	lsls	r3, r2
    2c66:	9301      	str	r3, [sp, #4]
    2c68:	2301      	movs	r3, #1
    2c6a:	4642      	mov	r2, r8
    2c6c:	4093      	lsls	r3, r2
    2c6e:	9300      	str	r3, [sp, #0]
    2c70:	e01b      	b.n	2caa <__udivmoddi4+0xae>
    2c72:	4282      	cmp	r2, r0
    2c74:	d9d0      	bls.n	2c18 <__udivmoddi4+0x1c>
    2c76:	2200      	movs	r2, #0
    2c78:	2300      	movs	r3, #0
    2c7a:	9200      	str	r2, [sp, #0]
    2c7c:	9301      	str	r3, [sp, #4]
    2c7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c80:	2b00      	cmp	r3, #0
    2c82:	d001      	beq.n	2c88 <__udivmoddi4+0x8c>
    2c84:	601c      	str	r4, [r3, #0]
    2c86:	605d      	str	r5, [r3, #4]
    2c88:	9800      	ldr	r0, [sp, #0]
    2c8a:	9901      	ldr	r1, [sp, #4]
    2c8c:	b003      	add	sp, #12
    2c8e:	bc3c      	pop	{r2, r3, r4, r5}
    2c90:	4690      	mov	r8, r2
    2c92:	4699      	mov	r9, r3
    2c94:	46a2      	mov	sl, r4
    2c96:	46ab      	mov	fp, r5
    2c98:	bcf0      	pop	{r4, r5, r6, r7}
    2c9a:	bc04      	pop	{r2}
    2c9c:	4710      	bx	r2
    2c9e:	42a3      	cmp	r3, r4
    2ca0:	d9d4      	bls.n	2c4c <__udivmoddi4+0x50>
    2ca2:	2200      	movs	r2, #0
    2ca4:	2300      	movs	r3, #0
    2ca6:	9200      	str	r2, [sp, #0]
    2ca8:	9301      	str	r3, [sp, #4]
    2caa:	4643      	mov	r3, r8
    2cac:	2b00      	cmp	r3, #0
    2cae:	d0e6      	beq.n	2c7e <__udivmoddi4+0x82>
    2cb0:	07fb      	lsls	r3, r7, #31
    2cb2:	0872      	lsrs	r2, r6, #1
    2cb4:	431a      	orrs	r2, r3
    2cb6:	4646      	mov	r6, r8
    2cb8:	087b      	lsrs	r3, r7, #1
    2cba:	e00e      	b.n	2cda <__udivmoddi4+0xde>
    2cbc:	42ab      	cmp	r3, r5
    2cbe:	d101      	bne.n	2cc4 <__udivmoddi4+0xc8>
    2cc0:	42a2      	cmp	r2, r4
    2cc2:	d80c      	bhi.n	2cde <__udivmoddi4+0xe2>
    2cc4:	1aa4      	subs	r4, r4, r2
    2cc6:	419d      	sbcs	r5, r3
    2cc8:	2001      	movs	r0, #1
    2cca:	1924      	adds	r4, r4, r4
    2ccc:	416d      	adcs	r5, r5
    2cce:	2100      	movs	r1, #0
    2cd0:	3e01      	subs	r6, #1
    2cd2:	1824      	adds	r4, r4, r0
    2cd4:	414d      	adcs	r5, r1
    2cd6:	2e00      	cmp	r6, #0
    2cd8:	d006      	beq.n	2ce8 <__udivmoddi4+0xec>
    2cda:	42ab      	cmp	r3, r5
    2cdc:	d9ee      	bls.n	2cbc <__udivmoddi4+0xc0>
    2cde:	3e01      	subs	r6, #1
    2ce0:	1924      	adds	r4, r4, r4
    2ce2:	416d      	adcs	r5, r5
    2ce4:	2e00      	cmp	r6, #0
    2ce6:	d1f8      	bne.n	2cda <__udivmoddi4+0xde>
    2ce8:	465b      	mov	r3, fp
    2cea:	9800      	ldr	r0, [sp, #0]
    2cec:	9901      	ldr	r1, [sp, #4]
    2cee:	1900      	adds	r0, r0, r4
    2cf0:	4169      	adcs	r1, r5
    2cf2:	2b00      	cmp	r3, #0
    2cf4:	db22      	blt.n	2d3c <__udivmoddi4+0x140>
    2cf6:	002b      	movs	r3, r5
    2cf8:	465a      	mov	r2, fp
    2cfa:	40d3      	lsrs	r3, r2
    2cfc:	002a      	movs	r2, r5
    2cfe:	4644      	mov	r4, r8
    2d00:	40e2      	lsrs	r2, r4
    2d02:	001c      	movs	r4, r3
    2d04:	465b      	mov	r3, fp
    2d06:	0015      	movs	r5, r2
    2d08:	2b00      	cmp	r3, #0
    2d0a:	db2c      	blt.n	2d66 <__udivmoddi4+0x16a>
    2d0c:	0026      	movs	r6, r4
    2d0e:	409e      	lsls	r6, r3
    2d10:	0033      	movs	r3, r6
    2d12:	0026      	movs	r6, r4
    2d14:	4647      	mov	r7, r8
    2d16:	40be      	lsls	r6, r7
    2d18:	0032      	movs	r2, r6
    2d1a:	1a80      	subs	r0, r0, r2
    2d1c:	4199      	sbcs	r1, r3
    2d1e:	9000      	str	r0, [sp, #0]
    2d20:	9101      	str	r1, [sp, #4]
    2d22:	e7ac      	b.n	2c7e <__udivmoddi4+0x82>
    2d24:	4642      	mov	r2, r8
    2d26:	2320      	movs	r3, #32
    2d28:	1a9b      	subs	r3, r3, r2
    2d2a:	4652      	mov	r2, sl
    2d2c:	40da      	lsrs	r2, r3
    2d2e:	4641      	mov	r1, r8
    2d30:	0013      	movs	r3, r2
    2d32:	464a      	mov	r2, r9
    2d34:	408a      	lsls	r2, r1
    2d36:	0017      	movs	r7, r2
    2d38:	431f      	orrs	r7, r3
    2d3a:	e780      	b.n	2c3e <__udivmoddi4+0x42>
    2d3c:	4642      	mov	r2, r8
    2d3e:	2320      	movs	r3, #32
    2d40:	1a9b      	subs	r3, r3, r2
    2d42:	002a      	movs	r2, r5
    2d44:	4646      	mov	r6, r8
    2d46:	409a      	lsls	r2, r3
    2d48:	0023      	movs	r3, r4
    2d4a:	40f3      	lsrs	r3, r6
    2d4c:	4313      	orrs	r3, r2
    2d4e:	e7d5      	b.n	2cfc <__udivmoddi4+0x100>
    2d50:	4642      	mov	r2, r8
    2d52:	2320      	movs	r3, #32
    2d54:	2100      	movs	r1, #0
    2d56:	1a9b      	subs	r3, r3, r2
    2d58:	2200      	movs	r2, #0
    2d5a:	9100      	str	r1, [sp, #0]
    2d5c:	9201      	str	r2, [sp, #4]
    2d5e:	2201      	movs	r2, #1
    2d60:	40da      	lsrs	r2, r3
    2d62:	9201      	str	r2, [sp, #4]
    2d64:	e780      	b.n	2c68 <__udivmoddi4+0x6c>
    2d66:	4642      	mov	r2, r8
    2d68:	2320      	movs	r3, #32
    2d6a:	0026      	movs	r6, r4
    2d6c:	1a9b      	subs	r3, r3, r2
    2d6e:	40de      	lsrs	r6, r3
    2d70:	002f      	movs	r7, r5
    2d72:	46b4      	mov	ip, r6
    2d74:	4097      	lsls	r7, r2
    2d76:	4666      	mov	r6, ip
    2d78:	003b      	movs	r3, r7
    2d7a:	4333      	orrs	r3, r6
    2d7c:	e7c9      	b.n	2d12 <__udivmoddi4+0x116>
    2d7e:	46c0      	nop			; (mov r8, r8)

00002d80 <__clzdi2>:
    2d80:	e92d4010 	push	{r4, lr}
    2d84:	e3510000 	cmp	r1, #0
    2d88:	1a000002 	bne	2d98 <__clzdi2+0x18>
    2d8c:	eb000005 	bl	2da8 <__clzsi2>
    2d90:	e2800020 	add	r0, r0, #32
    2d94:	ea000001 	b	2da0 <__clzdi2+0x20>
    2d98:	e1a00001 	mov	r0, r1
    2d9c:	eb000001 	bl	2da8 <__clzsi2>
    2da0:	e8bd4010 	pop	{r4, lr}
    2da4:	e12fff1e 	bx	lr

00002da8 <__clzsi2>:
    2da8:	e3a0101c 	mov	r1, #28
    2dac:	e3500801 	cmp	r0, #65536	; 0x10000
    2db0:	21a00820 	lsrcs	r0, r0, #16
    2db4:	22411010 	subcs	r1, r1, #16
    2db8:	e3500c01 	cmp	r0, #256	; 0x100
    2dbc:	21a00420 	lsrcs	r0, r0, #8
    2dc0:	22411008 	subcs	r1, r1, #8
    2dc4:	e3500010 	cmp	r0, #16
    2dc8:	21a00220 	lsrcs	r0, r0, #4
    2dcc:	22411004 	subcs	r1, r1, #4
    2dd0:	e28f2008 	add	r2, pc, #8
    2dd4:	e7d20000 	ldrb	r0, [r2, r0]
    2dd8:	e0800001 	add	r0, r0, r1
    2ddc:	e12fff1e 	bx	lr
    2de0:	02020304 	.word	0x02020304
    2de4:	01010101 	.word	0x01010101
	...

00002df0 <____aeabi_i2d_from_thumb>:
    2df0:	4778      	bx	pc
    2df2:	46c0      	nop			; (mov r8, r8)
    2df4:	eafffc0f 	b	1e38 <__aeabi_i2d>

00002df8 <____aeabi_fcmpgt_from_thumb>:
    2df8:	4778      	bx	pc
    2dfa:	46c0      	nop			; (mov r8, r8)
    2dfc:	eaffff52 	b	2b4c <__aeabi_fcmpgt>

00002e00 <____aeabi_ddiv_from_thumb>:
    2e00:	4778      	bx	pc
    2e02:	46c0      	nop			; (mov r8, r8)
    2e04:	eafffce6 	b	21a4 <__aeabi_ddiv>

00002e08 <____aeabi_f2iz_from_thumb>:
    2e08:	4778      	bx	pc
    2e0a:	46c0      	nop			; (mov r8, r8)
    2e0c:	eaffff54 	b	2b64 <__aeabi_f2iz>

00002e10 <____aeabi_uldivmod_from_thumb>:
    2e10:	4778      	bx	pc
    2e12:	46c0      	nop			; (mov r8, r8)
    2e14:	eaffff69 	b	2bc0 <__aeabi_uldivmod>

00002e18 <____aeabi_fsub_from_thumb>:
    2e18:	4778      	bx	pc
    2e1a:	46c0      	nop			; (mov r8, r8)
    2e1c:	eafffda4 	b	24b4 <__aeabi_fsub>

00002e20 <____aeabi_uidiv_from_thumb>:
    2e20:	4778      	bx	pc
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	eafffaeb 	b	19d8 <__udivsi3>

00002e28 <____aeabi_ldiv0_from_arm>:
    2e28:	e59fc000 	ldr	ip, [pc]	; 2e30 <____aeabi_ldiv0_from_arm+0x8>
    2e2c:	e12fff1c 	bx	ip
    2e30:	00001af5 	.word	0x00001af5

00002e34 <____aeabi_uidivmod_from_thumb>:
    2e34:	4778      	bx	pc
    2e36:	46c0      	nop			; (mov r8, r8)
    2e38:	eafffb25 	b	1ad4 <__aeabi_uidivmod>

00002e3c <____aeabi_dadd_from_thumb>:
    2e3c:	4778      	bx	pc
    2e3e:	46c0      	nop			; (mov r8, r8)
    2e40:	eafffb2f 	b	1b04 <__adddf3>

00002e44 <____aeabi_dmul_from_thumb>:
    2e44:	4778      	bx	pc
    2e46:	46c0      	nop			; (mov r8, r8)
    2e48:	eafffc31 	b	1f14 <__aeabi_dmul>

00002e4c <____aeabi_idiv0_from_arm>:
    2e4c:	e59fc000 	ldr	ip, [pc]	; 2e54 <____aeabi_idiv0_from_arm+0x8>
    2e50:	e12fff1c 	bx	ip
    2e54:	00001af5 	.word	0x00001af5

00002e58 <____aeabi_i2f_from_thumb>:
    2e58:	4778      	bx	pc
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	eafffe06 	b	267c <__aeabi_i2f>

00002e60 <____aeabi_fcmplt_from_thumb>:
    2e60:	4778      	bx	pc
    2e62:	46c0      	nop			; (mov r8, r8)
    2e64:	eaffff26 	b	2b04 <__aeabi_fcmplt>

00002e68 <____aeabi_d2f_from_thumb>:
    2e68:	4778      	bx	pc
    2e6a:	46c0      	nop			; (mov r8, r8)
    2e6c:	eafffd66 	b	240c <__aeabi_d2f>

00002e70 <____clzdi2_from_thumb>:
    2e70:	4778      	bx	pc
    2e72:	46c0      	nop			; (mov r8, r8)
    2e74:	eaffffc1 	b	2d80 <__clzdi2>

00002e78 <____aeabi_d2iz_from_thumb>:
    2e78:	4778      	bx	pc
    2e7a:	46c0      	nop			; (mov r8, r8)
    2e7c:	eafffd4b 	b	23b0 <__aeabi_d2iz>

00002e80 <____udivmoddi4_from_arm>:
    2e80:	e59fc000 	ldr	ip, [pc]	; 2e88 <____udivmoddi4_from_arm+0x8>
    2e84:	e12fff1c 	bx	ip
    2e88:	00002bfd 	.word	0x00002bfd

00002e8c <____aeabi_fmul_from_thumb>:
    2e8c:	4778      	bx	pc
    2e8e:	46c0      	nop			; (mov r8, r8)
    2e90:	eafffe30 	b	2758 <__aeabi_fmul>
	...

00002ea0 <help_msg>:
    2ea0:	7a616c50 7020616d 65626f72 6e6f6320     Plazma probe con
    2eb0:	6c6f7274 0a72656c 61735520 0a3a6567     troller. Usage:.
    2ec0:	20202020 72617473 202d2074 72617473         start - star
    2ed0:	656d2074 72757361 6e656d65 200a7374     t measurements. 
    2ee0:	73202020 20706f74 6966202d 6873696e        stop - finish
    2ef0:	61656d20 65727573 746e656d 20200a73      measurements.  
    2f00:	65732020 763c2074 61746c6f 203e6567       set <voltage> 
    2f10:	7270202d 2065626f 746c6f76 20656761     - probe voltage 
    2f20:	75746573 20200a70 616e2020 65766974     setup.    native
    2f30:	6e202d20 662d6e6f 616d726f 20646574      - non-formated 
    2f40:	7074756f 200a7475 61202020 69696373     output.    ascii
    2f50:	6f202d20 75707475 6e692074 63736120      - output in asc
    2f60:	70206969 65736572 7461746e 0a6e6f69     ii presentation.
    2f70:	504c0a00 6e692043 61697469 657a696c     ..LPC initialize
    2f80:	5a000a64 0a7a003f 61747300 0a007472     d..Z?.z..start..
    2f90:	72617453 0a646574 6f747300 65730070     Started..stop.se
    2fa0:	4f0a0074 67000a4b 68007465 00706c65     t..OK..get.help.
    2fb0:	6974616e 61006576 69696373 2e002d00     native.ascii.-..
    2fc0:	0a003000 6c6f560a 65676174 2056202c     .0...Voltage, V 
    2fd0:	00203a20 7275430a 746e6572 6b6d202c      : ..Current, mk
    2fe0:	00203a41 00430056 33323130 37363534     A: .V.C.01234567
    2ff0:	62613938 66656463 6a696867 6e6d6c6b     89abcdefghijklmn
    3000:	7271706f 76757473 7a797877 00000000     opqrstuvwxyz....
    3010:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00003020 <_ctype_>:
    3020:	20202000 20202020 28282020 20282828     .         ((((( 
    3030:	20202020 20202020 20202020 20202020                     
    3040:	10108820 10101010 10101010 10101010      ...............
    3050:	04040410 04040404 10040404 10101010     ................
    3060:	41411010 41414141 01010101 01010101     ..AAAAAA........
    3070:	01010101 01010101 01010101 10101010     ................
    3080:	42421010 42424242 02020202 02020202     ..BBBBBB........
    3090:	02020202 02020202 02020202 10101010     ................
    30a0:	00000020 00000000 00000000 00000000      ...............
	...
